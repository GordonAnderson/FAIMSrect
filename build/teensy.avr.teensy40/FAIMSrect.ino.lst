
/private/var/folders/7m/87zkz54x1q3b83bfgzmdl4_80000gn/T/arduino/sketches/055649828B8687A69011F8E90BE46EE5/FAIMSrect.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	200092c0 	.word	0x200092c0
6000142c:	2000b040 	.word	0x2000b040

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f9fe 	bl	60001840 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b67      	ldr	r3, [pc, #412]	; (600015e4 <ResetHandler2+0x1b4>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5e      	ldr	r2, [pc, #376]	; (600015e8 <ResetHandler2+0x1b8>)
6000146e:	495f      	ldr	r1, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
60001470:	485f      	ldr	r0, [pc, #380]	; (600015f0 <ResetHandler2+0x1c0>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a5f      	ldr	r2, [pc, #380]	; (600015f4 <ResetHandler2+0x1c4>)
60001478:	495f      	ldr	r1, [pc, #380]	; (600015f8 <ResetHandler2+0x1c8>)
6000147a:	4860      	ldr	r0, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c5f      	ldr	r4, [pc, #380]	; (60001600 <ResetHandler2+0x1d0>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5c      	ldr	r2, [pc, #368]	; (60001604 <ResetHandler2+0x1d4>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b59      	ldr	r3, [pc, #356]	; (60001608 <ResetHandler2+0x1d8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a59      	ldr	r2, [pc, #356]	; (6000160c <ResetHandler2+0x1dc>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4c      	ldr	r6, [pc, #304]	; (600015e4 <ResetHandler2+0x1b4>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 6000163c <ResetHandler2+0x20c>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a180 	ldr.w	sl, [pc, #384]	; 60001640 <ResetHandler2+0x210>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8164 	ldr.w	r8, [pc, #356]	; 60001644 <ResetHandler2+0x214>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4a      	ldr	r2, [pc, #296]	; (60001610 <ResetHandler2+0x1e0>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f99c 	bl	60001850 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3e      	ldr	r3, [pc, #248]	; (60001614 <ResetHandler2+0x1e4>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	493f      	ldr	r1, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b3f      	ldr	r3, [pc, #252]	; (6000161c <ResetHandler2+0x1ec>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3c      	ldr	r3, [pc, #240]	; (60001620 <ResetHandler2+0x1f0>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b39      	ldr	r3, [pc, #228]	; (60001624 <ResetHandler2+0x1f4>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fa08 	bl	60001960 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4834      	ldr	r0, [pc, #208]	; (60001628 <ResetHandler2+0x1f8>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fb81 	bl	60001c68 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b30      	ldr	r3, [pc, #192]	; (6000162c <ResetHandler2+0x1fc>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a30      	ldr	r2, [pc, #192]	; (60001630 <ResetHandler2+0x200>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4928      	ldr	r1, [pc, #160]	; (60001634 <ResetHandler2+0x204>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a23      	ldr	r2, [pc, #140]	; (60001630 <ResetHandler2+0x200>)
600015a2:	4c25      	ldr	r4, [pc, #148]	; (60001638 <ResetHandler2+0x208>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	analog_init();
600015ac:	f000 f91e 	bl	600017ec <analog_init>
	pwm_init();
600015b0:	f000 fb4a 	bl	60001c48 <__pwm_init_veneer>
	tempmon_init();
600015b4:	f000 fa02 	bl	600019bc <tempmon_init>
	startup_middle_hook();
600015b8:	f000 f944 	bl	60001844 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015bc:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015be:	2b13      	cmp	r3, #19
600015c0:	d9fc      	bls.n	600015bc <ResetHandler2+0x18c>
	usb_init();
600015c2:	f000 fa93 	bl	60001aec <usb_init>
600015c6:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015cc:	d3fb      	bcc.n	600015c6 <ResetHandler2+0x196>
	startup_debug_reset();
600015ce:	f000 f93d 	bl	6000184c <startup_debug_reset>
	startup_late_hook();
600015d2:	f000 f939 	bl	60001848 <startup_default_late_hook>
	__libc_init_array();
600015d6:	f000 fb33 	bl	60001c40 <____libc_init_array_veneer>
	main();
600015da:	f000 fb41 	bl	60001c60 <__main_veneer>
	while (1) asm("WFI");
600015de:	bf30      	wfi
600015e0:	e7fd      	b.n	600015de <ResetHandler2+0x1ae>
600015e2:	bf00      	nop
600015e4:	400d8000 	.word	0x400d8000
600015e8:	00011238 	.word	0x00011238
600015ec:	60001e9c 	.word	0x60001e9c
600015f0:	00000000 	.word	0x00000000
600015f4:	200092c0 	.word	0x200092c0
600015f8:	600130d8 	.word	0x600130d8
600015fc:	20000000 	.word	0x20000000
60001600:	20009000 	.word	0x20009000
60001604:	00005209 	.word	0x00005209
60001608:	e000e400 	.word	0xe000e400
6000160c:	e000e4a0 	.word	0xe000e4a0
60001610:	400ac000 	.word	0x400ac000
60001614:	000035a9 	.word	0x000035a9
60001618:	2000ae40 	.word	0x2000ae40
6000161c:	000035ad 	.word	0x000035ad
60001620:	20200000 	.word	0x20200000
60001624:	e0001000 	.word	0xe0001000
60001628:	23c34600 	.word	0x23c34600
6000162c:	40084000 	.word	0x40084000
60001630:	400d4000 	.word	0x400d4000
60001634:	56c00000 	.word	0x56c00000
60001638:	2000ae44 	.word	0x2000ae44
6000163c:	2018101b 	.word	0x2018101b
60001640:	13110d0c 	.word	0x13110d0c
60001644:	400fc000 	.word	0x400fc000

60001648 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001648:	4b05      	ldr	r3, [pc, #20]	; (60001660 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164e:	4a05      	ldr	r2, [pc, #20]	; (60001664 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001650:	4805      	ldr	r0, [pc, #20]	; (60001668 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001656:	4a05      	ldr	r2, [pc, #20]	; (6000166c <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001658:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4695      	mov	sp, r2
	ResetHandler2();
6000165c:	f7ff fee8 	bl	60001430 <ResetHandler2>
60001660:	400ac000 	.word	0x400ac000
60001664:	aaaaaabf 	.word	0xaaaaaabf
60001668:	00200007 	.word	0x00200007
6000166c:	20068000 	.word	0x20068000

60001670 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001670:	6943      	ldr	r3, [r0, #20]
60001672:	4a0a      	ldr	r2, [pc, #40]	; (6000169c <TwoWire::configSDApin(unsigned char)+0x2c>)
60001674:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001678:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000167a:	7a03      	ldrb	r3, [r0, #8]
6000167c:	4c08      	ldr	r4, [pc, #32]	; (600016a0 <TwoWire::configSDApin(unsigned char)+0x30>)
6000167e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001682:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001686:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001688:	68c2      	ldr	r2, [r0, #12]
6000168a:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
6000168c:	6903      	ldr	r3, [r0, #16]
6000168e:	b10b      	cbz	r3, 60001694 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001690:	6942      	ldr	r2, [r0, #20]
60001692:	601a      	str	r2, [r3, #0]
	}
}
60001694:	f85d 4b04 	ldr.w	r4, [sp], #4
60001698:	4770      	bx	lr
6000169a:	bf00      	nop
6000169c:	20007568 	.word	0x20007568
600016a0:	0001f861 	.word	0x0001f861

600016a4 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016a4:	6943      	ldr	r3, [r0, #20]
600016a6:	7e02      	ldrb	r2, [r0, #24]
600016a8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016ac:	f892 c008 	ldrb.w	ip, [r2, #8]
600016b0:	458c      	cmp	ip, r1
600016b2:	d01c      	beq.n	600016ee <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016b4:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016b6:	2aff      	cmp	r2, #255	; 0xff
600016b8:	d019      	beq.n	600016ee <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
600016ba:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016bc:	b510      	push	{r4, lr}
600016be:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016c0:	d016      	beq.n	600016f0 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016c2:	7e1a      	ldrb	r2, [r3, #24]
600016c4:	2aff      	cmp	r2, #255	; 0xff
600016c6:	d006      	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x32>
600016c8:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
600016ce:	6812      	ldr	r2, [r2, #0]
600016d0:	421a      	tst	r2, r3
600016d2:	d101      	bne.n	600016d8 <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016d4:	7621      	strb	r1, [r4, #24]
}
600016d6:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016d8:	4b06      	ldr	r3, [pc, #24]	; (600016f4 <TwoWire::setSDA(unsigned char)+0x50>)
600016da:	2205      	movs	r2, #5
		configSDApin(newindex);
600016dc:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016de:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016e2:	685b      	ldr	r3, [r3, #4]
600016e4:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016e6:	f7ff ffc3 	bl	60001670 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ea:	7621      	strb	r1, [r4, #24]
600016ec:	e7f3      	b.n	600016d6 <TwoWire::setSDA(unsigned char)+0x32>
600016ee:	4770      	bx	lr
		if (sda_pin == pin) break;
600016f0:	2100      	movs	r1, #0
600016f2:	e7ea      	b.n	600016ca <TwoWire::setSDA(unsigned char)+0x26>
600016f4:	20007568 	.word	0x20007568

600016f8 <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016f8:	6943      	ldr	r3, [r0, #20]
600016fa:	4a0a      	ldr	r2, [pc, #40]	; (60001724 <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016fc:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001700:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001702:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
60001706:	4c08      	ldr	r4, [pc, #32]	; (60001728 <TwoWire::configSCLpin(unsigned char)+0x30>)
60001708:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
6000170c:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001710:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001712:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
60001714:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001716:	6b03      	ldr	r3, [r0, #48]	; 0x30
60001718:	b10b      	cbz	r3, 6000171e <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000171a:	6b42      	ldr	r2, [r0, #52]	; 0x34
6000171c:	601a      	str	r2, [r3, #0]
	}
}
6000171e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001722:	4770      	bx	lr
60001724:	20007568 	.word	0x20007568
60001728:	0001f861 	.word	0x0001f861

6000172c <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
6000172c:	6943      	ldr	r3, [r0, #20]
6000172e:	7e42      	ldrb	r2, [r0, #25]
60001730:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001734:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
60001738:	458c      	cmp	ip, r1
6000173a:	d01e      	beq.n	6000177a <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
6000173c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001740:	2aff      	cmp	r2, #255	; 0xff
60001742:	d01a      	beq.n	6000177a <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001744:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001746:	b510      	push	{r4, lr}
60001748:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000174a:	d017      	beq.n	6000177c <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
6000174c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001750:	2aff      	cmp	r2, #255	; 0xff
60001752:	d006      	beq.n	60001762 <TwoWire::setSCL(unsigned char)+0x36>
60001754:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001756:	e9d3 2300 	ldrd	r2, r3, [r3]
6000175a:	6812      	ldr	r2, [r2, #0]
6000175c:	421a      	tst	r2, r3
6000175e:	d101      	bne.n	60001764 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001760:	7661      	strb	r1, [r4, #25]
}
60001762:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001764:	4b06      	ldr	r3, [pc, #24]	; (60001780 <TwoWire::setSCL(unsigned char)+0x54>)
60001766:	2205      	movs	r2, #5
		configSCLpin(newindex);
60001768:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000176a:	eb03 130c 	add.w	r3, r3, ip, lsl #4
6000176e:	685b      	ldr	r3, [r3, #4]
60001770:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001772:	f7ff ffc1 	bl	600016f8 <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
60001776:	7661      	strb	r1, [r4, #25]
60001778:	e7f3      	b.n	60001762 <TwoWire::setSCL(unsigned char)+0x36>
6000177a:	4770      	bx	lr
		if (scl_pin == pin) break;
6000177c:	2100      	movs	r1, #0
6000177e:	e7ea      	b.n	60001756 <TwoWire::setSCL(unsigned char)+0x2a>
60001780:	20007568 	.word	0x20007568

60001784 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001784:	4916      	ldr	r1, [pc, #88]	; (600017e0 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001786:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001788:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000178a:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
6000178e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001792:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001794:	638b      	str	r3, [r1, #56]	; 0x38
{
60001796:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
60001798:	4d12      	ldr	r5, [pc, #72]	; (600017e4 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000179a:	e9d2 1300 	ldrd	r1, r3, [r2]
6000179e:	680a      	ldr	r2, [r1, #0]
600017a0:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
600017a2:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017a4:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017a6:	2202      	movs	r2, #2
	port->MCR = 0;
600017a8:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017aa:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017ac:	4a0e      	ldr	r2, [pc, #56]	; (600017e8 <TwoWire::begin()+0x64>)
	port->MCR = 0;
600017ae:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b0:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
600017b2:	2201      	movs	r2, #1
600017b4:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017b6:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
600017b8:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017bc:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017be:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017c2:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017c4:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017c6:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017c8:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ca:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017cc:	7e01      	ldrb	r1, [r0, #24]
600017ce:	f7ff ff4f 	bl	60001670 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017d2:	7e61      	ldrb	r1, [r4, #25]
600017d4:	4620      	mov	r0, r4
}
600017d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017da:	f7ff bf8d 	b.w	600016f8 <TwoWire::configSCLpin(unsigned char)>
600017de:	bf00      	nop
600017e0:	400fc000 	.word	0x400fc000
600017e4:	05050bb8 	.word	0x05050bb8
600017e8:	1928373b 	.word	0x1928373b

600017ec <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600017ec:	4b10      	ldr	r3, [pc, #64]	; (60001830 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600017ee:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600017f0:	4a10      	ldr	r2, [pc, #64]	; (60001834 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600017f2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600017f4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
600017f8:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600017fa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600017fc:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001800:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001802:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001806:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001808:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000180a:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
6000180c:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000180e:	061b      	lsls	r3, r3, #24
60001810:	d4fc      	bmi.n	6000180c <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001812:	4a09      	ldr	r2, [pc, #36]	; (60001838 <analog_init+0x4c>)
60001814:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001818:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000181a:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000181c:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
6000181e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001820:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001824:	d1fb      	bne.n	6000181e <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001826:	4a05      	ldr	r2, [pc, #20]	; (6000183c <analog_init+0x50>)
60001828:	7013      	strb	r3, [r2, #0]
}
6000182a:	f85d 4b04 	ldr.w	r4, [sp], #4
6000182e:	4770      	bx	lr
60001830:	400fc000 	.word	0x400fc000
60001834:	400c4000 	.word	0x400c4000
60001838:	400c8000 	.word	0x400c8000
6000183c:	2000aff3 	.word	0x2000aff3

60001840 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001840:	4770      	bx	lr
60001842:	bf00      	nop

60001844 <startup_default_middle_hook>:
60001844:	4770      	bx	lr
60001846:	bf00      	nop

60001848 <startup_default_late_hook>:
60001848:	4770      	bx	lr
6000184a:	bf00      	nop

6000184c <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
6000184c:	bf00      	nop
6000184e:	4770      	bx	lr

60001850 <configure_cache>:
{
60001850:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001852:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001856:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001858:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000185a:	4831      	ldr	r0, [pc, #196]	; (60001920 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000185c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001860:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001864:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001866:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000186a:	482e      	ldr	r0, [pc, #184]	; (60001924 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000186c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001870:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001872:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001876:	482c      	ldr	r0, [pc, #176]	; (60001928 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001878:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000187c:	4a2b      	ldr	r2, [pc, #172]	; (6000192c <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000187e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001882:	4c2b      	ldr	r4, [pc, #172]	; (60001930 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001884:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001888:	482a      	ldr	r0, [pc, #168]	; (60001934 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000188a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000188e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001892:	4c29      	ldr	r4, [pc, #164]	; (60001938 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001894:	4829      	ldr	r0, [pc, #164]	; (6000193c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001896:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000189a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000189e:	4c28      	ldr	r4, [pc, #160]	; (60001940 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600018a0:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600018a4:	4827      	ldr	r0, [pc, #156]	; (60001944 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600018a6:	4a28      	ldr	r2, [pc, #160]	; (60001948 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600018a8:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600018ac:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600018b0:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600018b4:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600018b8:	4c24      	ldr	r4, [pc, #144]	; (6000194c <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600018ba:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600018bc:	4824      	ldr	r0, [pc, #144]	; (60001950 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600018be:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600018c2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600018c6:	4a23      	ldr	r2, [pc, #140]	; (60001954 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600018c8:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600018cc:	4c22      	ldr	r4, [pc, #136]	; (60001958 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600018ce:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600018d2:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600018d6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600018da:	4820      	ldr	r0, [pc, #128]	; (6000195c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600018dc:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600018e0:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600018e2:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600018e6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
600018ea:	bf00      	nop
	asm("nop");
600018ec:	bf00      	nop
	asm("nop");
600018ee:	bf00      	nop
	asm("nop");
600018f0:	bf00      	nop
	asm("nop");
600018f2:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600018f4:	2201      	movs	r2, #1
600018f6:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600018fa:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018fe:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001902:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001906:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000190a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000190e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001912:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001916:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000191a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000191e:	4770      	bx	lr
60001920:	1000003f 	.word	0x1000003f
60001924:	07080025 	.word	0x07080025
60001928:	00100009 	.word	0x00100009
6000192c:	2000b040 	.word	0x2000b040
60001930:	00200013 	.word	0x00200013
60001934:	07020021 	.word	0x07020021
60001938:	20000014 	.word	0x20000014
6000193c:	13080025 	.word	0x13080025
60001940:	10000009 	.word	0x10000009
60001944:	20200016 	.word	0x20200016
60001948:	130b0027 	.word	0x130b0027
6000194c:	40000017 	.word	0x40000017
60001950:	60000018 	.word	0x60000018
60001954:	070b002f 	.word	0x070b002f
60001958:	70000019 	.word	0x70000019
6000195c:	8000001a 	.word	0x8000001a

60001960 <usb_pll_start>:
{
60001960:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001962:	4a15      	ldr	r2, [pc, #84]	; (600019b8 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001964:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001966:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000196a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000196e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001972:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001976:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000197a:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000197c:	f013 0f02 	tst.w	r3, #2
60001980:	d10e      	bne.n	600019a0 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001982:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001986:	d00f      	beq.n	600019a8 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001988:	f413 5f80 	tst.w	r3, #4096	; 0x1000
6000198c:	d00e      	beq.n	600019ac <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000198e:	2b00      	cmp	r3, #0
60001990:	daf3      	bge.n	6000197a <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001992:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001996:	d10b      	bne.n	600019b0 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001998:	065b      	lsls	r3, r3, #25
6000199a:	d50b      	bpl.n	600019b4 <usb_pll_start+0x54>
}
6000199c:	bcf0      	pop	{r4, r5, r6, r7}
6000199e:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600019a0:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600019a2:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600019a4:	6190      	str	r0, [r2, #24]
			continue;
600019a6:	e7e8      	b.n	6000197a <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600019a8:	6155      	str	r5, [r2, #20]
			continue;
600019aa:	e7e6      	b.n	6000197a <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600019ac:	6156      	str	r6, [r2, #20]
			continue;
600019ae:	e7e4      	b.n	6000197a <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600019b0:	6191      	str	r1, [r2, #24]
			continue;
600019b2:	e7e2      	b.n	6000197a <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600019b4:	6157      	str	r7, [r2, #20]
			continue;
600019b6:	e7e0      	b.n	6000197a <usb_pll_start+0x1a>
600019b8:	400d8000 	.word	0x400d8000

600019bc <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600019bc:	4a3f      	ldr	r2, [pc, #252]	; (60001abc <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600019be:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600019c0:	493f      	ldr	r1, [pc, #252]	; (60001ac0 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600019c2:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600019c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600019ca:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019ce:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001ac4 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600019d2:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019d6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001ac8 <tempmon_init+0x10c>
{
600019da:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600019dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600019e0:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
600019e4:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600019e8:	4d38      	ldr	r5, [pc, #224]	; (60001acc <tempmon_init+0x110>)
600019ea:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600019ec:	4c38      	ldr	r4, [pc, #224]	; (60001ad0 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600019ee:	4839      	ldr	r0, [pc, #228]	; (60001ad4 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600019f0:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600019f2:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
600019f6:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600019f8:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600019fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001a00:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001a04:	ee07 1a10 	vmov	s14, r1
60001a08:	4b33      	ldr	r3, [pc, #204]	; (60001ad8 <tempmon_init+0x11c>)
60001a0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001a0e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001a10:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a14:	4931      	ldr	r1, [pc, #196]	; (60001adc <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a16:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a1a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001a1e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001a22:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a26:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001a2a:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a2e:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a32:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a36:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001a3a:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a3e:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001a42:	4827      	ldr	r0, [pc, #156]	; (60001ae0 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a44:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a48:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a4c:	ee75 5a87 	vadd.f32	s11, s11, s14
60001a50:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a54:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a58:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a5c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a60:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a64:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a6c:	ee16 3a10 	vmov	r3, s12
60001a70:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a78:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001a7c:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a7e:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a82:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001a8a:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001a8e:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001a90:	4914      	ldr	r1, [pc, #80]	; (60001ae4 <tempmon_init+0x128>)
60001a92:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001a96:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001a9a:	f043 0302 	orr.w	r3, r3, #2
60001a9e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001aa2:	4b11      	ldr	r3, [pc, #68]	; (60001ae8 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001aa4:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001aa8:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001aac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001ab0:	2201      	movs	r2, #1
}
60001ab2:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001ab4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001ab8:	4770      	bx	lr
60001aba:	bf00      	nop
60001abc:	400d8100 	.word	0x400d8100
60001ac0:	401f4400 	.word	0x401f4400
60001ac4:	42aa0000 	.word	0x42aa0000
60001ac8:	42b40000 	.word	0x42b40000
60001acc:	2000abcc 	.word	0x2000abcc
60001ad0:	2000abc8 	.word	0x2000abc8
60001ad4:	2000abd0 	.word	0x2000abd0
60001ad8:	2000abd4 	.word	0x2000abd4
60001adc:	0fff0000 	.word	0x0fff0000
60001ae0:	e000e400 	.word	0xe000e400
60001ae4:	20009000 	.word	0x20009000
60001ae8:	000053f1 	.word	0x000053f1

60001aec <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001aec:	4b31      	ldr	r3, [pc, #196]	; (60001bb4 <usb_init+0xc8>)
60001aee:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001af2:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001af4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001af8:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001afc:	f000 f8a8 	bl	60001c50 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001b00:	4a2d      	ldr	r2, [pc, #180]	; (60001bb8 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001b02:	492e      	ldr	r1, [pc, #184]	; (60001bbc <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001b04:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001b08:	482d      	ldr	r0, [pc, #180]	; (60001bc0 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001b0a:	f043 0303 	orr.w	r3, r3, #3
60001b0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001b12:	4b2c      	ldr	r3, [pc, #176]	; (60001bc4 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001b14:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001b18:	6802      	ldr	r2, [r0, #0]
60001b1a:	421a      	tst	r2, r3
60001b1c:	d103      	bne.n	60001b26 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001b1e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001b22:	079a      	lsls	r2, r3, #30
60001b24:	d01b      	beq.n	60001b5e <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001b26:	4a25      	ldr	r2, [pc, #148]	; (60001bbc <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001b28:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001b2c:	4b24      	ldr	r3, [pc, #144]	; (60001bc0 <usb_init+0xd4>)
60001b2e:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001b30:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001b34:	f043 0302 	orr.w	r3, r3, #2
60001b38:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001b3c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001b40:	079b      	lsls	r3, r3, #30
60001b42:	d4fb      	bmi.n	60001b3c <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001b44:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001b48:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001b4c:	4b1c      	ldr	r3, [pc, #112]	; (60001bc0 <usb_init+0xd4>)
60001b4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001b52:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001b56:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001b58:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001b5a:	f000 f86d 	bl	60001c38 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001b5e:	4a18      	ldr	r2, [pc, #96]	; (60001bc0 <usb_init+0xd4>)
60001b60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001b64:	4c15      	ldr	r4, [pc, #84]	; (60001bbc <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001b66:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001b68:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001b6a:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001b6c:	4b16      	ldr	r3, [pc, #88]	; (60001bc8 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001b6e:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001b70:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001b74:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001b78:	4618      	mov	r0, r3
60001b7a:	f000 f86d 	bl	60001c58 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001b7e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001b82:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001b84:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001b88:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001b8c:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001b8e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001b92:	641a      	str	r2, [r3, #64]	; 0x40
60001b94:	4b0d      	ldr	r3, [pc, #52]	; (60001bcc <usb_init+0xe0>)
60001b96:	4a0e      	ldr	r2, [pc, #56]	; (60001bd0 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001b98:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001b9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ba0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001ba4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001ba8:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001baa:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001bae:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001bb2:	bd10      	pop	{r4, pc}
60001bb4:	400d8000 	.word	0x400d8000
60001bb8:	400fc000 	.word	0x400fc000
60001bbc:	402e0000 	.word	0x402e0000
60001bc0:	400d9000 	.word	0x400d9000
60001bc4:	001e1c00 	.word	0x001e1c00
60001bc8:	20000000 	.word	0x20000000
60001bcc:	20009000 	.word	0x20009000
60001bd0:	000055d9 	.word	0x000055d9

60001bd4 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001bd4:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001bd6:	4b0e      	ldr	r3, [pc, #56]	; (60001c10 <_reboot_Teensyduino_+0x3c>)
60001bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001bda:	079b      	lsls	r3, r3, #30
60001bdc:	d400      	bmi.n	60001be0 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001bde:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001be0:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001be2:	4b0c      	ldr	r3, [pc, #48]	; (60001c14 <_reboot_Teensyduino_+0x40>)
60001be4:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001be6:	4a0c      	ldr	r2, [pc, #48]	; (60001c18 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001be8:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001bec:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001bf0:	490a      	ldr	r1, [pc, #40]	; (60001c1c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001bf2:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001bf6:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001bf8:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001bfa:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001bfe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001c02:	4807      	ldr	r0, [pc, #28]	; (60001c20 <_reboot_Teensyduino_+0x4c>)
60001c04:	4a07      	ldr	r2, [pc, #28]	; (60001c24 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001c06:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001c08:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001c0a:	689b      	ldr	r3, [r3, #8]
60001c0c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001c0e:	bf00      	nop
60001c10:	401f4400 	.word	0x401f4400
60001c14:	402e0000 	.word	0x402e0000
60001c18:	400ac000 	.word	0x400ac000
60001c1c:	00200003 	.word	0x00200003
60001c20:	20208000 	.word	0x20208000
60001c24:	eb120000 	.word	0xeb120000

60001c28 <_init>:
60001c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001c2a:	bf00      	nop
60001c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001c2e:	bc08      	pop	{r3}
60001c30:	469e      	mov	lr, r3
60001c32:	4770      	bx	lr
60001c34:	0000      	movs	r0, r0
	...

60001c38 <__delay_veneer>:
60001c38:	f85f f000 	ldr.w	pc, [pc]	; 60001c3c <__delay_veneer+0x4>
60001c3c:	000044bd 	.word	0x000044bd

60001c40 <____libc_init_array_veneer>:
60001c40:	f85f f000 	ldr.w	pc, [pc]	; 60001c44 <____libc_init_array_veneer+0x4>
60001c44:	00008d19 	.word	0x00008d19

60001c48 <__pwm_init_veneer>:
60001c48:	f85f f000 	ldr.w	pc, [pc]	; 60001c4c <__pwm_init_veneer+0x4>
60001c4c:	000050f9 	.word	0x000050f9

60001c50 <__usb_init_serialnumber_veneer>:
60001c50:	f85f f000 	ldr.w	pc, [pc]	; 60001c54 <__usb_init_serialnumber_veneer+0x4>
60001c54:	00005d49 	.word	0x00005d49

60001c58 <__memset_veneer>:
60001c58:	f85f f000 	ldr.w	pc, [pc]	; 60001c5c <__memset_veneer+0x4>
60001c5c:	000086e9 	.word	0x000086e9

60001c60 <__main_veneer>:
60001c60:	f85f f000 	ldr.w	pc, [pc]	; 60001c64 <__main_veneer+0x4>
60001c64:	00004b7d 	.word	0x00004b7d

60001c68 <__set_arm_clock_veneer>:
60001c68:	f85f f000 	ldr.w	pc, [pc]	; 60001c6c <__set_arm_clock_veneer+0x4>
60001c6c:	000041cd 	.word	0x000041cd

60001c70 <__frame_dummy_init_array_entry>:
60001c70:	00000105 0000087d 00002bc1              ....}....+..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <irq_gpio6789>:
	// Find Threads with the id, and removes
	bool found = false;
	for(int i = 0; i < MAX_THREADS; i++){
		if(thread[i]->ThreadID == id){
			thread[i] = NULL;
			cached_size--;
      20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			thread[i] = NULL;
      22:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
	}
}

void ThreadController::remove(Thread* _thread){
	remove(_thread->ThreadID);
}
      26:	699d      	ldr	r5, [r3, #24]
      28:	695a      	ldr	r2, [r3, #20]
			cached_size--;
      2a:	4015      	ands	r5, r2
			thread[i] = NULL;
      2c:	d00d      	beq.n	4a <_teensy_model_identifier+0x26>
      2e:	4f25      	ldr	r7, [pc, #148]	; (c4 <_teensy_model_identifier+0xa0>)
			cached_size--;
      30:	2601      	movs	r6, #1
}
      32:	619d      	str	r5, [r3, #24]

void serial_phex(uint32_t n)
{
	serial_phex1(n >> 4);
	serial_phex1(n);
}
      34:	fa95 f4a5 	rbit	r4, r5
	// Event Handler functions and data
	static uint8_t serial_event_handlers_active;

	using Print::write; 
	// Transmit a single byte
	size_t write(unsigned long n) { return write((uint8_t)n); }
      38:	fab4 f484 	clz	r4, r4
      3c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      40:	fa06 f404 	lsl.w	r4, r6, r4
      44:	4798      	blx	r3
      46:	43a5      	bics	r5, r4
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      48:	d1f4      	bne.n	34 <_teensy_model_identifier+0x10>
      4a:	4b1f      	ldr	r3, [pc, #124]	; (c8 <_teensy_model_identifier+0xa4>)
      4c:	699d      	ldr	r5, [r3, #24]
      4e:	695a      	ldr	r2, [r3, #20]
      50:	4015      	ands	r5, r2
      52:	d00d      	beq.n	70 <_teensy_model_identifier+0x4c>
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      54:	4f1d      	ldr	r7, [pc, #116]	; (cc <_teensy_model_identifier+0xa8>)
      56:	2601      	movs	r6, #1
      58:	619d      	str	r5, [r3, #24]
      5a:	fa95 f4a5 	rbit	r4, r5
}
      5e:	fab4 f484 	clz	r4, r4
      62:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      66:	fa06 f404 	lsl.w	r4, r6, r4
      6a:	4798      	blx	r3
      mode1 |= ADC_CFG_AVGS(1);
      6c:	43a5      	bics	r5, r4
      6e:	d1f4      	bne.n	5a <_teensy_model_identifier+0x36>
  if(num >= 4){
      70:	4b17      	ldr	r3, [pc, #92]	; (d0 <_teensy_model_identifier+0xac>)
  ADC1_CFG = mode;
      72:	699d      	ldr	r5, [r3, #24]
  ADC2_CFG = mode1;
      74:	695a      	ldr	r2, [r3, #20]
  if(num >= 4){
      76:	4015      	ands	r5, r2
}
      78:	d00d      	beq.n	96 <_teensy_model_identifier+0x72>
      7a:	4f16      	ldr	r7, [pc, #88]	; (d4 <_teensy_model_identifier+0xb0>)
      7c:	2601      	movs	r6, #1
      7e:	619d      	str	r5, [r3, #24]
      80:	fa95 f4a5 	rbit	r4, r5
      84:	fab4 f484 	clz	r4, r4
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      88:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      8c:	fa06 f404 	lsl.w	r4, r6, r4
      90:	4798      	blx	r3
      92:	43a5      	bics	r5, r4

int AD5593readADC(int8_t addr, int8_t chan, int8_t num)
{
  int i,j, val = 0;

  for (i = 0; i < num; i++) 
      94:	d1f4      	bne.n	80 <_teensy_model_identifier+0x5c>
  {
    j = AD5593readADC(addr, chan);
    if(j == -1) return(-1);
    val += j;
  }
  return (val / num);
      96:	4b10      	ldr	r3, [pc, #64]	; (d8 <_teensy_model_identifier+0xb4>)
      98:	699d      	ldr	r5, [r3, #24]
      9a:	695a      	ldr	r2, [r3, #20]
size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
      9c:	4015      	ands	r5, r2
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
      9e:	d00d      	beq.n	bc <_teensy_model_identifier+0x98>
      a0:	4f0e      	ldr	r7, [pc, #56]	; (dc <_teensy_model_identifier+0xb8>)
      a2:	2601      	movs	r6, #1
		} while (n > 0);
      a4:	619d      	str	r5, [r3, #24]
      a6:	fa95 f4a5 	rbit	r4, r5
      aa:	fab4 f484 	clz	r4, r4
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FF8000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	flash_wait();
      ae:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      b2:	fa06 f404 	lsl.w	r4, r6, r4
      b6:	4798      	blx	r3
      b8:	43a5      	bics	r5, r4
      ba:	d1f4      	bne.n	a6 <_teensy_model_identifier+0x82>
{
	irq_anyport(&GPIO6_DR, isr_table_gpio1);
	irq_anyport(&GPIO7_DR, isr_table_gpio2);
	irq_anyport(&GPIO8_DR, isr_table_gpio3);
	irq_anyport(&GPIO9_DR, isr_table_gpio4);
	asm volatile ("dsb":::"memory");
      bc:	f3bf 8f4f 	dsb	sy
}
      c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      c2:	bf00      	nop
      c4:	20008bd8 	.word	0x20008bd8
      c8:	42004000 	.word	0x42004000
      cc:	20008c58 	.word	0x20008c58
      d0:	42008000 	.word	0x42008000
      d4:	20008cd8 	.word	0x20008cd8
      d8:	4200c000 	.word	0x4200c000
      dc:	20008d58 	.word	0x20008d58

000000e0 <register_tm_clones>:
  Token.trim();
  if ((j = Token.indexOf(',')) == -1) return Token;
  Token = Token.substring(0, j);
  Token.trim();
  return Token;
}
      e0:	4805      	ldr	r0, [pc, #20]	; (f8 <register_tm_clones+0x18>)
      e2:	4b06      	ldr	r3, [pc, #24]	; (fc <register_tm_clones+0x1c>)
      e4:	1a1b      	subs	r3, r3, r0
      e6:	0fd9      	lsrs	r1, r3, #31
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
      e8:	eb01 01a3 	add.w	r1, r1, r3, asr #2
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
      ec:	1049      	asrs	r1, r1, #1
      ee:	d002      	beq.n	f6 <register_tm_clones+0x16>
      f0:	4b03      	ldr	r3, [pc, #12]	; (100 <register_tm_clones+0x20>)
      f2:	b103      	cbz	r3, f6 <register_tm_clones+0x16>
      f4:	4718      	bx	r3
			memcpy(writeTo, readFrom, n);
      f6:	4770      	bx	lr
      f8:	200092c0 	.word	0x200092c0
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
      fc:	200092c0 	.word	0x200092c0
			len += diff;
		}
		strcpy(writeTo, readFrom);
     100:	00000000 	.word	0x00000000

00000104 <frame_dummy>:
     104:	b508      	push	{r3, lr}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     106:	4b05      	ldr	r3, [pc, #20]	; (11c <frame_dummy+0x18>)
     108:	b11b      	cbz	r3, 112 <frame_dummy+0xe>
     10a:	4905      	ldr	r1, [pc, #20]	; (120 <frame_dummy+0x1c>)
     10c:	4805      	ldr	r0, [pc, #20]	; (124 <frame_dummy+0x20>)
     10e:	f3af 8000 	nop.w
	if (newbuffer) {
     112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		capacity = maxStrLen;
     116:	f7ff bfe3 	b.w	e0 <register_tm_clones>
		return 1;
     11a:	bf00      	nop
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     11c:	00000000 	.word	0x00000000
     120:	2000ab70 	.word	0x2000ab70
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     124:	6001d000 	.word	0x6001d000

00000128 <trigScanISR()>:
  return true;
}

void trigScanISR(void)
{
  if(scanning) triggerScan=true;
     128:	4b03      	ldr	r3, [pc, #12]	; (138 <trigScanISR()+0x10>)
     12a:	781b      	ldrb	r3, [r3, #0]
     12c:	b113      	cbz	r3, 134 <trigScanISR()+0xc>
     12e:	4b03      	ldr	r3, [pc, #12]	; (13c <trigScanISR()+0x14>)
     130:	2201      	movs	r2, #1
     132:	701a      	strb	r2, [r3, #0]
}
     134:	4770      	bx	lr
     136:	bf00      	nop
     138:	2000affa 	.word	0x2000affa
     13c:	2000afff 	.word	0x2000afff

00000140 <buzzerOFF(void*)>:
bool buzzerOFF(void *) { digitalWrite(BUZZER,LOW); return true;}
     140:	200b      	movs	r0, #11
     142:	2100      	movs	r1, #0
     144:	b508      	push	{r3, lr}
     146:	f004 fa0d 	bl	4564 <digitalWrite>
     14a:	2001      	movs	r0, #1
     14c:	bd08      	pop	{r3, pc}
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     14e:	bf00      	nop

00000150 <Thread::~Thread()>:
	It might be usefull if you are loging thread with Serial,
	or displaying a list of threads...
*/
// #define USE_THREAD_NAMES	1

class Thread{
     150:	4b04      	ldr	r3, [pc, #16]	; (164 <Thread::~Thread()+0x14>)
     152:	b510      	push	{r4, lr}
     154:	4604      	mov	r4, r0
     156:	f840 3b18 	str.w	r3, [r0], #24
     15a:	f003 ff25 	bl	3fa8 <String::~String()>
     15e:	4620      	mov	r0, r4
     160:	bd10      	pop	{r4, pc}
     162:	bf00      	nop
     164:	200006f4 	.word	0x200006f4

00000168 <ThreadController::~ThreadController()>:
     168:	4b04      	ldr	r3, [pc, #16]	; (17c <ThreadController::~ThreadController()+0x14>)
#include "Thread.h"
#include "inttypes.h"

#define MAX_THREADS		15

class ThreadController: public Thread{
     16a:	b510      	push	{r4, lr}
     16c:	4604      	mov	r4, r0
     16e:	f840 3b18 	str.w	r3, [r0], #24
     172:	f003 ff19 	bl	3fa8 <String::~String()>
     176:	4620      	mov	r0, r4
     178:	bd10      	pop	{r4, pc}
     17a:	bf00      	nop
     17c:	200006f4 	.word	0x200006f4

00000180 <systemMonitor() [clone .part.0]>:
void systemMonitor(void)
     180:	b538      	push	{r3, r4, r5, lr}
  if(power > faims.MaxPower)
     182:	4d4b      	ldr	r5, [pc, #300]	; (2b0 <systemMonitor() [clone .part.0]+0x130>)
     184:	4c4b      	ldr	r4, [pc, #300]	; (2b4 <systemMonitor() [clone .part.0]+0x134>)
     186:	edd5 3a00 	vldr	s7, [r5]
     18a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
     18e:	eef4 7ae3 	vcmpe.f32	s15, s7
     192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     196:	d457      	bmi.n	248 <systemMonitor() [clone .part.0]+0xc8>
  float ePwr = FIXEDPWR + HVmonV[0] * HVmonV[0] * SYSTEMC * 1e-12 * faims.Freq;
     198:	4b47      	ldr	r3, [pc, #284]	; (2b8 <systemMonitor() [clone .part.0]+0x138>)
  if((power - ePwr) > ERRPWR)
     19a:	eeb1 3a00 	vmov.f32	s6, #16	; 0x40800000  4.0
  float ePwr = FIXEDPWR + HVmonV[0] * HVmonV[0] * SYSTEMC * 1e-12 * faims.Freq;
     19e:	ed9f 5a47 	vldr	s10, [pc, #284]	; 2bc <systemMonitor() [clone .part.0]+0x13c>
     1a2:	ed93 6a00 	vldr	s12, [r3]
     1a6:	edd4 6a07 	vldr	s13, [r4, #28]
     1aa:	ee26 6a06 	vmul.f32	s12, s12, s12
     1ae:	eeb8 4be6 	vcvt.f64.s32	d4, s13
  ePwr += HVmonV[0] * HVmonV[0] * faims.LoadC * 1e-12 * faims.Freq;
     1b2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
  float ePwr = FIXEDPWR + HVmonV[0] * HVmonV[0] * SYSTEMC * 1e-12 * faims.Freq;
     1b6:	ee26 5a05 	vmul.f32	s10, s12, s10
  ePwr += HVmonV[0] * HVmonV[0] * faims.LoadC * 1e-12 * faims.Freq;
     1ba:	ee26 6a26 	vmul.f32	s12, s12, s13
  float ePwr = FIXEDPWR + HVmonV[0] * HVmonV[0] * SYSTEMC * 1e-12 * faims.Freq;
     1be:	ed9f 2b38 	vldr	d2, [pc, #224]	; 2a0 <systemMonitor() [clone .part.0]+0x120>
     1c2:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
  ePwr += HVmonV[0] * HVmonV[0] * faims.LoadC * 1e-12 * faims.Freq;
     1c6:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
  float ePwr = FIXEDPWR + HVmonV[0] * HVmonV[0] * SYSTEMC * 1e-12 * faims.Freq;
     1ca:	ee25 5b02 	vmul.f64	d5, d5, d2
  ePwr += HVmonV[0] * HVmonV[0] * faims.LoadC * 1e-12 * faims.Freq;
     1ce:	ee26 6b02 	vmul.f64	d6, d6, d2
  float ePwr = FIXEDPWR + HVmonV[0] * HVmonV[0] * SYSTEMC * 1e-12 * faims.Freq;
     1d2:	ed9f 7b35 	vldr	d7, [pc, #212]	; 2a8 <systemMonitor() [clone .part.0]+0x128>
     1d6:	eea5 7b04 	vfma.f64	d7, d5, d4
     1da:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  ePwr += HVmonV[0] * HVmonV[0] * faims.LoadC * 1e-12 * faims.Freq;
     1de:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     1e2:	eea4 7b06 	vfma.f64	d7, d4, d6
     1e6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  if((power - ePwr) > ERRPWR)
     1ea:	ee73 3ac7 	vsub.f32	s7, s7, s14
     1ee:	eef4 3ac3 	vcmpe.f32	s7, s6
     1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     1f6:	dc00      	bgt.n	1fa <systemMonitor() [clone .part.0]+0x7a>
}
     1f8:	bd38      	pop	{r3, r4, r5, pc}
    faims.Enable = false;
     1fa:	2100      	movs	r1, #0
    digitalWrite(STATUSLED,LOW);
     1fc:	2001      	movs	r0, #1
    faims.Enable = false;
     1fe:	75e1      	strb	r1, [r4, #23]
    digitalWrite(STATUSLED,LOW);
     200:	f004 f9b0 	bl	4564 <digitalWrite>
    digitalWrite(BUZZER,HIGH);
     204:	2101      	movs	r1, #1
     206:	200b      	movs	r0, #11
     208:	f004 f9ac 	bl	4564 <digitalWrite>
     20c:	4a2c      	ldr	r2, [pc, #176]	; (2c0 <systemMonitor() [clone .part.0]+0x140>)

    inline
    struct task *
    next_task_slot()
    {
        timer_foreach_task(slot) {
     20e:	4b2d      	ldr	r3, [pc, #180]	; (2c4 <systemMonitor() [clone .part.0]+0x144>)
     210:	6810      	ldr	r0, [r2, #0]
            if (slot->handler == NULL) return slot;
     212:	681a      	ldr	r2, [r3, #0]
        timer_foreach_task(slot) {
     214:	f503 71c0 	add.w	r1, r3, #384	; 0x180
            if (slot->handler == NULL) return slot;
     218:	b12a      	cbz	r2, 226 <systemMonitor() [clone .part.0]+0xa6>
        timer_foreach_task(slot) {
     21a:	3318      	adds	r3, #24
     21c:	428b      	cmp	r3, r1
     21e:	d0eb      	beq.n	1f8 <systemMonitor() [clone .part.0]+0x78>
            if (slot->handler == NULL) return slot;
     220:	681a      	ldr	r2, [r3, #0]
     222:	2a00      	cmp	r2, #0
     224:	d1f9      	bne.n	21a <systemMonitor() [clone .part.0]+0x9a>
        if (++ctr == 0) ++ctr; // overflow

        slot->id = ctr;
        slot->handler = h;
        slot->opaque = opaque;
        slot->start = start;
     226:	6098      	str	r0, [r3, #8]
        slot->expires = expires;
     228:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
        if (++ctr == 0) ++ctr; // overflow
     22c:	4826      	ldr	r0, [pc, #152]	; (2c8 <systemMonitor() [clone .part.0]+0x148>)
        slot->handler = h;
     22e:	4c27      	ldr	r4, [pc, #156]	; (2cc <systemMonitor() [clone .part.0]+0x14c>)
        if (++ctr == 0) ++ctr; // overflow
     230:	6801      	ldr	r1, [r0, #0]
        slot->expires = expires;
     232:	60dd      	str	r5, [r3, #12]
        if (++ctr == 0) ++ctr; // overflow
     234:	3101      	adds	r1, #1
        slot->opaque = opaque;
     236:	605a      	str	r2, [r3, #4]
        slot->repeat = repeat;
     238:	611a      	str	r2, [r3, #16]
    task_id(const struct task * const t)
     23a:	2901      	cmp	r1, #1
     23c:	bf38      	it	cc
     23e:	2101      	movcc	r1, #1
     240:	6001      	str	r1, [r0, #0]
        slot->id = ctr;
     242:	6159      	str	r1, [r3, #20]
        slot->handler = h;
     244:	601c      	str	r4, [r3, #0]
}
     246:	bd38      	pop	{r3, r4, r5, pc}
    faims.Enable = false;
     248:	2100      	movs	r1, #0
    digitalWrite(STATUSLED,LOW);
     24a:	2001      	movs	r0, #1
    faims.Enable = false;
     24c:	75e1      	strb	r1, [r4, #23]
    digitalWrite(STATUSLED,LOW);
     24e:	f004 f989 	bl	4564 <digitalWrite>
    digitalWrite(BUZZER,HIGH);
     252:	2101      	movs	r1, #1
     254:	200b      	movs	r0, #11
     256:	f004 f985 	bl	4564 <digitalWrite>
     25a:	4a19      	ldr	r2, [pc, #100]	; (2c0 <systemMonitor() [clone .part.0]+0x140>)
        timer_foreach_task(slot) {
     25c:	4b19      	ldr	r3, [pc, #100]	; (2c4 <systemMonitor() [clone .part.0]+0x144>)
     25e:	6810      	ldr	r0, [r2, #0]
     260:	f503 71c0 	add.w	r1, r3, #384	; 0x180
            if (slot->handler == NULL) return slot;
     264:	681a      	ldr	r2, [r3, #0]
     266:	b12a      	cbz	r2, 274 <systemMonitor() [clone .part.0]+0xf4>
        timer_foreach_task(slot) {
     268:	3318      	adds	r3, #24
     26a:	428b      	cmp	r3, r1
     26c:	d1fa      	bne.n	264 <systemMonitor() [clone .part.0]+0xe4>
  if((power - ePwr) > ERRPWR)
     26e:	edd5 3a00 	vldr	s7, [r5]
     272:	e791      	b.n	198 <systemMonitor() [clone .part.0]+0x18>
        slot->expires = expires;
     274:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
        slot->opaque = opaque;
     278:	605a      	str	r2, [r3, #4]
        slot->start = start;
     27a:	6098      	str	r0, [r3, #8]
        slot->handler = h;
     27c:	4813      	ldr	r0, [pc, #76]	; (2cc <systemMonitor() [clone .part.0]+0x14c>)
     27e:	edd5 3a00 	vldr	s7, [r5]
        slot->expires = expires;
     282:	e9c3 1203 	strd	r1, r2, [r3, #12]
        if (++ctr == 0) ++ctr; // overflow
     286:	4910      	ldr	r1, [pc, #64]	; (2c8 <systemMonitor() [clone .part.0]+0x148>)
     288:	680a      	ldr	r2, [r1, #0]
     28a:	3201      	adds	r2, #1
     28c:	2a01      	cmp	r2, #1
     28e:	bf38      	it	cc
     290:	2201      	movcc	r2, #1
     292:	600a      	str	r2, [r1, #0]
        slot->id = ctr;
     294:	615a      	str	r2, [r3, #20]
        slot->handler = h;
     296:	6018      	str	r0, [r3, #0]
     298:	e77e      	b.n	198 <systemMonitor() [clone .part.0]+0x18>
     29a:	bf00      	nop
     29c:	f3af 8000 	nop.w
     2a0:	812dea11 	.word	0x812dea11
     2a4:	3d719799 	.word	0x3d719799
	...
     2b0:	2000ab88 	.word	0x2000ab88
     2b4:	2000aa78 	.word	0x2000aa78
     2b8:	2000949c 	.word	0x2000949c
     2bc:	42dc0000 	.word	0x42dc0000
     2c0:	2000ae44 	.word	0x2000ae44
     2c4:	2000ae50 	.word	0x2000ae50
     2c8:	2000ae4c 	.word	0x2000ae4c
     2cc:	00000141 	.word	0x00000141

000002d0 <SaveSettings()>:
// Host commands
//
void SaveSettings(void)
{
  faims.Signature = SIGNATURE;
  EEPROM.put(eeAddress, faims);
     2d0:	490b      	ldr	r1, [pc, #44]	; (300 <SaveSettings()+0x30>)
        #if defined(__has_include) && __has_include(<type_traits>)
        static_assert(std::is_trivially_copyable<T>::value, "You can not use this type with EEPROM.put"); // the code below only makes sense if you can "memcpy" T
        #endif
        const uint8_t *ptr = (const uint8_t*) &t;
#ifdef __arm__
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
     2d2:	22f4      	movs	r2, #244	; 0xf4
  faims.Signature = SIGNATURE;
     2d4:	4b0b      	ldr	r3, [pc, #44]	; (304 <SaveSettings()+0x34>)
     2d6:	480c      	ldr	r0, [pc, #48]	; (308 <SaveSettings()+0x38>)
     2d8:	6809      	ldr	r1, [r1, #0]
{
     2da:	b510      	push	{r4, lr}
  faims.Signature = SIGNATURE;
     2dc:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
     2e0:	f004 fba8 	bl	4a34 <eeprom_write_block>
  SendACK;
     2e4:	4b09      	ldr	r3, [pc, #36]	; (30c <SaveSettings()+0x3c>)
     2e6:	781b      	ldrb	r3, [r3, #0]
     2e8:	b103      	cbz	r3, 2ec <SaveSettings()+0x1c>
}
     2ea:	bd10      	pop	{r4, pc}
  SendACK;
     2ec:	4b08      	ldr	r3, [pc, #32]	; (310 <SaveSettings()+0x40>)
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
     2ee:	2203      	movs	r2, #3
     2f0:	4908      	ldr	r1, [pc, #32]	; (314 <SaveSettings()+0x44>)
     2f2:	6818      	ldr	r0, [r3, #0]
     2f4:	6803      	ldr	r3, [r0, #0]
}
     2f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2fa:	685b      	ldr	r3, [r3, #4]
     2fc:	4718      	bx	r3
     2fe:	bf00      	nop
     300:	2000aa60 	.word	0x2000aa60
     304:	aa55a5a5 	.word	0xaa55a5a5
     308:	2000aa78 	.word	0x2000aa78
     30c:	2000afeb 	.word	0x2000afeb
     310:	20008e14 	.word	0x20008e14
     314:	200004a0 	.word	0x200004a0

00000318 <Restore()>:

bool Restore(void)
{
     318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static FAIMSrec fm;

  // Read the flash config contents and test the signature
  EEPROM.get(eeAddress, fm);
     31a:	4b0e      	ldr	r3, [pc, #56]	; (354 <Restore()+0x3c>)
        uint8_t *ptr = (uint8_t*) &t;
     31c:	4f0e      	ldr	r7, [pc, #56]	; (358 <Restore()+0x40>)
     31e:	681d      	ldr	r5, [r3, #0]
     320:	463c      	mov	r4, r7
     322:	f107 06f4 	add.w	r6, r7, #244	; 0xf4
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     326:	1bed      	subs	r5, r5, r7
     328:	1960      	adds	r0, r4, r5
     32a:	f004 f9e1 	bl	46f0 <eeprom_read_byte>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     32e:	f804 0b01 	strb.w	r0, [r4], #1
     332:	42b4      	cmp	r4, r6
     334:	d1f8      	bne.n	328 <Restore()+0x10>
  if(fm.Signature == SIGNATURE) 
     336:	4b09      	ldr	r3, [pc, #36]	; (35c <Restore()+0x44>)
     338:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
     33c:	429a      	cmp	r2, r3
     33e:	d001      	beq.n	344 <Restore()+0x2c>
  {
    faims = fm;
    return true;
  }
  return false;
     340:	2000      	movs	r0, #0
}
     342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    faims = fm;
     344:	22f4      	movs	r2, #244	; 0xf4
     346:	4904      	ldr	r1, [pc, #16]	; (358 <Restore()+0x40>)
     348:	4805      	ldr	r0, [pc, #20]	; (360 <Restore()+0x48>)
     34a:	f004 fc1f 	bl	4b8c <memcpy>
     34e:	2001      	movs	r0, #1
}
     350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     352:	bf00      	nop
     354:	2000aa60 	.word	0x2000aa60
     358:	2000a5ec 	.word	0x2000a5ec
     35c:	aa55a5a5 	.word	0xaa55a5a5
     360:	2000aa78 	.word	0x2000aa78

00000364 <RestoreSettings()>:

void RestoreSettings(void)
{
     364:	b510      	push	{r4, lr}
  if(Restore()) 
     366:	f7ff ffd7 	bl	318 <Restore()>
  {
    SendACK; 
     36a:	4b0c      	ldr	r3, [pc, #48]	; (39c <RestoreSettings()+0x38>)
  if(Restore()) 
     36c:	b158      	cbz	r0, 386 <RestoreSettings()+0x22>
    SendACK; 
     36e:	781b      	ldrb	r3, [r3, #0]
     370:	b103      	cbz	r3, 374 <RestoreSettings()+0x10>
  {
    SetErrorCode(ERR_EEPROMWRITE);
    SendNAK;
    return;
  }
}
     372:	bd10      	pop	{r4, pc}
    SendACK; 
     374:	4b0a      	ldr	r3, [pc, #40]	; (3a0 <RestoreSettings()+0x3c>)
     376:	2203      	movs	r2, #3
     378:	490a      	ldr	r1, [pc, #40]	; (3a4 <RestoreSettings()+0x40>)
    SendNAK;
     37a:	6818      	ldr	r0, [r3, #0]
     37c:	6803      	ldr	r3, [r0, #0]
}
     37e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     382:	685b      	ldr	r3, [r3, #4]
     384:	4718      	bx	r3
    SetErrorCode(ERR_EEPROMWRITE);
     386:	4a08      	ldr	r2, [pc, #32]	; (3a8 <RestoreSettings()+0x44>)
     388:	216e      	movs	r1, #110	; 0x6e
    SendNAK;
     38a:	781b      	ldrb	r3, [r3, #0]
    SetErrorCode(ERR_EEPROMWRITE);
     38c:	6011      	str	r1, [r2, #0]
    SendNAK;
     38e:	2b00      	cmp	r3, #0
     390:	d1ef      	bne.n	372 <RestoreSettings()+0xe>
     392:	4b03      	ldr	r3, [pc, #12]	; (3a0 <RestoreSettings()+0x3c>)
     394:	2204      	movs	r2, #4
     396:	4905      	ldr	r1, [pc, #20]	; (3ac <RestoreSettings()+0x48>)
     398:	e7ef      	b.n	37a <RestoreSettings()+0x16>
     39a:	bf00      	nop
     39c:	2000afeb 	.word	0x2000afeb
     3a0:	20008e14 	.word	0x20008e14
     3a4:	200004a0 	.word	0x200004a0
     3a8:	20009490 	.word	0x20009490
     3ac:	20000568 	.word	0x20000568

000003b0 <FormatFLASH()>:

void FormatFLASH(void)
{
  EEPROM.put(eeAddress, Rev_1_faims);  
     3b0:	4b09      	ldr	r3, [pc, #36]	; (3d8 <FormatFLASH()+0x28>)
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
     3b2:	22f4      	movs	r2, #244	; 0xf4
     3b4:	4809      	ldr	r0, [pc, #36]	; (3dc <FormatFLASH()+0x2c>)
     3b6:	6819      	ldr	r1, [r3, #0]
{
     3b8:	b510      	push	{r4, lr}
     3ba:	f004 fb3b 	bl	4a34 <eeprom_write_block>
  SendACK;
     3be:	4b08      	ldr	r3, [pc, #32]	; (3e0 <FormatFLASH()+0x30>)
     3c0:	781b      	ldrb	r3, [r3, #0]
     3c2:	b103      	cbz	r3, 3c6 <FormatFLASH()+0x16>
}
     3c4:	bd10      	pop	{r4, pc}
  SendACK;
     3c6:	4b07      	ldr	r3, [pc, #28]	; (3e4 <FormatFLASH()+0x34>)
     3c8:	2203      	movs	r2, #3
     3ca:	4907      	ldr	r1, [pc, #28]	; (3e8 <FormatFLASH()+0x38>)
     3cc:	6818      	ldr	r0, [r3, #0]
     3ce:	6803      	ldr	r3, [r0, #0]
}
     3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     3d4:	685b      	ldr	r3, [r3, #4]
     3d6:	4718      	bx	r3
     3d8:	2000aa60 	.word	0x2000aa60
     3dc:	20008108 	.word	0x20008108
     3e0:	2000afeb 	.word	0x2000afeb
     3e4:	20008e14 	.word	0x20008e14
     3e8:	200004a0 	.word	0x200004a0

000003ec <setVariable(float*, char*, float, float)>:

bool setVariable(float *v,char *value, float LL, float UL)
{
     3ec:	b530      	push	{r4, r5, lr}
     3ee:	ed2d 8b02 	vpush	{d8}
     3f2:	b083      	sub	sp, #12
     3f4:	eeb0 8a40 	vmov.f32	s16, s0
     3f8:	4604      	mov	r4, r0
  float d;

  sscanf(value,"%f",&d);
     3fa:	4608      	mov	r0, r1
     3fc:	aa01      	add	r2, sp, #4
     3fe:	491f      	ldr	r1, [pc, #124]	; (47c <setVariable(float*, char*, float, float)+0x90>)
{
     400:	eef0 8a60 	vmov.f32	s17, s1
  sscanf(value,"%f",&d);
     404:	f007 ff9c 	bl	8340 <sscanf>
  if((d<LL)||(d>UL)) 
     408:	eddd 7a01 	vldr	s15, [sp, #4]
     40c:	eef4 7ac8 	vcmpe.f32	s15, s16
     410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     414:	d40f      	bmi.n	436 <setVariable(float*, char*, float, float)+0x4a>
     416:	eef4 7ae8 	vcmpe.f32	s15, s17
     41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     41e:	dc0a      	bgt.n	436 <setVariable(float*, char*, float, float)+0x4a>
  {
    SetErrorCode(ERR_BADARG); 
    SendNAK;
    return false;
  }
  SendACK;
     420:	4b17      	ldr	r3, [pc, #92]	; (480 <setVariable(float*, char*, float, float)+0x94>)
     422:	781b      	ldrb	r3, [r3, #0]
     424:	b1fb      	cbz	r3, 466 <setVariable(float*, char*, float, float)+0x7a>
  *v = d;
  return true;
     426:	2501      	movs	r5, #1
  *v = d;
     428:	edc4 7a00 	vstr	s15, [r4]
}
     42c:	4628      	mov	r0, r5
     42e:	b003      	add	sp, #12
     430:	ecbd 8b02 	vpop	{d8}
     434:	bd30      	pop	{r4, r5, pc}
    SendNAK;
     436:	4912      	ldr	r1, [pc, #72]	; (480 <setVariable(float*, char*, float, float)+0x94>)
    SetErrorCode(ERR_BADARG); 
     438:	2202      	movs	r2, #2
     43a:	4b12      	ldr	r3, [pc, #72]	; (484 <setVariable(float*, char*, float, float)+0x98>)
    SendNAK;
     43c:	780d      	ldrb	r5, [r1, #0]
    SetErrorCode(ERR_BADARG); 
     43e:	601a      	str	r2, [r3, #0]
    SendNAK;
     440:	b12d      	cbz	r5, 44e <setVariable(float*, char*, float, float)+0x62>
     442:	2500      	movs	r5, #0
}
     444:	4628      	mov	r0, r5
     446:	b003      	add	sp, #12
     448:	ecbd 8b02 	vpop	{d8}
     44c:	bd30      	pop	{r4, r5, pc}
    SendNAK;
     44e:	4b0e      	ldr	r3, [pc, #56]	; (488 <setVariable(float*, char*, float, float)+0x9c>)
     450:	2204      	movs	r2, #4
     452:	490e      	ldr	r1, [pc, #56]	; (48c <setVariable(float*, char*, float, float)+0xa0>)
     454:	6818      	ldr	r0, [r3, #0]
     456:	6803      	ldr	r3, [r0, #0]
     458:	685b      	ldr	r3, [r3, #4]
     45a:	4798      	blx	r3
}
     45c:	4628      	mov	r0, r5
     45e:	b003      	add	sp, #12
     460:	ecbd 8b02 	vpop	{d8}
     464:	bd30      	pop	{r4, r5, pc}
  SendACK;
     466:	4b08      	ldr	r3, [pc, #32]	; (488 <setVariable(float*, char*, float, float)+0x9c>)
     468:	2203      	movs	r2, #3
     46a:	4909      	ldr	r1, [pc, #36]	; (490 <setVariable(float*, char*, float, float)+0xa4>)
     46c:	6818      	ldr	r0, [r3, #0]
     46e:	6803      	ldr	r3, [r0, #0]
     470:	685b      	ldr	r3, [r3, #4]
     472:	4798      	blx	r3
  *v = d;
     474:	eddd 7a01 	vldr	s15, [sp, #4]
     478:	e7d5      	b.n	426 <setVariable(float*, char*, float, float)+0x3a>
     47a:	bf00      	nop
     47c:	20000464 	.word	0x20000464
     480:	2000afeb 	.word	0x2000afeb
     484:	20009490 	.word	0x20009490
     488:	20008e14 	.word	0x20008e14
     48c:	20000568 	.word	0x20000568
     490:	200004a0 	.word	0x200004a0

00000494 <setFrequency(int)>:
bool setVariable(int *v,int *value, int LL, int UL)
{
  int d;

  d = *value;
  if((d<LL)||(d>UL)) 
     494:	4b12      	ldr	r3, [pc, #72]	; (4e0 <setFrequency(int)+0x4c>)
     496:	f5a0 727a 	sub.w	r2, r0, #1000	; 0x3e8
     49a:	429a      	cmp	r2, r3
     49c:	d811      	bhi.n	4c2 <setFrequency(int)+0x2e>
  {
    SetErrorCode(ERR_BADARG); 
    SendNAK;
    return false;
  }
  SendACK;
     49e:	4b11      	ldr	r3, [pc, #68]	; (4e4 <setFrequency(int)+0x50>)
     4a0:	781b      	ldrb	r3, [r3, #0]
  *v = d;
  return true;
}

void setFrequency(int freq) {setVariable(&faims.Freq,&freq,1000,1000000);}
     4a2:	b510      	push	{r4, lr}
     4a4:	4604      	mov	r4, r0
  SendACK;
     4a6:	b113      	cbz	r3, 4ae <setFrequency(int)+0x1a>
  *v = d;
     4a8:	4b0f      	ldr	r3, [pc, #60]	; (4e8 <setFrequency(int)+0x54>)
     4aa:	61dc      	str	r4, [r3, #28]
void setFrequency(int freq) {setVariable(&faims.Freq,&freq,1000,1000000);}
     4ac:	bd10      	pop	{r4, pc}
  SendACK;
     4ae:	4b0f      	ldr	r3, [pc, #60]	; (4ec <setFrequency(int)+0x58>)
     4b0:	2203      	movs	r2, #3
     4b2:	490f      	ldr	r1, [pc, #60]	; (4f0 <setFrequency(int)+0x5c>)
     4b4:	6818      	ldr	r0, [r3, #0]
     4b6:	6803      	ldr	r3, [r0, #0]
     4b8:	685b      	ldr	r3, [r3, #4]
     4ba:	4798      	blx	r3
  *v = d;
     4bc:	4b0a      	ldr	r3, [pc, #40]	; (4e8 <setFrequency(int)+0x54>)
     4be:	61dc      	str	r4, [r3, #28]
void setFrequency(int freq) {setVariable(&faims.Freq,&freq,1000,1000000);}
     4c0:	bd10      	pop	{r4, pc}
    SendNAK;
     4c2:	4b08      	ldr	r3, [pc, #32]	; (4e4 <setFrequency(int)+0x50>)
    SetErrorCode(ERR_BADARG); 
     4c4:	2102      	movs	r1, #2
     4c6:	4a0b      	ldr	r2, [pc, #44]	; (4f4 <setFrequency(int)+0x60>)
    SendNAK;
     4c8:	781b      	ldrb	r3, [r3, #0]
    SetErrorCode(ERR_BADARG); 
     4ca:	6011      	str	r1, [r2, #0]
    SendNAK;
     4cc:	b103      	cbz	r3, 4d0 <setFrequency(int)+0x3c>
     4ce:	4770      	bx	lr
     4d0:	4b06      	ldr	r3, [pc, #24]	; (4ec <setFrequency(int)+0x58>)
     4d2:	2204      	movs	r2, #4
     4d4:	4908      	ldr	r1, [pc, #32]	; (4f8 <setFrequency(int)+0x64>)
     4d6:	6818      	ldr	r0, [r3, #0]
     4d8:	6803      	ldr	r3, [r0, #0]
     4da:	685b      	ldr	r3, [r3, #4]
     4dc:	4718      	bx	r3
     4de:	bf00      	nop
     4e0:	000f3e58 	.word	0x000f3e58
     4e4:	2000afeb 	.word	0x2000afeb
     4e8:	2000aa78 	.word	0x2000aa78
     4ec:	20008e14 	.word	0x20008e14
     4f0:	200004a0 	.word	0x200004a0
     4f4:	20009490 	.word	0x20009490
     4f8:	20000568 	.word	0x20000568

000004fc <setDuty(char*)>:
void setDuty(char *duty) {setVariable(&faims.Duty,duty,5,95);}
     4fc:	4601      	mov	r1, r0
     4fe:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
     502:	eddf 0a02 	vldr	s1, [pc, #8]	; 50c <setDuty(char*)+0x10>
     506:	4802      	ldr	r0, [pc, #8]	; (510 <setDuty(char*)+0x14>)
     508:	f7ff bf70 	b.w	3ec <setVariable(float*, char*, float, float)>
     50c:	42be0000 	.word	0x42be0000
     510:	2000aa90 	.word	0x2000aa90

00000514 <setVoltage(char*)>:
void setVoltage(char *volt) {setVariable(&faims.Voltage,volt,0,MAXV);}
     514:	4601      	mov	r1, r0
     516:	eddf 0a03 	vldr	s1, [pc, #12]	; 524 <setVoltage(char*)+0x10>
     51a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 528 <setVoltage(char*)+0x14>
     51e:	4803      	ldr	r0, [pc, #12]	; (52c <setVoltage(char*)+0x18>)
     520:	f7ff bf64 	b.w	3ec <setVariable(float*, char*, float, float)>
     524:	44bb8000 	.word	0x44bb8000
     528:	00000000 	.word	0x00000000
     52c:	2000aa98 	.word	0x2000aa98

00000530 <setMaxI(char*)>:
void setMaxI(char *val) {setVariable(&faims.MaxI,val,0,60);}
     530:	4601      	mov	r1, r0
     532:	eddf 0a03 	vldr	s1, [pc, #12]	; 540 <setMaxI(char*)+0x10>
     536:	ed9f 0a03 	vldr	s0, [pc, #12]	; 544 <setMaxI(char*)+0x14>
     53a:	4803      	ldr	r0, [pc, #12]	; (548 <setMaxI(char*)+0x18>)
     53c:	f7ff bf56 	b.w	3ec <setVariable(float*, char*, float, float)>
     540:	42700000 	.word	0x42700000
     544:	00000000 	.word	0x00000000
     548:	2000aa9c 	.word	0x2000aa9c

0000054c <setCV(char*)>:
void setCV(char *val) {setVariable(&faims.CV,val,-400,400);}
     54c:	4601      	mov	r1, r0
     54e:	eddf 0a03 	vldr	s1, [pc, #12]	; 55c <setCV(char*)+0x10>
     552:	ed9f 0a03 	vldr	s0, [pc, #12]	; 560 <setCV(char*)+0x14>
     556:	4803      	ldr	r0, [pc, #12]	; (564 <setCV(char*)+0x18>)
     558:	f7ff bf48 	b.w	3ec <setVariable(float*, char*, float, float)>
     55c:	43c80000 	.word	0x43c80000
     560:	c3c80000 	.word	0xc3c80000
     564:	2000aaa0 	.word	0x2000aaa0

00000568 <setBias(char*)>:
void setBias(char *val) {setVariable(&faims.Bias,val,-400,400);}
     568:	4601      	mov	r1, r0
     56a:	eddf 0a03 	vldr	s1, [pc, #12]	; 578 <setBias(char*)+0x10>
     56e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 57c <setBias(char*)+0x14>
     572:	4803      	ldr	r0, [pc, #12]	; (580 <setBias(char*)+0x18>)
     574:	f7ff bf3a 	b.w	3ec <setVariable(float*, char*, float, float)>
     578:	43c80000 	.word	0x43c80000
     57c:	c3c80000 	.word	0xc3c80000
     580:	2000aaa4 	.word	0x2000aaa4

00000584 <setCValt(char*)>:
void setCValt(char *val) {setVariable(&faims.CValt,val,-400,400);}
     584:	4601      	mov	r1, r0
     586:	eddf 0a03 	vldr	s1, [pc, #12]	; 594 <setCValt(char*)+0x10>
     58a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 598 <setCValt(char*)+0x14>
     58e:	4803      	ldr	r0, [pc, #12]	; (59c <setCValt(char*)+0x18>)
     590:	f7ff bf2c 	b.w	3ec <setVariable(float*, char*, float, float)>
     594:	43c80000 	.word	0x43c80000
     598:	c3c80000 	.word	0xc3c80000
     59c:	2000aab4 	.word	0x2000aab4

000005a0 <setCVstart(char*)>:
void setCVstart(char *val) {setVariable(&faims.CVstart,val,-400,400);}
     5a0:	4601      	mov	r1, r0
     5a2:	eddf 0a03 	vldr	s1, [pc, #12]	; 5b0 <setCVstart(char*)+0x10>
     5a6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 5b4 <setCVstart(char*)+0x14>
     5aa:	4803      	ldr	r0, [pc, #12]	; (5b8 <setCVstart(char*)+0x18>)
     5ac:	f7ff bf1e 	b.w	3ec <setVariable(float*, char*, float, float)>
     5b0:	43c80000 	.word	0x43c80000
     5b4:	c3c80000 	.word	0xc3c80000
     5b8:	2000aabc 	.word	0x2000aabc

000005bc <setCVstop(char*)>:
void setCVstop(char *val) {setVariable(&faims.CVstop,val,-400,400);}
     5bc:	4601      	mov	r1, r0
     5be:	eddf 0a03 	vldr	s1, [pc, #12]	; 5cc <setCVstop(char*)+0x10>
     5c2:	ed9f 0a03 	vldr	s0, [pc, #12]	; 5d0 <setCVstop(char*)+0x14>
     5c6:	4803      	ldr	r0, [pc, #12]	; (5d4 <setCVstop(char*)+0x18>)
     5c8:	f7ff bf10 	b.w	3ec <setVariable(float*, char*, float, float)>
     5cc:	43c80000 	.word	0x43c80000
     5d0:	c3c80000 	.word	0xc3c80000
     5d4:	2000aac0 	.word	0x2000aac0

000005d8 <setDuration(int)>:
  if((d<LL)||(d>UL)) 
     5d8:	4b12      	ldr	r3, [pc, #72]	; (624 <setDuration(int)+0x4c>)
     5da:	f1a0 020a 	sub.w	r2, r0, #10
     5de:	429a      	cmp	r2, r3
     5e0:	d811      	bhi.n	606 <setDuration(int)+0x2e>
  SendACK;
     5e2:	4b11      	ldr	r3, [pc, #68]	; (628 <setDuration(int)+0x50>)
     5e4:	781b      	ldrb	r3, [r3, #0]
void setDuration(int val) {setVariable(&faims.Duration,&val,10,10000000);}
     5e6:	b510      	push	{r4, lr}
     5e8:	4604      	mov	r4, r0
  SendACK;
     5ea:	b113      	cbz	r3, 5f2 <setDuration(int)+0x1a>
  *v = d;
     5ec:	4b0f      	ldr	r3, [pc, #60]	; (62c <setDuration(int)+0x54>)
     5ee:	64dc      	str	r4, [r3, #76]	; 0x4c
void setDuration(int val) {setVariable(&faims.Duration,&val,10,10000000);}
     5f0:	bd10      	pop	{r4, pc}
  SendACK;
     5f2:	4b0f      	ldr	r3, [pc, #60]	; (630 <setDuration(int)+0x58>)
     5f4:	2203      	movs	r2, #3
     5f6:	490f      	ldr	r1, [pc, #60]	; (634 <setDuration(int)+0x5c>)
     5f8:	6818      	ldr	r0, [r3, #0]
     5fa:	6803      	ldr	r3, [r0, #0]
     5fc:	685b      	ldr	r3, [r3, #4]
     5fe:	4798      	blx	r3
  *v = d;
     600:	4b0a      	ldr	r3, [pc, #40]	; (62c <setDuration(int)+0x54>)
     602:	64dc      	str	r4, [r3, #76]	; 0x4c
void setDuration(int val) {setVariable(&faims.Duration,&val,10,10000000);}
     604:	bd10      	pop	{r4, pc}
    SendNAK;
     606:	4b08      	ldr	r3, [pc, #32]	; (628 <setDuration(int)+0x50>)
    SetErrorCode(ERR_BADARG); 
     608:	2102      	movs	r1, #2
     60a:	4a0b      	ldr	r2, [pc, #44]	; (638 <setDuration(int)+0x60>)
    SendNAK;
     60c:	781b      	ldrb	r3, [r3, #0]
    SetErrorCode(ERR_BADARG); 
     60e:	6011      	str	r1, [r2, #0]
    SendNAK;
     610:	b103      	cbz	r3, 614 <setDuration(int)+0x3c>
     612:	4770      	bx	lr
     614:	4b06      	ldr	r3, [pc, #24]	; (630 <setDuration(int)+0x58>)
     616:	2204      	movs	r2, #4
     618:	4908      	ldr	r1, [pc, #32]	; (63c <setDuration(int)+0x64>)
     61a:	6818      	ldr	r0, [r3, #0]
     61c:	6803      	ldr	r3, [r0, #0]
     61e:	685b      	ldr	r3, [r3, #4]
     620:	4718      	bx	r3
     622:	bf00      	nop
     624:	00989676 	.word	0x00989676
     628:	2000afeb 	.word	0x2000afeb
     62c:	2000aa78 	.word	0x2000aa78
     630:	20008e14 	.word	0x20008e14
     634:	200004a0 	.word	0x200004a0
     638:	20009490 	.word	0x20009490
     63c:	20000568 	.word	0x20000568

00000640 <setLoadC(char*)>:
void setLoadC(char *val) {setVariable(&faims.LoadC,val,0,50);}
     640:	4601      	mov	r1, r0
     642:	eddf 0a03 	vldr	s1, [pc, #12]	; 650 <setLoadC(char*)+0x10>
     646:	ed9f 0a03 	vldr	s0, [pc, #12]	; 654 <setLoadC(char*)+0x14>
     64a:	4803      	ldr	r0, [pc, #12]	; (658 <setLoadC(char*)+0x18>)
     64c:	f7ff bece 	b.w	3ec <setVariable(float*, char*, float, float)>
     650:	42480000 	.word	0x42480000
     654:	00000000 	.word	0x00000000
     658:	2000aab0 	.word	0x2000aab0

0000065c <startToggle()>:

// This function start the CV toggle function. The CV is toggeled between The CV
// value and CValt. The duration values defines the number of mS at each value.
void startToggle(void) 
{
     65c:	b538      	push	{r3, r4, r5, lr}
  SendACK;
     65e:	4b1e      	ldr	r3, [pc, #120]	; (6d8 <startToggle()+0x7c>)
     660:	781b      	ldrb	r3, [r3, #0]
     662:	2b00      	cmp	r3, #0
     664:	d030      	beq.n	6c8 <startToggle()+0x6c>
  if((scanning)||(toggling)) return;
     666:	4b1d      	ldr	r3, [pc, #116]	; (6dc <startToggle()+0x80>)
     668:	781b      	ldrb	r3, [r3, #0]
     66a:	b913      	cbnz	r3, 672 <startToggle()+0x16>
     66c:	4a1c      	ldr	r2, [pc, #112]	; (6e0 <startToggle()+0x84>)
     66e:	7813      	ldrb	r3, [r2, #0]
     670:	b103      	cbz	r3, 674 <startToggle()+0x18>
  toggling = true;
  scanAbort = false;
  CVstate = true;
  savedCV = faims.CV;
  timer.every(faims.Duration,toggleCV);
}
     672:	bd38      	pop	{r3, r4, r5, pc}
  toggling = true;
     674:	2001      	movs	r0, #1
  savedCV = faims.CV;
     676:	491b      	ldr	r1, [pc, #108]	; (6e4 <startToggle()+0x88>)
     678:	4c1b      	ldr	r4, [pc, #108]	; (6e8 <startToggle()+0x8c>)
  toggling = true;
     67a:	7010      	strb	r0, [r2, #0]
  scanAbort = false;
     67c:	4a1b      	ldr	r2, [pc, #108]	; (6ec <startToggle()+0x90>)
     67e:	6825      	ldr	r5, [r4, #0]
     680:	7013      	strb	r3, [r2, #0]
  CVstate = true;
     682:	4a1b      	ldr	r2, [pc, #108]	; (6f0 <startToggle()+0x94>)
  timer.every(faims.Duration,toggleCV);
     684:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
  CVstate = true;
     686:	7010      	strb	r0, [r2, #0]
        timer_foreach_task(slot) {
     688:	4b1a      	ldr	r3, [pc, #104]	; (6f4 <startToggle()+0x98>)
        return task_id(add_task(time_func(), interval, h, opaque, interval));
     68a:	1e20      	subs	r0, r4, #0
  savedCV = faims.CV;
     68c:	4a1a      	ldr	r2, [pc, #104]	; (6f8 <startToggle()+0x9c>)
     68e:	6a89      	ldr	r1, [r1, #40]	; 0x28
     690:	bf18      	it	ne
     692:	2001      	movne	r0, #1
     694:	6011      	str	r1, [r2, #0]
        timer_foreach_task(slot) {
     696:	f503 71c0 	add.w	r1, r3, #384	; 0x180
            if (slot->handler == NULL) return slot;
     69a:	681a      	ldr	r2, [r3, #0]
     69c:	b12a      	cbz	r2, 6aa <startToggle()+0x4e>
        timer_foreach_task(slot) {
     69e:	3318      	adds	r3, #24
     6a0:	428b      	cmp	r3, r1
     6a2:	d0e6      	beq.n	672 <startToggle()+0x16>
            if (slot->handler == NULL) return slot;
     6a4:	681a      	ldr	r2, [r3, #0]
     6a6:	2a00      	cmp	r2, #0
     6a8:	d1f9      	bne.n	69e <startToggle()+0x42>
        if (++ctr == 0) ++ctr; // overflow
     6aa:	4914      	ldr	r1, [pc, #80]	; (6fc <startToggle()+0xa0>)
        slot->start = start;
     6ac:	e9c3 2501 	strd	r2, r5, [r3, #4]
        if (++ctr == 0) ++ctr; // overflow
     6b0:	680a      	ldr	r2, [r1, #0]
     6b2:	3201      	adds	r2, #1
     6b4:	2a01      	cmp	r2, #1
        slot->repeat = repeat;
     6b6:	e9c3 4003 	strd	r4, r0, [r3, #12]
    task_id(const struct task * const t)
     6ba:	bf38      	it	cc
     6bc:	2201      	movcc	r2, #1
        slot->handler = h;
     6be:	4810      	ldr	r0, [pc, #64]	; (700 <startToggle()+0xa4>)
     6c0:	600a      	str	r2, [r1, #0]
        slot->id = ctr;
     6c2:	615a      	str	r2, [r3, #20]
        slot->handler = h;
     6c4:	6018      	str	r0, [r3, #0]
}
     6c6:	bd38      	pop	{r3, r4, r5, pc}
  SendACK;
     6c8:	4b0e      	ldr	r3, [pc, #56]	; (704 <startToggle()+0xa8>)
     6ca:	2203      	movs	r2, #3
     6cc:	490e      	ldr	r1, [pc, #56]	; (708 <startToggle()+0xac>)
     6ce:	6818      	ldr	r0, [r3, #0]
     6d0:	6803      	ldr	r3, [r0, #0]
     6d2:	685b      	ldr	r3, [r3, #4]
     6d4:	4798      	blx	r3
     6d6:	e7c6      	b.n	666 <startToggle()+0xa>
     6d8:	2000afeb 	.word	0x2000afeb
     6dc:	2000affa 	.word	0x2000affa
     6e0:	2000affc 	.word	0x2000affc
     6e4:	2000aa78 	.word	0x2000aa78
     6e8:	2000ae44 	.word	0x2000ae44
     6ec:	2000aff9 	.word	0x2000aff9
     6f0:	2000afea 	.word	0x2000afea
     6f4:	2000ae50 	.word	0x2000ae50
     6f8:	2000abd8 	.word	0x2000abd8
     6fc:	2000ae4c 	.word	0x2000ae4c
     700:	00000e45 	.word	0x00000e45
     704:	20008e14 	.word	0x20008e14
     708:	200004a0 	.word	0x200004a0

0000070c <startScan()>:

void startScan(void) 
{
  SendACK;
     70c:	4b16      	ldr	r3, [pc, #88]	; (768 <startScan()+0x5c>)
     70e:	781b      	ldrb	r3, [r3, #0]
{
     710:	b570      	push	{r4, r5, r6, lr}
  SendACK;
     712:	b1d3      	cbz	r3, 74a <startScan()+0x3e>
  if((scanning)||(toggling)) return;
     714:	4b15      	ldr	r3, [pc, #84]	; (76c <startScan()+0x60>)
     716:	781a      	ldrb	r2, [r3, #0]
     718:	b912      	cbnz	r2, 720 <startScan()+0x14>
     71a:	4a15      	ldr	r2, [pc, #84]	; (770 <startScan()+0x64>)
     71c:	7812      	ldrb	r2, [r2, #0]
     71e:	b102      	cbz	r2, 722 <startScan()+0x16>
  savedCV = faims.CV;
  faims.CV = faims.CVstart;
  detachInterrupt(TRIGIN);
  if(!faims.ScanExtTrig) triggerScan = true;
  else attachInterrupt(TRIGIN,trigScanISR,RISING);
}
     720:	bd70      	pop	{r4, r5, r6, pc}
  scanning = true;
     722:	2601      	movs	r6, #1
  savedCV = faims.CV;
     724:	4c13      	ldr	r4, [pc, #76]	; (774 <startScan()+0x68>)
  triggerScan = false;
     726:	4d14      	ldr	r5, [pc, #80]	; (778 <startScan()+0x6c>)
  detachInterrupt(TRIGIN);
     728:	2003      	movs	r0, #3
  scanning = true;
     72a:	701e      	strb	r6, [r3, #0]
  scanAbort = false;
     72c:	4b13      	ldr	r3, [pc, #76]	; (77c <startScan()+0x70>)
  faims.CV = faims.CVstart;
     72e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  scanAbort = false;
     730:	701a      	strb	r2, [r3, #0]
  triggerScan = false;
     732:	702a      	strb	r2, [r5, #0]
  savedCV = faims.CV;
     734:	4b12      	ldr	r3, [pc, #72]	; (780 <startScan()+0x74>)
     736:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  faims.CV = faims.CVstart;
     738:	62a1      	str	r1, [r4, #40]	; 0x28
  savedCV = faims.CV;
     73a:	601a      	str	r2, [r3, #0]
  detachInterrupt(TRIGIN);
     73c:	f004 fa0e 	bl	4b5c <detachInterrupt>
  if(!faims.ScanExtTrig) triggerScan = true;
     740:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
     744:	b94b      	cbnz	r3, 75a <startScan()+0x4e>
     746:	702e      	strb	r6, [r5, #0]
}
     748:	bd70      	pop	{r4, r5, r6, pc}
  SendACK;
     74a:	4b0e      	ldr	r3, [pc, #56]	; (784 <startScan()+0x78>)
     74c:	2203      	movs	r2, #3
     74e:	490e      	ldr	r1, [pc, #56]	; (788 <startScan()+0x7c>)
     750:	6818      	ldr	r0, [r3, #0]
     752:	6803      	ldr	r3, [r0, #0]
     754:	685b      	ldr	r3, [r3, #4]
     756:	4798      	blx	r3
     758:	e7dc      	b.n	714 <startScan()+0x8>
  else attachInterrupt(TRIGIN,trigScanISR,RISING);
     75a:	2203      	movs	r2, #3
     75c:	490b      	ldr	r1, [pc, #44]	; (78c <startScan()+0x80>)
     75e:	4610      	mov	r0, r2
}
     760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  else attachInterrupt(TRIGIN,trigScanISR,RISING);
     764:	f004 b978 	b.w	4a58 <attachInterrupt>
     768:	2000afeb 	.word	0x2000afeb
     76c:	2000affa 	.word	0x2000affa
     770:	2000affc 	.word	0x2000affc
     774:	2000aa78 	.word	0x2000aa78
     778:	2000afff 	.word	0x2000afff
     77c:	2000aff9 	.word	0x2000aff9
     780:	2000abd8 	.word	0x2000abd8
     784:	20008e14 	.word	0x20008e14
     788:	200004a0 	.word	0x200004a0
     78c:	00000129 	.word	0x00000129

00000790 <stopScan()>:

void stopScan(void) 
{
     790:	b508      	push	{r3, lr}
  SendACK;
     792:	4b0d      	ldr	r3, [pc, #52]	; (7c8 <stopScan()+0x38>)
     794:	781b      	ldrb	r3, [r3, #0]
     796:	b17b      	cbz	r3, 7b8 <stopScan()+0x28>
  if((scanning)||(toggling)) scanAbort = true;
     798:	4b0c      	ldr	r3, [pc, #48]	; (7cc <stopScan()+0x3c>)
     79a:	781b      	ldrb	r3, [r3, #0]
     79c:	b933      	cbnz	r3, 7ac <stopScan()+0x1c>
     79e:	4b0c      	ldr	r3, [pc, #48]	; (7d0 <stopScan()+0x40>)
     7a0:	781b      	ldrb	r3, [r3, #0]
     7a2:	b113      	cbz	r3, 7aa <stopScan()+0x1a>
     7a4:	4b0b      	ldr	r3, [pc, #44]	; (7d4 <stopScan()+0x44>)
     7a6:	2201      	movs	r2, #1
     7a8:	701a      	strb	r2, [r3, #0]
  if(scanning) triggerScan = true;
}
     7aa:	bd08      	pop	{r3, pc}
  if((scanning)||(toggling)) scanAbort = true;
     7ac:	2301      	movs	r3, #1
     7ae:	4909      	ldr	r1, [pc, #36]	; (7d4 <stopScan()+0x44>)
  if(scanning) triggerScan = true;
     7b0:	4a09      	ldr	r2, [pc, #36]	; (7d8 <stopScan()+0x48>)
  if((scanning)||(toggling)) scanAbort = true;
     7b2:	700b      	strb	r3, [r1, #0]
  if(scanning) triggerScan = true;
     7b4:	7013      	strb	r3, [r2, #0]
}
     7b6:	bd08      	pop	{r3, pc}
  SendACK;
     7b8:	4b08      	ldr	r3, [pc, #32]	; (7dc <stopScan()+0x4c>)
     7ba:	2203      	movs	r2, #3
     7bc:	4908      	ldr	r1, [pc, #32]	; (7e0 <stopScan()+0x50>)
     7be:	6818      	ldr	r0, [r3, #0]
     7c0:	6803      	ldr	r3, [r0, #0]
     7c2:	685b      	ldr	r3, [r3, #4]
     7c4:	4798      	blx	r3
     7c6:	e7e7      	b.n	798 <stopScan()+0x8>
     7c8:	2000afeb 	.word	0x2000afeb
     7cc:	2000affa 	.word	0x2000affa
     7d0:	2000affc 	.word	0x2000affc
     7d4:	2000aff9 	.word	0x2000aff9
     7d8:	2000afff 	.word	0x2000afff
     7dc:	20008e14 	.word	0x20008e14
     7e0:	200004a0 	.word	0x200004a0

000007e4 <isScanning()>:

void isScanning(void)
{
     7e4:	b570      	push	{r4, r5, r6, lr}
  SendACKonly;
     7e6:	4d17      	ldr	r5, [pc, #92]	; (844 <isScanning()+0x60>)
{
     7e8:	b082      	sub	sp, #8
  SendACKonly;
     7ea:	782b      	ldrb	r3, [r5, #0]
     7ec:	b10b      	cbz	r3, 7f2 <isScanning()+0xe>
  if(SerialMute) return;
  if((scanning)||(toggling)) serial->println("TRUE");
  else serial->println("FALSE");
}
     7ee:	b002      	add	sp, #8
     7f0:	bd70      	pop	{r4, r5, r6, pc}
  SendACKonly;
     7f2:	4b15      	ldr	r3, [pc, #84]	; (848 <isScanning()+0x64>)
     7f4:	4e15      	ldr	r6, [pc, #84]	; (84c <isScanning()+0x68>)
     7f6:	6819      	ldr	r1, [r3, #0]
     7f8:	6834      	ldr	r4, [r6, #0]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     7fa:	b169      	cbz	r1, 818 <isScanning()+0x34>
							  return write((const uint8_t *)str, strlen(str)); }
     7fc:	4608      	mov	r0, r1
     7fe:	9101      	str	r1, [sp, #4]
     800:	f008 fabe 	bl	8d80 <strlen>
     804:	6823      	ldr	r3, [r4, #0]
     806:	4602      	mov	r2, r0
     808:	9901      	ldr	r1, [sp, #4]
     80a:	685b      	ldr	r3, [r3, #4]
     80c:	4620      	mov	r0, r4
     80e:	4798      	blx	r3
  if(SerialMute) return;
     810:	782b      	ldrb	r3, [r5, #0]
     812:	2b00      	cmp	r3, #0
     814:	d1eb      	bne.n	7ee <isScanning()+0xa>
  else serial->println("FALSE");
     816:	6834      	ldr	r4, [r6, #0]
  if((scanning)||(toggling)) serial->println("TRUE");
     818:	4b0d      	ldr	r3, [pc, #52]	; (850 <isScanning()+0x6c>)
     81a:	781b      	ldrb	r3, [r3, #0]
     81c:	b913      	cbnz	r3, 824 <isScanning()+0x40>
     81e:	4b0d      	ldr	r3, [pc, #52]	; (854 <isScanning()+0x70>)
     820:	781b      	ldrb	r3, [r3, #0]
     822:	b15b      	cbz	r3, 83c <isScanning()+0x58>
     824:	6823      	ldr	r3, [r4, #0]
     826:	2204      	movs	r2, #4
     828:	490b      	ldr	r1, [pc, #44]	; (858 <isScanning()+0x74>)
     82a:	4620      	mov	r0, r4
     82c:	685b      	ldr	r3, [r3, #4]
     82e:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     830:	4620      	mov	r0, r4
}
     832:	b002      	add	sp, #8
     834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     838:	f003 bab6 	b.w	3da8 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     83c:	6823      	ldr	r3, [r4, #0]
     83e:	2205      	movs	r2, #5
     840:	4906      	ldr	r1, [pc, #24]	; (85c <isScanning()+0x78>)
     842:	e7f2      	b.n	82a <isScanning()+0x46>
     844:	2000afeb 	.word	0x2000afeb
     848:	2000a4dc 	.word	0x2000a4dc
     84c:	20008e14 	.word	0x20008e14
     850:	2000affa 	.word	0x2000affa
     854:	2000affc 	.word	0x2000affc
     858:	200003ac 	.word	0x200003ac
     85c:	200003b4 	.word	0x200003b4

00000860 <Debug(int)>:

void Debug(int Mode)
{
}
     860:	4770      	bx	lr
     862:	bf00      	nop

00000864 <Software_Reset()>:
  // in globals declaration section
  #define CPU_RESTART_ADDR (uint32_t *)0xE000ED0C
  #define CPU_RESTART_VAL 0x5FA0004
  #define CPU_RESTART (*CPU_RESTART_ADDR = CPU_RESTART_VAL);

  CPU_RESTART;
     864:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     868:	4a01      	ldr	r2, [pc, #4]	; (870 <Software_Reset()+0xc>)
     86a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
}
     86e:	4770      	bx	lr
     870:	05fa0004 	.word	0x05fa0004

00000874 <bootLoader()>:

// Vector to the boot loader
void bootLoader(void)
{
     874:	b508      	push	{r3, lr}
  _reboot_Teensyduino_();
     876:	f010 fcd3 	bl	11220 <___reboot_Teensyduino__veneer>
     87a:	bf00      	nop

0000087c <_GLOBAL__sub_I_Version>:
}
     87c:	b570      	push	{r4, r5, r6, lr}
SerialBuffer sb;
     87e:	4c16      	ldr	r4, [pc, #88]	; (8d8 <_GLOBAL__sub_I_Version+0x5c>)
    EEPROMClass()                        { eeprom_initialize(); }
     880:	f003 ff12 	bl	46a8 <eeprom_initialize>
     884:	4d15      	ldr	r5, [pc, #84]	; (8dc <_GLOBAL__sub_I_Version+0x60>)
     886:	4620      	mov	r0, r4
ThreadController control = ThreadController();
     888:	4e15      	ldr	r6, [pc, #84]	; (8e0 <_GLOBAL__sub_I_Version+0x64>)
SerialBuffer sb;
     88a:	f002 fe5b 	bl	3544 <SerialBuffer::SerialBuffer()>
     88e:	462a      	mov	r2, r5
     890:	4914      	ldr	r1, [pc, #80]	; (8e4 <_GLOBAL__sub_I_Version+0x68>)
     892:	4620      	mov	r0, r4
     894:	f005 febc 	bl	6610 <__aeabi_atexit>
    Timer() : ctr(0), tasks{} {}
     898:	2400      	movs	r4, #0
     89a:	4813      	ldr	r0, [pc, #76]	; (8e8 <_GLOBAL__sub_I_Version+0x6c>)
     89c:	f44f 72c0 	mov.w	r2, #384	; 0x180
     8a0:	4621      	mov	r1, r4
     8a2:	f840 4b04 	str.w	r4, [r0], #4
     8a6:	f007 ff1f 	bl	86e8 <memset>
ThreadController control = ThreadController();
     8aa:	4621      	mov	r1, r4
     8ac:	4630      	mov	r0, r6
     8ae:	f002 fcf3 	bl	3298 <ThreadController::ThreadController(long)>
     8b2:	4630      	mov	r0, r6
Thread SystemThread = Thread();
     8b4:	4e0d      	ldr	r6, [pc, #52]	; (8ec <_GLOBAL__sub_I_Version+0x70>)
ThreadController control = ThreadController();
     8b6:	462a      	mov	r2, r5
     8b8:	490d      	ldr	r1, [pc, #52]	; (8f0 <_GLOBAL__sub_I_Version+0x74>)
     8ba:	f005 fea9 	bl	6610 <__aeabi_atexit>
Thread SystemThread = Thread();
     8be:	4621      	mov	r1, r4
     8c0:	4622      	mov	r2, r4
     8c2:	4630      	mov	r0, r6
     8c4:	f002 fc84 	bl	31d0 <Thread::Thread(void (*)(), long)>
     8c8:	462a      	mov	r2, r5
     8ca:	4630      	mov	r0, r6
     8cc:	4909      	ldr	r1, [pc, #36]	; (8f4 <_GLOBAL__sub_I_Version+0x78>)
     8ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     8d2:	f005 be9d 	b.w	6610 <__aeabi_atexit>
     8d6:	bf00      	nop
     8d8:	2000abdc 	.word	0x2000abdc
     8dc:	20008634 	.word	0x20008634
     8e0:	2000a9f0 	.word	0x2000a9f0
     8e4:	00003561 	.word	0x00003561
     8e8:	2000ae4c 	.word	0x2000ae4c
     8ec:	2000a4e0 	.word	0x2000a4e0
     8f0:	00000169 	.word	0x00000169
     8f4:	00000151 	.word	0x00000151

000008f8 <ProcessSerial(bool)>:
{
     8f8:	b538      	push	{r3, r4, r5, lr}
  if (Serial1.available() > 0)
     8fa:	4d15      	ldr	r5, [pc, #84]	; (950 <ProcessSerial(bool)+0x58>)
{
     8fc:	4604      	mov	r4, r0
  if (Serial1.available() > 0)
     8fe:	4628      	mov	r0, r5
     900:	f002 fe76 	bl	35f0 <HardwareSerialIMXRT::available()>
     904:	2800      	cmp	r0, #0
     906:	dd07      	ble.n	918 <ProcessSerial(bool)+0x20>
    serial = &Serial1;
     908:	4b12      	ldr	r3, [pc, #72]	; (954 <ProcessSerial(bool)+0x5c>)
    PutCh(Serial1.read());
     90a:	4628      	mov	r0, r5
    serial = &Serial1;
     90c:	601d      	str	r5, [r3, #0]
    PutCh(Serial1.read());
     90e:	f002 fec1 	bl	3694 <HardwareSerialIMXRT::read()>
     912:	b2c0      	uxtb	r0, r0
     914:	f002 f932 	bl	2b7c <PutCh(char)>
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     918:	f005 fd14 	bl	6344 <usb_serial_available>
  if (Serial.available() > 0)
     91c:	2800      	cmp	r0, #0
     91e:	dc0b      	bgt.n	938 <ProcessSerial(bool)+0x40>
  if (!scan) return;
     920:	b904      	cbnz	r4, 924 <ProcessSerial(bool)+0x2c>
}
     922:	bd38      	pop	{r3, r4, r5, pc}
  if (RB_Commands(&RB) > 0) while (ProcessCommand() == 0); // Process until flag that there is nothing to do
     924:	480c      	ldr	r0, [pc, #48]	; (958 <ProcessSerial(bool)+0x60>)
     926:	f001 fee1 	bl	26ec <RB_Commands(Ring_Buffer*)>
     92a:	2800      	cmp	r0, #0
     92c:	ddf9      	ble.n	922 <ProcessSerial(bool)+0x2a>
     92e:	f001 ff73 	bl	2818 <ProcessCommand()>
     932:	2800      	cmp	r0, #0
     934:	d0fb      	beq.n	92e <ProcessSerial(bool)+0x36>
}
     936:	bd38      	pop	{r3, r4, r5, pc}
    serial = &Serial;
     938:	4b06      	ldr	r3, [pc, #24]	; (954 <ProcessSerial(bool)+0x5c>)
     93a:	4a08      	ldr	r2, [pc, #32]	; (95c <ProcessSerial(bool)+0x64>)
     93c:	601a      	str	r2, [r3, #0]
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     93e:	f005 fd45 	bl	63cc <usb_serial_getchar>
    PutCh(Serial.read());
     942:	b2c0      	uxtb	r0, r0
     944:	f002 f91a 	bl	2b7c <PutCh(char)>
  if (!scan) return;
     948:	2c00      	cmp	r4, #0
     94a:	d0ea      	beq.n	922 <ProcessSerial(bool)+0x2a>
     94c:	e7ea      	b.n	924 <ProcessSerial(bool)+0x2c>
     94e:	bf00      	nop
     950:	2000820c 	.word	0x2000820c
     954:	20008e14 	.word	0x20008e14
     958:	200094a4 	.word	0x200094a4
     95c:	200081fc 	.word	0x200081fc

00000960 <AD5593readWord(unsigned char, unsigned char)>:
{
     960:	b570      	push	{r4, r5, r6, lr}
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
     962:	2601      	movs	r6, #1
     964:	4605      	mov	r5, r0
		txBuffer[0] = (address << 1);
     966:	4c18      	ldr	r4, [pc, #96]	; (9c8 <AD5593readWord(unsigned char, unsigned char)+0x68>)
     968:	fa05 f306 	lsl.w	r3, r5, r6
  Wire.write(pb);
     96c:	4620      	mov	r0, r4
		transmitting = 1;
     96e:	f884 6130 	strb.w	r6, [r4, #304]	; 0x130
		txBufferLength = 1;
     972:	f884 612f 	strb.w	r6, [r4, #303]	; 0x12f
		txBuffer[0] = (address << 1);
     976:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
     97a:	f002 f951 	bl	2c20 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
     97e:	4631      	mov	r1, r6
     980:	4620      	mov	r0, r4
     982:	f002 fa25 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
  if(iStat != 0)
     986:	b9e0      	cbnz	r0, 9c2 <AD5593readWord(unsigned char, unsigned char)+0x62>
	uint8_t requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop);
	uint8_t requestFrom(uint8_t address, uint8_t quantity, bool sendStop) {
		return requestFrom(address, quantity, (uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(uint8_t address, uint8_t quantity) {
		return requestFrom(address, quantity, (uint8_t)1);
     988:	2202      	movs	r2, #2
     98a:	4633      	mov	r3, r6
     98c:	4629      	mov	r1, r5
     98e:	4620      	mov	r0, r4
     990:	f002 fa9e 	bl	2ed0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     994:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
     998:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
     99c:	4282      	cmp	r2, r0
     99e:	d210      	bcs.n	9c2 <AD5593readWord(unsigned char, unsigned char)+0x62>
		return rxBuffer[rxBufferIndex++];
     9a0:	1993      	adds	r3, r2, r6
     9a2:	18a1      	adds	r1, r4, r2
     9a4:	b2db      	uxtb	r3, r3
     9a6:	7e89      	ldrb	r1, [r1, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
     9a8:	4298      	cmp	r0, r3
  j = Wire.read() << 8;
     9aa:	ea4f 2101 	mov.w	r1, r1, lsl #8
		return rxBuffer[rxBufferIndex++];
     9ae:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		if (rxBufferIndex >= rxBufferLength) return -1;
     9b2:	d906      	bls.n	9c2 <AD5593readWord(unsigned char, unsigned char)+0x62>
		return rxBuffer[rxBufferIndex++];
     9b4:	4423      	add	r3, r4
     9b6:	3202      	adds	r2, #2
     9b8:	7e98      	ldrb	r0, [r3, #26]
     9ba:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
  j |= Wire.read();
     9be:	4308      	orrs	r0, r1
}
     9c0:	bd70      	pop	{r4, r5, r6, pc}
    return (-1);
     9c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
     9c6:	bd70      	pop	{r4, r5, r6, pc}
     9c8:	2000826c 	.word	0x2000826c

000009cc <UpdateADCvalue(unsigned char, ADCchan*, float*, float)>:
  if(revCVbias)
     9cc:	4b5f      	ldr	r3, [pc, #380]	; (b4c <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0x180>)
{
     9ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(revCVbias)
     9d2:	781b      	ldrb	r3, [r3, #0]
{
     9d4:	4680      	mov	r8, r0
     9d6:	460c      	mov	r4, r1
     9d8:	ed2d 8b02 	vpush	{d8}
     9dc:	b085      	sub	sp, #20
     9de:	eeb0 8a40 	vmov.f32	s16, s0
     9e2:	9202      	str	r2, [sp, #8]
  if(revCVbias)
     9e4:	b143      	cbz	r3, 9f8 <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0x2c>
    if(achan == &faims.CVmon) achan = &faims.BIASmon;
     9e6:	4b5a      	ldr	r3, [pc, #360]	; (b50 <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0x184>)
     9e8:	4299      	cmp	r1, r3
     9ea:	f000 80ac 	beq.w	b46 <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0x17a>
    else if(achan == &faims.BIASmon) achan = &faims.CVmon;
     9ee:	f103 0218 	add.w	r2, r3, #24
     9f2:	4291      	cmp	r1, r2
     9f4:	bf08      	it	eq
     9f6:	461c      	moveq	r4, r3
  if((achan->Chan & 0x80) != 0)
     9f8:	f994 3000 	ldrsb.w	r3, [r4]
     9fc:	7820      	ldrb	r0, [r4, #0]
     9fe:	2b00      	cmp	r3, #0
     a00:	9301      	str	r3, [sp, #4]
     a02:	db5a      	blt.n	aba <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0xee>
   if((iStat = AD5593write(addr, 0x02, (1 << chan))) != 0) return(-1);
     a04:	2701      	movs	r7, #1
     a06:	9a01      	ldr	r2, [sp, #4]
     a08:	9403      	str	r4, [sp, #12]
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     a0a:	250a      	movs	r5, #10
		txBuffer[0] = (address << 1);
     a0c:	fa08 f307 	lsl.w	r3, r8, r7
     a10:	fa07 fa02 	lsl.w	sl, r7, r2
  int i,j, val = 0;
     a14:	2600      	movs	r6, #0
     a16:	f8df 914c 	ldr.w	r9, [pc, #332]	; b64 <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0x198>
     a1a:	b2db      	uxtb	r3, r3
		return write((uint8_t)n);
     a1c:	f3ca 2b07 	ubfx	fp, sl, #8, #8
     a20:	fa5f fa8a 	uxtb.w	sl, sl
     a24:	461c      	mov	r4, r3
  Wire.write(pb);
     a26:	2102      	movs	r1, #2
     a28:	4648      	mov	r0, r9
		txBuffer[0] = (address << 1);
     a2a:	f889 40a5 	strb.w	r4, [r9, #165]	; 0xa5
		transmitting = 1;
     a2e:	f889 7130 	strb.w	r7, [r9, #304]	; 0x130
		txBufferLength = 1;
     a32:	f889 712f 	strb.w	r7, [r9, #303]	; 0x12f
     a36:	f002 f8f3 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
     a3a:	4659      	mov	r1, fp
     a3c:	4648      	mov	r0, r9
     a3e:	f002 f8ef 	bl	2c20 <TwoWire::write(unsigned char)>
     a42:	4651      	mov	r1, sl
     a44:	4648      	mov	r0, r9
     a46:	f002 f8eb 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
     a4a:	2101      	movs	r1, #1
     a4c:	4648      	mov	r0, r9
     a4e:	f002 f9bf 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
     a52:	4603      	mov	r3, r0
   int i = AD5593readWord(addr, 0x40);
     a54:	2140      	movs	r1, #64	; 0x40
     a56:	4640      	mov	r0, r8
   if((iStat = AD5593write(addr, 0x02, (1 << chan))) != 0) return(-1);
     a58:	2b00      	cmp	r3, #0
     a5a:	d16e      	bne.n	b3a <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0x16e>
   int i = AD5593readWord(addr, 0x40);
     a5c:	f7ff ff80 	bl	960 <AD5593readWord(unsigned char, unsigned char)>
   if(((i >> 12) & 0x7) != chan) return(-1);
     a60:	9a01      	ldr	r2, [sp, #4]
   i <<= 4;
     a62:	0103      	lsls	r3, r0, #4
   if(((i >> 12) & 0x7) != chan) return(-1);
     a64:	f3c0 3002 	ubfx	r0, r0, #12, #3
   return(i & 0xFFFF);
     a68:	b29b      	uxth	r3, r3
   if(((i >> 12) & 0x7) != chan) return(-1);
     a6a:	4282      	cmp	r2, r0
    val += j;
     a6c:	441e      	add	r6, r3
   if(((i >> 12) & 0x7) != chan) return(-1);
     a6e:	d164      	bne.n	b3a <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0x16e>
  for (i = 0; i < num; i++) 
     a70:	3d01      	subs	r5, #1
     a72:	d1d8      	bne.n	a26 <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0x5a>
  return (val / num);
     a74:	4b37      	ldr	r3, [pc, #220]	; (b54 <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0x188>)
    if(*value == -1) *value = fval;
     a76:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
     a7a:	9c03      	ldr	r4, [sp, #12]
     a7c:	fba3 3606 	umull	r3, r6, r3, r6
     a80:	9b02      	ldr	r3, [sp, #8]
  return (Counts - ad->b) / ad->m;
     a82:	ed94 7a02 	vldr	s14, [r4, #8]
  return (val / num);
     a86:	08f6      	lsrs	r6, r6, #3
  return (Counts - ad->b) / ad->m;
     a88:	edd4 5a01 	vldr	s11, [r4, #4]
     a8c:	edd3 6a00 	vldr	s13, [r3]
     a90:	ee07 6a90 	vmov	s15, r6
     a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     a98:	eef4 6a46 	vcmp.f32	s13, s12
     a9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
     aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     aa4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
     aa8:	d136      	bne.n	b18 <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0x14c>
    return true;
     aaa:	2001      	movs	r0, #1
    if(*value == -1) *value = fval;
     aac:	ed83 7a00 	vstr	s14, [r3]
}
     ab0:	b005      	add	sp, #20
     ab2:	ecbd 8b02 	vpop	{d8}
     ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     aba:	f04f 0840 	mov.w	r8, #64	; 0x40
    val = 0;
     abe:	f04f 0900 	mov.w	r9, #0
     ac2:	4e25      	ldr	r6, [pc, #148]	; (b58 <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0x18c>)
// Wait for a number of microseconds.  During this time, interrupts remain
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     ac4:	4f25      	ldr	r7, [pc, #148]	; (b5c <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0x190>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     ac6:	4d26      	ldr	r5, [pc, #152]	; (b60 <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0x194>)
      val += analogRead(achan->Chan & 0x7F);
     ac8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
     acc:	f003 faf6 	bl	40bc <analogRead>
	uint32_t begin = ARM_DWT_CYCCNT;
     ad0:	6879      	ldr	r1, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     ad2:	6832      	ldr	r2, [r6, #0]
     ad4:	4481      	add	r9, r0
     ad6:	fba5 3202 	umull	r3, r2, r5, r2
     ada:	0c92      	lsrs	r2, r2, #18
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     adc:	687b      	ldr	r3, [r7, #4]
     ade:	1a5b      	subs	r3, r3, r1
     ae0:	429a      	cmp	r2, r3
     ae2:	d8fb      	bhi.n	adc <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0x110>
    for(int i=0;i<64;i++) 
     ae4:	f1b8 0801 	subs.w	r8, r8, #1
     ae8:	d001      	beq.n	aee <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0x122>
      val += analogRead(achan->Chan & 0x7F);
     aea:	7820      	ldrb	r0, [r4, #0]
     aec:	e7ec      	b.n	ac8 <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0xfc>
    val /= 4;
     aee:	f1b9 0f00 	cmp.w	r9, #0
    if(*value == -1) *value = fval;
     af2:	9b02      	ldr	r3, [sp, #8]
     af4:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
     af8:	ed94 7a02 	vldr	s14, [r4, #8]
    val /= 4;
     afc:	bfb8      	it	lt
     afe:	f109 0903 	addlt.w	r9, r9, #3
     b02:	edd4 5a01 	vldr	s11, [r4, #4]
    if(*value == -1) *value = fval;
     b06:	edd3 6a00 	vldr	s13, [r3]
    val /= 4;
     b0a:	ea4f 09a9 	mov.w	r9, r9, asr #2
     b0e:	ee07 9a90 	vmov	s15, r9
     b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     b16:	e7bf      	b.n	a98 <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0xcc>
    else *value = filter * fval + (1 - filter) * *value;
     b18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    return true;
     b1c:	2001      	movs	r0, #1
    else *value = filter * fval + (1 - filter) * *value;
     b1e:	9b02      	ldr	r3, [sp, #8]
     b20:	ee77 7ac8 	vsub.f32	s15, s15, s16
     b24:	ee67 7aa6 	vmul.f32	s15, s15, s13
     b28:	eee8 7a07 	vfma.f32	s15, s16, s14
     b2c:	edc3 7a00 	vstr	s15, [r3]
}
     b30:	b005      	add	sp, #20
     b32:	ecbd 8b02 	vpop	{d8}
     b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
     b3a:	2000      	movs	r0, #0
}
     b3c:	b005      	add	sp, #20
     b3e:	ecbd 8b02 	vpop	{d8}
     b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(achan == &faims.CVmon) achan = &faims.BIASmon;
     b46:	3418      	adds	r4, #24
     b48:	e756      	b.n	9f8 <UpdateADCvalue(unsigned char, ADCchan*, float*, float)+0x2c>
     b4a:	bf00      	nop
     b4c:	2000aff6 	.word	0x2000aff6
     b50:	2000ab44 	.word	0x2000ab44
     b54:	cccccccd 	.word	0xcccccccd
     b58:	20008104 	.word	0x20008104
     b5c:	e0001000 	.word	0xe0001000
     b60:	431bde83 	.word	0x431bde83
     b64:	2000826c 	.word	0x2000826c

00000b68 <AD5593init(signed char)>:
{
     b68:	b570      	push	{r4, r5, r6, lr}
		transmitting = 1;
     b6a:	2501      	movs	r5, #1
		txBuffer[0] = (address << 1);
     b6c:	4c70      	ldr	r4, [pc, #448]	; (d30 <AD5593init(signed char)+0x1c8>)
  Wire.write(pb);
     b6e:	2103      	movs	r1, #3
     b70:	fa00 f605 	lsl.w	r6, r0, r5
     b74:	4620      	mov	r0, r4
		transmitting = 1;
     b76:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
		txBuffer[0] = (address << 1);
     b7a:	b2f6      	uxtb	r6, r6
		txBufferLength = 1;
     b7c:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
		txBuffer[0] = (address << 1);
     b80:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
     b84:	f002 f84c 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
     b88:	4629      	mov	r1, r5
     b8a:	4620      	mov	r0, r4
     b8c:	f002 f848 	bl	2c20 <TwoWire::write(unsigned char)>
     b90:	2100      	movs	r1, #0
     b92:	4620      	mov	r0, r4
     b94:	f002 f844 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
     b98:	4629      	mov	r1, r5
     b9a:	4620      	mov	r0, r4
     b9c:	f002 f918 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
     ba0:	210b      	movs	r1, #11
     ba2:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
     ba4:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
		transmitting = 1;
     ba8:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
		txBufferLength = 1;
     bac:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
     bb0:	f002 f836 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
     bb4:	2102      	movs	r1, #2
     bb6:	4620      	mov	r0, r4
     bb8:	f002 f832 	bl	2c20 <TwoWire::write(unsigned char)>
     bbc:	2100      	movs	r1, #0
     bbe:	4620      	mov	r0, r4
     bc0:	f002 f82e 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
     bc4:	4629      	mov	r1, r5
     bc6:	4620      	mov	r0, r4
     bc8:	f002 f902 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
     bcc:	2107      	movs	r1, #7
     bce:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
     bd0:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
		transmitting = 1;
     bd4:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
		txBufferLength = 1;
     bd8:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
     bdc:	f002 f820 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
     be0:	2100      	movs	r1, #0
     be2:	4620      	mov	r0, r4
     be4:	f002 f81c 	bl	2c20 <TwoWire::write(unsigned char)>
     be8:	2100      	movs	r1, #0
     bea:	4620      	mov	r0, r4
     bec:	f002 f818 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
     bf0:	4629      	mov	r1, r5
     bf2:	4620      	mov	r0, r4
     bf4:	f002 f8ec 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
     bf8:	2105      	movs	r1, #5
     bfa:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
     bfc:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
		transmitting = 1;
     c00:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
		txBufferLength = 1;
     c04:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
     c08:	f002 f80a 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
     c0c:	2100      	movs	r1, #0
     c0e:	4620      	mov	r0, r4
     c10:	f002 f806 	bl	2c20 <TwoWire::write(unsigned char)>
     c14:	2105      	movs	r1, #5
     c16:	4620      	mov	r0, r4
     c18:	f002 f802 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
     c1c:	4629      	mov	r1, r5
     c1e:	4620      	mov	r0, r4
     c20:	f002 f8d6 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
     c24:	2104      	movs	r1, #4
     c26:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
     c28:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
		transmitting = 1;
     c2c:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
		txBufferLength = 1;
     c30:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
     c34:	f001 fff4 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
     c38:	2100      	movs	r1, #0
     c3a:	4620      	mov	r0, r4
     c3c:	f001 fff0 	bl	2c20 <TwoWire::write(unsigned char)>
     c40:	210a      	movs	r1, #10
     c42:	4620      	mov	r0, r4
     c44:	f001 ffec 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
     c48:	4629      	mov	r1, r5
     c4a:	4620      	mov	r0, r4
     c4c:	f002 f8c0 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
     c50:	2108      	movs	r1, #8
     c52:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
     c54:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
		transmitting = 1;
     c58:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
		txBufferLength = 1;
     c5c:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
     c60:	f001 ffde 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
     c64:	2100      	movs	r1, #0
     c66:	4620      	mov	r0, r4
     c68:	f001 ffda 	bl	2c20 <TwoWire::write(unsigned char)>
     c6c:	2130      	movs	r1, #48	; 0x30
     c6e:	4620      	mov	r0, r4
     c70:	f001 ffd6 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
     c74:	4629      	mov	r1, r5
     c76:	4620      	mov	r0, r4
     c78:	f002 f8aa 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
     c7c:	2106      	movs	r1, #6
     c7e:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
     c80:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
		transmitting = 1;
     c84:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
		txBufferLength = 1;
     c88:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
     c8c:	f001 ffc8 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
     c90:	2100      	movs	r1, #0
     c92:	4620      	mov	r0, r4
     c94:	f001 ffc4 	bl	2c20 <TwoWire::write(unsigned char)>
     c98:	2100      	movs	r1, #0
     c9a:	4620      	mov	r0, r4
     c9c:	f001 ffc0 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
     ca0:	4629      	mov	r1, r5
     ca2:	4620      	mov	r0, r4
     ca4:	f002 f894 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
     ca8:	2110      	movs	r1, #16
     caa:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
     cac:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
		transmitting = 1;
     cb0:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
		txBufferLength = 1;
     cb4:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
     cb8:	f001 ffb2 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
     cbc:	2188      	movs	r1, #136	; 0x88
     cbe:	4620      	mov	r0, r4
     cc0:	f001 ffae 	bl	2c20 <TwoWire::write(unsigned char)>
     cc4:	2100      	movs	r1, #0
     cc6:	4620      	mov	r0, r4
     cc8:	f001 ffaa 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
     ccc:	4629      	mov	r1, r5
     cce:	4620      	mov	r0, r4
     cd0:	f002 f87e 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
     cd4:	2112      	movs	r1, #18
     cd6:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
     cd8:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
		transmitting = 1;
     cdc:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
		txBufferLength = 1;
     ce0:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
     ce4:	f001 ff9c 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
     ce8:	21a8      	movs	r1, #168	; 0xa8
     cea:	4620      	mov	r0, r4
     cec:	f001 ff98 	bl	2c20 <TwoWire::write(unsigned char)>
     cf0:	2100      	movs	r1, #0
     cf2:	4620      	mov	r0, r4
     cf4:	f001 ff94 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
     cf8:	4629      	mov	r1, r5
     cfa:	4620      	mov	r0, r4
     cfc:	f002 f868 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
     d00:	2109      	movs	r1, #9
     d02:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
     d04:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
		transmitting = 1;
     d08:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
		txBufferLength = 1;
     d0c:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
     d10:	f001 ff86 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
     d14:	2100      	movs	r1, #0
     d16:	4620      	mov	r0, r4
     d18:	f001 ff82 	bl	2c20 <TwoWire::write(unsigned char)>
     d1c:	2100      	movs	r1, #0
     d1e:	4620      	mov	r0, r4
     d20:	f001 ff7e 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
     d24:	4629      	mov	r1, r5
     d26:	4620      	mov	r0, r4
}
     d28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     d2c:	f002 b850 	b.w	2dd0 <TwoWire::endTransmission(unsigned char)>
     d30:	2000826c 	.word	0x2000826c

00000d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>:
{
     d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d38:	461d      	mov	r5, r3
  if(revCVbias)
     d3a:	4b3e      	ldr	r3, [pc, #248]	; (e34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)+0x100>)
{
     d3c:	4614      	mov	r4, r2
     d3e:	f89d 2018 	ldrb.w	r2, [sp, #24]
  if(revCVbias)
     d42:	781b      	ldrb	r3, [r3, #0]
     d44:	b13b      	cbz	r3, d56 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)+0x22>
    if(dchan == &faims.CVsetCtrl) dchan = &faims.BIASsetCtrl;
     d46:	4b3c      	ldr	r3, [pc, #240]	; (e38 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)+0x104>)
     d48:	4299      	cmp	r1, r3
     d4a:	d070      	beq.n	e2e <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)+0xfa>
    else if(dchan == &faims.BIASsetCtrl) dchan = &faims.CVsetCtrl;
     d4c:	f103 0618 	add.w	r6, r3, #24
     d50:	42b1      	cmp	r1, r6
     d52:	bf08      	it	eq
     d54:	4619      	moveq	r1, r3
  if((update) || (*value != *svalue))
     d56:	ed94 7a00 	vldr	s14, [r4]
     d5a:	b94a      	cbnz	r2, d70 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)+0x3c>
     d5c:	edd5 7a00 	vldr	s15, [r5]
     d60:	eeb4 7a67 	vcmp.f32	s14, s15
     d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d68:	d102      	bne.n	d70 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)+0x3c>
  return false;
     d6a:	4610      	mov	r0, r2
}
     d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((TWIadd & 0x60) == 0x60) MCP4725(TWIadd,0x60,Value2Counts(*value,dchan));
     d70:	f000 0360 	and.w	r3, r0, #96	; 0x60
  counts = (Value * DC->m) + DC->b;
     d74:	edd1 6a01 	vldr	s13, [r1, #4]
     d78:	edd1 7a02 	vldr	s15, [r1, #8]
     d7c:	2b60      	cmp	r3, #96	; 0x60
     d7e:	d031      	beq.n	de4 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)+0xb0>
     d80:	eee6 7a87 	vfma.f32	s15, s13, s14
    else AD5593writeDAC(TWIadd, dchan->Chan, Value2Counts(*value,dchan));
     d84:	f991 1000 	ldrsb.w	r1, [r1]
   d = (val>>4) | (chan << 12) | 0x8000;
     d88:	4f2c      	ldr	r7, [pc, #176]	; (e3c <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)+0x108>)
		txBuffer[0] = (address << 1);
     d8a:	0040      	lsls	r0, r0, #1
     d8c:	030a      	lsls	r2, r1, #12
     d8e:	4e2c      	ldr	r6, [pc, #176]	; (e40 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)+0x10c>)
   return(AD5593write(addr, 0x10 | chan, d));
     d90:	f041 0110 	orr.w	r1, r1, #16
		transmitting = 1;
     d94:	f04f 0801 	mov.w	r8, #1
		txBuffer[0] = (address << 1);
     d98:	f886 00a5 	strb.w	r0, [r6, #165]	; 0xa5
  Wire.write(pb);
     d9c:	4630      	mov	r0, r6
     d9e:	b2c9      	uxtb	r1, r1
		transmitting = 1;
     da0:	f886 8130 	strb.w	r8, [r6, #304]	; 0x130
  counts = (Value * DC->m) + DC->b;
     da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		txBufferLength = 1;
     da8:	f886 812f 	strb.w	r8, [r6, #303]	; 0x12f
     dac:	ee17 3a90 	vmov	r3, s15
   d = (val>>4) | (chan << 12) | 0x8000;
     db0:	f383 0310 	usat	r3, #16, r3
     db4:	ea42 1223 	orr.w	r2, r2, r3, asr #4
     db8:	4317      	orrs	r7, r2
  Wire.write(pb);
     dba:	f001 ff31 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
     dbe:	4630      	mov	r0, r6
   d = (val>>4) | (chan << 12) | 0x8000;
     dc0:	b23f      	sxth	r7, r7
     dc2:	f3c7 2107 	ubfx	r1, r7, #8, #8
     dc6:	f001 ff2b 	bl	2c20 <TwoWire::write(unsigned char)>
     dca:	4630      	mov	r0, r6
     dcc:	b2f9      	uxtb	r1, r7
     dce:	f001 ff27 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
     dd2:	4641      	mov	r1, r8
     dd4:	4630      	mov	r0, r6
     dd6:	f001 fffb 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
    *svalue = *value;
     dda:	6823      	ldr	r3, [r4, #0]
    return true;
     ddc:	2001      	movs	r0, #1
    *svalue = *value;
     dde:	602b      	str	r3, [r5, #0]
}
     de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  counts = (Value * DC->m) + DC->b;
     de4:	eee6 7a87 	vfma.f32	s15, s13, s14
  Wire.write(cmd);
     de8:	4619      	mov	r1, r3
		txBuffer[0] = (address << 1);
     dea:	4f15      	ldr	r7, [pc, #84]	; (e40 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)+0x10c>)
     dec:	0040      	lsls	r0, r0, #1
		transmitting = 1;
     dee:	f04f 0801 	mov.w	r8, #1
		txBuffer[0] = (address << 1);
     df2:	f887 00a5 	strb.w	r0, [r7, #165]	; 0xa5
     df6:	4638      	mov	r0, r7
		transmitting = 1;
     df8:	f887 8130 	strb.w	r8, [r7, #304]	; 0x130
		txBufferLength = 1;
     dfc:	f887 812f 	strb.w	r8, [r7, #303]	; 0x12f
  counts = (Value * DC->m) + DC->b;
     e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
     e04:	ee17 3a90 	vmov	r3, s15
    if((TWIadd & 0x60) == 0x60) MCP4725(TWIadd,0x60,Value2Counts(*value,dchan));
     e08:	f383 0310 	usat	r3, #16, r3
     e0c:	b29e      	uxth	r6, r3
  Wire.write(cmd);
     e0e:	f001 ff07 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
     e12:	4638      	mov	r0, r7
     e14:	0a31      	lsrs	r1, r6, #8
     e16:	f001 ff03 	bl	2c20 <TwoWire::write(unsigned char)>
     e1a:	f006 01f0 	and.w	r1, r6, #240	; 0xf0
     e1e:	4638      	mov	r0, r7
     e20:	f001 fefe 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
     e24:	4641      	mov	r1, r8
     e26:	4638      	mov	r0, r7
     e28:	f001 ffd2 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
}
     e2c:	e7d5      	b.n	dda <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)+0xa6>
    if(dchan == &faims.CVsetCtrl) dchan = &faims.BIASsetCtrl;
     e2e:	3118      	adds	r1, #24
     e30:	e791      	b.n	d56 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)+0x22>
     e32:	bf00      	nop
     e34:	2000aff6 	.word	0x2000aff6
     e38:	2000ab38 	.word	0x2000ab38
     e3c:	ffff8000 	.word	0xffff8000
     e40:	2000826c 	.word	0x2000826c

00000e44 <toggleCV(void*)>:
{
     e44:	b570      	push	{r4, r5, r6, lr}
  if(!toggling) return false;
     e46:	4d15      	ldr	r5, [pc, #84]	; (e9c <toggleCV(void*)+0x58>)
{
     e48:	b082      	sub	sp, #8
  if(!toggling) return false;
     e4a:	782c      	ldrb	r4, [r5, #0]
     e4c:	b1f4      	cbz	r4, e8c <toggleCV(void*)+0x48>
  if(CVstate) faims.CV = savedCV;
     e4e:	4914      	ldr	r1, [pc, #80]	; (ea0 <toggleCV(void*)+0x5c>)
     e50:	780b      	ldrb	r3, [r1, #0]
     e52:	b9f3      	cbnz	r3, e92 <toggleCV(void*)+0x4e>
  else faims.CV = faims.CValt;
     e54:	4a13      	ldr	r2, [pc, #76]	; (ea4 <toggleCV(void*)+0x60>)
     e56:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
  CVstate = !CVstate;
     e58:	f083 0301 	eor.w	r3, r3, #1
  if(scanAbort) faims.CV = savedCV;
     e5c:	4e12      	ldr	r6, [pc, #72]	; (ea8 <toggleCV(void*)+0x64>)
     e5e:	6290      	str	r0, [r2, #40]	; 0x28
  CVstate = !CVstate;
     e60:	700b      	strb	r3, [r1, #0]
  if(scanAbort) faims.CV = savedCV;
     e62:	7833      	ldrb	r3, [r6, #0]
     e64:	b113      	cbz	r3, e6c <toggleCV(void*)+0x28>
     e66:	4b11      	ldr	r3, [pc, #68]	; (eac <toggleCV(void*)+0x68>)
     e68:	681b      	ldr	r3, [r3, #0]
     e6a:	6293      	str	r3, [r2, #40]	; 0x28
  UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
     e6c:	f892 005c 	ldrb.w	r0, [r2, #92]	; 0x5c
     e70:	2301      	movs	r3, #1
     e72:	4a0f      	ldr	r2, [pc, #60]	; (eb0 <toggleCV(void*)+0x6c>)
     e74:	9300      	str	r3, [sp, #0]
     e76:	f102 0198 	add.w	r1, r2, #152	; 0x98
     e7a:	4b0e      	ldr	r3, [pc, #56]	; (eb4 <toggleCV(void*)+0x70>)
     e7c:	f7ff ff5a 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
  if(!scanAbort) return true;
     e80:	7833      	ldrb	r3, [r6, #0]
     e82:	b11b      	cbz	r3, e8c <toggleCV(void*)+0x48>
  scanAbort = false;
     e84:	2300      	movs	r3, #0
  return false;
     e86:	461c      	mov	r4, r3
  scanAbort = false;
     e88:	7033      	strb	r3, [r6, #0]
  toggling = false;
     e8a:	702b      	strb	r3, [r5, #0]
}
     e8c:	4620      	mov	r0, r4
     e8e:	b002      	add	sp, #8
     e90:	bd70      	pop	{r4, r5, r6, pc}
  if(CVstate) faims.CV = savedCV;
     e92:	4a06      	ldr	r2, [pc, #24]	; (eac <toggleCV(void*)+0x68>)
     e94:	6810      	ldr	r0, [r2, #0]
     e96:	4a03      	ldr	r2, [pc, #12]	; (ea4 <toggleCV(void*)+0x60>)
     e98:	e7de      	b.n	e58 <toggleCV(void*)+0x14>
     e9a:	bf00      	nop
     e9c:	2000affc 	.word	0x2000affc
     ea0:	2000afea 	.word	0x2000afea
     ea4:	2000aa78 	.word	0x2000aa78
     ea8:	2000aff9 	.word	0x2000aff9
     eac:	2000abd8 	.word	0x2000abd8
     eb0:	2000aaa0 	.word	0x2000aaa0
     eb4:	2000ae10 	.word	0x2000ae10

00000eb8 <scanCV(void*)>:
  if(!scanning) return false;
     eb8:	4b26      	ldr	r3, [pc, #152]	; (f54 <scanCV(void*)+0x9c>)
{
     eba:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(!scanning) return false;
     ebc:	781c      	ldrb	r4, [r3, #0]
{
     ebe:	b083      	sub	sp, #12
  if(!scanning) return false;
     ec0:	b1e4      	cbz	r4, efc <scanCV(void*)+0x44>
  if((scanAbort) || ((millis() - startTime) > (unsigned int)faims.Duration))
     ec2:	4d25      	ldr	r5, [pc, #148]	; (f58 <scanCV(void*)+0xa0>)
     ec4:	782a      	ldrb	r2, [r5, #0]
     ec6:	2a00      	cmp	r2, #0
     ec8:	d141      	bne.n	f4e <scanCV(void*)+0x96>
     eca:	4924      	ldr	r1, [pc, #144]	; (f5c <scanCV(void*)+0xa4>)
	return systick_millis_count;
     ecc:	4f24      	ldr	r7, [pc, #144]	; (f60 <scanCV(void*)+0xa8>)
     ece:	680e      	ldr	r6, [r1, #0]
     ed0:	683a      	ldr	r2, [r7, #0]
     ed2:	4824      	ldr	r0, [pc, #144]	; (f64 <scanCV(void*)+0xac>)
     ed4:	1b92      	subs	r2, r2, r6
     ed6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
     ed8:	428a      	cmp	r2, r1
     eda:	d912      	bls.n	f02 <scanCV(void*)+0x4a>
    UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
     edc:	2401      	movs	r4, #1
    faims.CV = savedCV;
     ede:	4922      	ldr	r1, [pc, #136]	; (f68 <scanCV(void*)+0xb0>)
    UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
     ee0:	4a22      	ldr	r2, [pc, #136]	; (f6c <scanCV(void*)+0xb4>)
     ee2:	9400      	str	r4, [sp, #0]
    scanAbort = scanning = false;
     ee4:	2400      	movs	r4, #0
     ee6:	701c      	strb	r4, [r3, #0]
    faims.CV = savedCV;
     ee8:	680b      	ldr	r3, [r1, #0]
    UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
     eea:	f102 0198 	add.w	r1, r2, #152	; 0x98
    scanAbort = scanning = false;
     eee:	702c      	strb	r4, [r5, #0]
    faims.CV = savedCV;
     ef0:	6283      	str	r3, [r0, #40]	; 0x28
    UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
     ef2:	4b1f      	ldr	r3, [pc, #124]	; (f70 <scanCV(void*)+0xb8>)
     ef4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
     ef8:	f7ff ff1c 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
}
     efc:	4620      	mov	r0, r4
     efe:	b003      	add	sp, #12
     f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f02:	683b      	ldr	r3, [r7, #0]
  faims.CV = faims.CVstart + (faims.CVstop - faims.CVstart) * (float)(millis() - startTime) / (float)faims.Duration;
     f04:	ee07 1a90 	vmov	s15, r1
     f08:	ed90 6a11 	vldr	s12, [r0, #68]	; 0x44
  UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
     f0c:	2101      	movs	r1, #1
  faims.CV = faims.CVstart + (faims.CVstop - faims.CVstart) * (float)(millis() - startTime) / (float)faims.Duration;
     f0e:	1b9b      	subs	r3, r3, r6
     f10:	ed90 7a12 	vldr	s14, [r0, #72]	; 0x48
     f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
     f18:	9100      	str	r1, [sp, #0]
  faims.CV = faims.CVstart + (faims.CVstop - faims.CVstart) * (float)(millis() - startTime) / (float)faims.Duration;
     f1a:	ee06 3a90 	vmov	s13, r3
     f1e:	ee37 7a46 	vsub.f32	s14, s14, s12
  UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
     f22:	f100 0228 	add.w	r2, r0, #40	; 0x28
     f26:	f100 01c0 	add.w	r1, r0, #192	; 0xc0
  faims.CV = faims.CVstart + (faims.CVstop - faims.CVstart) * (float)(millis() - startTime) / (float)faims.Duration;
     f2a:	eef8 6a66 	vcvt.f32.u32	s13, s13
  UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
     f2e:	4b10      	ldr	r3, [pc, #64]	; (f70 <scanCV(void*)+0xb8>)
  faims.CV = faims.CVstart + (faims.CVstop - faims.CVstart) * (float)(millis() - startTime) / (float)faims.Duration;
     f30:	ee27 7a26 	vmul.f32	s14, s14, s13
     f34:	eec7 6a27 	vdiv.f32	s13, s14, s15
     f38:	ee76 7a86 	vadd.f32	s15, s13, s12
     f3c:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
  UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
     f40:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
     f44:	f7ff fef6 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
}
     f48:	4620      	mov	r0, r4
     f4a:	b003      	add	sp, #12
     f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f4e:	4805      	ldr	r0, [pc, #20]	; (f64 <scanCV(void*)+0xac>)
     f50:	e7c4      	b.n	edc <scanCV(void*)+0x24>
     f52:	bf00      	nop
     f54:	2000affa 	.word	0x2000affa
     f58:	2000aff9 	.word	0x2000aff9
     f5c:	2000ae38 	.word	0x2000ae38
     f60:	2000ae44 	.word	0x2000ae44
     f64:	2000aa78 	.word	0x2000aa78
     f68:	2000abd8 	.word	0x2000abd8
     f6c:	2000aaa0 	.word	0x2000aaa0
     f70:	2000ae10 	.word	0x2000ae10

00000f74 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)>:
  ProcessSerial(false);
  control.run();
}

int CalibratePoint(uint8_t TWIadd, DACchan *dacchan, ADCchan *adcchan, float *V)
{
     f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f78:	b087      	sub	sp, #28
     f7a:	460c      	mov	r4, r1
     f7c:	4681      	mov	r9, r0
  char   *Token;
  String sToken;
     f7e:	2100      	movs	r1, #0
     f80:	a803      	add	r0, sp, #12
{
     f82:	4616      	mov	r6, r2
     f84:	461f      	mov	r7, r3
  String sToken;
     f86:	f002 fff1 	bl	3f6c <String::String(char const*)>
  int    val;

  // Set value and ask for user to enter actual value read
  if(dacchan !=NULL) 
     f8a:	b3c4      	cbz	r4, ffe <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x8a>
  {
    if((TWIadd & 0x60) == 0x60) MCP4725(TWIadd,0x60,Value2Counts(*V,dacchan));
     f8c:	f009 0160 	and.w	r1, r9, #96	; 0x60
  counts = (Value * DC->m) + DC->b;
     f90:	edd7 6a00 	vldr	s13, [r7]
     f94:	ed94 7a01 	vldr	s14, [r4, #4]
     f98:	2960      	cmp	r1, #96	; 0x60
     f9a:	edd4 7a02 	vldr	s15, [r4, #8]
     f9e:	f000 80cb 	beq.w	1138 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x1c4>
     fa2:	eee6 7a87 	vfma.f32	s15, s13, s14
    else AD5593writeDAC(TWIadd, dacchan->Chan, Value2Counts(*V,dacchan));
     fa6:	f994 3000 	ldrsb.w	r3, [r4]
   d = (val>>4) | (chan << 12) | 0x8000;
     faa:	4c77      	ldr	r4, [pc, #476]	; (1188 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x214>)
		transmitting = 1;
     fac:	f04f 0801 	mov.w	r8, #1
     fb0:	0318      	lsls	r0, r3, #12
   return(AD5593write(addr, 0x10 | chan, d));
     fb2:	f043 0310 	orr.w	r3, r3, #16
		txBuffer[0] = (address << 1);
     fb6:	4d75      	ldr	r5, [pc, #468]	; (118c <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x218>)
  Wire.write(pb);
     fb8:	b2d9      	uxtb	r1, r3
		transmitting = 1;
     fba:	f885 8130 	strb.w	r8, [r5, #304]	; 0x130
  counts = (Value * DC->m) + DC->b;
     fbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		txBufferLength = 1;
     fc2:	f885 812f 	strb.w	r8, [r5, #303]	; 0x12f
     fc6:	ee17 3a90 	vmov	r3, s15
   d = (val>>4) | (chan << 12) | 0x8000;
     fca:	f383 0310 	usat	r3, #16, r3
     fce:	ea40 1023 	orr.w	r0, r0, r3, asr #4
		txBuffer[0] = (address << 1);
     fd2:	fa09 f308 	lsl.w	r3, r9, r8
     fd6:	4304      	orrs	r4, r0
     fd8:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
  Wire.write(pb);
     fdc:	4628      	mov	r0, r5
   d = (val>>4) | (chan << 12) | 0x8000;
     fde:	b224      	sxth	r4, r4
  Wire.write(pb);
     fe0:	f001 fe1e 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
     fe4:	4628      	mov	r0, r5
     fe6:	f3c4 2107 	ubfx	r1, r4, #8, #8
     fea:	f001 fe19 	bl	2c20 <TwoWire::write(unsigned char)>
     fee:	b2e1      	uxtb	r1, r4
     ff0:	4628      	mov	r0, r5
     ff2:	f001 fe15 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
     ff6:	4641      	mov	r1, r8
     ff8:	4628      	mov	r0, r5
     ffa:	f001 fee9 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
  }
  serial->print("Enter actual value: ");
     ffe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 11a8 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x234>
    1002:	2214      	movs	r2, #20
    1004:	4962      	ldr	r1, [pc, #392]	; (1190 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x21c>)
    1006:	f8d8 0000 	ldr.w	r0, [r8]
  control.run();
    100a:	4d62      	ldr	r5, [pc, #392]	; (1194 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x220>)
    100c:	6803      	ldr	r3, [r0, #0]
    100e:	685b      	ldr	r3, [r3, #4]
    1010:	4798      	blx	r3
    1012:	e004      	b.n	101e <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0xaa>
  ProcessSerial(false);
    1014:	f7ff fc70 	bl	8f8 <ProcessSerial(bool)>
  control.run();
    1018:	4628      	mov	r0, r5
    101a:	f002 f913 	bl	3244 <ThreadController::run()>
  while((Token = GetToken(true)) == NULL) CalibrateLoop();
    101e:	2001      	movs	r0, #1
    1020:	f001 fb90 	bl	2744 <GetToken(bool)>
    1024:	4604      	mov	r4, r0
    1026:	2800      	cmp	r0, #0
    1028:	d0f4      	beq.n	1014 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0xa0>
  sToken = Token;
    102a:	4601      	mov	r1, r0
    102c:	a803      	add	r0, sp, #12
    102e:	f002 fff7 	bl	4020 <String::operator=(char const*)>
  serial->println(Token);
    1032:	f8d8 5000 	ldr.w	r5, [r8]
    1036:	4620      	mov	r0, r4
    1038:	f007 fea2 	bl	8d80 <strlen>
    103c:	682b      	ldr	r3, [r5, #0]
    103e:	4602      	mov	r2, r0
    1040:	4621      	mov	r1, r4
    1042:	685b      	ldr	r3, [r3, #4]
    1044:	4628      	mov	r0, r5
    1046:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1048:	4628      	mov	r0, r5
    104a:	f002 fead 	bl	3da8 <Print::println()>
  *V = sToken.toFloat(); 
    104e:	a803      	add	r0, sp, #12
    1050:	f003 f82a 	bl	40a8 <String::toFloat() const>
  control.run();
    1054:	4d4f      	ldr	r5, [pc, #316]	; (1194 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x220>)
  *V = sToken.toFloat(); 
    1056:	ed87 0a00 	vstr	s0, [r7]
  while((Token = GetToken(true)) != NULL) CalibrateLoop(); 
    105a:	e004      	b.n	1066 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0xf2>
  ProcessSerial(false);
    105c:	f7ff fc4c 	bl	8f8 <ProcessSerial(bool)>
  control.run();
    1060:	4628      	mov	r0, r5
    1062:	f002 f8ef 	bl	3244 <ThreadController::run()>
  while((Token = GetToken(true)) != NULL) CalibrateLoop(); 
    1066:	2001      	movs	r0, #1
    1068:	f001 fb6c 	bl	2744 <GetToken(bool)>
    106c:	4604      	mov	r4, r0
  ProcessSerial(false);
    106e:	2000      	movs	r0, #0
  while((Token = GetToken(true)) != NULL) CalibrateLoop(); 
    1070:	2c00      	cmp	r4, #0
    1072:	d1f3      	bne.n	105c <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0xe8>
  if(adcchan != NULL) 
    1074:	2e00      	cmp	r6, #0
    1076:	d03f      	beq.n	10f8 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x184>
  {
    if((adcchan->Chan & 0x80) == 0) return AD5593readADC(TWIadd, adcchan->Chan, 10);
    1078:	f996 2000 	ldrsb.w	r2, [r6]
    107c:	7830      	ldrb	r0, [r6, #0]
    107e:	2a00      	cmp	r2, #0
    1080:	9200      	str	r2, [sp, #0]
    1082:	db40      	blt.n	1106 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x192>
   if((iStat = AD5593write(addr, 0x02, (1 << chan))) != 0) return(-1);
    1084:	f04f 0801 	mov.w	r8, #1
    1088:	4d40      	ldr	r5, [pc, #256]	; (118c <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x218>)
		return write((uint8_t)n);
    108a:	270a      	movs	r7, #10
    108c:	fa08 fa02 	lsl.w	sl, r8, r2
		txBuffer[0] = (address << 1);
    1090:	fa09 f308 	lsl.w	r3, r9, r8
  Wire.write(pb);
    1094:	462e      	mov	r6, r5
    1096:	b2db      	uxtb	r3, r3
		return write((uint8_t)n);
    1098:	f3ca 2b07 	ubfx	fp, sl, #8, #8
    109c:	fa5f fa8a 	uxtb.w	sl, sl
		txBuffer[0] = (address << 1);
    10a0:	9301      	str	r3, [sp, #4]
    10a2:	9b01      	ldr	r3, [sp, #4]
    10a4:	2102      	movs	r1, #2
    10a6:	4630      	mov	r0, r6
		transmitting = 1;
    10a8:	f885 8130 	strb.w	r8, [r5, #304]	; 0x130
		txBuffer[0] = (address << 1);
    10ac:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		txBufferLength = 1;
    10b0:	f885 812f 	strb.w	r8, [r5, #303]	; 0x12f
    10b4:	f001 fdb4 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
    10b8:	4659      	mov	r1, fp
    10ba:	4630      	mov	r0, r6
    10bc:	f001 fdb0 	bl	2c20 <TwoWire::write(unsigned char)>
    10c0:	4651      	mov	r1, sl
    10c2:	4630      	mov	r0, r6
    10c4:	f001 fdac 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    10c8:	2101      	movs	r1, #1
    10ca:	4630      	mov	r0, r6
    10cc:	f001 fe80 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
   int i = AD5593readWord(addr, 0x40);
    10d0:	2140      	movs	r1, #64	; 0x40
   if((iStat = AD5593write(addr, 0x02, (1 << chan))) != 0) return(-1);
    10d2:	2800      	cmp	r0, #0
    10d4:	d154      	bne.n	1180 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x20c>
   int i = AD5593readWord(addr, 0x40);
    10d6:	4648      	mov	r0, r9
    10d8:	f7ff fc42 	bl	960 <AD5593readWord(unsigned char, unsigned char)>
   if(((i >> 12) & 0x7) != chan) return(-1);
    10dc:	9a00      	ldr	r2, [sp, #0]
   i <<= 4;
    10de:	0103      	lsls	r3, r0, #4
   if(((i >> 12) & 0x7) != chan) return(-1);
    10e0:	f3c0 3002 	ubfx	r0, r0, #12, #3
   return(i & 0xFFFF);
    10e4:	b29b      	uxth	r3, r3
   if(((i >> 12) & 0x7) != chan) return(-1);
    10e6:	4282      	cmp	r2, r0
    val += j;
    10e8:	441c      	add	r4, r3
   if(((i >> 12) & 0x7) != chan) return(-1);
    10ea:	d149      	bne.n	1180 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x20c>
  for (i = 0; i < num; i++) 
    10ec:	3f01      	subs	r7, #1
    10ee:	d1d8      	bne.n	10a2 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x12e>
  return (val / num);
    10f0:	4b29      	ldr	r3, [pc, #164]	; (1198 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x224>)
    10f2:	fba3 3004 	umull	r3, r0, r3, r4
    10f6:	08c6      	lsrs	r6, r0, #3
      delayMicroseconds(1);
    }
    return val/4;
  }
  return 0; 
}
    10f8:	a803      	add	r0, sp, #12
    10fa:	f002 ff55 	bl	3fa8 <String::~String()>
    10fe:	4630      	mov	r0, r6
    1100:	b007      	add	sp, #28
    1102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    val = 0; 
    1106:	46a0      	mov	r8, r4
    1108:	f04f 0940 	mov.w	r9, #64	; 0x40
    110c:	4d23      	ldr	r5, [pc, #140]	; (119c <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x228>)
	uint32_t begin = ARM_DWT_CYCCNT;
    110e:	4f24      	ldr	r7, [pc, #144]	; (11a0 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x22c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1110:	4c24      	ldr	r4, [pc, #144]	; (11a4 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x230>)
      val += analogRead(adcchan->Chan & 0x7F);
    1112:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    1116:	f002 ffd1 	bl	40bc <analogRead>
	uint32_t begin = ARM_DWT_CYCCNT;
    111a:	687a      	ldr	r2, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    111c:	6829      	ldr	r1, [r5, #0]
    111e:	4480      	add	r8, r0
    1120:	fba4 3101 	umull	r3, r1, r4, r1
    1124:	0c89      	lsrs	r1, r1, #18
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1126:	687b      	ldr	r3, [r7, #4]
    1128:	1a9b      	subs	r3, r3, r2
    112a:	4299      	cmp	r1, r3
    112c:	d8fb      	bhi.n	1126 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x1b2>
    for(int i=0;i<64;i++) 
    112e:	f1b9 0901 	subs.w	r9, r9, #1
    1132:	d01f      	beq.n	1174 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x200>
      val += analogRead(adcchan->Chan & 0x7F);
    1134:	7830      	ldrb	r0, [r6, #0]
    1136:	e7ec      	b.n	1112 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x19e>
  counts = (Value * DC->m) + DC->b;
    1138:	eee6 7a87 	vfma.f32	s15, s13, s14
		transmitting = 1;
    113c:	f04f 0801 	mov.w	r8, #1
		txBuffer[0] = (address << 1);
    1140:	4d12      	ldr	r5, [pc, #72]	; (118c <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x218>)
    1142:	fa09 f308 	lsl.w	r3, r9, r8
  Wire.write(cmd);
    1146:	4628      	mov	r0, r5
		transmitting = 1;
    1148:	f885 8130 	strb.w	r8, [r5, #304]	; 0x130
		txBuffer[0] = (address << 1);
    114c:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		txBufferLength = 1;
    1150:	f885 812f 	strb.w	r8, [r5, #303]	; 0x12f
  counts = (Value * DC->m) + DC->b;
    1154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1158:	ee17 3a90 	vmov	r3, s15
    if((TWIadd & 0x60) == 0x60) MCP4725(TWIadd,0x60,Value2Counts(*V,dacchan));
    115c:	f383 0310 	usat	r3, #16, r3
    1160:	b29c      	uxth	r4, r3
  Wire.write(cmd);
    1162:	f001 fd5d 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
    1166:	4628      	mov	r0, r5
    1168:	0a21      	lsrs	r1, r4, #8
    116a:	f001 fd59 	bl	2c20 <TwoWire::write(unsigned char)>
    116e:	f004 01f0 	and.w	r1, r4, #240	; 0xf0
    1172:	e73d      	b.n	ff0 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x7c>
    return val/4;
    1174:	f1b8 0600 	subs.w	r6, r8, #0
    1178:	bfb8      	it	lt
    117a:	3603      	addlt	r6, #3
    117c:	10b6      	asrs	r6, r6, #2
    117e:	e7bb      	b.n	10f8 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x184>
    if(j == -1) return(-1);
    1180:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    1184:	e7b8      	b.n	10f8 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)+0x184>
    1186:	bf00      	nop
    1188:	ffff8000 	.word	0xffff8000
    118c:	2000826c 	.word	0x2000826c
    1190:	20000514 	.word	0x20000514
    1194:	2000a9f0 	.word	0x2000a9f0
    1198:	cccccccd 	.word	0xcccccccd
    119c:	20008104 	.word	0x20008104
    11a0:	e0001000 	.word	0xe0001000
    11a4:	431bde83 	.word	0x431bde83
    11a8:	20008e14 	.word	0x20008e14

000011ac <Calibrate(unsigned char, DACchan*, ADCchan*, float, float)>:

// This function is used to calibrate ADC/DAC AD5592 channels. 
void Calibrate(uint8_t TWIadd, DACchan *dacchan, ADCchan *adcchan, float V1, float V2)
{
    11ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  float  val1,val2,m,b;
  int    adcV1, adcV2;
  int    dacV1, dacV2;

  serial->println("Enter values when prompted.");
    11b0:	4c6a      	ldr	r4, [pc, #424]	; (135c <Calibrate(unsigned char, DACchan*, ADCchan*, float, float)+0x1b0>)
{
    11b2:	460d      	mov	r5, r1
    11b4:	4680      	mov	r8, r0
    11b6:	4617      	mov	r7, r2
  serial->println("Enter values when prompted.");
    11b8:	6826      	ldr	r6, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    11ba:	221b      	movs	r2, #27
    11bc:	4968      	ldr	r1, [pc, #416]	; (1360 <Calibrate(unsigned char, DACchan*, ADCchan*, float, float)+0x1b4>)
    11be:	6833      	ldr	r3, [r6, #0]
    11c0:	4630      	mov	r0, r6
{
    11c2:	ed2d 8b02 	vpush	{d8}
    11c6:	685b      	ldr	r3, [r3, #4]
    11c8:	b082      	sub	sp, #8
    11ca:	eef0 8a40 	vmov.f32	s17, s0
    11ce:	eeb0 8a60 	vmov.f32	s16, s1
    11d2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    11d4:	4630      	mov	r0, r6
    11d6:	f002 fde7 	bl	3da8 <Print::println()>
  // Set to first voltage and ask for user to enter actual voltage
  val1 = V1;
  adcV1 = CalibratePoint(TWIadd, dacchan, adcchan, &val1);
    11da:	466b      	mov	r3, sp
    11dc:	463a      	mov	r2, r7
    11de:	4629      	mov	r1, r5
    11e0:	4640      	mov	r0, r8
  val1 = V1;
    11e2:	edcd 8a00 	vstr	s17, [sp]
  adcV1 = CalibratePoint(TWIadd, dacchan, adcchan, &val1);
    11e6:	f7ff fec5 	bl	f74 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)>
  // Set to second voltage and ask for user to enter actual voltage
  val2 = V2;
  adcV2 = CalibratePoint(TWIadd, dacchan, adcchan, &val2);
    11ea:	ab01      	add	r3, sp, #4
    11ec:	463a      	mov	r2, r7
    11ee:	4629      	mov	r1, r5
  adcV1 = CalibratePoint(TWIadd, dacchan, adcchan, &val1);
    11f0:	4606      	mov	r6, r0
  adcV2 = CalibratePoint(TWIadd, dacchan, adcchan, &val2);
    11f2:	4640      	mov	r0, r8
  val2 = V2;
    11f4:	ed8d 8a01 	vstr	s16, [sp, #4]
  adcV2 = CalibratePoint(TWIadd, dacchan, adcchan, &val2);
    11f8:	f7ff febc 	bl	f74 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)>
  counts = (Value * DC->m) + DC->b;
    11fc:	ed95 7a02 	vldr	s14, [r5, #8]
    1200:	f64f 7cff 	movw	ip, #65535	; 0xffff
    1204:	edd5 5a01 	vldr	s11, [r5, #4]
    1208:	4680      	mov	r8, r0
    120a:	eef0 7a47 	vmov.f32	s15, s14
  // Calculate calibration parameters and apply
  dacV1 = Value2Counts(V1, dacchan);
  dacV2 = Value2Counts(V2, dacchan);
  m = (float)(dacV2-dacV1) / (val2-val1);
  b = (float)dacV1 - val1 * m;
  serial->println("DAC channel calibration parameters.");
    120e:	f8d4 9000 	ldr.w	r9, [r4]
    1212:	eea8 7a25 	vfma.f32	s14, s16, s11
  m = (float)(dacV2-dacV1) / (val2-val1);
    1216:	ed9d 6a00 	vldr	s12, [sp]
							  return write((const uint8_t *)str, strlen(str)); }
    121a:	f8d9 3000 	ldr.w	r3, [r9]
    121e:	2223      	movs	r2, #35	; 0x23
    1220:	eee8 7aa5 	vfma.f32	s15, s17, s11
    1224:	eddd 6a01 	vldr	s13, [sp, #4]
    1228:	f8d3 a004 	ldr.w	sl, [r3, #4]
    122c:	ee76 6ac6 	vsub.f32	s13, s13, s12
    1230:	494c      	ldr	r1, [pc, #304]	; (1364 <Calibrate(unsigned char, DACchan*, ADCchan*, float, float)+0x1b8>)
    1232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1236:	ee17 3a90 	vmov	r3, s15
    123a:	4563      	cmp	r3, ip
    123c:	bfa8      	it	ge
    123e:	4663      	movge	r3, ip
    1240:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  b = (float)dacV1 - val1 * m;
    1244:	ee07 3a90 	vmov	s15, r3
    1248:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    124c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    1250:	ee17 0a90 	vmov	r0, s15
  m = (float)(dacV2-dacV1) / (val2-val1);
    1254:	4560      	cmp	r0, ip
    1256:	bfa8      	it	ge
    1258:	4660      	movge	r0, ip
    125a:	2800      	cmp	r0, #0
    125c:	bfac      	ite	ge
    125e:	ebc3 0300 	rsbge	r3, r3, r0
    1262:	425b      	neglt	r3, r3
    1264:	4648      	mov	r0, r9
    1266:	ee07 3a90 	vmov	s15, r3
    126a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    126e:	eec7 8aa6 	vdiv.f32	s17, s15, s13
  b = (float)dacV1 - val1 * m;
    1272:	eea6 8a68 	vfms.f32	s16, s12, s17
    1276:	47d0      	blx	sl
	size_t println(const char s[])			{ return print(s) + println(); }
    1278:	4648      	mov	r0, r9
    127a:	f002 fd95 	bl	3da8 <Print::println()>
  serial->print("m = ");
    127e:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1280:	2204      	movs	r2, #4
    1282:	4939      	ldr	r1, [pc, #228]	; (1368 <Calibrate(unsigned char, DACchan*, ADCchan*, float, float)+0x1bc>)
    1284:	6803      	ldr	r3, [r0, #0]
    1286:	685b      	ldr	r3, [r3, #4]
    1288:	4798      	blx	r3
  serial->println(m);
    128a:	f8d4 9000 	ldr.w	r9, [r4]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    128e:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
    1292:	2102      	movs	r1, #2
    1294:	4648      	mov	r0, r9
    1296:	f002 fdb7 	bl	3e08 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    129a:	4648      	mov	r0, r9
    129c:	f002 fd84 	bl	3da8 <Print::println()>
  serial->print("b = ");
    12a0:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    12a2:	2204      	movs	r2, #4
    12a4:	4931      	ldr	r1, [pc, #196]	; (136c <Calibrate(unsigned char, DACchan*, ADCchan*, float, float)+0x1c0>)
    12a6:	6803      	ldr	r3, [r0, #0]
    12a8:	685b      	ldr	r3, [r3, #4]
    12aa:	4798      	blx	r3
  serial->println(b);
    12ac:	f8d4 9000 	ldr.w	r9, [r4]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    12b0:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
    12b4:	2102      	movs	r1, #2
    12b6:	4648      	mov	r0, r9
    12b8:	f002 fda6 	bl	3e08 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    12bc:	4648      	mov	r0, r9
    12be:	f002 fd73 	bl	3da8 <Print::println()>
  dacchan->m = m;
    12c2:	edc5 8a01 	vstr	s17, [r5, #4]
  dacchan->b = b;
    12c6:	ed85 8a02 	vstr	s16, [r5, #8]
  if(adcchan == NULL) return;
    12ca:	2f00      	cmp	r7, #0
    12cc:	d041      	beq.n	1352 <Calibrate(unsigned char, DACchan*, ADCchan*, float, float)+0x1a6>
  m = (float)(adcV2-adcV1) / (val2-val1);
  b = (float)adcV1 - val1 * m;
    12ce:	ee07 6a90 	vmov	s15, r6
  m = (float)(adcV2-adcV1) / (val2-val1);
    12d2:	eba8 0806 	sub.w	r8, r8, r6
    12d6:	eddd 6a00 	vldr	s13, [sp]
							  return write((const uint8_t *)str, strlen(str)); }
    12da:	2223      	movs	r2, #35	; 0x23
  b = (float)adcV1 - val1 * m;
    12dc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
  m = (float)(adcV2-adcV1) / (val2-val1);
    12e0:	ed9d 7a01 	vldr	s14, [sp, #4]
    12e4:	ee07 8a90 	vmov	s15, r8
  serial->println("ADC channel calibration parameters.");
    12e8:	6825      	ldr	r5, [r4, #0]
  m = (float)(adcV2-adcV1) / (val2-val1);
    12ea:	ee37 7a66 	vsub.f32	s14, s14, s13
    12ee:	4920      	ldr	r1, [pc, #128]	; (1370 <Calibrate(unsigned char, DACchan*, ADCchan*, float, float)+0x1c4>)
    12f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    12f4:	682b      	ldr	r3, [r5, #0]
    12f6:	4628      	mov	r0, r5
    12f8:	685b      	ldr	r3, [r3, #4]
    12fa:	eec7 8a87 	vdiv.f32	s17, s15, s14
  b = (float)adcV1 - val1 * m;
    12fe:	eea6 8ae8 	vfms.f32	s16, s13, s17
    1302:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1304:	4628      	mov	r0, r5
    1306:	f002 fd4f 	bl	3da8 <Print::println()>
  serial->print("m = ");
    130a:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    130c:	2204      	movs	r2, #4
    130e:	4916      	ldr	r1, [pc, #88]	; (1368 <Calibrate(unsigned char, DACchan*, ADCchan*, float, float)+0x1bc>)
    1310:	6803      	ldr	r3, [r0, #0]
    1312:	685b      	ldr	r3, [r3, #4]
    1314:	4798      	blx	r3
  serial->println(m);
    1316:	6825      	ldr	r5, [r4, #0]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1318:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
    131c:	2102      	movs	r1, #2
    131e:	4628      	mov	r0, r5
    1320:	f002 fd72 	bl	3e08 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    1324:	4628      	mov	r0, r5
    1326:	f002 fd3f 	bl	3da8 <Print::println()>
  serial->print("b = ");
    132a:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    132c:	2204      	movs	r2, #4
    132e:	490f      	ldr	r1, [pc, #60]	; (136c <Calibrate(unsigned char, DACchan*, ADCchan*, float, float)+0x1c0>)
    1330:	6803      	ldr	r3, [r0, #0]
    1332:	685b      	ldr	r3, [r3, #4]
    1334:	4798      	blx	r3
  serial->println(b);
    1336:	6824      	ldr	r4, [r4, #0]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1338:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
    133c:	2102      	movs	r1, #2
    133e:	4620      	mov	r0, r4
    1340:	f002 fd62 	bl	3e08 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    1344:	4620      	mov	r0, r4
    1346:	f002 fd2f 	bl	3da8 <Print::println()>
  adcchan->m = m;
    134a:	edc7 8a01 	vstr	s17, [r7, #4]
  adcchan->b = b;
    134e:	ed87 8a02 	vstr	s16, [r7, #8]
}
    1352:	b002      	add	sp, #8
    1354:	ecbd 8b02 	vpop	{d8}
    1358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    135c:	20008e14 	.word	0x20008e14
    1360:	20000574 	.word	0x20000574
    1364:	20000590 	.word	0x20000590
    1368:	200005b4 	.word	0x200005b4
    136c:	200005bc 	.word	0x200005bc
    1370:	200005c4 	.word	0x200005c4

00001374 <CalibrateCV()>:

void CalibrateCV(void)
{
  serial->println("Calibrate CV output, monitor with a voltmeter.");
    1374:	4b25      	ldr	r3, [pc, #148]	; (140c <CalibrateCV()+0x98>)
							  return write((const uint8_t *)str, strlen(str)); }
    1376:	222e      	movs	r2, #46	; 0x2e
    1378:	4925      	ldr	r1, [pc, #148]	; (1410 <CalibrateCV()+0x9c>)
{
    137a:	b570      	push	{r4, r5, r6, lr}
  serial->println("Calibrate CV output, monitor with a voltmeter.");
    137c:	681d      	ldr	r5, [r3, #0]
		transmitting = 1;
    137e:	2601      	movs	r6, #1
  Calibrate(CVBIAS, &faims.CVsetCtrl, &faims.CVmon, 0.0, 300);
    1380:	4c24      	ldr	r4, [pc, #144]	; (1414 <CalibrateCV()+0xa0>)
    1382:	682b      	ldr	r3, [r5, #0]
    1384:	4628      	mov	r0, r5
    1386:	685b      	ldr	r3, [r3, #4]
    1388:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    138a:	4628      	mov	r0, r5
    138c:	f002 fd0c 	bl	3da8 <Print::println()>
    1390:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
    1394:	eddf 0a20 	vldr	s1, [pc, #128]	; 1418 <CalibrateCV()+0xa4>
    1398:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
    139c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 141c <CalibrateCV()+0xa8>
    13a0:	2011      	movs	r0, #17
    13a2:	f7ff ff03 	bl	11ac <Calibrate(unsigned char, DACchan*, ADCchan*, float, float)>
    13a6:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    13aa:	ed94 7a31 	vldr	s14, [r4, #196]	; 0xc4
		txBuffer[0] = (address << 1);
    13ae:	2322      	movs	r3, #34	; 0x22
    13b0:	edd4 7a32 	vldr	s15, [r4, #200]	; 0xc8
  AD5593writeDAC(CVBIAS, faims.CVsetCtrl.Chan, Value2Counts(faims.CV,&faims.CVsetCtrl));
    13b4:	f994 10c0 	ldrsb.w	r1, [r4, #192]	; 0xc0
    13b8:	eee6 7a87 	vfma.f32	s15, s13, s14
    13bc:	4c18      	ldr	r4, [pc, #96]	; (1420 <CalibrateCV()+0xac>)
   d = (val>>4) | (chan << 12) | 0x8000;
    13be:	0308      	lsls	r0, r1, #12
    13c0:	4d18      	ldr	r5, [pc, #96]	; (1424 <CalibrateCV()+0xb0>)
    13c2:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
   return(AD5593write(addr, 0x10 | chan, d));
    13c6:	f041 0110 	orr.w	r1, r1, #16
		transmitting = 1;
    13ca:	f884 6130 	strb.w	r6, [r4, #304]	; 0x130
  Wire.write(pb);
    13ce:	b2c9      	uxtb	r1, r1
		txBufferLength = 1;
    13d0:	f884 612f 	strb.w	r6, [r4, #303]	; 0x12f
  counts = (Value * DC->m) + DC->b;
    13d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    13d8:	ee17 3a90 	vmov	r3, s15
   d = (val>>4) | (chan << 12) | 0x8000;
    13dc:	f383 0310 	usat	r3, #16, r3
    13e0:	ea40 1023 	orr.w	r0, r0, r3, asr #4
    13e4:	4305      	orrs	r5, r0
  Wire.write(pb);
    13e6:	4620      	mov	r0, r4
    13e8:	f001 fc1a 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
    13ec:	4620      	mov	r0, r4
   d = (val>>4) | (chan << 12) | 0x8000;
    13ee:	b22d      	sxth	r5, r5
    13f0:	f3c5 2107 	ubfx	r1, r5, #8, #8
    13f4:	f001 fc14 	bl	2c20 <TwoWire::write(unsigned char)>
    13f8:	4620      	mov	r0, r4
    13fa:	b2e9      	uxtb	r1, r5
    13fc:	f001 fc10 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    1400:	4631      	mov	r1, r6
    1402:	4620      	mov	r0, r4
}
    1404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1408:	f001 bce2 	b.w	2dd0 <TwoWire::endTransmission(unsigned char)>
    140c:	20008e14 	.word	0x20008e14
    1410:	200003bc 	.word	0x200003bc
    1414:	2000aa78 	.word	0x2000aa78
    1418:	43960000 	.word	0x43960000
    141c:	00000000 	.word	0x00000000
    1420:	2000826c 	.word	0x2000826c
    1424:	ffff8000 	.word	0xffff8000

00001428 <CalibrateBias()>:

void CalibrateBias(void)
{
  serial->println("Calibrate Bias output, monitor with a voltmeter.");
    1428:	4b25      	ldr	r3, [pc, #148]	; (14c0 <CalibrateBias()+0x98>)
							  return write((const uint8_t *)str, strlen(str)); }
    142a:	2230      	movs	r2, #48	; 0x30
    142c:	4925      	ldr	r1, [pc, #148]	; (14c4 <CalibrateBias()+0x9c>)
{
    142e:	b570      	push	{r4, r5, r6, lr}
  serial->println("Calibrate Bias output, monitor with a voltmeter.");
    1430:	681d      	ldr	r5, [r3, #0]
		transmitting = 1;
    1432:	2601      	movs	r6, #1
  Calibrate(CVBIAS, &faims.BIASsetCtrl, &faims.BIASmon, 0.0, 300);
    1434:	4c24      	ldr	r4, [pc, #144]	; (14c8 <CalibrateBias()+0xa0>)
    1436:	682b      	ldr	r3, [r5, #0]
    1438:	4628      	mov	r0, r5
    143a:	685b      	ldr	r3, [r3, #4]
    143c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    143e:	4628      	mov	r0, r5
    1440:	f002 fcb2 	bl	3da8 <Print::println()>
    1444:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
    1448:	eddf 0a20 	vldr	s1, [pc, #128]	; 14cc <CalibrateBias()+0xa4>
    144c:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
    1450:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 14d0 <CalibrateBias()+0xa8>
    1454:	2011      	movs	r0, #17
    1456:	f7ff fea9 	bl	11ac <Calibrate(unsigned char, DACchan*, ADCchan*, float, float)>
  counts = (Value * DC->m) + DC->b;
    145a:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    145e:	ed94 7a37 	vldr	s14, [r4, #220]	; 0xdc
		txBuffer[0] = (address << 1);
    1462:	2322      	movs	r3, #34	; 0x22
    1464:	edd4 7a38 	vldr	s15, [r4, #224]	; 0xe0
  AD5593writeDAC(CVBIAS, faims.BIASsetCtrl.Chan, Value2Counts(faims.CV,&faims.BIASsetCtrl));
    1468:	f994 10d8 	ldrsb.w	r1, [r4, #216]	; 0xd8
    146c:	eee6 7a87 	vfma.f32	s15, s13, s14
    1470:	4c18      	ldr	r4, [pc, #96]	; (14d4 <CalibrateBias()+0xac>)
   d = (val>>4) | (chan << 12) | 0x8000;
    1472:	0308      	lsls	r0, r1, #12
    1474:	4d18      	ldr	r5, [pc, #96]	; (14d8 <CalibrateBias()+0xb0>)
    1476:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
   return(AD5593write(addr, 0x10 | chan, d));
    147a:	f041 0110 	orr.w	r1, r1, #16
		transmitting = 1;
    147e:	f884 6130 	strb.w	r6, [r4, #304]	; 0x130
  Wire.write(pb);
    1482:	b2c9      	uxtb	r1, r1
		txBufferLength = 1;
    1484:	f884 612f 	strb.w	r6, [r4, #303]	; 0x12f
  counts = (Value * DC->m) + DC->b;
    1488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    148c:	ee17 3a90 	vmov	r3, s15
   d = (val>>4) | (chan << 12) | 0x8000;
    1490:	f383 0310 	usat	r3, #16, r3
    1494:	ea40 1023 	orr.w	r0, r0, r3, asr #4
    1498:	4305      	orrs	r5, r0
  Wire.write(pb);
    149a:	4620      	mov	r0, r4
    149c:	f001 fbc0 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
    14a0:	4620      	mov	r0, r4
   d = (val>>4) | (chan << 12) | 0x8000;
    14a2:	b22d      	sxth	r5, r5
    14a4:	f3c5 2107 	ubfx	r1, r5, #8, #8
    14a8:	f001 fbba 	bl	2c20 <TwoWire::write(unsigned char)>
    14ac:	4620      	mov	r0, r4
    14ae:	b2e9      	uxtb	r1, r5
    14b0:	f001 fbb6 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    14b4:	4631      	mov	r1, r6
    14b6:	4620      	mov	r0, r4
}
    14b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    14bc:	f001 bc88 	b.w	2dd0 <TwoWire::endTransmission(unsigned char)>
    14c0:	20008e14 	.word	0x20008e14
    14c4:	200004a4 	.word	0x200004a4
    14c8:	2000aa78 	.word	0x2000aa78
    14cc:	43960000 	.word	0x43960000
    14d0:	00000000 	.word	0x00000000
    14d4:	2000826c 	.word	0x2000826c
    14d8:	ffff8000 	.word	0xffff8000

000014dc <CalibrateHV()>:

void CalibrateHV(void)
{
  serial->println("Calibrate HV output, monitor with a voltmeter.");
    14dc:	4b12      	ldr	r3, [pc, #72]	; (1528 <CalibrateHV()+0x4c>)
							  return write((const uint8_t *)str, strlen(str)); }
    14de:	222e      	movs	r2, #46	; 0x2e
    14e0:	4912      	ldr	r1, [pc, #72]	; (152c <CalibrateHV()+0x50>)
{
    14e2:	b570      	push	{r4, r5, r6, lr}
  serial->println("Calibrate HV output, monitor with a voltmeter.");
    14e4:	681d      	ldr	r5, [r3, #0]
{
    14e6:	b082      	sub	sp, #8
  Calibrate(HVDACV, &faims.HVvoltCtrl, &faims.HVmonV, 200, 750);
    14e8:	4c11      	ldr	r4, [pc, #68]	; (1530 <CalibrateHV()+0x54>)
    14ea:	682b      	ldr	r3, [r5, #0]
    14ec:	4628      	mov	r0, r5
    14ee:	f104 0660 	add.w	r6, r4, #96	; 0x60
    14f2:	685b      	ldr	r3, [r3, #4]
    14f4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    14f6:	4628      	mov	r0, r5
    14f8:	f002 fc56 	bl	3da8 <Print::println()>
  UpdateDACvalue(0, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);
    14fc:	2501      	movs	r5, #1
  Calibrate(HVDACV, &faims.HVvoltCtrl, &faims.HVmonV, 200, 750);
    14fe:	f104 0278 	add.w	r2, r4, #120	; 0x78
    1502:	4631      	mov	r1, r6
    1504:	eddf 0a0b 	vldr	s1, [pc, #44]	; 1534 <CalibrateHV()+0x58>
    1508:	2063      	movs	r0, #99	; 0x63
    150a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 1538 <CalibrateHV()+0x5c>
    150e:	f7ff fe4d 	bl	11ac <Calibrate(unsigned char, DACchan*, ADCchan*, float, float)>
  UpdateDACvalue(0, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);
    1512:	4b0a      	ldr	r3, [pc, #40]	; (153c <CalibrateHV()+0x60>)
    1514:	f104 0220 	add.w	r2, r4, #32
    1518:	4631      	mov	r1, r6
    151a:	9500      	str	r5, [sp, #0]
    151c:	2000      	movs	r0, #0
    151e:	f7ff fc09 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
}
    1522:	b002      	add	sp, #8
    1524:	bd70      	pop	{r4, r5, r6, pc}
    1526:	bf00      	nop
    1528:	20008e14 	.word	0x20008e14
    152c:	200003ec 	.word	0x200003ec
    1530:	2000aa78 	.word	0x2000aa78
    1534:	443b8000 	.word	0x443b8000
    1538:	43480000 	.word	0x43480000
    153c:	2000ae08 	.word	0x2000ae08

00001540 <CalibrateHVaux()>:

void CalibrateHVaux(void)
{
  serial->println("Calibrate HV aux supply output, monitor with a voltmeter.");
    1540:	4b12      	ldr	r3, [pc, #72]	; (158c <CalibrateHVaux()+0x4c>)
							  return write((const uint8_t *)str, strlen(str)); }
    1542:	2239      	movs	r2, #57	; 0x39
    1544:	4912      	ldr	r1, [pc, #72]	; (1590 <CalibrateHVaux()+0x50>)
{
    1546:	b570      	push	{r4, r5, r6, lr}
  serial->println("Calibrate HV aux supply output, monitor with a voltmeter.");
    1548:	681d      	ldr	r5, [r3, #0]
{
    154a:	b082      	sub	sp, #8
  Calibrate(HVDACV, &faims.HVvoltCtrl, &faims.AUXHVmonV, 200, 750);
    154c:	4c11      	ldr	r4, [pc, #68]	; (1594 <CalibrateHVaux()+0x54>)
    154e:	682b      	ldr	r3, [r5, #0]
    1550:	4628      	mov	r0, r5
    1552:	f104 0660 	add.w	r6, r4, #96	; 0x60
    1556:	685b      	ldr	r3, [r3, #4]
    1558:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    155a:	4628      	mov	r0, r5
    155c:	f002 fc24 	bl	3da8 <Print::println()>
  UpdateDACvalue(0, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);  
    1560:	2501      	movs	r5, #1
  Calibrate(HVDACV, &faims.HVvoltCtrl, &faims.AUXHVmonV, 200, 750);
    1562:	f104 0290 	add.w	r2, r4, #144	; 0x90
    1566:	4631      	mov	r1, r6
    1568:	eddf 0a0b 	vldr	s1, [pc, #44]	; 1598 <CalibrateHVaux()+0x58>
    156c:	2063      	movs	r0, #99	; 0x63
    156e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 159c <CalibrateHVaux()+0x5c>
    1572:	f7ff fe1b 	bl	11ac <Calibrate(unsigned char, DACchan*, ADCchan*, float, float)>
  UpdateDACvalue(0, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);  
    1576:	4b0a      	ldr	r3, [pc, #40]	; (15a0 <CalibrateHVaux()+0x60>)
    1578:	f104 0220 	add.w	r2, r4, #32
    157c:	4631      	mov	r1, r6
    157e:	9500      	str	r5, [sp, #0]
    1580:	2000      	movs	r0, #0
    1582:	f7ff fbd7 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
}
    1586:	b002      	add	sp, #8
    1588:	bd70      	pop	{r4, r5, r6, pc}
    158a:	bf00      	nop
    158c:	20008e14 	.word	0x20008e14
    1590:	200004d8 	.word	0x200004d8
    1594:	2000aa78 	.word	0x2000aa78
    1598:	443b8000 	.word	0x443b8000
    159c:	43480000 	.word	0x43480000
    15a0:	2000ae08 	.word	0x2000ae08

000015a4 <CalibrateHVI()>:

void CalibrateHVI(void)
{
    15a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int    adcV1, adcV2;
  float  V1,V2;
  float  V = faims.Voltage;
  
  serial->println("Calibrate HV supply current, monitor with a voltmeter.");
    15a8:	4e45      	ldr	r6, [pc, #276]	; (16c0 <CalibrateHVI()+0x11c>)
							  return write((const uint8_t *)str, strlen(str)); }
    15aa:	2236      	movs	r2, #54	; 0x36
  float  V = faims.Voltage;
    15ac:	4d45      	ldr	r5, [pc, #276]	; (16c4 <CalibrateHVI()+0x120>)
  faims.Voltage = 200;
  UpdateDACvalue(HVDACV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);
    15ae:	f04f 0a01 	mov.w	sl, #1
  serial->println("Calibrate HV supply current, monitor with a voltmeter.");
    15b2:	6834      	ldr	r4, [r6, #0]
    15b4:	4944      	ldr	r1, [pc, #272]	; (16c8 <CalibrateHVI()+0x124>)
  faims.Voltage = 200;
    15b6:	462f      	mov	r7, r5
    15b8:	6823      	ldr	r3, [r4, #0]
    15ba:	4620      	mov	r0, r4
  UpdateDACvalue(HVDACV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);
    15bc:	f8df 9120 	ldr.w	r9, [pc, #288]	; 16e0 <CalibrateHVI()+0x13c>
    15c0:	f105 0860 	add.w	r8, r5, #96	; 0x60
    15c4:	685b      	ldr	r3, [r3, #4]
  adcV1 = CalibratePoint(0, NULL, &faims.HVmonI, &V1);
    15c6:	f105 0b84 	add.w	fp, r5, #132	; 0x84
{
    15ca:	ed2d 8b04 	vpush	{d8-d9}
    15ce:	b085      	sub	sp, #20
  float  V = faims.Voltage;
    15d0:	ed95 9a08 	vldr	s18, [r5, #32]
    15d4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    15d6:	4620      	mov	r0, r4
    15d8:	f002 fbe6 	bl	3da8 <Print::println()>
  faims.Voltage = 200;
    15dc:	4b3b      	ldr	r3, [pc, #236]	; (16cc <CalibrateHVI()+0x128>)
  UpdateDACvalue(HVDACV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);
    15de:	4641      	mov	r1, r8
    15e0:	2063      	movs	r0, #99	; 0x63
  faims.Voltage = 200;
    15e2:	f847 3f20 	str.w	r3, [r7, #32]!
  UpdateDACvalue(HVDACV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);
    15e6:	464b      	mov	r3, r9
    15e8:	463a      	mov	r2, r7
    15ea:	f8cd a000 	str.w	sl, [sp]
    15ee:	f7ff fba1 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
  adcV1 = CalibratePoint(0, NULL, &faims.HVmonI, &V1);
    15f2:	2100      	movs	r1, #0
    15f4:	ab02      	add	r3, sp, #8
    15f6:	465a      	mov	r2, fp
    15f8:	4608      	mov	r0, r1
    15fa:	f7ff fcbb 	bl	f74 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)>
  faims.Voltage = 750;
    15fe:	4b34      	ldr	r3, [pc, #208]	; (16d0 <CalibrateHVI()+0x12c>)
  adcV1 = CalibratePoint(0, NULL, &faims.HVmonI, &V1);
    1600:	4604      	mov	r4, r0
  UpdateDACvalue(HVDACV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);
    1602:	463a      	mov	r2, r7
    1604:	4641      	mov	r1, r8
  faims.Voltage = 750;
    1606:	622b      	str	r3, [r5, #32]
  UpdateDACvalue(HVDACV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);
    1608:	f8cd a000 	str.w	sl, [sp]
    160c:	464b      	mov	r3, r9
    160e:	2063      	movs	r0, #99	; 0x63
    1610:	f7ff fb90 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
  adcV2 = CalibratePoint(0, NULL, &faims.HVmonI, &V2);
    1614:	2100      	movs	r1, #0
    1616:	465a      	mov	r2, fp
    1618:	ab03      	add	r3, sp, #12
    161a:	4608      	mov	r0, r1
    161c:	f7ff fcaa 	bl	f74 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)>
  float m = (float)(adcV2-adcV1) / (V2-V1);
  float b = (float)adcV1 - V1 * m;
    1620:	ee07 4a90 	vmov	s15, r4
  float m = (float)(adcV2-adcV1) / (V2-V1);
    1624:	1b00      	subs	r0, r0, r4
    1626:	eddd 6a02 	vldr	s13, [sp, #8]
    162a:	ed9d 7a03 	vldr	s14, [sp, #12]
  float b = (float)adcV1 - V1 * m;
    162e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
  float m = (float)(adcV2-adcV1) / (V2-V1);
    1632:	ee07 0a90 	vmov	s15, r0
  serial->println("ADC channel calibration parameters.");
    1636:	6834      	ldr	r4, [r6, #0]
  float m = (float)(adcV2-adcV1) / (V2-V1);
    1638:	ee37 7a66 	vsub.f32	s14, s14, s13
							  return write((const uint8_t *)str, strlen(str)); }
    163c:	2223      	movs	r2, #35	; 0x23
    163e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1642:	6823      	ldr	r3, [r4, #0]
    1644:	4923      	ldr	r1, [pc, #140]	; (16d4 <CalibrateHVI()+0x130>)
    1646:	4620      	mov	r0, r4
    1648:	685b      	ldr	r3, [r3, #4]
    164a:	eec7 8a87 	vdiv.f32	s17, s15, s14
  float b = (float)adcV1 - V1 * m;
    164e:	eea6 8ae8 	vfms.f32	s16, s13, s17
    1652:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1654:	4620      	mov	r0, r4
    1656:	f002 fba7 	bl	3da8 <Print::println()>
  serial->print("m = ");
    165a:	6830      	ldr	r0, [r6, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    165c:	2204      	movs	r2, #4
    165e:	491e      	ldr	r1, [pc, #120]	; (16d8 <CalibrateHVI()+0x134>)
    1660:	6803      	ldr	r3, [r0, #0]
    1662:	685b      	ldr	r3, [r3, #4]
    1664:	4798      	blx	r3
  serial->println(m);
    1666:	6834      	ldr	r4, [r6, #0]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1668:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
    166c:	2102      	movs	r1, #2
    166e:	4620      	mov	r0, r4
    1670:	f002 fbca 	bl	3e08 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    1674:	4620      	mov	r0, r4
    1676:	f002 fb97 	bl	3da8 <Print::println()>
  serial->print("b = ");
    167a:	6830      	ldr	r0, [r6, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    167c:	2204      	movs	r2, #4
    167e:	4917      	ldr	r1, [pc, #92]	; (16dc <CalibrateHVI()+0x138>)
    1680:	6803      	ldr	r3, [r0, #0]
    1682:	685b      	ldr	r3, [r3, #4]
    1684:	4798      	blx	r3
  serial->println(b);
    1686:	6834      	ldr	r4, [r6, #0]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1688:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
    168c:	2102      	movs	r1, #2
    168e:	4620      	mov	r0, r4
    1690:	f002 fbba 	bl	3e08 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    1694:	4620      	mov	r0, r4
    1696:	f002 fb87 	bl	3da8 <Print::println()>
  faims.HVmonI.m = m;
  faims.HVmonI.b = b;
  faims.Voltage = V;
  UpdateDACvalue(HVDACV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);
    169a:	464b      	mov	r3, r9
    169c:	463a      	mov	r2, r7
    169e:	4641      	mov	r1, r8
    16a0:	f8cd a000 	str.w	sl, [sp]
    16a4:	2063      	movs	r0, #99	; 0x63
  faims.Voltage = V;
    16a6:	ed85 9a08 	vstr	s18, [r5, #32]
  faims.HVmonI.m = m;
    16aa:	edc5 8a22 	vstr	s17, [r5, #136]	; 0x88
  faims.HVmonI.b = b;
    16ae:	ed85 8a23 	vstr	s16, [r5, #140]	; 0x8c
  UpdateDACvalue(HVDACV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);
    16b2:	f7ff fb3f 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
}
    16b6:	b005      	add	sp, #20
    16b8:	ecbd 8b04 	vpop	{d8-d9}
    16bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16c0:	20008e14 	.word	0x20008e14
    16c4:	2000aa78 	.word	0x2000aa78
    16c8:	20000468 	.word	0x20000468
    16cc:	43480000 	.word	0x43480000
    16d0:	443b8000 	.word	0x443b8000
    16d4:	200005c4 	.word	0x200005c4
    16d8:	200005b4 	.word	0x200005b4
    16dc:	200005bc 	.word	0x200005bc
    16e0:	2000ae08 	.word	0x2000ae08

000016e4 <CalibrateHVIaux()>:

void CalibrateHVIaux(void)
{
    16e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int    adcV1, adcV2;
  float  V1,V2;
  float  V = faims.Voltage;
  
  serial->println("Calibrate HV aux supply current, monitor with a voltmeter.");
    16e8:	4e45      	ldr	r6, [pc, #276]	; (1800 <CalibrateHVIaux()+0x11c>)
							  return write((const uint8_t *)str, strlen(str)); }
    16ea:	223a      	movs	r2, #58	; 0x3a
  float  V = faims.Voltage;
    16ec:	4d45      	ldr	r5, [pc, #276]	; (1804 <CalibrateHVIaux()+0x120>)
  faims.Voltage = 200;
  UpdateDACvalue(HVDACV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);
    16ee:	f04f 0a01 	mov.w	sl, #1
  serial->println("Calibrate HV aux supply current, monitor with a voltmeter.");
    16f2:	6834      	ldr	r4, [r6, #0]
    16f4:	4944      	ldr	r1, [pc, #272]	; (1808 <CalibrateHVIaux()+0x124>)
  faims.Voltage = 200;
    16f6:	462f      	mov	r7, r5
    16f8:	6823      	ldr	r3, [r4, #0]
    16fa:	4620      	mov	r0, r4
  UpdateDACvalue(HVDACV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);
    16fc:	f8df 9120 	ldr.w	r9, [pc, #288]	; 1820 <CalibrateHVIaux()+0x13c>
    1700:	f105 0860 	add.w	r8, r5, #96	; 0x60
    1704:	685b      	ldr	r3, [r3, #4]
  adcV1 = CalibratePoint(0, NULL, &faims.AUXHVmonI, &V1);
    1706:	f105 0b9c 	add.w	fp, r5, #156	; 0x9c
{
    170a:	ed2d 8b04 	vpush	{d8-d9}
    170e:	b085      	sub	sp, #20
  float  V = faims.Voltage;
    1710:	ed95 9a08 	vldr	s18, [r5, #32]
    1714:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1716:	4620      	mov	r0, r4
    1718:	f002 fb46 	bl	3da8 <Print::println()>
  faims.Voltage = 200;
    171c:	4b3b      	ldr	r3, [pc, #236]	; (180c <CalibrateHVIaux()+0x128>)
  UpdateDACvalue(HVDACV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);
    171e:	4641      	mov	r1, r8
    1720:	2063      	movs	r0, #99	; 0x63
  faims.Voltage = 200;
    1722:	f847 3f20 	str.w	r3, [r7, #32]!
  UpdateDACvalue(HVDACV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);
    1726:	464b      	mov	r3, r9
    1728:	463a      	mov	r2, r7
    172a:	f8cd a000 	str.w	sl, [sp]
    172e:	f7ff fb01 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
  adcV1 = CalibratePoint(0, NULL, &faims.AUXHVmonI, &V1);
    1732:	2100      	movs	r1, #0
    1734:	ab02      	add	r3, sp, #8
    1736:	465a      	mov	r2, fp
    1738:	4608      	mov	r0, r1
    173a:	f7ff fc1b 	bl	f74 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)>
  faims.Voltage = 750;
    173e:	4b34      	ldr	r3, [pc, #208]	; (1810 <CalibrateHVIaux()+0x12c>)
  adcV1 = CalibratePoint(0, NULL, &faims.AUXHVmonI, &V1);
    1740:	4604      	mov	r4, r0
  UpdateDACvalue(HVDACV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);
    1742:	463a      	mov	r2, r7
    1744:	4641      	mov	r1, r8
  faims.Voltage = 750;
    1746:	622b      	str	r3, [r5, #32]
  UpdateDACvalue(HVDACV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);
    1748:	f8cd a000 	str.w	sl, [sp]
    174c:	464b      	mov	r3, r9
    174e:	2063      	movs	r0, #99	; 0x63
    1750:	f7ff faf0 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
  adcV2 = CalibratePoint(0, NULL, &faims.AUXHVmonI, &V2);
    1754:	2100      	movs	r1, #0
    1756:	465a      	mov	r2, fp
    1758:	ab03      	add	r3, sp, #12
    175a:	4608      	mov	r0, r1
    175c:	f7ff fc0a 	bl	f74 <CalibratePoint(unsigned char, DACchan*, ADCchan*, float*)>
  float m = (float)(adcV2-adcV1) / (V2-V1);
  float b = (float)adcV1 - V1 * m;
    1760:	ee07 4a90 	vmov	s15, r4
  float m = (float)(adcV2-adcV1) / (V2-V1);
    1764:	1b00      	subs	r0, r0, r4
    1766:	eddd 6a02 	vldr	s13, [sp, #8]
    176a:	ed9d 7a03 	vldr	s14, [sp, #12]
  float b = (float)adcV1 - V1 * m;
    176e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
  float m = (float)(adcV2-adcV1) / (V2-V1);
    1772:	ee07 0a90 	vmov	s15, r0
  serial->println("ADC channel calibration parameters.");
    1776:	6834      	ldr	r4, [r6, #0]
  float m = (float)(adcV2-adcV1) / (V2-V1);
    1778:	ee37 7a66 	vsub.f32	s14, s14, s13
							  return write((const uint8_t *)str, strlen(str)); }
    177c:	2223      	movs	r2, #35	; 0x23
    177e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1782:	6823      	ldr	r3, [r4, #0]
    1784:	4923      	ldr	r1, [pc, #140]	; (1814 <CalibrateHVIaux()+0x130>)
    1786:	4620      	mov	r0, r4
    1788:	685b      	ldr	r3, [r3, #4]
    178a:	eec7 8a87 	vdiv.f32	s17, s15, s14
  float b = (float)adcV1 - V1 * m;
    178e:	eea6 8ae8 	vfms.f32	s16, s13, s17
    1792:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1794:	4620      	mov	r0, r4
    1796:	f002 fb07 	bl	3da8 <Print::println()>
  serial->print("m = ");
    179a:	6830      	ldr	r0, [r6, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    179c:	2204      	movs	r2, #4
    179e:	491e      	ldr	r1, [pc, #120]	; (1818 <CalibrateHVIaux()+0x134>)
    17a0:	6803      	ldr	r3, [r0, #0]
    17a2:	685b      	ldr	r3, [r3, #4]
    17a4:	4798      	blx	r3
  serial->println(m);
    17a6:	6834      	ldr	r4, [r6, #0]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    17a8:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
    17ac:	2102      	movs	r1, #2
    17ae:	4620      	mov	r0, r4
    17b0:	f002 fb2a 	bl	3e08 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    17b4:	4620      	mov	r0, r4
    17b6:	f002 faf7 	bl	3da8 <Print::println()>
  serial->print("b = ");
    17ba:	6830      	ldr	r0, [r6, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    17bc:	2204      	movs	r2, #4
    17be:	4917      	ldr	r1, [pc, #92]	; (181c <CalibrateHVIaux()+0x138>)
    17c0:	6803      	ldr	r3, [r0, #0]
    17c2:	685b      	ldr	r3, [r3, #4]
    17c4:	4798      	blx	r3
  serial->println(b);
    17c6:	6834      	ldr	r4, [r6, #0]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    17c8:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
    17cc:	2102      	movs	r1, #2
    17ce:	4620      	mov	r0, r4
    17d0:	f002 fb1a 	bl	3e08 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    17d4:	4620      	mov	r0, r4
    17d6:	f002 fae7 	bl	3da8 <Print::println()>
  faims.AUXHVmonI.m = m;
  faims.AUXHVmonI.b = b;
  faims.Voltage = V;
  UpdateDACvalue(HVDACV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);  
    17da:	464b      	mov	r3, r9
    17dc:	463a      	mov	r2, r7
    17de:	4641      	mov	r1, r8
    17e0:	f8cd a000 	str.w	sl, [sp]
    17e4:	2063      	movs	r0, #99	; 0x63
  faims.Voltage = V;
    17e6:	ed85 9a08 	vstr	s18, [r5, #32]
  faims.AUXHVmonI.m = m;
    17ea:	edc5 8a28 	vstr	s17, [r5, #160]	; 0xa0
  faims.AUXHVmonI.b = b;
    17ee:	ed85 8a29 	vstr	s16, [r5, #164]	; 0xa4
  UpdateDACvalue(HVDACV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, true);  
    17f2:	f7ff fa9f 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
}
    17f6:	b005      	add	sp, #20
    17f8:	ecbd 8b04 	vpop	{d8-d9}
    17fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1800:	20008e14 	.word	0x20008e14
    1804:	2000aa78 	.word	0x2000aa78
    1808:	2000052c 	.word	0x2000052c
    180c:	43480000 	.word	0x43480000
    1810:	443b8000 	.word	0x443b8000
    1814:	200005c4 	.word	0x200005c4
    1818:	200005b4 	.word	0x200005b4
    181c:	200005bc 	.word	0x200005bc
    1820:	2000ae08 	.word	0x2000ae08
    1824:	00000000 	.word	0x00000000

00001828 <Update()>:
{
    1828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if((sdata.Enable != faims.Enable) || sdata.update)
    182c:	4cc6      	ldr	r4, [pc, #792]	; (1b48 <Update()+0x320>)
{
    182e:	b082      	sub	sp, #8
  if((sdata.Enable != faims.Enable) || sdata.update)
    1830:	4dc6      	ldr	r5, [pc, #792]	; (1b4c <Update()+0x324>)
    1832:	7de6      	ldrb	r6, [r4, #23]
    1834:	786b      	ldrb	r3, [r5, #1]
    1836:	42b3      	cmp	r3, r6
    1838:	f000 810d 	beq.w	1a56 <Update()+0x22e>
    if(faims.Enable)
    183c:	2e00      	cmp	r6, #0
    183e:	f040 8102 	bne.w	1a46 <Update()+0x21e>
      digitalWrite(ENABLEHV,LOW);
    1842:	2010      	movs	r0, #16
    1844:	4631      	mov	r1, r6
    1846:	f002 fe8d 	bl	4564 <digitalWrite>
      digitalWrite(AUXENABLEHV,LOW);
    184a:	4631      	mov	r1, r6
    184c:	2017      	movs	r0, #23
		txBuffer[0] = (address << 1);
    184e:	4fc0      	ldr	r7, [pc, #768]	; (1b50 <Update()+0x328>)
    1850:	f002 fe88 	bl	4564 <digitalWrite>
      AD5593write(faims.CVBIASio, 0x09, (1 << POSENA) | (1 << NEGENA));
    1854:	6de3      	ldr	r3, [r4, #92]	; 0x5c
		transmitting = 1;
    1856:	f04f 0801 	mov.w	r8, #1
  Wire.write(pb);
    185a:	2109      	movs	r1, #9
		txBuffer[0] = (address << 1);
    185c:	005b      	lsls	r3, r3, #1
    185e:	4638      	mov	r0, r7
		transmitting = 1;
    1860:	f887 8130 	strb.w	r8, [r7, #304]	; 0x130
		txBuffer[0] = (address << 1);
    1864:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
		txBufferLength = 1;
    1868:	f887 812f 	strb.w	r8, [r7, #303]	; 0x12f
    186c:	f001 f9d8 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
    1870:	4631      	mov	r1, r6
    1872:	4638      	mov	r0, r7
    1874:	f001 f9d4 	bl	2c20 <TwoWire::write(unsigned char)>
    1878:	2130      	movs	r1, #48	; 0x30
    187a:	4638      	mov	r0, r7
    187c:	f001 f9d0 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    1880:	4641      	mov	r1, r8
    1882:	4638      	mov	r0, r7
    1884:	f001 faa4 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
      digitalWrite(RFONLT,LOW);
    1888:	4631      	mov	r1, r6
    188a:	200c      	movs	r0, #12
    188c:	f002 fe6a 	bl	4564 <digitalWrite>
      digitalWrite(RFONLED,HIGH);
    1890:	4641      	mov	r1, r8
    1892:	4630      	mov	r0, r6
    1894:	f002 fe66 	bl	4564 <digitalWrite>
    sdata.Enable = faims.Enable;
    1898:	7de3      	ldrb	r3, [r4, #23]
    189a:	706b      	strb	r3, [r5, #1]
  if((sdata.Duty != faims.Duty) || sdata.update) { analogWrite(FAIMSPLUSE, (int)((100 - faims.Duty) * 1024 / 100)); sdata.Duty = faims.Duty; }
    189c:	edd4 7a06 	vldr	s15, [r4, #24]
    18a0:	ed95 7a01 	vldr	s14, [r5, #4]
    18a4:	eeb4 7a67 	vcmp.f32	s14, s15
    18a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    18ac:	d101      	bne.n	18b2 <Update()+0x8a>
    18ae:	782b      	ldrb	r3, [r5, #0]
    18b0:	b193      	cbz	r3, 18d8 <Update()+0xb0>
    18b2:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 1b54 <Update()+0x32c>
    18b6:	2004      	movs	r0, #4
    18b8:	eddf 6aa7 	vldr	s13, [pc, #668]	; 1b58 <Update()+0x330>
    18bc:	ee77 7a67 	vsub.f32	s15, s14, s15
    18c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    18c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
    18c8:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    18cc:	ee17 1a90 	vmov	r1, s15
    18d0:	f003 fb36 	bl	4f40 <analogWrite>
    18d4:	69a3      	ldr	r3, [r4, #24]
    18d6:	606b      	str	r3, [r5, #4]
  if((sdata.Freq != faims.Freq) || sdata.update) { analogWriteFrequency(FAIMSPLUSE, faims.Freq); sdata.Freq = faims.Freq; }
    18d8:	69e3      	ldr	r3, [r4, #28]
    18da:	68aa      	ldr	r2, [r5, #8]
    18dc:	429a      	cmp	r2, r3
    18de:	f040 80c2 	bne.w	1a66 <Update()+0x23e>
    18e2:	7829      	ldrb	r1, [r5, #0]
    18e4:	2900      	cmp	r1, #0
    18e6:	f040 80be 	bne.w	1a66 <Update()+0x23e>
  if((sdata.Voltage != faims.Voltage) || sdata.update) UpdateDACvalue(faims.HVdacV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, sdata.update);
    18ea:	ed95 7a03 	vldr	s14, [r5, #12]
    18ee:	edd4 7a08 	vldr	s15, [r4, #32]
    18f2:	eeb4 7a67 	vcmp.f32	s14, s15
    18f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    18fa:	f040 80ca 	bne.w	1a92 <Update()+0x26a>
  if((sdata.MaxI != faims.MaxI) || sdata.update) UpdateDACvalue(faims.HVdacI, &faims.HVcurCtrl, &faims.MaxI, &sdata.MaxI, sdata.update);
    18fe:	ed95 7a04 	vldr	s14, [r5, #16]
    1902:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    1906:	eeb4 7a67 	vcmp.f32	s14, s15
    190a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    190e:	f040 810f 	bne.w	1b30 <Update()+0x308>
  if((sdata.CV != faims.CV) || sdata.update) UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, sdata.update);
    1912:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    1916:	edd5 7a05 	vldr	s15, [r5, #20]
    191a:	eeb4 7a67 	vcmp.f32	s14, s15
    191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1922:	f040 8109 	bne.w	1b38 <Update()+0x310>
  if((sdata.Bias != faims.Bias) || sdata.update) UpdateDACvalue(faims.CVBIASio, &faims.BIASsetCtrl, &faims.Bias, &sdata.Bias, sdata.update);
    1926:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
    192a:	edd5 7a06 	vldr	s15, [r5, #24]
    192e:	eeb4 7a67 	vcmp.f32	s14, s15
    1932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1936:	f040 80fd 	bne.w	1b34 <Update()+0x30c>
  UpdateADCvalue(0, &faims.HVmonV, &HVmonV[0]);    if(HVmonV[0] < 0) HVmonV[0] = 0;
    193a:	4e88      	ldr	r6, [pc, #544]	; (1b5c <Update()+0x334>)
  sdata.update = false;
    193c:	2000      	movs	r0, #0
  UpdateADCvalue(0, &faims.HVmonV, &HVmonV[0]);    if(HVmonV[0] < 0) HVmonV[0] = 0;
    193e:	ed9f 0a88 	vldr	s0, [pc, #544]	; 1b60 <Update()+0x338>
    1942:	4632      	mov	r2, r6
    1944:	4987      	ldr	r1, [pc, #540]	; (1b64 <Update()+0x33c>)
  sdata.update = false;
    1946:	7028      	strb	r0, [r5, #0]
  UpdateADCvalue(0, &faims.HVmonV, &HVmonV[0]);    if(HVmonV[0] < 0) HVmonV[0] = 0;
    1948:	f7ff f840 	bl	9cc <UpdateADCvalue(unsigned char, ADCchan*, float*, float)>
    194c:	edd6 7a00 	vldr	s15, [r6]
    1950:	2300      	movs	r3, #0
  UpdateADCvalue(0, &faims.AUXHVmonV, &HVmonV[1]); if(HVmonV[1] < 0) HVmonV[1] = 0;
    1952:	ed9f 0a83 	vldr	s0, [pc, #524]	; 1b60 <Update()+0x338>
    1956:	2000      	movs	r0, #0
  UpdateADCvalue(0, &faims.HVmonV, &HVmonV[0]);    if(HVmonV[0] < 0) HVmonV[0] = 0;
    1958:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  UpdateADCvalue(0, &faims.AUXHVmonV, &HVmonV[1]); if(HVmonV[1] < 0) HVmonV[1] = 0;
    195c:	4a82      	ldr	r2, [pc, #520]	; (1b68 <Update()+0x340>)
    195e:	4983      	ldr	r1, [pc, #524]	; (1b6c <Update()+0x344>)
  UpdateADCvalue(0, &faims.HVmonI, &HVmonI[0]);    if(HVmonI[0] < 0) HVmonI[0] = 0;
    1960:	4d83      	ldr	r5, [pc, #524]	; (1b70 <Update()+0x348>)
  UpdateADCvalue(0, &faims.HVmonV, &HVmonV[0]);    if(HVmonV[0] < 0) HVmonV[0] = 0;
    1962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1966:	bf48      	it	mi
    1968:	6033      	strmi	r3, [r6, #0]
  UpdateADCvalue(0, &faims.AUXHVmonV, &HVmonV[1]); if(HVmonV[1] < 0) HVmonV[1] = 0;
    196a:	f7ff f82f 	bl	9cc <UpdateADCvalue(unsigned char, ADCchan*, float*, float)>
    196e:	edd6 7a01 	vldr	s15, [r6, #4]
    1972:	2300      	movs	r3, #0
  UpdateADCvalue(0, &faims.HVmonI, &HVmonI[0]);    if(HVmonI[0] < 0) HVmonI[0] = 0;
    1974:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 1b60 <Update()+0x338>
  UpdateADCvalue(0, &faims.AUXHVmonV, &HVmonV[1]); if(HVmonV[1] < 0) HVmonV[1] = 0;
    1978:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  UpdateADCvalue(0, &faims.HVmonI, &HVmonI[0]);    if(HVmonI[0] < 0) HVmonI[0] = 0;
    197c:	497d      	ldr	r1, [pc, #500]	; (1b74 <Update()+0x34c>)
    197e:	462a      	mov	r2, r5
    1980:	2000      	movs	r0, #0
  UpdateADCvalue(0, &faims.AUXHVmonV, &HVmonV[1]); if(HVmonV[1] < 0) HVmonV[1] = 0;
    1982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1986:	bf48      	it	mi
    1988:	6073      	strmi	r3, [r6, #4]
  UpdateADCvalue(0, &faims.HVmonI, &HVmonI[0]);    if(HVmonI[0] < 0) HVmonI[0] = 0;
    198a:	f7ff f81f 	bl	9cc <UpdateADCvalue(unsigned char, ADCchan*, float*, float)>
    198e:	edd5 7a00 	vldr	s15, [r5]
    1992:	2300      	movs	r3, #0
  UpdateADCvalue(0, &faims.AUXHVmonI, &HVmonI[1]); if(HVmonI[1] < 0) HVmonI[1] = 0;
    1994:	ed9f 0a72 	vldr	s0, [pc, #456]	; 1b60 <Update()+0x338>
  UpdateADCvalue(0, &faims.HVmonI, &HVmonI[0]);    if(HVmonI[0] < 0) HVmonI[0] = 0;
    1998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  UpdateADCvalue(0, &faims.AUXHVmonI, &HVmonI[1]); if(HVmonI[1] < 0) HVmonI[1] = 0;
    199c:	4a76      	ldr	r2, [pc, #472]	; (1b78 <Update()+0x350>)
    199e:	4977      	ldr	r1, [pc, #476]	; (1b7c <Update()+0x354>)
    19a0:	2000      	movs	r0, #0
  UpdateADCvalue(0, &faims.HVmonI, &HVmonI[0]);    if(HVmonI[0] < 0) HVmonI[0] = 0;
    19a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    19a6:	bf48      	it	mi
    19a8:	602b      	strmi	r3, [r5, #0]
  UpdateADCvalue(0, &faims.AUXHVmonI, &HVmonI[1]); if(HVmonI[1] < 0) HVmonI[1] = 0;
    19aa:	f7ff f80f 	bl	9cc <UpdateADCvalue(unsigned char, ADCchan*, float*, float)>
    19ae:	edd5 7a01 	vldr	s15, [r5, #4]
    19b2:	2300      	movs	r3, #0
  UpdateADCvalue(faims.CVBIASio, &faims.CVmon, &CVmon);
    19b4:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 1b60 <Update()+0x338>
  UpdateADCvalue(0, &faims.AUXHVmonI, &HVmonI[1]); if(HVmonI[1] < 0) HVmonI[1] = 0;
    19b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  UpdateADCvalue(faims.CVBIASio, &faims.CVmon, &CVmon);
    19bc:	4a70      	ldr	r2, [pc, #448]	; (1b80 <Update()+0x358>)
    19be:	4971      	ldr	r1, [pc, #452]	; (1b84 <Update()+0x35c>)
    19c0:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
  UpdateADCvalue(0, &faims.AUXHVmonI, &HVmonI[1]); if(HVmonI[1] < 0) HVmonI[1] = 0;
    19c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    19c8:	bf48      	it	mi
    19ca:	606b      	strmi	r3, [r5, #4]
  UpdateADCvalue(faims.CVBIASio, &faims.CVmon, &CVmon);
    19cc:	f7fe fffe 	bl	9cc <UpdateADCvalue(unsigned char, ADCchan*, float*, float)>
  UpdateADCvalue(faims.CVBIASio, &faims.BIASmon, &BIASmon);
    19d0:	ed9f 0a63 	vldr	s0, [pc, #396]	; 1b60 <Update()+0x338>
    19d4:	4a6c      	ldr	r2, [pc, #432]	; (1b88 <Update()+0x360>)
    19d6:	496d      	ldr	r1, [pc, #436]	; (1b8c <Update()+0x364>)
    19d8:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    19dc:	f7fe fff6 	bl	9cc <UpdateADCvalue(unsigned char, ADCchan*, float*, float)>
  UpdateADCvalue(0, &faims.ReturnI, &returnI);
    19e0:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 1b60 <Update()+0x338>
    19e4:	4a6a      	ldr	r2, [pc, #424]	; (1b90 <Update()+0x368>)
    19e6:	2000      	movs	r0, #0
    19e8:	496a      	ldr	r1, [pc, #424]	; (1b94 <Update()+0x36c>)
    19ea:	f7fe ffef 	bl	9cc <UpdateADCvalue(unsigned char, ADCchan*, float*, float)>
  UpdateADCvalue(0, &faims.Mon12V, &supply);
    19ee:	4a6a      	ldr	r2, [pc, #424]	; (1b98 <Update()+0x370>)
    19f0:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 1b60 <Update()+0x338>
    19f4:	2000      	movs	r0, #0
    19f6:	4969      	ldr	r1, [pc, #420]	; (1b9c <Update()+0x374>)
    19f8:	f7fe ffe8 	bl	9cc <UpdateADCvalue(unsigned char, ADCchan*, float*, float)>
  power = (HVmonV[0] * HVmonI[0]/1000.0) + (HVmonV[1] * HVmonI[1]/1000.0);
    19fc:	ed95 7a00 	vldr	s14, [r5]
    1a00:	edd5 7a01 	vldr	s15, [r5, #4]
    1a04:	ed96 5a00 	vldr	s10, [r6]
    1a08:	ed96 6a01 	vldr	s12, [r6, #4]
    1a0c:	ee25 5a07 	vmul.f32	s10, s10, s14
    1a10:	4a63      	ldr	r2, [pc, #396]	; (1ba0 <Update()+0x378>)
    1a12:	ee26 6a27 	vmul.f32	s12, s12, s15
  if(!faims.Enable) return;
    1a16:	7de3      	ldrb	r3, [r4, #23]
  power = (HVmonV[0] * HVmonI[0]/1000.0) + (HVmonV[1] * HVmonI[1]/1000.0);
    1a18:	ed9f 4b49 	vldr	d4, [pc, #292]	; 1b40 <Update()+0x318>
    1a1c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    1a20:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    1a24:	ee85 7b04 	vdiv.f64	d7, d5, d4
    1a28:	ee86 5b04 	vdiv.f64	d5, d6, d4
    1a2c:	ee37 7b05 	vadd.f64	d7, d7, d5
    1a30:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    1a34:	ed82 7a00 	vstr	s14, [r2]
  if(!faims.Enable) return;
    1a38:	2b00      	cmp	r3, #0
    1a3a:	d076      	beq.n	1b2a <Update()+0x302>
}
    1a3c:	b002      	add	sp, #8
    1a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1a42:	f7fe bb9d 	b.w	180 <systemMonitor() [clone .part.0]>
      digitalWrite(STATUSLED,HIGH);
    1a46:	2101      	movs	r1, #1
    1a48:	4608      	mov	r0, r1
    1a4a:	f002 fd8b 	bl	4564 <digitalWrite>
      triggerEnable = true;
    1a4e:	4b55      	ldr	r3, [pc, #340]	; (1ba4 <Update()+0x37c>)
    1a50:	2201      	movs	r2, #1
    1a52:	701a      	strb	r2, [r3, #0]
    1a54:	e720      	b.n	1898 <Update()+0x70>
  if((sdata.Enable != faims.Enable) || sdata.update)
    1a56:	782b      	ldrb	r3, [r5, #0]
    1a58:	2b00      	cmp	r3, #0
    1a5a:	f43f af1f 	beq.w	189c <Update()+0x74>
    if(faims.Enable)
    1a5e:	2e00      	cmp	r6, #0
    1a60:	f43f aeef 	beq.w	1842 <Update()+0x1a>
    1a64:	e7ef      	b.n	1a46 <Update()+0x21e>
  if((sdata.Freq != faims.Freq) || sdata.update) { analogWriteFrequency(FAIMSPLUSE, faims.Freq); sdata.Freq = faims.Freq; }
    1a66:	ee07 3a90 	vmov	s15, r3
    1a6a:	2004      	movs	r0, #4
    1a6c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    1a70:	f003 facc 	bl	500c <analogWriteFrequency>
  if((sdata.Voltage != faims.Voltage) || sdata.update) UpdateDACvalue(faims.HVdacV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, sdata.update);
    1a74:	ed95 7a03 	vldr	s14, [r5, #12]
    1a78:	edd4 7a08 	vldr	s15, [r4, #32]
  if((sdata.Freq != faims.Freq) || sdata.update) { analogWriteFrequency(FAIMSPLUSE, faims.Freq); sdata.Freq = faims.Freq; }
    1a7c:	69e3      	ldr	r3, [r4, #28]
  if((sdata.Voltage != faims.Voltage) || sdata.update) UpdateDACvalue(faims.HVdacV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, sdata.update);
    1a7e:	eeb4 7a67 	vcmp.f32	s14, s15
    1a82:	7829      	ldrb	r1, [r5, #0]
  if((sdata.Freq != faims.Freq) || sdata.update) { analogWriteFrequency(FAIMSPLUSE, faims.Freq); sdata.Freq = faims.Freq; }
    1a84:	60ab      	str	r3, [r5, #8]
  if((sdata.Voltage != faims.Voltage) || sdata.update) UpdateDACvalue(faims.HVdacV, &faims.HVvoltCtrl, &faims.Voltage, &sdata.Voltage, sdata.update);
    1a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1a8a:	d102      	bne.n	1a92 <Update()+0x26a>
    1a8c:	2900      	cmp	r1, #0
    1a8e:	f43f af36 	beq.w	18fe <Update()+0xd6>
    1a92:	4a45      	ldr	r2, [pc, #276]	; (1ba8 <Update()+0x380>)
    1a94:	9100      	str	r1, [sp, #0]
    1a96:	4b45      	ldr	r3, [pc, #276]	; (1bac <Update()+0x384>)
    1a98:	f102 0140 	add.w	r1, r2, #64	; 0x40
    1a9c:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
    1aa0:	f7ff f948 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
  if((sdata.MaxI != faims.MaxI) || sdata.update) UpdateDACvalue(faims.HVdacI, &faims.HVcurCtrl, &faims.MaxI, &sdata.MaxI, sdata.update);
    1aa4:	ed95 7a04 	vldr	s14, [r5, #16]
    1aa8:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    1aac:	7829      	ldrb	r1, [r5, #0]
    1aae:	eeb4 7a67 	vcmp.f32	s14, s15
    1ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1ab6:	d102      	bne.n	1abe <Update()+0x296>
    1ab8:	2900      	cmp	r1, #0
    1aba:	f43f af2a 	beq.w	1912 <Update()+0xea>
    1abe:	4a3c      	ldr	r2, [pc, #240]	; (1bb0 <Update()+0x388>)
    1ac0:	9100      	str	r1, [sp, #0]
    1ac2:	4b3c      	ldr	r3, [pc, #240]	; (1bb4 <Update()+0x38c>)
    1ac4:	f102 0148 	add.w	r1, r2, #72	; 0x48
    1ac8:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    1acc:	f7ff f932 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
  if((sdata.CV != faims.CV) || sdata.update) UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, sdata.update);
    1ad0:	ed95 7a05 	vldr	s14, [r5, #20]
    1ad4:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    1ad8:	7829      	ldrb	r1, [r5, #0]
    1ada:	eeb4 7a67 	vcmp.f32	s14, s15
    1ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1ae2:	d102      	bne.n	1aea <Update()+0x2c2>
    1ae4:	2900      	cmp	r1, #0
    1ae6:	f43f af1e 	beq.w	1926 <Update()+0xfe>
    1aea:	4a33      	ldr	r2, [pc, #204]	; (1bb8 <Update()+0x390>)
    1aec:	9100      	str	r1, [sp, #0]
    1aee:	4b33      	ldr	r3, [pc, #204]	; (1bbc <Update()+0x394>)
    1af0:	f102 0198 	add.w	r1, r2, #152	; 0x98
    1af4:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    1af8:	f7ff f91c 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
  if((sdata.Bias != faims.Bias) || sdata.update) UpdateDACvalue(faims.CVBIASio, &faims.BIASsetCtrl, &faims.Bias, &sdata.Bias, sdata.update);
    1afc:	ed95 7a06 	vldr	s14, [r5, #24]
    1b00:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    1b04:	7829      	ldrb	r1, [r5, #0]
    1b06:	eeb4 7a67 	vcmp.f32	s14, s15
    1b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1b0e:	d102      	bne.n	1b16 <Update()+0x2ee>
    1b10:	2900      	cmp	r1, #0
    1b12:	f43f af12 	beq.w	193a <Update()+0x112>
    1b16:	4a2a      	ldr	r2, [pc, #168]	; (1bc0 <Update()+0x398>)
    1b18:	9100      	str	r1, [sp, #0]
    1b1a:	4b2a      	ldr	r3, [pc, #168]	; (1bc4 <Update()+0x39c>)
    1b1c:	f102 01ac 	add.w	r1, r2, #172	; 0xac
    1b20:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    1b24:	f7ff f906 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
    1b28:	e707      	b.n	193a <Update()+0x112>
}
    1b2a:	b002      	add	sp, #8
    1b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((sdata.MaxI != faims.MaxI) || sdata.update) UpdateDACvalue(faims.HVdacI, &faims.HVcurCtrl, &faims.MaxI, &sdata.MaxI, sdata.update);
    1b30:	2100      	movs	r1, #0
    1b32:	e7c4      	b.n	1abe <Update()+0x296>
  if((sdata.Bias != faims.Bias) || sdata.update) UpdateDACvalue(faims.CVBIASio, &faims.BIASsetCtrl, &faims.Bias, &sdata.Bias, sdata.update);
    1b34:	2100      	movs	r1, #0
    1b36:	e7ee      	b.n	1b16 <Update()+0x2ee>
  if((sdata.CV != faims.CV) || sdata.update) UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, sdata.update);
    1b38:	2100      	movs	r1, #0
    1b3a:	e7d6      	b.n	1aea <Update()+0x2c2>
    1b3c:	f3af 8000 	nop.w
    1b40:	00000000 	.word	0x00000000
    1b44:	408f4000 	.word	0x408f4000
    1b48:	2000aa78 	.word	0x2000aa78
    1b4c:	2000adfc 	.word	0x2000adfc
    1b50:	2000826c 	.word	0x2000826c
    1b54:	42c80000 	.word	0x42c80000
    1b58:	44800000 	.word	0x44800000
    1b5c:	2000949c 	.word	0x2000949c
    1b60:	3dcccccd 	.word	0x3dcccccd
    1b64:	2000aaf0 	.word	0x2000aaf0
    1b68:	200094a0 	.word	0x200094a0
    1b6c:	2000ab08 	.word	0x2000ab08
    1b70:	20009494 	.word	0x20009494
    1b74:	2000aafc 	.word	0x2000aafc
    1b78:	20009498 	.word	0x20009498
    1b7c:	2000ab14 	.word	0x2000ab14
    1b80:	2000948c 	.word	0x2000948c
    1b84:	2000ab44 	.word	0x2000ab44
    1b88:	20009488 	.word	0x20009488
    1b8c:	2000ab5c 	.word	0x2000ab5c
    1b90:	2000ab94 	.word	0x2000ab94
    1b94:	2000ab2c 	.word	0x2000ab2c
    1b98:	2000ae3c 	.word	0x2000ae3c
    1b9c:	2000ab20 	.word	0x2000ab20
    1ba0:	2000ab88 	.word	0x2000ab88
    1ba4:	2000affe 	.word	0x2000affe
    1ba8:	2000aa98 	.word	0x2000aa98
    1bac:	2000ae08 	.word	0x2000ae08
    1bb0:	2000aa9c 	.word	0x2000aa9c
    1bb4:	2000ae0c 	.word	0x2000ae0c
    1bb8:	2000aaa0 	.word	0x2000aaa0
    1bbc:	2000ae10 	.word	0x2000ae10
    1bc0:	2000aaa4 	.word	0x2000aaa4
    1bc4:	2000ae14 	.word	0x2000ae14

00001bc8 <setup>:
{
    1bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pinMode(ENABLE24,OUTPUT);
    1bca:	2101      	movs	r1, #1
    1bcc:	2007      	movs	r0, #7
    1bce:	f002 fd05 	bl	45dc <pinMode>
  digitalWrite(ENABLE24,LOW);
    1bd2:	2100      	movs	r1, #0
    1bd4:	2007      	movs	r0, #7
  faims = Rev_1_faims;
    1bd6:	4d58      	ldr	r5, [pc, #352]	; (1d38 <setup+0x170>)
  digitalWrite(ENABLE24,LOW);
    1bd8:	f002 fcc4 	bl	4564 <digitalWrite>
  pinMode(ENABLEHV,OUTPUT);
    1bdc:	2101      	movs	r1, #1
    1bde:	2010      	movs	r0, #16
    uint8_t btn;
    uint16_t state;
  public:
    void begin(uint8_t button) 
    {
      btn = button;
    1be0:	4e56      	ldr	r6, [pc, #344]	; (1d3c <setup+0x174>)
    1be2:	f002 fcfb 	bl	45dc <pinMode>
  digitalWrite(ENABLEHV,LOW);
    1be6:	2100      	movs	r1, #0
    1be8:	2010      	movs	r0, #16
      state = 0;
    1bea:	460c      	mov	r4, r1
    1bec:	f002 fcba 	bl	4564 <digitalWrite>
  pinMode(AUXENABLEHV,OUTPUT);
    1bf0:	2101      	movs	r1, #1
    1bf2:	2017      	movs	r0, #23
    1bf4:	f002 fcf2 	bl	45dc <pinMode>
  digitalWrite(AUXENABLEHV,LOW);
    1bf8:	4621      	mov	r1, r4
    1bfa:	2017      	movs	r0, #23
    1bfc:	f002 fcb2 	bl	4564 <digitalWrite>
  pinMode(BUZZER,OUTPUT);
    1c00:	2101      	movs	r1, #1
    1c02:	200b      	movs	r0, #11
    1c04:	f002 fcea 	bl	45dc <pinMode>
  digitalWrite(BUZZER,LOW);
    1c08:	4621      	mov	r1, r4
    1c0a:	200b      	movs	r0, #11
    1c0c:	f002 fcaa 	bl	4564 <digitalWrite>
  pinMode(RFONLT,OUTPUT);
    1c10:	2101      	movs	r1, #1
    1c12:	200c      	movs	r0, #12
    1c14:	f002 fce2 	bl	45dc <pinMode>
  digitalWrite(RFONLT,LOW);
    1c18:	4621      	mov	r1, r4
    1c1a:	200c      	movs	r0, #12
    1c1c:	f002 fca2 	bl	4564 <digitalWrite>
  pinMode(RFONLED,OUTPUT);
    1c20:	2101      	movs	r1, #1
    1c22:	4620      	mov	r0, r4
    1c24:	f002 fcda 	bl	45dc <pinMode>
  digitalWrite(RFONLED,HIGH);
    1c28:	2101      	movs	r1, #1
    1c2a:	4620      	mov	r0, r4
    1c2c:	f002 fc9a 	bl	4564 <digitalWrite>
  pinMode(STATUSLED,OUTPUT);
    1c30:	2101      	movs	r1, #1
    1c32:	4608      	mov	r0, r1
    1c34:	f002 fcd2 	bl	45dc <pinMode>
  digitalWrite(STATUSLED,HIGH);
    1c38:	2101      	movs	r1, #1
    1c3a:	4608      	mov	r0, r1
    1c3c:	f002 fc92 	bl	4564 <digitalWrite>
  pinMode(TRIGOUT,OUTPUT);
    1c40:	2101      	movs	r1, #1
    1c42:	2002      	movs	r0, #2
    1c44:	f002 fcca 	bl	45dc <pinMode>
  digitalWrite(TRIGOUT,HIGH);
    1c48:	2101      	movs	r1, #1
    1c4a:	2002      	movs	r0, #2
    1c4c:	f002 fc8a 	bl	4564 <digitalWrite>
  faims = Rev_1_faims;
    1c50:	22f4      	movs	r2, #244	; 0xf4
    1c52:	493b      	ldr	r1, [pc, #236]	; (1d40 <setup+0x178>)
    1c54:	4628      	mov	r0, r5
    1c56:	f002 ff99 	bl	4b8c <memcpy>
  Restore();
    1c5a:	f7fe fb5d 	bl	318 <Restore()>
  SerialInit();
    1c5e:	f000 fb97 	bl	2390 <SerialInit()>
  Wire.begin();
    1c62:	4838      	ldr	r0, [pc, #224]	; (1d44 <setup+0x17c>)
    1c64:	f00f fae0 	bl	11228 <___ZN7TwoWire5beginEv_veneer>
  Wire.setClock(100000);
    1c68:	4937      	ldr	r1, [pc, #220]	; (1d48 <setup+0x180>)
    1c6a:	4836      	ldr	r0, [pc, #216]	; (1d44 <setup+0x17c>)
    1c6c:	f001 fa48 	bl	3100 <TwoWire::setClock(unsigned long)>
  AD5593init(faims.CVBIASio);
    1c70:	f995 005c 	ldrsb.w	r0, [r5, #92]	; 0x5c
    1c74:	f7fe ff78 	bl	b68 <AD5593init(signed char)>
static inline uint32_t analogWriteResolution(uint32_t bits) { return analogWriteRes(bits); }
    1c78:	200a      	movs	r0, #10
    1c7a:	f003 fab7 	bl	51ec <analogWriteRes>
static inline void analogReadResolution(unsigned int bits) { analogReadRes(bits); }
    1c7e:	200c      	movs	r0, #12
    1c80:	f002 fa74 	bl	416c <analogReadRes>
  pinMode(ENABLE24,OUTPUT);
    1c84:	2101      	movs	r1, #1
    1c86:	2007      	movs	r0, #7
    1c88:	f002 fca8 	bl	45dc <pinMode>
  digitalWrite(ENABLE24,HIGH);
    1c8c:	2101      	movs	r1, #1
    1c8e:	2007      	movs	r0, #7
    1c90:	f002 fc68 	bl	4564 <digitalWrite>
  SystemThread.setName((char *)"Update");
    1c94:	492d      	ldr	r1, [pc, #180]	; (1d4c <setup+0x184>)
    1c96:	482e      	ldr	r0, [pc, #184]	; (1d50 <setup+0x188>)
    1c98:	f001 fab4 	bl	3204 <Thread::setName(char*)>
  SystemThread.onRun(Update);
    1c9c:	492d      	ldr	r1, [pc, #180]	; (1d54 <setup+0x18c>)
    1c9e:	482c      	ldr	r0, [pc, #176]	; (1d50 <setup+0x188>)
    1ca0:	f001 fac8 	bl	3234 <Thread::onRun(void (*)())>
  SystemThread.setInterval(100);
    1ca4:	2164      	movs	r1, #100	; 0x64
    1ca6:	482a      	ldr	r0, [pc, #168]	; (1d50 <setup+0x188>)
    1ca8:	f001 fa66 	bl	3178 <Thread::setInterval(long)>
  control.add(&SystemThread);
    1cac:	4928      	ldr	r1, [pc, #160]	; (1d50 <setup+0x188>)
    1cae:	482a      	ldr	r0, [pc, #168]	; (1d58 <setup+0x190>)
    1cb0:	f001 fb0a 	bl	32c8 <ThreadController::add(Thread*)>
      btn = button;
    1cb4:	2005      	movs	r0, #5
      pinMode(btn, INPUT_PULLUP);
    1cb6:	2102      	movs	r1, #2
      state = 0;
    1cb8:	8074      	strh	r4, [r6, #2]
      btn = button;
    1cba:	7030      	strb	r0, [r6, #0]
      pinMode(btn, INPUT_PULLUP);
    1cbc:	f002 fc8e 	bl	45dc <pinMode>
        timer_foreach_task(t) {
    1cc0:	4b26      	ldr	r3, [pc, #152]	; (1d5c <setup+0x194>)
    1cc2:	f503 72c0 	add.w	r2, r3, #384	; 0x180
        task->opaque = T();
    1cc6:	e943 4406 	strd	r4, r4, [r3, #-24]
        task->expires = 0;
    1cca:	e943 4404 	strd	r4, r4, [r3, #-16]
        task->id = 0;
    1cce:	e943 4402 	strd	r4, r4, [r3, #-8]
        timer_foreach_task(t) {
    1cd2:	3318      	adds	r3, #24
    1cd4:	4293      	cmp	r3, r2
    1cd6:	d1f6      	bne.n	1cc6 <setup+0xfe>
	return systick_millis_count;
    1cd8:	4a21      	ldr	r2, [pc, #132]	; (1d60 <setup+0x198>)
        timer_foreach_task(slot) {
    1cda:	4b22      	ldr	r3, [pc, #136]	; (1d64 <setup+0x19c>)
    1cdc:	6810      	ldr	r0, [r2, #0]
    1cde:	f503 71c0 	add.w	r1, r3, #384	; 0x180
            if (slot->handler == NULL) return slot;
    1ce2:	681a      	ldr	r2, [r3, #0]
    1ce4:	b1b2      	cbz	r2, 1d14 <setup+0x14c>
        timer_foreach_task(slot) {
    1ce6:	3318      	adds	r3, #24
    1ce8:	428b      	cmp	r3, r1
    1cea:	d1fa      	bne.n	1ce2 <setup+0x11a>
  sdata.update = true;
    1cec:	4b1e      	ldr	r3, [pc, #120]	; (1d68 <setup+0x1a0>)
    1cee:	2201      	movs	r2, #1
      state = (state<<1) | digitalRead(btn) | 0xfe00;
      return (state == 0xff00);
    }
    bool released()
    {
      state = (state<<1) | digitalRead(btn) | 0xfe00;
    1cf0:	2564      	movs	r5, #100	; 0x64
    1cf2:	4f1e      	ldr	r7, [pc, #120]	; (1d6c <setup+0x1a4>)
    1cf4:	701a      	strb	r2, [r3, #0]
  Update();
    1cf6:	f7ff fd97 	bl	1828 <Update()>
    1cfa:	8874      	ldrh	r4, [r6, #2]
    1cfc:	7830      	ldrb	r0, [r6, #0]
    1cfe:	f002 fc5b 	bl	45b8 <digitalRead>
  for(int i=0;i<100;i++) functionPin.released();
    1d02:	3d01      	subs	r5, #1
    1d04:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    1d08:	ea40 0007 	orr.w	r0, r0, r7
    1d0c:	b284      	uxth	r4, r0
    1d0e:	8074      	strh	r4, [r6, #2]
    1d10:	d1f4      	bne.n	1cfc <setup+0x134>
}
    1d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (++ctr == 0) ++ctr; // overflow
    1d14:	4916      	ldr	r1, [pc, #88]	; (1d70 <setup+0x1a8>)
        slot->repeat = repeat;
    1d16:	2401      	movs	r4, #1
        slot->opaque = opaque;
    1d18:	605a      	str	r2, [r3, #4]
        if (++ctr == 0) ++ctr; // overflow
    1d1a:	680a      	ldr	r2, [r1, #0]
        slot->start = start;
    1d1c:	6098      	str	r0, [r3, #8]
        slot->expires = expires;
    1d1e:	20fa      	movs	r0, #250	; 0xfa
        if (++ctr == 0) ++ctr; // overflow
    1d20:	4422      	add	r2, r4
        slot->repeat = repeat;
    1d22:	611c      	str	r4, [r3, #16]
        slot->expires = expires;
    1d24:	60d8      	str	r0, [r3, #12]
    1d26:	42a2      	cmp	r2, r4
    1d28:	bf38      	it	cc
    1d2a:	4622      	movcc	r2, r4
    1d2c:	600a      	str	r2, [r1, #0]
        slot->handler = h;
    1d2e:	4911      	ldr	r1, [pc, #68]	; (1d74 <setup+0x1ac>)
        slot->id = ctr;
    1d30:	615a      	str	r2, [r3, #20]
        slot->handler = h;
    1d32:	6019      	str	r1, [r3, #0]
    1d34:	e7da      	b.n	1cec <setup+0x124>
    1d36:	bf00      	nop
    1d38:	2000aa78 	.word	0x2000aa78
    1d3c:	2000ab6c 	.word	0x2000ab6c
    1d40:	20008108 	.word	0x20008108
    1d44:	2000826c 	.word	0x2000826c
    1d48:	000186a0 	.word	0x000186a0
    1d4c:	200078d8 	.word	0x200078d8
    1d50:	2000a4e0 	.word	0x2000a4e0
    1d54:	00001829 	.word	0x00001829
    1d58:	2000a9f0 	.word	0x2000a9f0
    1d5c:	2000ae68 	.word	0x2000ae68
    1d60:	2000ae44 	.word	0x2000ae44
    1d64:	2000ae50 	.word	0x2000ae50
    1d68:	2000adfc 	.word	0x2000adfc
    1d6c:	fffffe00 	.word	0xfffffe00
    1d70:	2000ae4c 	.word	0x2000ae4c
    1d74:	00002001 	.word	0x00002001

00001d78 <loop>:
{
    1d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d7c:	4c8e      	ldr	r4, [pc, #568]	; (1fb8 <loop+0x240>)
    1d7e:	b083      	sub	sp, #12
  ProcessSerial();
    1d80:	2001      	movs	r0, #1
    1d82:	4e8e      	ldr	r6, [pc, #568]	; (1fbc <loop+0x244>)
    1d84:	f1a4 081c 	sub.w	r8, r4, #28
    1d88:	f7fe fdb6 	bl	8f8 <ProcessSerial(bool)>
  control.run();
    1d8c:	488c      	ldr	r0, [pc, #560]	; (1fc0 <loop+0x248>)
        task->handler = NULL;
    1d8e:	2700      	movs	r7, #0
    1d90:	4645      	mov	r5, r8
    1d92:	f508 7bce 	add.w	fp, r8, #412	; 0x19c
                    task->repeat = task->handler(task->opaque) && task->repeat;
    1d96:	f04f 0901 	mov.w	r9, #1
    1d9a:	f001 fa53 	bl	3244 <ThreadController::run()>
        timer_foreach_task(task) {
    1d9e:	e009      	b.n	1db4 <loop+0x3c>
                    task->repeat = task->handler(task->opaque) && task->repeat;
    1da0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    1da4:	b1bb      	cbz	r3, 1dd6 <loop+0x5e>
    1da6:	f844 9c08 	str.w	r9, [r4, #-8]
                    if (task->repeat) task->start = t;
    1daa:	f844 ac10 	str.w	sl, [r4, #-16]
        timer_foreach_task(task) {
    1dae:	3418      	adds	r4, #24
    1db0:	455c      	cmp	r4, fp
    1db2:	d019      	beq.n	1de8 <loop+0x70>
            if (task->handler) {
    1db4:	f854 2c18 	ldr.w	r2, [r4, #-24]
    1db8:	2a00      	cmp	r2, #0
    1dba:	d0f8      	beq.n	1dae <loop+0x36>
    1dbc:	f8d6 a000 	ldr.w	sl, [r6]
                if (duration >= task->expires) {
    1dc0:	e954 3104 	ldrd	r3, r1, [r4, #-16]
                const unsigned long duration = t - task->start;
    1dc4:	ebaa 0303 	sub.w	r3, sl, r3
                if (duration >= task->expires) {
    1dc8:	428b      	cmp	r3, r1
    1dca:	d3f0      	bcc.n	1dae <loop+0x36>
                    task->repeat = task->handler(task->opaque) && task->repeat;
    1dcc:	f854 0c14 	ldr.w	r0, [r4, #-20]
    1dd0:	4790      	blx	r2
    1dd2:	2800      	cmp	r0, #0
    1dd4:	d1e4      	bne.n	1da0 <loop+0x28>
        task->opaque = T();
    1dd6:	e944 7706 	strd	r7, r7, [r4, #-24]
        task->expires = 0;
    1dda:	e944 7704 	strd	r7, r7, [r4, #-16]
        task->id = 0;
    1dde:	e944 7702 	strd	r7, r7, [r4, #-8]
        timer_foreach_task(task) {
    1de2:	3418      	adds	r4, #24
    1de4:	455c      	cmp	r4, fp
    1de6:	d1e5      	bne.n	1db4 <loop+0x3c>
    1de8:	6833      	ldr	r3, [r6, #0]
        timer_foreach_const_task(task) {
    1dea:	4876      	ldr	r0, [pc, #472]	; (1fc4 <loop+0x24c>)
            if (task->handler) {
    1dec:	686b      	ldr	r3, [r5, #4]
    1dee:	b12b      	cbz	r3, 1dfc <loop+0x84>
    1df0:	6833      	ldr	r3, [r6, #0]
                if (duration >= task->expires) {
    1df2:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
                const unsigned long duration = t - task->start;
    1df6:	1a5b      	subs	r3, r3, r1
                if (duration >= task->expires) {
    1df8:	4293      	cmp	r3, r2
    1dfa:	d202      	bcs.n	1e02 <loop+0x8a>
        timer_foreach_const_task(task) {
    1dfc:	3518      	adds	r5, #24
    1dfe:	4285      	cmp	r5, r0
    1e00:	d1f4      	bne.n	1dec <loop+0x74>
    1e02:	4d71      	ldr	r5, [pc, #452]	; (1fc8 <loop+0x250>)
    1e04:	6833      	ldr	r3, [r6, #0]
    1e06:	886c      	ldrh	r4, [r5, #2]
    1e08:	7828      	ldrb	r0, [r5, #0]
    1e0a:	0064      	lsls	r4, r4, #1
    1e0c:	f002 fbd4 	bl	45b8 <digitalRead>
    1e10:	4b6e      	ldr	r3, [pc, #440]	; (1fcc <loop+0x254>)
    1e12:	b224      	sxth	r4, r4
  if(functionPin.released())
    1e14:	f64f 62ff 	movw	r2, #65279	; 0xfeff
    1e18:	4320      	orrs	r0, r4
    1e1a:	4303      	orrs	r3, r0
    1e1c:	b29b      	uxth	r3, r3
    1e1e:	4293      	cmp	r3, r2
    1e20:	806b      	strh	r3, [r5, #2]
    1e22:	d104      	bne.n	1e2e <loop+0xb6>
    faims.Enable = !faims.Enable;
    1e24:	4a6a      	ldr	r2, [pc, #424]	; (1fd0 <loop+0x258>)
    1e26:	7dd3      	ldrb	r3, [r2, #23]
    1e28:	f083 0301 	eor.w	r3, r3, #1
    1e2c:	75d3      	strb	r3, [r2, #23]
  if(scanning && triggerScan)
    1e2e:	4b69      	ldr	r3, [pc, #420]	; (1fd4 <loop+0x25c>)
    1e30:	781b      	ldrb	r3, [r3, #0]
    1e32:	b11b      	cbz	r3, 1e3c <loop+0xc4>
    1e34:	4b68      	ldr	r3, [pc, #416]	; (1fd8 <loop+0x260>)
    1e36:	781a      	ldrb	r2, [r3, #0]
    1e38:	2a00      	cmp	r2, #0
    1e3a:	d16c      	bne.n	1f16 <loop+0x19e>
  if(toggling && faims.EnableAlt)
    1e3c:	4c67      	ldr	r4, [pc, #412]	; (1fdc <loop+0x264>)
    1e3e:	7823      	ldrb	r3, [r4, #0]
    1e40:	b123      	cbz	r3, 1e4c <loop+0xd4>
    1e42:	4d63      	ldr	r5, [pc, #396]	; (1fd0 <loop+0x258>)
    1e44:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    1e48:	2b00      	cmp	r3, #0
    1e4a:	d13e      	bne.n	1eca <loop+0x152>
  if(supply < 8.0)
    1e4c:	4c64      	ldr	r4, [pc, #400]	; (1fe0 <loop+0x268>)
    1e4e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    1e52:	ed94 7a00 	vldr	s14, [r4]
    1e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1e5e:	d531      	bpl.n	1ec4 <loop+0x14c>
    faims.Enable = false;
    1e60:	4b5b      	ldr	r3, [pc, #364]	; (1fd0 <loop+0x258>)
    1e62:	2200      	movs	r2, #0
    1e64:	75da      	strb	r2, [r3, #23]
      digitalWrite(ENABLE24,LOW);
    1e66:	2100      	movs	r1, #0
    1e68:	2007      	movs	r0, #7
    1e6a:	f002 fb7b 	bl	4564 <digitalWrite>
      digitalWrite(ENABLEHV,LOW);
    1e6e:	2100      	movs	r1, #0
    1e70:	2010      	movs	r0, #16
    1e72:	f002 fb77 	bl	4564 <digitalWrite>
      digitalWrite(AUXENABLEHV,LOW);
    1e76:	2100      	movs	r1, #0
    1e78:	2017      	movs	r0, #23
    1e7a:	f002 fb73 	bl	4564 <digitalWrite>
      digitalWrite(BUZZER,LOW);
    1e7e:	2100      	movs	r1, #0
    1e80:	200b      	movs	r0, #11
    1e82:	f002 fb6f 	bl	4564 <digitalWrite>
      digitalWrite(RFONLT,LOW);
    1e86:	2100      	movs	r1, #0
    1e88:	200c      	movs	r0, #12
    1e8a:	f002 fb6b 	bl	4564 <digitalWrite>
      digitalWrite(RFONLED,HIGH);
    1e8e:	2101      	movs	r1, #1
    1e90:	2000      	movs	r0, #0
    1e92:	f002 fb67 	bl	4564 <digitalWrite>
      digitalWrite(STATUSLED,HIGH);
    1e96:	2101      	movs	r1, #1
    1e98:	4608      	mov	r0, r1
    1e9a:	f002 fb63 	bl	4564 <digitalWrite>
      delay(50);
    1e9e:	2032      	movs	r0, #50	; 0x32
    1ea0:	f002 fb0c 	bl	44bc <delay>
      Update();
    1ea4:	f7ff fcc0 	bl	1828 <Update()>
    while(supply < 8.0)
    1ea8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    1eac:	ed94 7a00 	vldr	s14, [r4]
    1eb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1eb8:	d4d5      	bmi.n	1e66 <loop+0xee>
}
    1eba:	b003      	add	sp, #12
    1ebc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    setup();
    1ec0:	f7ff be82 	b.w	1bc8 <setup>
}
    1ec4:	b003      	add	sp, #12
    1ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((digitalRead(TRIGIN) == HIGH) || scanAbort)
    1eca:	2003      	movs	r0, #3
    1ecc:	f002 fb74 	bl	45b8 <digitalRead>
    1ed0:	2801      	cmp	r0, #1
    1ed2:	d04d      	beq.n	1f70 <loop+0x1f8>
    1ed4:	4e43      	ldr	r6, [pc, #268]	; (1fe4 <loop+0x26c>)
    1ed6:	7833      	ldrb	r3, [r6, #0]
    1ed8:	2b00      	cmp	r3, #0
    1eda:	d161      	bne.n	1fa0 <loop+0x228>
      if(faims.CV != faims.CValt)
    1edc:	edd5 7a0f 	vldr	s15, [r5, #60]	; 0x3c
    1ee0:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
    1ee4:	eeb4 7a67 	vcmp.f32	s14, s15
    1ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1eec:	d0ae      	beq.n	1e4c <loop+0xd4>
        UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
    1eee:	2201      	movs	r2, #1
        faims.CV = faims.CValt;
    1ef0:	edc5 7a0a 	vstr	s15, [r5, #40]	; 0x28
        UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
    1ef4:	4b3c      	ldr	r3, [pc, #240]	; (1fe8 <loop+0x270>)
    1ef6:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
    1efa:	9200      	str	r2, [sp, #0]
    1efc:	f105 0228 	add.w	r2, r5, #40	; 0x28
    1f00:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
    1f04:	f7fe ff16 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
    if(scanAbort)
    1f08:	7833      	ldrb	r3, [r6, #0]
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	d09e      	beq.n	1e4c <loop+0xd4>
      toggling = false;
    1f0e:	2300      	movs	r3, #0
    1f10:	7023      	strb	r3, [r4, #0]
      scanAbort = false;
    1f12:	7033      	strb	r3, [r6, #0]
    1f14:	e79a      	b.n	1e4c <loop+0xd4>
    UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
    1f16:	2101      	movs	r1, #1
    1f18:	6832      	ldr	r2, [r6, #0]
    1f1a:	482d      	ldr	r0, [pc, #180]	; (1fd0 <loop+0x258>)
    1f1c:	9100      	str	r1, [sp, #0]
    triggerScan = false;
    1f1e:	2100      	movs	r1, #0
    1f20:	7019      	strb	r1, [r3, #0]
    UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
    1f22:	f100 01c0 	add.w	r1, r0, #192	; 0xc0
    startTime = millis();
    1f26:	4b31      	ldr	r3, [pc, #196]	; (1fec <loop+0x274>)
    1f28:	601a      	str	r2, [r3, #0]
    UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
    1f2a:	f100 0228 	add.w	r2, r0, #40	; 0x28
    1f2e:	4b2e      	ldr	r3, [pc, #184]	; (1fe8 <loop+0x270>)
    1f30:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    1f34:	f7fe fefe 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
        timer_foreach_task(slot) {
    1f38:	4b2d      	ldr	r3, [pc, #180]	; (1ff0 <loop+0x278>)
    1f3a:	6830      	ldr	r0, [r6, #0]
    1f3c:	f503 71c0 	add.w	r1, r3, #384	; 0x180
            if (slot->handler == NULL) return slot;
    1f40:	681a      	ldr	r2, [r3, #0]
    1f42:	b11a      	cbz	r2, 1f4c <loop+0x1d4>
        timer_foreach_task(slot) {
    1f44:	3318      	adds	r3, #24
    1f46:	428b      	cmp	r3, r1
    1f48:	d1fa      	bne.n	1f40 <loop+0x1c8>
    1f4a:	e777      	b.n	1e3c <loop+0xc4>
        slot->opaque = opaque;
    1f4c:	605a      	str	r2, [r3, #4]
        slot->expires = expires;
    1f4e:	2102      	movs	r1, #2
        if (++ctr == 0) ++ctr; // overflow
    1f50:	f8d8 2000 	ldr.w	r2, [r8]
        slot->handler = h;
    1f54:	4c27      	ldr	r4, [pc, #156]	; (1ff4 <loop+0x27c>)
        if (++ctr == 0) ++ctr; // overflow
    1f56:	3201      	adds	r2, #1
        slot->expires = expires;
    1f58:	60d9      	str	r1, [r3, #12]
        slot->repeat = repeat;
    1f5a:	2101      	movs	r1, #1
        slot->start = start;
    1f5c:	6098      	str	r0, [r3, #8]
    1f5e:	2a01      	cmp	r2, #1
        slot->repeat = repeat;
    1f60:	6119      	str	r1, [r3, #16]
    task_id(const struct task * const t)
    1f62:	bf38      	it	cc
    1f64:	2201      	movcc	r2, #1
    1f66:	f8c8 2000 	str.w	r2, [r8]
        slot->id = ctr;
    1f6a:	615a      	str	r2, [r3, #20]
        slot->handler = h;
    1f6c:	601c      	str	r4, [r3, #0]
    1f6e:	e765      	b.n	1e3c <loop+0xc4>
      if(faims.CV != savedCV)
    1f70:	4b21      	ldr	r3, [pc, #132]	; (1ff8 <loop+0x280>)
    1f72:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
    1f76:	edd3 7a00 	vldr	s15, [r3]
    1f7a:	4e1a      	ldr	r6, [pc, #104]	; (1fe4 <loop+0x26c>)
    1f7c:	eeb4 7a67 	vcmp.f32	s14, s15
    1f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1f84:	d0c0      	beq.n	1f08 <loop+0x190>
        UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
    1f86:	2101      	movs	r1, #1
    1f88:	4a1c      	ldr	r2, [pc, #112]	; (1ffc <loop+0x284>)
        faims.CV = savedCV;
    1f8a:	edc5 7a0a 	vstr	s15, [r5, #40]	; 0x28
        UpdateDACvalue(faims.CVBIASio, &faims.CVsetCtrl, &faims.CV, &sdata.CV, true);
    1f8e:	4b16      	ldr	r3, [pc, #88]	; (1fe8 <loop+0x270>)
    1f90:	9100      	str	r1, [sp, #0]
    1f92:	f102 0198 	add.w	r1, r2, #152	; 0x98
    1f96:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
    1f9a:	f7fe fecb 	bl	d34 <UpdateDACvalue(unsigned char, DACchan*, float*, float*, bool)>
    1f9e:	e7b3      	b.n	1f08 <loop+0x190>
      if(faims.CV != savedCV)
    1fa0:	4b15      	ldr	r3, [pc, #84]	; (1ff8 <loop+0x280>)
    1fa2:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
    1fa6:	edd3 7a00 	vldr	s15, [r3]
    1faa:	eeb4 7a67 	vcmp.f32	s14, s15
    1fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1fb2:	d0ac      	beq.n	1f0e <loop+0x196>
    1fb4:	e7e7      	b.n	1f86 <loop+0x20e>
    1fb6:	bf00      	nop
    1fb8:	2000ae68 	.word	0x2000ae68
    1fbc:	2000ae44 	.word	0x2000ae44
    1fc0:	2000a9f0 	.word	0x2000a9f0
    1fc4:	2000afcc 	.word	0x2000afcc
    1fc8:	2000ab6c 	.word	0x2000ab6c
    1fcc:	fffffe00 	.word	0xfffffe00
    1fd0:	2000aa78 	.word	0x2000aa78
    1fd4:	2000affa 	.word	0x2000affa
    1fd8:	2000afff 	.word	0x2000afff
    1fdc:	2000affc 	.word	0x2000affc
    1fe0:	2000ae3c 	.word	0x2000ae3c
    1fe4:	2000aff9 	.word	0x2000aff9
    1fe8:	2000ae10 	.word	0x2000ae10
    1fec:	2000ae38 	.word	0x2000ae38
    1ff0:	2000ae50 	.word	0x2000ae50
    1ff4:	00000eb9 	.word	0x00000eb9
    1ff8:	2000abd8 	.word	0x2000abd8
    1ffc:	2000aaa0 	.word	0x2000aaa0

00002000 <enableWarning(void*)>:
{
    2000:	b570      	push	{r4, r5, r6, lr}
  if(count++ < 7)
    2002:	4c25      	ldr	r4, [pc, #148]	; (2098 <enableWarning(void*)+0x98>)
    2004:	6822      	ldr	r2, [r4, #0]
    2006:	1c53      	adds	r3, r2, #1
    2008:	2a06      	cmp	r2, #6
    200a:	6023      	str	r3, [r4, #0]
    200c:	dd3a      	ble.n	2084 <enableWarning(void*)+0x84>
  if(count == 8)
    200e:	2b08      	cmp	r3, #8
    2010:	d009      	beq.n	2026 <enableWarning(void*)+0x26>
  if(triggerEnable==true) 
    2012:	4b22      	ldr	r3, [pc, #136]	; (209c <enableWarning(void*)+0x9c>)
  count = 10;
    2014:	210a      	movs	r1, #10
  if(triggerEnable==true) 
    2016:	781a      	ldrb	r2, [r3, #0]
  count = 10;
    2018:	6021      	str	r1, [r4, #0]
  if(triggerEnable==true) 
    201a:	b112      	cbz	r2, 2022 <enableWarning(void*)+0x22>
    count=0;
    201c:	2200      	movs	r2, #0
    201e:	6022      	str	r2, [r4, #0]
    triggerEnable = false;
    2020:	701a      	strb	r2, [r3, #0]
}
    2022:	2001      	movs	r0, #1
    2024:	bd70      	pop	{r4, r5, r6, pc}
    if(faims.Enable)
    2026:	4e1e      	ldr	r6, [pc, #120]	; (20a0 <enableWarning(void*)+0xa0>)
    2028:	7df3      	ldrb	r3, [r6, #23]
    202a:	2b00      	cmp	r3, #0
    202c:	d0f1      	beq.n	2012 <enableWarning(void*)+0x12>
      digitalWrite(ENABLEHV,HIGH);
    202e:	2101      	movs	r1, #1
    2030:	2010      	movs	r0, #16
    2032:	f002 fa97 	bl	4564 <digitalWrite>
      digitalWrite(AUXENABLEHV,HIGH);
    2036:	2101      	movs	r1, #1
    2038:	2017      	movs	r0, #23
		txBuffer[0] = (address << 1);
    203a:	4d1a      	ldr	r5, [pc, #104]	; (20a4 <enableWarning(void*)+0xa4>)
    203c:	f002 fa92 	bl	4564 <digitalWrite>
      AD5593write(faims.CVBIASio, 0x09, 0);
    2040:	6df3      	ldr	r3, [r6, #92]	; 0x5c
		transmitting = 1;
    2042:	2601      	movs	r6, #1
    2044:	2109      	movs	r1, #9
    2046:	4628      	mov	r0, r5
		txBuffer[0] = (address << 1);
    2048:	40b3      	lsls	r3, r6
		transmitting = 1;
    204a:	f885 6130 	strb.w	r6, [r5, #304]	; 0x130
		txBufferLength = 1;
    204e:	f885 612f 	strb.w	r6, [r5, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    2052:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
    2056:	f000 fde3 	bl	2c20 <TwoWire::write(unsigned char)>
		return write((uint8_t)n);
    205a:	2100      	movs	r1, #0
    205c:	4628      	mov	r0, r5
    205e:	f000 fddf 	bl	2c20 <TwoWire::write(unsigned char)>
    2062:	2100      	movs	r1, #0
    2064:	4628      	mov	r0, r5
    2066:	f000 fddb 	bl	2c20 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    206a:	4631      	mov	r1, r6
    206c:	4628      	mov	r0, r5
    206e:	f000 feaf 	bl	2dd0 <TwoWire::endTransmission(unsigned char)>
      digitalWrite(RFONLT,HIGH);
    2072:	4631      	mov	r1, r6
    2074:	200c      	movs	r0, #12
    2076:	f002 fa75 	bl	4564 <digitalWrite>
      digitalWrite(RFONLED,LOW);   
    207a:	2100      	movs	r1, #0
    207c:	4608      	mov	r0, r1
    207e:	f002 fa71 	bl	4564 <digitalWrite>
    2082:	e7c6      	b.n	2012 <enableWarning(void*)+0x12>
    if(count & 1) digitalWrite(BUZZER,LOW);
    2084:	07db      	lsls	r3, r3, #31
    else digitalWrite(BUZZER,HIGH);
    2086:	f04f 000b 	mov.w	r0, #11
    if(count & 1) digitalWrite(BUZZER,LOW);
    208a:	bf4c      	ite	mi
    208c:	2100      	movmi	r1, #0
    else digitalWrite(BUZZER,HIGH);
    208e:	2101      	movpl	r1, #1
    2090:	f002 fa68 	bl	4564 <digitalWrite>
}
    2094:	2001      	movs	r0, #1
    2096:	bd70      	pop	{r4, r5, r6, pc}
    2098:	2000a5d0 	.word	0x2000a5d0
    209c:	2000affe 	.word	0x2000affe
    20a0:	2000aa78 	.word	0x2000aa78
    20a4:	2000826c 	.word	0x2000826c

000020a8 <usb_serial_class::write(unsigned char)>:
	// the data across your USB cable.
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    20a8:	4608      	mov	r0, r1
    20aa:	f004 b99f 	b.w	63ec <usb_serial_putchar>
    20ae:	bf00      	nop

000020b0 <DelayCommand(int)>:
{
    20b0:	b510      	push	{r4, lr}
  delay(dtime);
    20b2:	f002 fa03 	bl	44bc <delay>
  SendACK;
    20b6:	4b06      	ldr	r3, [pc, #24]	; (20d0 <DelayCommand(int)+0x20>)
    20b8:	781b      	ldrb	r3, [r3, #0]
    20ba:	b103      	cbz	r3, 20be <DelayCommand(int)+0xe>
}
    20bc:	bd10      	pop	{r4, pc}
  SendACK;
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <DelayCommand(int)+0x24>)
							  return write((const uint8_t *)str, strlen(str)); }
    20c0:	2203      	movs	r2, #3
    20c2:	4905      	ldr	r1, [pc, #20]	; (20d8 <DelayCommand(int)+0x28>)
    20c4:	6818      	ldr	r0, [r3, #0]
    20c6:	6803      	ldr	r3, [r0, #0]
}
    20c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    20cc:	685b      	ldr	r3, [r3, #4]
    20ce:	4718      	bx	r3
    20d0:	2000afeb 	.word	0x2000afeb
    20d4:	20008e14 	.word	0x20008e14
    20d8:	200004a0 	.word	0x200004a0

000020dc <GetCommands()>:
{
    20dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SendACKonly;
    20de:	4b14      	ldr	r3, [pc, #80]	; (2130 <GetCommands()+0x54>)
    20e0:	781b      	ldrb	r3, [r3, #0]
    20e2:	b1ab      	cbz	r3, 2110 <GetCommands()+0x34>
  for (i = 0; CmdArray[i].Cmd != 0; i++)
    20e4:	4e13      	ldr	r6, [pc, #76]	; (2134 <GetCommands()+0x58>)
    20e6:	6834      	ldr	r4, [r6, #0]
    20e8:	b18c      	cbz	r4, 210e <GetCommands()+0x32>
    20ea:	4f13      	ldr	r7, [pc, #76]	; (2138 <GetCommands()+0x5c>)
    serial->println((char *)CmdArray[i].Cmd);
    20ec:	683d      	ldr	r5, [r7, #0]
    20ee:	4620      	mov	r0, r4
    20f0:	f006 fe46 	bl	8d80 <strlen>
    20f4:	4621      	mov	r1, r4
    20f6:	682b      	ldr	r3, [r5, #0]
    20f8:	4602      	mov	r2, r0
    20fa:	4628      	mov	r0, r5
    20fc:	685b      	ldr	r3, [r3, #4]
    20fe:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    2100:	4628      	mov	r0, r5
    2102:	f001 fe51 	bl	3da8 <Print::println()>
  for (i = 0; CmdArray[i].Cmd != 0; i++)
    2106:	f856 4f10 	ldr.w	r4, [r6, #16]!
    210a:	2c00      	cmp	r4, #0
    210c:	d1ee      	bne.n	20ec <GetCommands()+0x10>
}
    210e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  SendACKonly;
    2110:	4b0a      	ldr	r3, [pc, #40]	; (213c <GetCommands()+0x60>)
    2112:	4f09      	ldr	r7, [pc, #36]	; (2138 <GetCommands()+0x5c>)
    2114:	681c      	ldr	r4, [r3, #0]
    2116:	683d      	ldr	r5, [r7, #0]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2118:	2c00      	cmp	r4, #0
    211a:	d0e3      	beq.n	20e4 <GetCommands()+0x8>
							  return write((const uint8_t *)str, strlen(str)); }
    211c:	4620      	mov	r0, r4
    211e:	f006 fe2f 	bl	8d80 <strlen>
    2122:	682b      	ldr	r3, [r5, #0]
    2124:	4602      	mov	r2, r0
    2126:	4621      	mov	r1, r4
    2128:	4628      	mov	r0, r5
    212a:	685b      	ldr	r3, [r3, #4]
    212c:	4798      	blx	r3
    212e:	e7d9      	b.n	20e4 <GetCommands()+0x8>
    2130:	2000afeb 	.word	0x2000afeb
    2134:	20007cf0 	.word	0x20007cf0
    2138:	20008e14 	.word	0x20008e14
    213c:	2000a4dc 	.word	0x2000a4dc

00002140 <Mute(char*)>:
  if (strcmp(cmd, "ON") == 0)
    2140:	7803      	ldrb	r3, [r0, #0]
    2142:	2b4f      	cmp	r3, #79	; 0x4f
    2144:	d102      	bne.n	214c <Mute(char*)+0xc>
    2146:	7843      	ldrb	r3, [r0, #1]
    2148:	2b4e      	cmp	r3, #78	; 0x4e
    214a:	d00b      	beq.n	2164 <Mute(char*)+0x24>
  else if (strcmp(cmd, "OFF") == 0)
    214c:	4913      	ldr	r1, [pc, #76]	; (219c <Mute(char*)+0x5c>)
{
    214e:	b510      	push	{r4, lr}
  else if (strcmp(cmd, "OFF") == 0)
    2150:	f006 fc1a 	bl	8988 <strcmp>
    2154:	b1b0      	cbz	r0, 2184 <Mute(char*)+0x44>
  SendNAK;
    2156:	4b12      	ldr	r3, [pc, #72]	; (21a0 <Mute(char*)+0x60>)
  SetErrorCode(ERR_BADARG);
    2158:	2102      	movs	r1, #2
    215a:	4a12      	ldr	r2, [pc, #72]	; (21a4 <Mute(char*)+0x64>)
  SendNAK;
    215c:	781b      	ldrb	r3, [r3, #0]
  SetErrorCode(ERR_BADARG);
    215e:	6011      	str	r1, [r2, #0]
  SendNAK;
    2160:	b13b      	cbz	r3, 2172 <Mute(char*)+0x32>
}
    2162:	bd10      	pop	{r4, pc}
  if (strcmp(cmd, "ON") == 0)
    2164:	7883      	ldrb	r3, [r0, #2]
    2166:	2b00      	cmp	r3, #0
    2168:	d1f0      	bne.n	214c <Mute(char*)+0xc>
    SerialMute = true;
    216a:	4b0d      	ldr	r3, [pc, #52]	; (21a0 <Mute(char*)+0x60>)
    216c:	2201      	movs	r2, #1
    216e:	701a      	strb	r2, [r3, #0]
    return;
    2170:	4770      	bx	lr
  SendNAK;
    2172:	4b0d      	ldr	r3, [pc, #52]	; (21a8 <Mute(char*)+0x68>)
    2174:	2204      	movs	r2, #4
    2176:	490d      	ldr	r1, [pc, #52]	; (21ac <Mute(char*)+0x6c>)
    2178:	6818      	ldr	r0, [r3, #0]
    217a:	6803      	ldr	r3, [r0, #0]
}
    217c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2180:	685b      	ldr	r3, [r3, #4]
    2182:	4718      	bx	r3
    SendACK;
    2184:	4b08      	ldr	r3, [pc, #32]	; (21a8 <Mute(char*)+0x68>)
    2186:	2203      	movs	r2, #3
    SerialMute = false;
    2188:	4c05      	ldr	r4, [pc, #20]	; (21a0 <Mute(char*)+0x60>)
    SendACK;
    218a:	681b      	ldr	r3, [r3, #0]
    SerialMute = false;
    218c:	7020      	strb	r0, [r4, #0]
    218e:	681c      	ldr	r4, [r3, #0]
    2190:	4618      	mov	r0, r3
    2192:	4907      	ldr	r1, [pc, #28]	; (21b0 <Mute(char*)+0x70>)
    2194:	6863      	ldr	r3, [r4, #4]
}
    2196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    219a:	4718      	bx	r3
    219c:	20000570 	.word	0x20000570
    21a0:	2000afeb 	.word	0x2000afeb
    21a4:	20009490 	.word	0x20009490
    21a8:	20008e14 	.word	0x20008e14
    21ac:	20000568 	.word	0x20000568
    21b0:	200004a0 	.word	0x200004a0

000021b4 <ListThreads()>:
  RB_Put(&RB, ch);
}

// This function lists all the current threads and there current state.
void ListThreads(void)
{
    21b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int    i = 0;
  Thread *t;

  // Loop through all the threads and report the Thread name, ID, Interval, enabled state, and last run time
  SendACKonly;
    21b8:	4b3f      	ldr	r3, [pc, #252]	; (22b8 <ListThreads()+0x104>)
    21ba:	781b      	ldrb	r3, [r3, #0]
    21bc:	2b00      	cmp	r3, #0
    21be:	d06a      	beq.n	2296 <ListThreads()+0xe2>
    21c0:	4d3e      	ldr	r5, [pc, #248]	; (22bc <ListThreads()+0x108>)
    21c2:	682c      	ldr	r4, [r5, #0]
    21c4:	6823      	ldr	r3, [r4, #0]
    21c6:	2228      	movs	r2, #40	; 0x28
    21c8:	493d      	ldr	r1, [pc, #244]	; (22c0 <ListThreads()+0x10c>)
    21ca:	4620      	mov	r0, r4
    21cc:	685b      	ldr	r3, [r3, #4]
  int    i = 0;
    21ce:	2600      	movs	r6, #0
    21d0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    21d2:	4620      	mov	r0, r4
  serial->println("Thread name,ID,Interval,Enabled,Run time");
  while (1)
  {
    t = control.get(i++);
    21d4:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 22cc <ListThreads()+0x118>
    21d8:	f001 fde6 	bl	3da8 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    21dc:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 22d0 <ListThreads()+0x11c>
    21e0:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 22d4 <ListThreads()+0x120>
	size_t println(const char s[])			{ return print(s) + println(); }
    21e4:	e011      	b.n	220a <ListThreads()+0x56>
							  return write((const uint8_t *)str, strlen(str)); }
    21e6:	6803      	ldr	r3, [r0, #0]
    21e8:	2208      	movs	r2, #8
    21ea:	4936      	ldr	r1, [pc, #216]	; (22c4 <ListThreads()+0x110>)
    21ec:	685b      	ldr	r3, [r3, #4]
    21ee:	4798      	blx	r3
    serial->print(t->getName()); serial->print(", ");
    serial->print(t->getID()); serial->print(", ");
    serial->print(t->getInterval()); serial->print(", ");
    if (t->enabled) serial->print("Enabled,");
    else serial->print("Disabled,");
    serial->println(t->runTimeMs());
    21f0:	682f      	ldr	r7, [r5, #0]
    21f2:	4620      	mov	r0, r4
    21f4:	f001 f824 	bl	3240 <Thread::runTimeMs()>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    21f8:	2300      	movs	r3, #0
    21fa:	4601      	mov	r1, r0
    21fc:	220a      	movs	r2, #10
    21fe:	4638      	mov	r0, r7
    2200:	f001 fdee 	bl	3de0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    2204:	4638      	mov	r0, r7
    2206:	f001 fdcf 	bl	3da8 <Print::println()>
    t = control.get(i++);
    220a:	4631      	mov	r1, r6
    220c:	4648      	mov	r0, r9
    220e:	f001 f87f 	bl	3310 <ThreadController::get(int)>
    2212:	3601      	adds	r6, #1
    if (t == NULL) break;
    2214:	4604      	mov	r4, r0
    2216:	2800      	cmp	r0, #0
    2218:	d03b      	beq.n	2292 <ListThreads()+0xde>
    serial->print(t->getName()); serial->print(", ");
    221a:	f8d5 b000 	ldr.w	fp, [r5]
    221e:	f000 fff5 	bl	320c <Thread::getName()>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2222:	4607      	mov	r7, r0
    2224:	b140      	cbz	r0, 2238 <ListThreads()+0x84>
							  return write((const uint8_t *)str, strlen(str)); }
    2226:	f006 fdab 	bl	8d80 <strlen>
    222a:	f8db 3000 	ldr.w	r3, [fp]
    222e:	4602      	mov	r2, r0
    2230:	4639      	mov	r1, r7
    2232:	4658      	mov	r0, fp
    2234:	685b      	ldr	r3, [r3, #4]
    2236:	4798      	blx	r3
    2238:	6828      	ldr	r0, [r5, #0]
    223a:	2202      	movs	r2, #2
    223c:	4641      	mov	r1, r8
    223e:	6803      	ldr	r3, [r0, #0]
    2240:	685b      	ldr	r3, [r3, #4]
    2242:	4798      	blx	r3
    serial->print(t->getID()); serial->print(", ");
    2244:	682f      	ldr	r7, [r5, #0]
    2246:	4620      	mov	r0, r4
    2248:	f000 fff6 	bl	3238 <Thread::getID()>
    224c:	4601      	mov	r1, r0
	size_t print(int n)				{ return print((long)n); }
    224e:	4638      	mov	r0, r7
    2250:	f001 fd9e 	bl	3d90 <Print::print(long)>
    2254:	6828      	ldr	r0, [r5, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    2256:	2202      	movs	r2, #2
    2258:	4641      	mov	r1, r8
    225a:	6803      	ldr	r3, [r0, #0]
    225c:	685b      	ldr	r3, [r3, #4]
    225e:	4798      	blx	r3
    serial->print(t->getInterval()); serial->print(", ");
    2260:	682f      	ldr	r7, [r5, #0]
    2262:	4620      	mov	r0, r4
    2264:	f000 ffea 	bl	323c <Thread::getInterval()>
    2268:	4601      	mov	r1, r0
    226a:	4638      	mov	r0, r7
    226c:	f001 fd90 	bl	3d90 <Print::print(long)>
    2270:	6828      	ldr	r0, [r5, #0]
    2272:	4641      	mov	r1, r8
    2274:	2202      	movs	r2, #2
    2276:	6803      	ldr	r3, [r0, #0]
    2278:	685b      	ldr	r3, [r3, #4]
    227a:	4798      	blx	r3
    if (t->enabled) serial->print("Enabled,");
    227c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2280:	4651      	mov	r1, sl
    2282:	2209      	movs	r2, #9
    2284:	6828      	ldr	r0, [r5, #0]
    2286:	2b00      	cmp	r3, #0
    2288:	d1ad      	bne.n	21e6 <ListThreads()+0x32>
    228a:	6803      	ldr	r3, [r0, #0]
    228c:	685b      	ldr	r3, [r3, #4]
    228e:	4798      	blx	r3
    2290:	e7ae      	b.n	21f0 <ListThreads()+0x3c>
  }
}
    2292:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  SendACKonly;
    2296:	4b0c      	ldr	r3, [pc, #48]	; (22c8 <ListThreads()+0x114>)
    2298:	4d08      	ldr	r5, [pc, #32]	; (22bc <ListThreads()+0x108>)
    229a:	681e      	ldr	r6, [r3, #0]
    229c:	682c      	ldr	r4, [r5, #0]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    229e:	2e00      	cmp	r6, #0
    22a0:	d090      	beq.n	21c4 <ListThreads()+0x10>
							  return write((const uint8_t *)str, strlen(str)); }
    22a2:	4630      	mov	r0, r6
    22a4:	f006 fd6c 	bl	8d80 <strlen>
    22a8:	6823      	ldr	r3, [r4, #0]
    22aa:	4602      	mov	r2, r0
    22ac:	4631      	mov	r1, r6
    22ae:	4620      	mov	r0, r4
    22b0:	685b      	ldr	r3, [r3, #4]
    22b2:	4798      	blx	r3
  serial->println("Thread name,ID,Interval,Enabled,Run time");
    22b4:	682c      	ldr	r4, [r5, #0]
    22b6:	e785      	b.n	21c4 <ListThreads()+0x10>
    22b8:	2000afeb 	.word	0x2000afeb
    22bc:	20008e14 	.word	0x20008e14
    22c0:	2000041c 	.word	0x2000041c
    22c4:	2000044c 	.word	0x2000044c
    22c8:	2000a4dc 	.word	0x2000a4dc
    22cc:	2000a9f0 	.word	0x2000a9f0
    22d0:	20000448 	.word	0x20000448
    22d4:	20000458 	.word	0x20000458

000022d8 <SetThreadEnable(char*, char*)>:

void SetThreadEnable(char *name, char *state)
{
    22d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22dc:	460c      	mov	r4, r1
    22de:	4605      	mov	r5, r0
  Thread *t;

  if ((strcmp(state, "TRUE") !=0) && (strcmp(state, "FALSE") != 0))
    22e0:	4923      	ldr	r1, [pc, #140]	; (2370 <SetThreadEnable(char*, char*)+0x98>)
    22e2:	4620      	mov	r0, r4
    22e4:	f006 fb50 	bl	8988 <strcmp>
    22e8:	b120      	cbz	r0, 22f4 <SetThreadEnable(char*, char*)+0x1c>
    22ea:	4922      	ldr	r1, [pc, #136]	; (2374 <SetThreadEnable(char*, char*)+0x9c>)
    22ec:	4620      	mov	r0, r4
    22ee:	f006 fb4b 	bl	8988 <strcmp>
    22f2:	b9b8      	cbnz	r0, 2324 <SetThreadEnable(char*, char*)+0x4c>
    SetErrorCode(ERR_BADARG);
    SendNAK;
    return;
  }
  // Find thread by name
  t = control.get(name);
    22f4:	4629      	mov	r1, r5
    22f6:	4820      	ldr	r0, [pc, #128]	; (2378 <SetThreadEnable(char*, char*)+0xa0>)
    22f8:	f001 f81a 	bl	3330 <ThreadController::get(char const*)>
  if (t == NULL)
  {
    SetErrorCode(ERR_BADARG);
    SendNAK;
    22fc:	4b1f      	ldr	r3, [pc, #124]	; (237c <SetThreadEnable(char*, char*)+0xa4>)
  if (t == NULL)
    22fe:	4605      	mov	r5, r0
    2300:	b188      	cbz	r0, 2326 <SetThreadEnable(char*, char*)+0x4e>
    return;
  }
  SendACKonly;
    2302:	781b      	ldrb	r3, [r3, #0]
    2304:	b1f3      	cbz	r3, 2344 <SetThreadEnable(char*, char*)+0x6c>
  if (strcmp(state, "TRUE") == 0) t->enabled = true;
    2306:	491a      	ldr	r1, [pc, #104]	; (2370 <SetThreadEnable(char*, char*)+0x98>)
    2308:	4620      	mov	r0, r4
    230a:	f006 fb3d 	bl	8988 <strcmp>
    230e:	b120      	cbz	r0, 231a <SetThreadEnable(char*, char*)+0x42>
  else t->enabled = false;
    2310:	2300      	movs	r3, #0
    2312:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
}
    2316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (strcmp(state, "TRUE") == 0) t->enabled = true;
    231a:	2301      	movs	r3, #1
    231c:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
}
    2320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SendNAK;
    2324:	4b15      	ldr	r3, [pc, #84]	; (237c <SetThreadEnable(char*, char*)+0xa4>)
    SetErrorCode(ERR_BADARG);
    2326:	4a16      	ldr	r2, [pc, #88]	; (2380 <SetThreadEnable(char*, char*)+0xa8>)
    2328:	2102      	movs	r1, #2
    SendNAK;
    232a:	781b      	ldrb	r3, [r3, #0]
    SetErrorCode(ERR_BADARG);
    232c:	6011      	str	r1, [r2, #0]
    SendNAK;
    232e:	2b00      	cmp	r3, #0
    2330:	d1f1      	bne.n	2316 <SetThreadEnable(char*, char*)+0x3e>
    2332:	4b14      	ldr	r3, [pc, #80]	; (2384 <SetThreadEnable(char*, char*)+0xac>)
    2334:	2204      	movs	r2, #4
    2336:	4914      	ldr	r1, [pc, #80]	; (2388 <SetThreadEnable(char*, char*)+0xb0>)
    2338:	6818      	ldr	r0, [r3, #0]
    233a:	6803      	ldr	r3, [r0, #0]
}
    233c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2340:	685b      	ldr	r3, [r3, #4]
    2342:	4718      	bx	r3
  SendACKonly;
    2344:	4a11      	ldr	r2, [pc, #68]	; (238c <SetThreadEnable(char*, char*)+0xb4>)
    2346:	4b0f      	ldr	r3, [pc, #60]	; (2384 <SetThreadEnable(char*, char*)+0xac>)
    2348:	6816      	ldr	r6, [r2, #0]
    234a:	681f      	ldr	r7, [r3, #0]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    234c:	2e00      	cmp	r6, #0
    234e:	d0da      	beq.n	2306 <SetThreadEnable(char*, char*)+0x2e>
							  return write((const uint8_t *)str, strlen(str)); }
    2350:	4630      	mov	r0, r6
    2352:	f006 fd15 	bl	8d80 <strlen>
    2356:	683b      	ldr	r3, [r7, #0]
    2358:	4602      	mov	r2, r0
    235a:	4631      	mov	r1, r6
    235c:	4638      	mov	r0, r7
    235e:	685b      	ldr	r3, [r3, #4]
    2360:	4798      	blx	r3
  if (strcmp(state, "TRUE") == 0) t->enabled = true;
    2362:	4903      	ldr	r1, [pc, #12]	; (2370 <SetThreadEnable(char*, char*)+0x98>)
    2364:	4620      	mov	r0, r4
    2366:	f006 fb0f 	bl	8988 <strcmp>
    236a:	2800      	cmp	r0, #0
    236c:	d1d0      	bne.n	2310 <SetThreadEnable(char*, char*)+0x38>
    236e:	e7d4      	b.n	231a <SetThreadEnable(char*, char*)+0x42>
    2370:	200003ac 	.word	0x200003ac
    2374:	200003b4 	.word	0x200003b4
    2378:	2000a9f0 	.word	0x2000a9f0
    237c:	2000afeb 	.word	0x2000afeb
    2380:	20009490 	.word	0x20009490
    2384:	20008e14 	.word	0x20008e14
    2388:	20000568 	.word	0x20000568
    238c:	2000a4dc 	.word	0x2000a4dc

00002390 <SerialInit()>:
{
    2390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
    2394:	4d14      	ldr	r5, [pc, #80]	; (23e8 <SerialInit()+0x58>)
				if (elapsed > 750) break;
    2396:	f240 28ee 	movw	r8, #750	; 0x2ee
    239a:	4c14      	ldr	r4, [pc, #80]	; (23ec <SerialInit()+0x5c>)
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    239c:	4f14      	ldr	r7, [pc, #80]	; (23f0 <SerialInit()+0x60>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    239e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 23f8 <SerialInit()+0x68>
		uint32_t millis_begin = systick_millis_count;
    23a2:	682e      	ldr	r6, [r5, #0]
		yield();
    23a4:	f004 f8b6 	bl	6514 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    23a8:	7823      	ldrb	r3, [r4, #0]
    23aa:	b183      	cbz	r3, 23ce <SerialInit()+0x3e>
    23ac:	783b      	ldrb	r3, [r7, #0]
    23ae:	07db      	lsls	r3, r3, #31
    23b0:	d50d      	bpl.n	23ce <SerialInit()+0x3e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    23b2:	682b      	ldr	r3, [r5, #0]
    23b4:	f8d9 2000 	ldr.w	r2, [r9]
    23b8:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    23ba:	2b0e      	cmp	r3, #14
    23bc:	d907      	bls.n	23ce <SerialInit()+0x3e>
  rb->Head = 0;
    23be:	4b0d      	ldr	r3, [pc, #52]	; (23f4 <SerialInit()+0x64>)
    23c0:	2200      	movs	r2, #0
  rb->Tail = 0;
    23c2:	e9c3 2200 	strd	r2, r2, [r3]
  rb->Commands = 0;
    23c6:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
    23ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
    23ce:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    23d0:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    23d2:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    23d4:	b12a      	cbz	r2, 23e2 <SerialInit()+0x52>
				if (elapsed > 2000) break;
    23d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    23da:	d8f0      	bhi.n	23be <SerialInit()+0x2e>
			yield();
    23dc:	f004 f89a 	bl	6514 <yield>
    23e0:	e7e0      	b.n	23a4 <SerialInit()+0x14>
				if (elapsed > 750) break;
    23e2:	4543      	cmp	r3, r8
    23e4:	d9fa      	bls.n	23dc <SerialInit()+0x4c>
    23e6:	e7ea      	b.n	23be <SerialInit()+0x2e>
    23e8:	2000ae44 	.word	0x2000ae44
    23ec:	2000b003 	.word	0x2000b003
    23f0:	2000b002 	.word	0x2000b002
    23f4:	2000a4a4 	.word	0x2000a4a4
    23f8:	2000afd8 	.word	0x2000afd8

000023fc <ExecuteCommand(Commands*, int, int, char*, char*, float)>:
{
    23fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (echoMode) SelectedACKonlyString = ACKonlyString2;
    2400:	4d9d      	ldr	r5, [pc, #628]	; (2678 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x27c>)
{
    2402:	4689      	mov	r9, r1
    2404:	4604      	mov	r4, r0
    2406:	4690      	mov	r8, r2
  if (echoMode) SelectedACKonlyString = ACKonlyString2;
    2408:	782d      	ldrb	r5, [r5, #0]
{
    240a:	461f      	mov	r7, r3
    240c:	ed2d 8b02 	vpush	{d8}
    2410:	b083      	sub	sp, #12
    2412:	eeb0 8a40 	vmov.f32	s16, s0
    2416:	990c      	ldr	r1, [sp, #48]	; 0x30
  if (echoMode) SelectedACKonlyString = ACKonlyString2;
    2418:	b19d      	cbz	r5, 2442 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x46>
    241a:	4b98      	ldr	r3, [pc, #608]	; (267c <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x280>)
    241c:	681d      	ldr	r5, [r3, #0]
    241e:	4e98      	ldr	r6, [pc, #608]	; (2680 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x284>)
  switch (cmd->Type)
    2420:	f894 c004 	ldrb.w	ip, [r4, #4]
    2424:	6035      	str	r5, [r6, #0]
    2426:	f1bc 0f07 	cmp.w	ip, #7
    242a:	f200 8108 	bhi.w	263e <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x242>
    242e:	e8df f01c 	tbh	[pc, ip, lsl #1]
    2432:	0014      	.short	0x0014
    2434:	0063003b 	.word	0x0063003b
    2438:	009300a5 	.word	0x009300a5
    243c:	010600ec 	.word	0x010600ec
    2440:	000b      	.short	0x000b
  else SelectedACKonlyString = ACKonlyString1;
    2442:	4b90      	ldr	r3, [pc, #576]	; (2684 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x288>)
    2444:	681d      	ldr	r5, [r3, #0]
    2446:	e7ea      	b.n	241e <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x22>
      if (cmd->NumArgs == 3) cmd->pointers.func2int1flt(arg1, arg2, farg1);
    2448:	68a3      	ldr	r3, [r4, #8]
    244a:	2b03      	cmp	r3, #3
    244c:	f000 8126 	beq.w	269c <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x2a0>
}
    2450:	b003      	add	sp, #12
    2452:	ecbd 8b02 	vpop	{d8}
    2456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (cmd->NumArgs == 0)   // If true then write the value
    245a:	68a3      	ldr	r3, [r4, #8]
    245c:	2b00      	cmp	r3, #0
    245e:	f040 80f7 	bne.w	2650 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x254>
        SendACKonly;
    2462:	4e89      	ldr	r6, [pc, #548]	; (2688 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x28c>)
    2464:	7833      	ldrb	r3, [r6, #0]
    2466:	2b00      	cmp	r3, #0
    2468:	d1f2      	bne.n	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
    246a:	f8df 8224 	ldr.w	r8, [pc, #548]	; 2690 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x294>
    246e:	f8d8 7000 	ldr.w	r7, [r8]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2472:	b16d      	cbz	r5, 2490 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x94>
							  return write((const uint8_t *)str, strlen(str)); }
    2474:	4628      	mov	r0, r5
    2476:	f006 fc83 	bl	8d80 <strlen>
    247a:	683b      	ldr	r3, [r7, #0]
    247c:	4602      	mov	r2, r0
    247e:	4629      	mov	r1, r5
    2480:	685b      	ldr	r3, [r3, #4]
    2482:	4638      	mov	r0, r7
    2484:	4798      	blx	r3
        if (!SerialMute) serial->println(cmd->pointers.charPtr);
    2486:	7833      	ldrb	r3, [r6, #0]
    2488:	2b00      	cmp	r3, #0
    248a:	d1e1      	bne.n	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
    248c:	f8d8 7000 	ldr.w	r7, [r8]
    2490:	68e4      	ldr	r4, [r4, #12]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2492:	b34c      	cbz	r4, 24e8 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0xec>
							  return write((const uint8_t *)str, strlen(str)); }
    2494:	4620      	mov	r0, r4
    2496:	f006 fc73 	bl	8d80 <strlen>
    249a:	683b      	ldr	r3, [r7, #0]
    249c:	4602      	mov	r2, r0
    249e:	4621      	mov	r1, r4
    24a0:	685b      	ldr	r3, [r3, #4]
    24a2:	4638      	mov	r0, r7
    24a4:	4798      	blx	r3
    24a6:	e01f      	b.n	24e8 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0xec>
      if (cmd->NumArgs == 0)   // If true then write the value
    24a8:	68a3      	ldr	r3, [r4, #8]
    24aa:	2b00      	cmp	r3, #0
    24ac:	f040 80d8 	bne.w	2660 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x264>
        SendACKonly;
    24b0:	4e75      	ldr	r6, [pc, #468]	; (2688 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x28c>)
    24b2:	7833      	ldrb	r3, [r6, #0]
    24b4:	2b00      	cmp	r3, #0
    24b6:	d1cb      	bne.n	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
    24b8:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 2690 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x294>
    24bc:	f8d8 7000 	ldr.w	r7, [r8]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    24c0:	b16d      	cbz	r5, 24de <ExecuteCommand(Commands*, int, int, char*, char*, float)+0xe2>
							  return write((const uint8_t *)str, strlen(str)); }
    24c2:	4628      	mov	r0, r5
    24c4:	f006 fc5c 	bl	8d80 <strlen>
    24c8:	683b      	ldr	r3, [r7, #0]
    24ca:	4602      	mov	r2, r0
    24cc:	4629      	mov	r1, r5
    24ce:	685b      	ldr	r3, [r3, #4]
    24d0:	4638      	mov	r0, r7
    24d2:	4798      	blx	r3
        if (!SerialMute) serial->println(*(cmd->pointers.intPtr));
    24d4:	7833      	ldrb	r3, [r6, #0]
    24d6:	2b00      	cmp	r3, #0
    24d8:	d1ba      	bne.n	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
    24da:	f8d8 7000 	ldr.w	r7, [r8]
    24de:	68e3      	ldr	r3, [r4, #12]
	size_t print(int n)				{ return print((long)n); }
    24e0:	4638      	mov	r0, r7
    24e2:	6819      	ldr	r1, [r3, #0]
    24e4:	f001 fc54 	bl	3d90 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    24e8:	4638      	mov	r0, r7
}
    24ea:	b003      	add	sp, #12
    24ec:	ecbd 8b02 	vpop	{d8}
    24f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    24f4:	f001 bc58 	b.w	3da8 <Print::println()>
      if (cmd->NumArgs == 0)   // If true then write the value
    24f8:	68a3      	ldr	r3, [r4, #8]
    24fa:	bb13      	cbnz	r3, 2542 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x146>
        SendACKonly;
    24fc:	4e62      	ldr	r6, [pc, #392]	; (2688 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x28c>)
    24fe:	7833      	ldrb	r3, [r6, #0]
    2500:	2b00      	cmp	r3, #0
    2502:	d1a5      	bne.n	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
    2504:	f8df 8188 	ldr.w	r8, [pc, #392]	; 2690 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x294>
    2508:	f8d8 7000 	ldr.w	r7, [r8]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    250c:	b165      	cbz	r5, 2528 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x12c>
							  return write((const uint8_t *)str, strlen(str)); }
    250e:	4628      	mov	r0, r5
    2510:	f006 fc36 	bl	8d80 <strlen>
    2514:	683b      	ldr	r3, [r7, #0]
    2516:	4602      	mov	r2, r0
    2518:	4629      	mov	r1, r5
    251a:	685b      	ldr	r3, [r3, #4]
    251c:	4638      	mov	r0, r7
    251e:	4798      	blx	r3
        if (!SerialMute) serial->println(*(cmd->pointers.floatPtr));
    2520:	7833      	ldrb	r3, [r6, #0]
    2522:	b96b      	cbnz	r3, 2540 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x144>
    2524:	f8d8 7000 	ldr.w	r7, [r8]
    2528:	68e3      	ldr	r3, [r4, #12]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    252a:	2102      	movs	r1, #2
    252c:	4638      	mov	r0, r7
    252e:	ed93 0a00 	vldr	s0, [r3]
    2532:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2536:	f001 fc67 	bl	3e08 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    253a:	4638      	mov	r0, r7
    253c:	f001 fc34 	bl	3da8 <Print::println()>
      if (cmd->NumArgs == 1)
    2540:	68a3      	ldr	r3, [r4, #8]
    2542:	2b01      	cmp	r3, #1
    2544:	d184      	bne.n	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
        SendACK;
    2546:	4b50      	ldr	r3, [pc, #320]	; (2688 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x28c>)
        *(cmd->pointers.floatPtr) = farg1;
    2548:	68e2      	ldr	r2, [r4, #12]
        SendACK;
    254a:	781b      	ldrb	r3, [r3, #0]
        *(cmd->pointers.floatPtr) = farg1;
    254c:	ed82 8a00 	vstr	s16, [r2]
        SendACK;
    2550:	2b00      	cmp	r3, #0
    2552:	f47f af7d 	bne.w	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
    2556:	e04c      	b.n	25f2 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x1f6>
      if (cmd->NumArgs == 0) cmd->pointers.funcVoid();
    2558:	68a3      	ldr	r3, [r4, #8]
    255a:	b913      	cbnz	r3, 2562 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x166>
    255c:	68e3      	ldr	r3, [r4, #12]
    255e:	4798      	blx	r3
      if (cmd->NumArgs == 1) cmd->pointers.func1str(args1);
    2560:	68a3      	ldr	r3, [r4, #8]
      if (cmd->NumArgs == 1) cmd->pointers.func1int(arg1);
    2562:	2b01      	cmp	r3, #1
    2564:	d103      	bne.n	256e <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x172>
    2566:	68e3      	ldr	r3, [r4, #12]
    2568:	4648      	mov	r0, r9
    256a:	4798      	blx	r3
      if (cmd->NumArgs == 2) cmd->pointers.func2int(arg1, arg2);
    256c:	68a3      	ldr	r3, [r4, #8]
    256e:	2b02      	cmp	r3, #2
    2570:	f47f af6e 	bne.w	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
    2574:	68e3      	ldr	r3, [r4, #12]
    2576:	4641      	mov	r1, r8
    2578:	4648      	mov	r0, r9
    257a:	e05a      	b.n	2632 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x236>
      if (cmd->NumArgs == 0)   // If true then write the value
    257c:	68a6      	ldr	r6, [r4, #8]
    257e:	bb46      	cbnz	r6, 25d2 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x1d6>
        SendACKonly;
    2580:	f8df 8104 	ldr.w	r8, [pc, #260]	; 2688 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x28c>
    2584:	f898 3000 	ldrb.w	r3, [r8]
    2588:	2b00      	cmp	r3, #0
    258a:	f47f af61 	bne.w	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
    258e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 2690 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x294>
    2592:	f8d9 6000 	ldr.w	r6, [r9]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2596:	b16d      	cbz	r5, 25b4 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x1b8>
							  return write((const uint8_t *)str, strlen(str)); }
    2598:	4628      	mov	r0, r5
    259a:	f006 fbf1 	bl	8d80 <strlen>
    259e:	6833      	ldr	r3, [r6, #0]
    25a0:	4602      	mov	r2, r0
    25a2:	4629      	mov	r1, r5
    25a4:	685b      	ldr	r3, [r3, #4]
    25a6:	4630      	mov	r0, r6
    25a8:	4798      	blx	r3
        if (!SerialMute)
    25aa:	f898 3000 	ldrb.w	r3, [r8]
    25ae:	b97b      	cbnz	r3, 25d0 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x1d4>
          if (*(cmd->pointers.boolPtr)) serial->println("TRUE");
    25b0:	f8d9 6000 	ldr.w	r6, [r9]
    25b4:	68e3      	ldr	r3, [r4, #12]
    25b6:	781b      	ldrb	r3, [r3, #0]
    25b8:	2b00      	cmp	r3, #0
    25ba:	f000 808b 	beq.w	26d4 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x2d8>
    25be:	6833      	ldr	r3, [r6, #0]
    25c0:	2204      	movs	r2, #4
    25c2:	4932      	ldr	r1, [pc, #200]	; (268c <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x290>)
    25c4:	685b      	ldr	r3, [r3, #4]
    25c6:	4630      	mov	r0, r6
    25c8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    25ca:	4630      	mov	r0, r6
    25cc:	f001 fbec 	bl	3da8 <Print::println()>
      if (cmd->NumArgs == 1)  // If true then read the value
    25d0:	68a6      	ldr	r6, [r4, #8]
    25d2:	2e01      	cmp	r6, #1
    25d4:	f47f af3c 	bne.w	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
        if ((strcmp(args1, "TRUE") == 0) || (strcmp(args1, "FALSE") == 0))
    25d8:	492c      	ldr	r1, [pc, #176]	; (268c <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x290>)
    25da:	4638      	mov	r0, r7
    25dc:	f006 f9d4 	bl	8988 <strcmp>
    25e0:	2800      	cmp	r0, #0
    25e2:	d166      	bne.n	26b2 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x2b6>
          if (strcmp(args1, "TRUE") == 0) *(cmd->pointers.boolPtr) = true;
    25e4:	68e3      	ldr	r3, [r4, #12]
    25e6:	701e      	strb	r6, [r3, #0]
        SendACK;
    25e8:	4b27      	ldr	r3, [pc, #156]	; (2688 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x28c>)
    25ea:	781b      	ldrb	r3, [r3, #0]
    25ec:	2b00      	cmp	r3, #0
    25ee:	f47f af2f 	bne.w	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
        SendACK;
    25f2:	4b27      	ldr	r3, [pc, #156]	; (2690 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x294>)
							  return write((const uint8_t *)str, strlen(str)); }
    25f4:	2203      	movs	r2, #3
    25f6:	4927      	ldr	r1, [pc, #156]	; (2694 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x298>)
      SendNAK;
    25f8:	6818      	ldr	r0, [r3, #0]
    25fa:	6803      	ldr	r3, [r0, #0]
    25fc:	685b      	ldr	r3, [r3, #4]
}
    25fe:	b003      	add	sp, #12
    2600:	ecbd 8b02 	vpop	{d8}
    2604:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2608:	4718      	bx	r3
      if (cmd->NumArgs == 0) cmd->pointers.funcVoid();
    260a:	68a3      	ldr	r3, [r4, #8]
    260c:	b923      	cbnz	r3, 2618 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x21c>
    260e:	68e3      	ldr	r3, [r4, #12]
    2610:	9101      	str	r1, [sp, #4]
    2612:	4798      	blx	r3
      if (cmd->NumArgs == 1) cmd->pointers.func1str(args1);
    2614:	68a3      	ldr	r3, [r4, #8]
    2616:	9901      	ldr	r1, [sp, #4]
    2618:	2b01      	cmp	r3, #1
    261a:	d105      	bne.n	2628 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x22c>
    261c:	68e3      	ldr	r3, [r4, #12]
    261e:	4638      	mov	r0, r7
    2620:	9101      	str	r1, [sp, #4]
    2622:	4798      	blx	r3
      if (cmd->NumArgs == 2) cmd->pointers.func2str(args1, args2);
    2624:	68a3      	ldr	r3, [r4, #8]
    2626:	9901      	ldr	r1, [sp, #4]
    2628:	2b02      	cmp	r3, #2
    262a:	f47f af11 	bne.w	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
    262e:	68e3      	ldr	r3, [r4, #12]
    2630:	4638      	mov	r0, r7
}
    2632:	b003      	add	sp, #12
    2634:	ecbd 8b02 	vpop	{d8}
    2638:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      if (cmd->NumArgs == 2) cmd->pointers.func2str(args1, args2);
    263c:	4718      	bx	r3
      SendNAK;
    263e:	4b12      	ldr	r3, [pc, #72]	; (2688 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x28c>)
    2640:	781b      	ldrb	r3, [r3, #0]
    2642:	2b00      	cmp	r3, #0
    2644:	f47f af04 	bne.w	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
    2648:	4b11      	ldr	r3, [pc, #68]	; (2690 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x294>)
    264a:	2204      	movs	r2, #4
    264c:	4912      	ldr	r1, [pc, #72]	; (2698 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x29c>)
    264e:	e7d3      	b.n	25f8 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x1fc>
      if (cmd->NumArgs == 1)  // If true then read the value
    2650:	2b01      	cmp	r3, #1
    2652:	f47f aefd 	bne.w	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
        strcpy(cmd->pointers.charPtr, args1);
    2656:	4639      	mov	r1, r7
    2658:	68e0      	ldr	r0, [r4, #12]
    265a:	f006 faff 	bl	8c5c <strcpy>
    265e:	e7c3      	b.n	25e8 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x1ec>
      if (cmd->NumArgs == 1)
    2660:	2b01      	cmp	r3, #1
    2662:	f47f aef5 	bne.w	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
        SendACK;
    2666:	4b08      	ldr	r3, [pc, #32]	; (2688 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x28c>)
        *(cmd->pointers.intPtr) = arg1;
    2668:	68e2      	ldr	r2, [r4, #12]
        SendACK;
    266a:	781b      	ldrb	r3, [r3, #0]
        *(cmd->pointers.intPtr) = arg1;
    266c:	f8c2 9000 	str.w	r9, [r2]
        SendACK;
    2670:	2b00      	cmp	r3, #0
    2672:	f47f aeed 	bne.w	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
    2676:	e7bc      	b.n	25f2 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x1f6>
    2678:	2000aff4 	.word	0x2000aff4
    267c:	20007cec 	.word	0x20007cec
    2680:	2000a4dc 	.word	0x2000a4dc
    2684:	20007ce8 	.word	0x20007ce8
    2688:	2000afeb 	.word	0x2000afeb
    268c:	200003ac 	.word	0x200003ac
    2690:	20008e14 	.word	0x20008e14
    2694:	200004a0 	.word	0x200004a0
    2698:	20000568 	.word	0x20000568
      if (cmd->NumArgs == 3) cmd->pointers.func2int1flt(arg1, arg2, farg1);
    269c:	eeb0 0a48 	vmov.f32	s0, s16
    26a0:	68e3      	ldr	r3, [r4, #12]
    26a2:	4641      	mov	r1, r8
    26a4:	4648      	mov	r0, r9
}
    26a6:	b003      	add	sp, #12
    26a8:	ecbd 8b02 	vpop	{d8}
    26ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      if (cmd->NumArgs == 3) cmd->pointers.func2int1flt(arg1, arg2, farg1);
    26b0:	4718      	bx	r3
        if ((strcmp(args1, "TRUE") == 0) || (strcmp(args1, "FALSE") == 0))
    26b2:	490b      	ldr	r1, [pc, #44]	; (26e0 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x2e4>)
    26b4:	4638      	mov	r0, r7
    26b6:	f006 f967 	bl	8988 <strcmp>
    26ba:	b140      	cbz	r0, 26ce <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x2d2>
        SendNAK;
    26bc:	4b09      	ldr	r3, [pc, #36]	; (26e4 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x2e8>)
        SetErrorCode(ERR_BADARG);
    26be:	2102      	movs	r1, #2
    26c0:	4a09      	ldr	r2, [pc, #36]	; (26e8 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x2ec>)
        SendNAK;
    26c2:	781b      	ldrb	r3, [r3, #0]
        SetErrorCode(ERR_BADARG);
    26c4:	6011      	str	r1, [r2, #0]
        SendNAK;
    26c6:	2b00      	cmp	r3, #0
    26c8:	f47f aec2 	bne.w	2450 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x54>
    26cc:	e7bc      	b.n	2648 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x24c>
          else *(cmd->pointers.boolPtr) = false;
    26ce:	68e3      	ldr	r3, [r4, #12]
    26d0:	7018      	strb	r0, [r3, #0]
    26d2:	e789      	b.n	25e8 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x1ec>
    26d4:	6833      	ldr	r3, [r6, #0]
    26d6:	2205      	movs	r2, #5
    26d8:	4901      	ldr	r1, [pc, #4]	; (26e0 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x2e4>)
    26da:	685b      	ldr	r3, [r3, #4]
    26dc:	e773      	b.n	25c6 <ExecuteCommand(Commands*, int, int, char*, char*, float)+0x1ca>
    26de:	bf00      	nop
    26e0:	200003b4 	.word	0x200003b4
    26e4:	2000afeb 	.word	0x2000afeb
    26e8:	20009490 	.word	0x20009490

000026ec <RB_Commands(Ring_Buffer*)>:
  return (rb->Commands);
    26ec:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
}
    26f0:	68c0      	ldr	r0, [r0, #12]
    26f2:	4770      	bx	lr

000026f4 <RB_Get(Ring_Buffer*)>:
  if (rb->Count == 0)
    26f4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    26f8:	689a      	ldr	r2, [r3, #8]
    26fa:	b1da      	cbz	r2, 2734 <RB_Get(Ring_Buffer*)+0x40>
  ch = rb->Buffer[rb->Head];
    26fc:	6859      	ldr	r1, [r3, #4]
  if (rb->Head++ >= RB_BUF_SIZE - 1) rb->Head = 0;
    26fe:	f640 7cfe 	movw	ip, #4094	; 0xffe
  rb->Count--;
    2702:	3a01      	subs	r2, #1
  ch = rb->Buffer[rb->Head];
    2704:	5c40      	ldrb	r0, [r0, r1]
  if (rb->Head++ >= RB_BUF_SIZE - 1) rb->Head = 0;
    2706:	4561      	cmp	r1, ip
    2708:	bfd4      	ite	le
    270a:	3101      	addle	r1, #1
    270c:	2100      	movgt	r1, #0
  if (ch == '\r') ch = '\n';
    270e:	280d      	cmp	r0, #13
  rb->Count--;
    2710:	e9c3 1201 	strd	r1, r2, [r3, #4]
  if (ch == '\r') ch = '\n';
    2714:	d009      	beq.n	272a <RB_Get(Ring_Buffer*)+0x36>
  if (ch == ';') rb->Commands--;
    2716:	283b      	cmp	r0, #59	; 0x3b
    2718:	d00f      	beq.n	273a <RB_Get(Ring_Buffer*)+0x46>
  if (ch == '\n') rb->Commands--;
    271a:	280a      	cmp	r0, #10
    271c:	d005      	beq.n	272a <RB_Get(Ring_Buffer*)+0x36>
  if (ch == ';') rb->Commands--;
    271e:	68da      	ldr	r2, [r3, #12]
  if (rb->Commands < 0) rb->Commands = 0;
    2720:	2a00      	cmp	r2, #0
    2722:	da01      	bge.n	2728 <RB_Get(Ring_Buffer*)+0x34>
    2724:	2200      	movs	r2, #0
    2726:	60da      	str	r2, [r3, #12]
}
    2728:	4770      	bx	lr
  if (ch == '\n') rb->Commands--;
    272a:	68da      	ldr	r2, [r3, #12]
    272c:	200a      	movs	r0, #10
    272e:	3a01      	subs	r2, #1
    2730:	60da      	str	r2, [r3, #12]
    2732:	e7f5      	b.n	2720 <RB_Get(Ring_Buffer*)+0x2c>
    return (0xFF);
    2734:	20ff      	movs	r0, #255	; 0xff
    rb->Commands = 0;  // This has to be true if the buffer is empty...
    2736:	60da      	str	r2, [r3, #12]
    return (0xFF);
    2738:	4770      	bx	lr
  if (ch == ';') rb->Commands--;
    273a:	68da      	ldr	r2, [r3, #12]
    273c:	3a01      	subs	r2, #1
    273e:	60da      	str	r2, [r3, #12]
  if (ch == '\n') rb->Commands--;
    2740:	e7ee      	b.n	2720 <RB_Get(Ring_Buffer*)+0x2c>
    2742:	bf00      	nop

00002744 <GetToken(bool)>:
{
    2744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2748:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 2810 <GetToken(bool)+0xcc>
    if (Tptr >= MaxToken) Tptr = MaxToken - 1;
    274c:	f04f 0913 	mov.w	r9, #19
    2750:	4e2e      	ldr	r6, [pc, #184]	; (280c <GetToken(bool)+0xc8>)
{
    2752:	4680      	mov	r8, r0
    2754:	f50b 5780 	add.w	r7, fp, #4096	; 0x1000
  if (rb->Count == 0) return (0xFF);
    2758:	68bb      	ldr	r3, [r7, #8]
    275a:	2b00      	cmp	r3, #0
    275c:	d052      	beq.n	2804 <GetToken(bool)+0xc0>
  ch = rb->Buffer[rb->Head];
    275e:	687b      	ldr	r3, [r7, #4]
    2760:	f81b 4003 	ldrb.w	r4, [fp, r3]
  if (ch == '\r') ch = '\n';
    2764:	2c0d      	cmp	r4, #13
    2766:	d030      	beq.n	27ca <GetToken(bool)+0x86>
    if (ch == 0xFF) return NULL;
    2768:	2cff      	cmp	r4, #255	; 0xff
    276a:	d04b      	beq.n	2804 <GetToken(bool)+0xc0>
    if (Tptr >= MaxToken) Tptr = MaxToken - 1;
    276c:	7835      	ldrb	r5, [r6, #0]
    276e:	46b2      	mov	sl, r6
    2770:	2d13      	cmp	r5, #19
    2772:	d902      	bls.n	277a <GetToken(bool)+0x36>
    2774:	2513      	movs	r5, #19
    2776:	f886 9000 	strb.w	r9, [r6]
    if ((ch == '\n') || (ch == ';') || (ch == ':') || (ch == ',') || (ch == ']') || (ch == '['))
    277a:	2c0a      	cmp	r4, #10
    277c:	d02b      	beq.n	27d6 <GetToken(bool)+0x92>
    277e:	2c3b      	cmp	r4, #59	; 0x3b
    2780:	d029      	beq.n	27d6 <GetToken(bool)+0x92>
    2782:	2c5b      	cmp	r4, #91	; 0x5b
    2784:	d027      	beq.n	27d6 <GetToken(bool)+0x92>
    2786:	d811      	bhi.n	27ac <GetToken(bool)+0x68>
    2788:	2c2c      	cmp	r4, #44	; 0x2c
    278a:	d024      	beq.n	27d6 <GetToken(bool)+0x92>
    278c:	2c3a      	cmp	r4, #58	; 0x3a
    278e:	d022      	beq.n	27d6 <GetToken(bool)+0x92>
    else RB_Get(&RB);
    2790:	481f      	ldr	r0, [pc, #124]	; (2810 <GetToken(bool)+0xcc>)
    2792:	f7ff ffaf 	bl	26f4 <RB_Get(Ring_Buffer*)>
  Token[Tptr++] = ch;
    2796:	1c6a      	adds	r2, r5, #1
    2798:	4b1e      	ldr	r3, [pc, #120]	; (2814 <GetToken(bool)+0xd0>)
    279a:	b2d2      	uxtb	r2, r2
    279c:	555c      	strb	r4, [r3, r5]
  if (Tptr >= MaxToken) Tptr = MaxToken - 1;
    279e:	2a14      	cmp	r2, #20
  Token[Tptr++] = ch;
    27a0:	7032      	strb	r2, [r6, #0]
  if (Tptr >= MaxToken) Tptr = MaxToken - 1;
    27a2:	d00f      	beq.n	27c4 <GetToken(bool)+0x80>
    if (ch == 0)
    27a4:	2c00      	cmp	r4, #0
    27a6:	d1d7      	bne.n	2758 <GetToken(bool)+0x14>
      if ((Token[0] == ',') && !ReturnComma) return NULL;
    27a8:	7818      	ldrb	r0, [r3, #0]
    27aa:	e01b      	b.n	27e4 <GetToken(bool)+0xa0>
    27ac:	2c5d      	cmp	r4, #93	; 0x5d
    27ae:	d012      	beq.n	27d6 <GetToken(bool)+0x92>
    else RB_Get(&RB);
    27b0:	4817      	ldr	r0, [pc, #92]	; (2810 <GetToken(bool)+0xcc>)
    27b2:	f7ff ff9f 	bl	26f4 <RB_Get(Ring_Buffer*)>
  Token[Tptr++] = ch;
    27b6:	1c6a      	adds	r2, r5, #1
    27b8:	4b16      	ldr	r3, [pc, #88]	; (2814 <GetToken(bool)+0xd0>)
    27ba:	b2d2      	uxtb	r2, r2
    27bc:	555c      	strb	r4, [r3, r5]
  if (Tptr >= MaxToken) Tptr = MaxToken - 1;
    27be:	2a14      	cmp	r2, #20
  Token[Tptr++] = ch;
    27c0:	7032      	strb	r2, [r6, #0]
  if (Tptr >= MaxToken) Tptr = MaxToken - 1;
    27c2:	d1c9      	bne.n	2758 <GetToken(bool)+0x14>
    27c4:	f886 9000 	strb.w	r9, [r6]
    27c8:	e7ec      	b.n	27a4 <GetToken(bool)+0x60>
    if (Tptr >= MaxToken) Tptr = MaxToken - 1;
    27ca:	f8df a040 	ldr.w	sl, [pc, #64]	; 280c <GetToken(bool)+0xc8>
    27ce:	f89a 5000 	ldrb.w	r5, [sl]
    27d2:	2d13      	cmp	r5, #19
    27d4:	d810      	bhi.n	27f8 <GetToken(bool)+0xb4>
      if (Tptr != 0) ch = 0;
    27d6:	b985      	cbnz	r5, 27fa <GetToken(bool)+0xb6>
        Char2Token(RB_Get(&RB));
    27d8:	480d      	ldr	r0, [pc, #52]	; (2810 <GetToken(bool)+0xcc>)
    27da:	f7ff ff8b 	bl	26f4 <RB_Get(Ring_Buffer*)>
  Token[Tptr++] = ch;
    27de:	4b0d      	ldr	r3, [pc, #52]	; (2814 <GetToken(bool)+0xd0>)
    27e0:	705d      	strb	r5, [r3, #1]
    27e2:	7018      	strb	r0, [r3, #0]
      Tptr = 0;
    27e4:	2300      	movs	r3, #0
      if ((Token[0] == ',') && !ReturnComma) return NULL;
    27e6:	282c      	cmp	r0, #44	; 0x2c
      Tptr = 0;
    27e8:	f88a 3000 	strb.w	r3, [sl]
      if ((Token[0] == ',') && !ReturnComma) return NULL;
    27ec:	d102      	bne.n	27f4 <GetToken(bool)+0xb0>
    27ee:	f1b8 0f00 	cmp.w	r8, #0
    27f2:	d007      	beq.n	2804 <GetToken(bool)+0xc0>
      return Token;
    27f4:	4807      	ldr	r0, [pc, #28]	; (2814 <GetToken(bool)+0xd0>)
    27f6:	e006      	b.n	2806 <GetToken(bool)+0xc2>
    if (Tptr >= MaxToken) Tptr = MaxToken - 1;
    27f8:	2513      	movs	r5, #19
  Token[Tptr++] = ch;
    27fa:	4b06      	ldr	r3, [pc, #24]	; (2814 <GetToken(bool)+0xd0>)
    27fc:	2200      	movs	r2, #0
      if ((Token[0] == ',') && !ReturnComma) return NULL;
    27fe:	7818      	ldrb	r0, [r3, #0]
  Token[Tptr++] = ch;
    2800:	555a      	strb	r2, [r3, r5]
  if (Tptr >= MaxToken) Tptr = MaxToken - 1;
    2802:	e7ef      	b.n	27e4 <GetToken(bool)+0xa0>
      if ((Token[0] == ',') && !ReturnComma) return NULL;
    2804:	2000      	movs	r0, #0
}
    2806:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    280a:	bf00      	nop
    280c:	2000afec 	.word	0x2000afec
    2810:	200094a4 	.word	0x200094a4
    2814:	2000a510 	.word	0x2000a510

00002818 <ProcessCommand()>:
{
    2818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    281c:	b087      	sub	sp, #28
  if (state == PCargLine)
    281e:	4da2      	ldr	r5, [pc, #648]	; (2aa8 <ProcessCommand()+0x290>)
  String sToken;
    2820:	2100      	movs	r1, #0
    2822:	a803      	add	r0, sp, #12
    2824:	f001 fba2 	bl	3f6c <String::String(char const*)>
  if (state == PCargLine)
    2828:	782c      	ldrb	r4, [r5, #0]
    282a:	2c05      	cmp	r4, #5
    282c:	d060      	beq.n	28f0 <ProcessCommand()+0xd8>
  if (lstrmode)
    282e:	4f9f      	ldr	r7, [pc, #636]	; (2aac <ProcessCommand()+0x294>)
    2830:	7838      	ldrb	r0, [r7, #0]
    2832:	b1d0      	cbz	r0, 286a <ProcessCommand()+0x52>
    ch = RB_Get(&RB);
    2834:	489e      	ldr	r0, [pc, #632]	; (2ab0 <ProcessCommand()+0x298>)
    2836:	f7ff ff5d 	bl	26f4 <RB_Get(Ring_Buffer*)>
    if (ch == 0xFF) return (-1);
    283a:	28ff      	cmp	r0, #255	; 0xff
    283c:	f000 817c 	beq.w	2b38 <ProcessCommand()+0x320>
    if (ch == '\r') return (0);
    2840:	280d      	cmp	r0, #13
    2842:	f000 815b 	beq.w	2afc <ProcessCommand()+0x2e4>
    2846:	f1a0 042c 	sub.w	r4, r0, #44	; 0x2c
    284a:	fab4 f484 	clz	r4, r4
    284e:	0964      	lsrs	r4, r4, #5
    2850:	2c00      	cmp	r4, #0
    2852:	f040 8153 	bne.w	2afc <ProcessCommand()+0x2e4>
    if (ch == '\n')
    2856:	280a      	cmp	r0, #10
    2858:	d060      	beq.n	291c <ProcessCommand()+0x104>
    lstrptr[lstrindex++] = ch;
    285a:	4a96      	ldr	r2, [pc, #600]	; (2ab4 <ProcessCommand()+0x29c>)
    285c:	4b96      	ldr	r3, [pc, #600]	; (2ab8 <ProcessCommand()+0x2a0>)
    285e:	6819      	ldr	r1, [r3, #0]
    2860:	6813      	ldr	r3, [r2, #0]
    2862:	54c8      	strb	r0, [r1, r3]
    2864:	3301      	adds	r3, #1
    2866:	6013      	str	r3, [r2, #0]
    return (0);
    2868:	e051      	b.n	290e <ProcessCommand()+0xf6>
  Token = GetToken(false);
    286a:	f7ff ff6b 	bl	2744 <GetToken(bool)>
  if (Token == NULL) return (-1);
    286e:	4606      	mov	r6, r0
    2870:	2800      	cmp	r0, #0
    2872:	f000 8161 	beq.w	2b38 <ProcessCommand()+0x320>
  if (Token[0] == 0) return (-1);
    2876:	7803      	ldrb	r3, [r0, #0]
    2878:	2b00      	cmp	r3, #0
    287a:	f000 815d 	beq.w	2b38 <ProcessCommand()+0x320>
  if ((echoMode) && (!SerialMute))
    287e:	4a8f      	ldr	r2, [pc, #572]	; (2abc <ProcessCommand()+0x2a4>)
    2880:	7812      	ldrb	r2, [r2, #0]
    2882:	b36a      	cbz	r2, 28e0 <ProcessCommand()+0xc8>
    2884:	4a8e      	ldr	r2, [pc, #568]	; (2ac0 <ProcessCommand()+0x2a8>)
    2886:	7812      	ldrb	r2, [r2, #0]
    2888:	bb52      	cbnz	r2, 28e0 <ProcessCommand()+0xc8>
    if (strcmp(Token, "\n") != 0)
    288a:	2b0a      	cmp	r3, #10
      if (delimiter != 0) serial->write(delimiter);
    288c:	f8df 825c 	ldr.w	r8, [pc, #604]	; 2aec <ProcessCommand()+0x2d4>
    if (strcmp(Token, "\n") != 0)
    2890:	d020      	beq.n	28d4 <ProcessCommand()+0xbc>
      if (delimiter != 0) serial->write(delimiter);
    2892:	f898 0000 	ldrb.w	r0, [r8]
    2896:	4c8b      	ldr	r4, [pc, #556]	; (2ac4 <ProcessCommand()+0x2ac>)
    2898:	b140      	cbz	r0, 28ac <ProcessCommand()+0x94>
    289a:	6822      	ldr	r2, [r4, #0]
    289c:	498a      	ldr	r1, [pc, #552]	; (2ac8 <ProcessCommand()+0x2b0>)
    289e:	6813      	ldr	r3, [r2, #0]
    28a0:	681b      	ldr	r3, [r3, #0]
    28a2:	428b      	cmp	r3, r1
    28a4:	f040 814b 	bne.w	2b3e <ProcessCommand()+0x326>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    28a8:	f003 fda0 	bl	63ec <usb_serial_putchar>
      serial->print(Token);
    28ac:	6824      	ldr	r4, [r4, #0]
    28ae:	4630      	mov	r0, r6
    28b0:	f006 fa66 	bl	8d80 <strlen>
    28b4:	4631      	mov	r1, r6
    28b6:	6823      	ldr	r3, [r4, #0]
    28b8:	4602      	mov	r2, r0
    28ba:	4620      	mov	r0, r4
    28bc:	685b      	ldr	r3, [r3, #4]
    28be:	4798      	blx	r3
    if (strcmp(Token, "\n") == 0) delimiter = 0;
    28c0:	7833      	ldrb	r3, [r6, #0]
    28c2:	2b0a      	cmp	r3, #10
    28c4:	f040 8125 	bne.w	2b12 <ProcessCommand()+0x2fa>
    28c8:	7873      	ldrb	r3, [r6, #1]
    28ca:	2b00      	cmp	r3, #0
    28cc:	f040 8121 	bne.w	2b12 <ProcessCommand()+0x2fa>
  switch (state)
    28d0:	782c      	ldrb	r4, [r5, #0]
    28d2:	e002      	b.n	28da <ProcessCommand()+0xc2>
    if (strcmp(Token, "\n") != 0)
    28d4:	7843      	ldrb	r3, [r0, #1]
    28d6:	2b00      	cmp	r3, #0
    28d8:	d1db      	bne.n	2892 <ProcessCommand()+0x7a>
    if (strcmp(Token, "\n") == 0) delimiter = 0;
    28da:	2300      	movs	r3, #0
    28dc:	f888 3000 	strb.w	r3, [r8]
  switch (state)
    28e0:	2c06      	cmp	r4, #6
    28e2:	d824      	bhi.n	292e <ProcessCommand()+0x116>
    28e4:	e8df f004 	tbb	[pc, r4]
    28e8:	495a7ca4 	.word	0x495a7ca4
    28ec:	2323      	.short	0x2323
    28ee:	27          	.byte	0x27
    28ef:	00          	.byte	0x00
    if (RB.Commands <= 0) return -1;
    28f0:	4b76      	ldr	r3, [pc, #472]	; (2acc <ProcessCommand()+0x2b4>)
    28f2:	68db      	ldr	r3, [r3, #12]
    28f4:	2b00      	cmp	r3, #0
    28f6:	f340 811f 	ble.w	2b38 <ProcessCommand()+0x320>
    CmdArray[CmdNum].pointers.funcVoid();
    28fa:	4a75      	ldr	r2, [pc, #468]	; (2ad0 <ProcessCommand()+0x2b8>)
    28fc:	4b75      	ldr	r3, [pc, #468]	; (2ad4 <ProcessCommand()+0x2bc>)
    28fe:	6812      	ldr	r2, [r2, #0]
    2900:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2904:	68db      	ldr	r3, [r3, #12]
    2906:	4798      	blx	r3
    state = PCcmd;
    2908:	2300      	movs	r3, #0
    return 0;
    290a:	461c      	mov	r4, r3
    state = PCcmd;
    290c:	702b      	strb	r3, [r5, #0]
}
    290e:	a803      	add	r0, sp, #12
    2910:	f001 fb4a 	bl	3fa8 <String::~String()>
    2914:	4620      	mov	r0, r4
    2916:	b007      	add	sp, #28
    2918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      lstrptr[lstrindex++] = 0;
    291c:	4a65      	ldr	r2, [pc, #404]	; (2ab4 <ProcessCommand()+0x29c>)
    291e:	4966      	ldr	r1, [pc, #408]	; (2ab8 <ProcessCommand()+0x2a0>)
    2920:	6813      	ldr	r3, [r2, #0]
    2922:	6809      	ldr	r1, [r1, #0]
      lstrmode = false;
    2924:	703c      	strb	r4, [r7, #0]
      lstrptr[lstrindex++] = 0;
    2926:	54cc      	strb	r4, [r1, r3]
    2928:	3301      	adds	r3, #1
    292a:	6013      	str	r3, [r2, #0]
      return (0);
    292c:	e7ef      	b.n	290e <ProcessCommand()+0xf6>
      state = PCcmd;
    292e:	2300      	movs	r3, #0
  return (0);
    2930:	461c      	mov	r4, r3
      state = PCcmd;
    2932:	702b      	strb	r3, [r5, #0]
      break;
    2934:	e7eb      	b.n	290e <ProcessCommand()+0xf6>
      if ((strcmp(Token, "\n") != 0) && (strcmp(Token, ";") != 0))
    2936:	7833      	ldrb	r3, [r6, #0]
    2938:	2b0a      	cmp	r3, #10
    293a:	f000 80e1 	beq.w	2b00 <ProcessCommand()+0x2e8>
    293e:	2b3b      	cmp	r3, #59	; 0x3b
    2940:	f040 80ec 	bne.w	2b1c <ProcessCommand()+0x304>
    2944:	7873      	ldrb	r3, [r6, #1]
    2946:	2b00      	cmp	r3, #0
    2948:	f040 80e8 	bne.w	2b1c <ProcessCommand()+0x304>
      i = CmdNum;
    294c:	4b60      	ldr	r3, [pc, #384]	; (2ad0 <ProcessCommand()+0x2b8>)
      CmdNum = -1;
    294e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
      ExecuteCommand(&CmdArray[i], arg1, arg2, Sarg1, Sarg2, farg1);
    2952:	4961      	ldr	r1, [pc, #388]	; (2ad8 <ProcessCommand()+0x2c0>)
      state = PCcmd;
    2954:	2400      	movs	r4, #0
      i = CmdNum;
    2956:	6818      	ldr	r0, [r3, #0]
      CmdNum = -1;
    2958:	601a      	str	r2, [r3, #0]
      ExecuteCommand(&CmdArray[i], arg1, arg2, Sarg1, Sarg2, farg1);
    295a:	4b60      	ldr	r3, [pc, #384]	; (2adc <ProcessCommand()+0x2c4>)
    295c:	ed91 0a00 	vldr	s0, [r1]
    2960:	6819      	ldr	r1, [r3, #0]
    2962:	4b5c      	ldr	r3, [pc, #368]	; (2ad4 <ProcessCommand()+0x2bc>)
    2964:	4a5e      	ldr	r2, [pc, #376]	; (2ae0 <ProcessCommand()+0x2c8>)
    2966:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    296a:	4b5e      	ldr	r3, [pc, #376]	; (2ae4 <ProcessCommand()+0x2cc>)
    296c:	6812      	ldr	r2, [r2, #0]
    296e:	9300      	str	r3, [sp, #0]
    2970:	4b5d      	ldr	r3, [pc, #372]	; (2ae8 <ProcessCommand()+0x2d0>)
      state = PCcmd;
    2972:	702c      	strb	r4, [r5, #0]
      ExecuteCommand(&CmdArray[i], arg1, arg2, Sarg1, Sarg2, farg1);
    2974:	f7ff fd42 	bl	23fc <ExecuteCommand(Commands*, int, int, char*, char*, float)>
      break;
    2978:	e7c9      	b.n	290e <ProcessCommand()+0xf6>
      sToken = Token;
    297a:	4631      	mov	r1, r6
    297c:	a803      	add	r0, sp, #12
    297e:	f001 fb4f 	bl	4020 <String::operator=(char const*)>
      sToken.trim();
    2982:	a803      	add	r0, sp, #12
    2984:	f001 fb5e 	bl	4044 <String::trim()>
      farg1 = sToken.toFloat();
    2988:	a803      	add	r0, sp, #12
    298a:	f001 fb8d 	bl	40a8 <String::toFloat() const>
    298e:	4a52      	ldr	r2, [pc, #328]	; (2ad8 <ProcessCommand()+0x2c0>)
      state = PCend;
    2990:	2306      	movs	r3, #6
  return (0);
    2992:	2400      	movs	r4, #0
      farg1 = sToken.toFloat();
    2994:	ed82 0a00 	vstr	s0, [r2]
      state = PCend;
    2998:	702b      	strb	r3, [r5, #0]
      break;
    299a:	e7b8      	b.n	290e <ProcessCommand()+0xf6>
      Sarg2[0] = 0;
    299c:	4b51      	ldr	r3, [pc, #324]	; (2ae4 <ProcessCommand()+0x2cc>)
    299e:	2200      	movs	r2, #0
      sToken = Token;
    29a0:	4631      	mov	r1, r6
    29a2:	a803      	add	r0, sp, #12
      Sarg2[0] = 0;
    29a4:	701a      	strb	r2, [r3, #0]
      sToken = Token;
    29a6:	f001 fb3b 	bl	4020 <String::operator=(char const*)>
      sToken.trim();
    29aa:	a803      	add	r0, sp, #12
    29ac:	f001 fb4a 	bl	4044 <String::trim()>
      arg2 = sToken.toInt();
    29b0:	a803      	add	r0, sp, #12
    29b2:	f001 fb73 	bl	409c <String::toInt() const>
    29b6:	4b4a      	ldr	r3, [pc, #296]	; (2ae0 <ProcessCommand()+0x2c8>)
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const {
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    29b8:	9903      	ldr	r1, [sp, #12]
    29ba:	6018      	str	r0, [r3, #0]
    29bc:	2900      	cmp	r1, #0
    29be:	f000 80a6 	beq.w	2b0e <ProcessCommand()+0x2f6>
      strcpy(Sarg2, sToken.c_str());
    29c2:	4848      	ldr	r0, [pc, #288]	; (2ae4 <ProcessCommand()+0x2cc>)
    29c4:	f006 f94a 	bl	8c5c <strcpy>
      if (CmdArray[CmdNum].NumArgs > 2) state = PCarg3;
    29c8:	4a41      	ldr	r2, [pc, #260]	; (2ad0 <ProcessCommand()+0x2b8>)
    29ca:	4b42      	ldr	r3, [pc, #264]	; (2ad4 <ProcessCommand()+0x2bc>)
    29cc:	6812      	ldr	r2, [r2, #0]
    29ce:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    29d2:	689b      	ldr	r3, [r3, #8]
    29d4:	2b02      	cmp	r3, #2
    29d6:	dd63      	ble.n	2aa0 <ProcessCommand()+0x288>
    29d8:	2303      	movs	r3, #3
  return (0);
    29da:	2400      	movs	r4, #0
      if (CmdArray[CmdNum].NumArgs > 2) state = PCarg3;
    29dc:	702b      	strb	r3, [r5, #0]
    29de:	e796      	b.n	290e <ProcessCommand()+0xf6>
      Sarg1[0] = 0;
    29e0:	4b41      	ldr	r3, [pc, #260]	; (2ae8 <ProcessCommand()+0x2d0>)
    29e2:	2200      	movs	r2, #0
      sToken = Token;
    29e4:	4631      	mov	r1, r6
    29e6:	a803      	add	r0, sp, #12
      Sarg1[0] = 0;
    29e8:	701a      	strb	r2, [r3, #0]
      sToken = Token;
    29ea:	f001 fb19 	bl	4020 <String::operator=(char const*)>
      sToken.trim();
    29ee:	a803      	add	r0, sp, #12
    29f0:	f001 fb28 	bl	4044 <String::trim()>
      arg1 = sToken.toInt();
    29f4:	a803      	add	r0, sp, #12
    29f6:	f001 fb51 	bl	409c <String::toInt() const>
    29fa:	4b38      	ldr	r3, [pc, #224]	; (2adc <ProcessCommand()+0x2c4>)
    29fc:	4602      	mov	r2, r0
      farg1 = sToken.toFloat();
    29fe:	a803      	add	r0, sp, #12
      arg1 = sToken.toInt();
    2a00:	601a      	str	r2, [r3, #0]
      farg1 = sToken.toFloat();
    2a02:	f001 fb51 	bl	40a8 <String::toFloat() const>
    2a06:	4b34      	ldr	r3, [pc, #208]	; (2ad8 <ProcessCommand()+0x2c0>)
    2a08:	9903      	ldr	r1, [sp, #12]
    2a0a:	ed83 0a00 	vstr	s0, [r3]
    2a0e:	2900      	cmp	r1, #0
    2a10:	d07b      	beq.n	2b0a <ProcessCommand()+0x2f2>
      strcpy(Sarg1, sToken.c_str());
    2a12:	4835      	ldr	r0, [pc, #212]	; (2ae8 <ProcessCommand()+0x2d0>)
    2a14:	f006 f922 	bl	8c5c <strcpy>
      if (CmdArray[CmdNum].NumArgs > 1) state = PCarg2;
    2a18:	4a2d      	ldr	r2, [pc, #180]	; (2ad0 <ProcessCommand()+0x2b8>)
    2a1a:	4b2e      	ldr	r3, [pc, #184]	; (2ad4 <ProcessCommand()+0x2bc>)
    2a1c:	6812      	ldr	r2, [r2, #0]
    2a1e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2a22:	689b      	ldr	r3, [r3, #8]
    2a24:	2b01      	cmp	r3, #1
    2a26:	dd3b      	ble.n	2aa0 <ProcessCommand()+0x288>
    2a28:	2302      	movs	r3, #2
  return (0);
    2a2a:	2400      	movs	r4, #0
      if (CmdArray[CmdNum].NumArgs > 1) state = PCarg2;
    2a2c:	702b      	strb	r3, [r5, #0]
    2a2e:	e76e      	b.n	290e <ProcessCommand()+0xf6>
      if (strcmp(Token, ";") == 0) break;
    2a30:	7833      	ldrb	r3, [r6, #0]
    2a32:	2b3b      	cmp	r3, #59	; 0x3b
    2a34:	d102      	bne.n	2a3c <ProcessCommand()+0x224>
    2a36:	7872      	ldrb	r2, [r6, #1]
    2a38:	2a00      	cmp	r2, #0
    2a3a:	d05f      	beq.n	2afc <ProcessCommand()+0x2e4>
      if (strcmp(Token, "\n") == 0) break;
    2a3c:	2b0a      	cmp	r3, #10
    2a3e:	d102      	bne.n	2a46 <ProcessCommand()+0x22e>
    2a40:	7873      	ldrb	r3, [r6, #1]
    2a42:	2b00      	cmp	r3, #0
    2a44:	d05a      	beq.n	2afc <ProcessCommand()+0x2e4>
      for (i = 0; CmdArray[i].Cmd != 0; i++) if (strcmp(Token, CmdArray[i].Cmd) == 0)
    2a46:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2ad4 <ProcessCommand()+0x2bc>
      CmdNum = -1;
    2a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2a4e:	f8df a080 	ldr.w	sl, [pc, #128]	; 2ad0 <ProcessCommand()+0x2b8>
      for (i = 0; CmdArray[i].Cmd != 0; i++) if (strcmp(Token, CmdArray[i].Cmd) == 0)
    2a52:	f8d9 1000 	ldr.w	r1, [r9]
      CmdNum = -1;
    2a56:	f8ca 3000 	str.w	r3, [sl]
      for (i = 0; CmdArray[i].Cmd != 0; i++) if (strcmp(Token, CmdArray[i].Cmd) == 0)
    2a5a:	2900      	cmp	r1, #0
    2a5c:	d048      	beq.n	2af0 <ProcessCommand()+0x2d8>
    2a5e:	46cb      	mov	fp, r9
    2a60:	f04f 0800 	mov.w	r8, #0
    2a64:	e005      	b.n	2a72 <ProcessCommand()+0x25a>
    2a66:	f85b 1f10 	ldr.w	r1, [fp, #16]!
    2a6a:	f108 0801 	add.w	r8, r8, #1
    2a6e:	2900      	cmp	r1, #0
    2a70:	d03e      	beq.n	2af0 <ProcessCommand()+0x2d8>
    2a72:	4630      	mov	r0, r6
    2a74:	f005 ff88 	bl	8988 <strcmp>
    2a78:	4604      	mov	r4, r0
    2a7a:	2800      	cmp	r0, #0
    2a7c:	d1f3      	bne.n	2a66 <ProcessCommand()+0x24e>
      if (CmdArray[i].Type == CMDfunctionLine)
    2a7e:	eb09 1908 	add.w	r9, r9, r8, lsl #4
          CmdNum = i;
    2a82:	f8ca 8000 	str.w	r8, [sl]
      if (CmdArray[i].Type == CMDfunctionLine)
    2a86:	f899 3004 	ldrb.w	r3, [r9, #4]
    2a8a:	2b06      	cmp	r3, #6
    2a8c:	d05b      	beq.n	2b46 <ProcessCommand()+0x32e>
      if (CmdArray[i].Type == CMDlongStr)
    2a8e:	2b08      	cmp	r3, #8
    2a90:	d05c      	beq.n	2b4c <ProcessCommand()+0x334>
      if (CmdArray[i].NumArgs > 0) state = PCarg1;
    2a92:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2a96:	2b00      	cmp	r3, #0
    2a98:	dd02      	ble.n	2aa0 <ProcessCommand()+0x288>
    2a9a:	2301      	movs	r3, #1
    2a9c:	702b      	strb	r3, [r5, #0]
    2a9e:	e736      	b.n	290e <ProcessCommand()+0xf6>
      else state = PCend;
    2aa0:	2306      	movs	r3, #6
  return (0);
    2aa2:	2400      	movs	r4, #0
      else state = PCend;
    2aa4:	702b      	strb	r3, [r5, #0]
    2aa6:	e732      	b.n	290e <ProcessCommand()+0xf6>
    2aa8:	2000afef 	.word	0x2000afef
    2aac:	2000aff0 	.word	0x2000aff0
    2ab0:	200094a4 	.word	0x200094a4
    2ab4:	2000a5e8 	.word	0x2000a5e8
    2ab8:	2000a5e4 	.word	0x2000a5e4
    2abc:	2000aff4 	.word	0x2000aff4
    2ac0:	2000afeb 	.word	0x2000afeb
    2ac4:	20008e14 	.word	0x20008e14
    2ac8:	000020a9 	.word	0x000020a9
    2acc:	2000a4a4 	.word	0x2000a4a4
    2ad0:	2000a5e0 	.word	0x2000a5e0
    2ad4:	20007cf0 	.word	0x20007cf0
    2ad8:	2000a5dc 	.word	0x2000a5dc
    2adc:	2000a5d4 	.word	0x2000a5d4
    2ae0:	2000a5d8 	.word	0x2000a5d8
    2ae4:	2000a4c8 	.word	0x2000a4c8
    2ae8:	2000a4b4 	.word	0x2000a4b4
    2aec:	2000aff1 	.word	0x2000aff1
        SendNAK;
    2af0:	491b      	ldr	r1, [pc, #108]	; (2b60 <ProcessCommand()+0x348>)
        SetErrorCode(ERR_BADCMD);
    2af2:	2201      	movs	r2, #1
    2af4:	4b1b      	ldr	r3, [pc, #108]	; (2b64 <ProcessCommand()+0x34c>)
        SendNAK;
    2af6:	780c      	ldrb	r4, [r1, #0]
        SetErrorCode(ERR_BADCMD);
    2af8:	601a      	str	r2, [r3, #0]
        SendNAK;
    2afa:	b1ac      	cbz	r4, 2b28 <ProcessCommand()+0x310>
    if (ch == '\r') return (0);
    2afc:	2400      	movs	r4, #0
    2afe:	e706      	b.n	290e <ProcessCommand()+0xf6>
      if ((strcmp(Token, "\n") != 0) && (strcmp(Token, ";") != 0))
    2b00:	7872      	ldrb	r2, [r6, #1]
    2b02:	2a00      	cmp	r2, #0
    2b04:	f43f af22 	beq.w	294c <ProcessCommand()+0x134>
    2b08:	e719      	b.n	293e <ProcessCommand()+0x126>
    2b0a:	4917      	ldr	r1, [pc, #92]	; (2b68 <ProcessCommand()+0x350>)
    2b0c:	e781      	b.n	2a12 <ProcessCommand()+0x1fa>
    2b0e:	4916      	ldr	r1, [pc, #88]	; (2b68 <ProcessCommand()+0x350>)
    2b10:	e757      	b.n	29c2 <ProcessCommand()+0x1aa>
    else delimiter = ',';
    2b12:	232c      	movs	r3, #44	; 0x2c
  switch (state)
    2b14:	782c      	ldrb	r4, [r5, #0]
    else delimiter = ',';
    2b16:	f888 3000 	strb.w	r3, [r8]
    2b1a:	e6e1      	b.n	28e0 <ProcessCommand()+0xc8>
        SendNAK;
    2b1c:	4a10      	ldr	r2, [pc, #64]	; (2b60 <ProcessCommand()+0x348>)
        state = PCcmd;
    2b1e:	2300      	movs	r3, #0
        SendNAK;
    2b20:	7814      	ldrb	r4, [r2, #0]
        state = PCcmd;
    2b22:	702b      	strb	r3, [r5, #0]
        SendNAK;
    2b24:	2c00      	cmp	r4, #0
    2b26:	d1e9      	bne.n	2afc <ProcessCommand()+0x2e4>
    2b28:	4b10      	ldr	r3, [pc, #64]	; (2b6c <ProcessCommand()+0x354>)
    2b2a:	2204      	movs	r2, #4
    2b2c:	4910      	ldr	r1, [pc, #64]	; (2b70 <ProcessCommand()+0x358>)
    2b2e:	6818      	ldr	r0, [r3, #0]
    2b30:	6803      	ldr	r3, [r0, #0]
    2b32:	685b      	ldr	r3, [r3, #4]
    2b34:	4798      	blx	r3
    2b36:	e6ea      	b.n	290e <ProcessCommand()+0xf6>
    if (RB.Commands <= 0) return -1;
    2b38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2b3c:	e6e7      	b.n	290e <ProcessCommand()+0xf6>
      if (delimiter != 0) serial->write(delimiter);
    2b3e:	4601      	mov	r1, r0
    2b40:	4610      	mov	r0, r2
    2b42:	4798      	blx	r3
    2b44:	e6b2      	b.n	28ac <ProcessCommand()+0x94>
        state = PCargLine;
    2b46:	2305      	movs	r3, #5
    2b48:	702b      	strb	r3, [r5, #0]
        break;
    2b4a:	e6e0      	b.n	290e <ProcessCommand()+0xf6>
        lstrptr = CmdArray[i].pointers.charPtr;
    2b4c:	4b09      	ldr	r3, [pc, #36]	; (2b74 <ProcessCommand()+0x35c>)
    2b4e:	f8d9 200c 	ldr.w	r2, [r9, #12]
    2b52:	601a      	str	r2, [r3, #0]
        lstrmode = true;
    2b54:	2301      	movs	r3, #1
        lstrindex = 0;
    2b56:	4a08      	ldr	r2, [pc, #32]	; (2b78 <ProcessCommand()+0x360>)
        lstrmode = true;
    2b58:	703b      	strb	r3, [r7, #0]
        lstrindex = 0;
    2b5a:	6010      	str	r0, [r2, #0]
        break;
    2b5c:	e6d7      	b.n	290e <ProcessCommand()+0xf6>
    2b5e:	bf00      	nop
    2b60:	2000afeb 	.word	0x2000afeb
    2b64:	20009490 	.word	0x20009490
    2b68:	20007bc4 	.word	0x20007bc4
    2b6c:	20008e14 	.word	0x20008e14
    2b70:	20000568 	.word	0x20000568
    2b74:	2000a5e4 	.word	0x2000a5e4
    2b78:	2000a5e8 	.word	0x2000a5e8

00002b7c <PutCh(char)>:
{
    2b7c:	b410      	push	{r4}
  if (rb->Count >= RB_BUF_SIZE) return (0xFF);
    2b7e:	4c0f      	ldr	r4, [pc, #60]	; (2bbc <PutCh(char)+0x40>)
    2b80:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
    2b84:	689a      	ldr	r2, [r3, #8]
    2b86:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    2b8a:	da11      	bge.n	2bb0 <PutCh(char)+0x34>
  rb->Buffer[rb->Tail] = ch;
    2b8c:	6819      	ldr	r1, [r3, #0]
  rb->Count++;
    2b8e:	3201      	adds	r2, #1
  rb->Buffer[rb->Tail] = ch;
    2b90:	5460      	strb	r0, [r4, r1]
  if (rb->Tail++ >= RB_BUF_SIZE - 1) rb->Tail = 0;
    2b92:	f640 74fe 	movw	r4, #4094	; 0xffe
  rb->Count++;
    2b96:	609a      	str	r2, [r3, #8]
  if (rb->Tail++ >= RB_BUF_SIZE - 1) rb->Tail = 0;
    2b98:	42a1      	cmp	r1, r4
    2b9a:	bfd4      	ite	le
    2b9c:	3101      	addle	r1, #1
    2b9e:	2100      	movgt	r1, #0
  if (ch == ';') rb->Commands++;
    2ba0:	283b      	cmp	r0, #59	; 0x3b
    2ba2:	6019      	str	r1, [r3, #0]
    2ba4:	d001      	beq.n	2baa <PutCh(char)+0x2e>
  if (ch == '\r') rb->Commands++;
    2ba6:	280d      	cmp	r0, #13
    2ba8:	d105      	bne.n	2bb6 <PutCh(char)+0x3a>
  if (ch == ';') rb->Commands++;
    2baa:	68da      	ldr	r2, [r3, #12]
    2bac:	3201      	adds	r2, #1
    2bae:	60da      	str	r2, [r3, #12]
}
    2bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
    2bb4:	4770      	bx	lr
  if (ch == '\n') rb->Commands++;
    2bb6:	280a      	cmp	r0, #10
    2bb8:	d0f7      	beq.n	2baa <PutCh(char)+0x2e>
    2bba:	e7f9      	b.n	2bb0 <PutCh(char)+0x34>
    2bbc:	200094a4 	.word	0x200094a4

00002bc0 <_GLOBAL__sub_I_serial>:
char *SelectedACKonlyString = ACKonlyString1;
    2bc0:	4a02      	ldr	r2, [pc, #8]	; (2bcc <_GLOBAL__sub_I_serial+0xc>)
    2bc2:	4b03      	ldr	r3, [pc, #12]	; (2bd0 <_GLOBAL__sub_I_serial+0x10>)
    2bc4:	6812      	ldr	r2, [r2, #0]
    2bc6:	601a      	str	r2, [r3, #0]
}
    2bc8:	4770      	bx	lr
    2bca:	bf00      	nop
    2bcc:	20007ce8 	.word	0x20007ce8
    2bd0:	2000a4dc 	.word	0x2000a4dc

00002bd4 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
    2bd4:	2000      	movs	r0, #0
    2bd6:	4770      	bx	lr

00002bd8 <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
    2bd8:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    2bdc:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    2be0:	1a10      	subs	r0, r2, r0
    2be2:	4770      	bx	lr

00002be4 <TwoWire::read()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
    2be4:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    2be8:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    2bec:	429a      	cmp	r2, r3
    2bee:	d905      	bls.n	2bfc <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    2bf0:	1c5a      	adds	r2, r3, #1
    2bf2:	4403      	add	r3, r0
    2bf4:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    2bf8:	7e98      	ldrb	r0, [r3, #26]
    2bfa:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    2bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    2c00:	4770      	bx	lr
    2c02:	bf00      	nop

00002c04 <TwoWire::peek()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
    2c04:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    2c08:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    2c0c:	429a      	cmp	r2, r3
    2c0e:	d902      	bls.n	2c16 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    2c10:	4418      	add	r0, r3
    2c12:	7e80      	ldrb	r0, [r0, #26]
    2c14:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    2c16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    2c1a:	4770      	bx	lr

00002c1c <TwoWire::flush()>:
	}
    2c1c:	4770      	bx	lr
    2c1e:	bf00      	nop

00002c20 <TwoWire::write(unsigned char)>:
{
    2c20:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    2c22:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    2c26:	b178      	cbz	r0, 2c48 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    2c28:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    2c2c:	2a88      	cmp	r2, #136	; 0x88
    2c2e:	d903      	bls.n	2c38 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    2c30:	2201      	movs	r2, #1
			return 0;
    2c32:	2000      	movs	r0, #0
    2c34:	605a      	str	r2, [r3, #4]
    2c36:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    2c38:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    2c3c:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    2c3e:	441a      	add	r2, r3
    2c40:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    2c44:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    2c48:	4770      	bx	lr
    2c4a:	bf00      	nop

00002c4c <TwoWire::write(unsigned char const*, unsigned int)>:
{
    2c4c:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    2c4e:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    2c52:	b90c      	cbnz	r4, 2c58 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    2c54:	4620      	mov	r0, r4
    2c56:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    2c58:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    2c5c:	4605      	mov	r5, r0
    2c5e:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    2c62:	42a2      	cmp	r2, r4
    2c64:	d80d      	bhi.n	2c82 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    2c66:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    2c68:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    2c6c:	4622      	mov	r2, r4
    2c6e:	4418      	add	r0, r3
    2c70:	f001 ff8c 	bl	4b8c <memcpy>
		txBufferLength += quantity;
    2c74:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    2c78:	4620      	mov	r0, r4
		txBufferLength += quantity;
    2c7a:	4423      	add	r3, r4
    2c7c:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    2c80:	bd38      	pop	{r3, r4, r5, pc}
    2c82:	2201      	movs	r2, #1
    2c84:	6042      	str	r2, [r0, #4]
    2c86:	e7ef      	b.n	2c68 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00002c88 <TwoWire::force_clock()>:
{
    2c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    2c8c:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    2c90:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    2c92:	7e01      	ldrb	r1, [r0, #24]
{
    2c94:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    2c96:	7e43      	ldrb	r3, [r0, #25]
{
    2c98:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    2c9a:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    2c9e:	4a38      	ldr	r2, [pc, #224]	; (2d80 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    2ca0:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2ca4:	4f37      	ldr	r7, [pc, #220]	; (2d84 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    2ca6:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    2ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    2cac:	eb02 1501 	add.w	r5, r2, r1, lsl #4
    2cb0:	0109      	lsls	r1, r1, #4
    2cb2:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
    2cb4:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    2cb8:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
    2cbc:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    2cc0:	011b      	lsls	r3, r3, #4
    2cc2:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
    2cc4:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    2cc6:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
    2cca:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    2cce:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    2cd2:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    2cd4:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
    2cd6:	492c      	ldr	r1, [pc, #176]	; (2d88 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
    2cd8:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    2cda:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    2cde:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    2ce0:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    2ce4:	686b      	ldr	r3, [r5, #4]
    2ce6:	4333      	orrs	r3, r6
    2ce8:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2cea:	4b28      	ldr	r3, [pc, #160]	; (2d8c <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
    2cec:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2cee:	683a      	ldr	r2, [r7, #0]
    2cf0:	fba3 3202 	umull	r3, r2, r3, r2
    2cf4:	0c92      	lsrs	r2, r2, #18
    2cf6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2cfa:	0052      	lsls	r2, r2, #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2cfc:	684b      	ldr	r3, [r1, #4]
    2cfe:	1b1b      	subs	r3, r3, r4
    2d00:	429a      	cmp	r2, r3
    2d02:	d8fb      	bhi.n	2cfc <TwoWire::force_clock()+0x74>
    2d04:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    2d08:	4a1f      	ldr	r2, [pc, #124]	; (2d88 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2d0a:	f8df e080 	ldr.w	lr, [pc, #128]	; 2d8c <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
    2d0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    2d12:	4203      	tst	r3, r0
    2d14:	d002      	beq.n	2d1c <TwoWire::force_clock()+0x94>
    2d16:	68ab      	ldr	r3, [r5, #8]
    2d18:	4233      	tst	r3, r6
    2d1a:	d12f      	bne.n	2d7c <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
    2d1c:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    2d20:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2d22:	6839      	ldr	r1, [r7, #0]
    2d24:	fbae 3101 	umull	r3, r1, lr, r1
    2d28:	0c89      	lsrs	r1, r1, #18
    2d2a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2d2e:	6853      	ldr	r3, [r2, #4]
    2d30:	1b1b      	subs	r3, r3, r4
    2d32:	4299      	cmp	r1, r3
    2d34:	d8fb      	bhi.n	2d2e <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
    2d36:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    2d3a:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2d3c:	6839      	ldr	r1, [r7, #0]
    2d3e:	fbae 3101 	umull	r3, r1, lr, r1
    2d42:	0c89      	lsrs	r1, r1, #18
    2d44:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2d48:	6853      	ldr	r3, [r2, #4]
    2d4a:	1b1b      	subs	r3, r3, r4
    2d4c:	4299      	cmp	r1, r3
    2d4e:	d8fb      	bhi.n	2d48 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
    2d50:	f1bc 0c01 	subs.w	ip, ip, #1
    2d54:	d1db      	bne.n	2d0e <TwoWire::force_clock()+0x86>
	bool ret = false;
    2d56:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    2d58:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    2d5c:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    2d5e:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    2d62:	68db      	ldr	r3, [r3, #12]
    2d64:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    2d68:	f899 3019 	ldrb.w	r3, [r9, #25]
    2d6c:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    2d70:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    2d74:	6013      	str	r3, [r2, #0]
}
    2d76:	b003      	add	sp, #12
    2d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    2d7c:	2001      	movs	r0, #1
    2d7e:	e7eb      	b.n	2d58 <TwoWire::force_clock()+0xd0>
    2d80:	20007568 	.word	0x20007568
    2d84:	20008104 	.word	0x20008104
    2d88:	e0001000 	.word	0xe0001000
    2d8c:	431bde83 	.word	0x431bde83

00002d90 <TwoWire::wait_idle()>:
	return systick_millis_count;
    2d90:	4a0e      	ldr	r2, [pc, #56]	; (2dcc <TwoWire::wait_idle()+0x3c>)
{
    2d92:	b510      	push	{r4, lr}
    2d94:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    2d96:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    2d98:	e005      	b.n	2da6 <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    2d9a:	01db      	lsls	r3, r3, #7
    2d9c:	d407      	bmi.n	2dae <TwoWire::wait_idle()+0x1e>
    2d9e:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    2da0:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
    2da2:	2b10      	cmp	r3, #16
    2da4:	d808      	bhi.n	2db8 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
    2da6:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    2da8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    2dac:	d1f5      	bne.n	2d9a <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
    2dae:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    2db2:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    2db4:	6163      	str	r3, [r4, #20]
}
    2db6:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
    2db8:	f7ff ff66 	bl	2c88 <TwoWire::force_clock()>
    2dbc:	2800      	cmp	r0, #0
    2dbe:	d0fa      	beq.n	2db6 <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
    2dc0:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    2dc4:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    2dc6:	6163      	str	r3, [r4, #20]
	return true;
    2dc8:	e7f5      	b.n	2db6 <TwoWire::wait_idle()+0x26>
    2dca:	bf00      	nop
    2dcc:	2000ae44 	.word	0x2000ae44

00002dd0 <TwoWire::endTransmission(unsigned char)>:
{
    2dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    2dd4:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    2dd8:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    2dda:	f1ba 0f00 	cmp.w	sl, #0
    2dde:	d04f      	beq.n	2e80 <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
    2de0:	4681      	mov	r9, r0
    2de2:	4688      	mov	r8, r1
    2de4:	f7ff ffd4 	bl	2d90 <TwoWire::wait_idle()>
    2de8:	2800      	cmp	r0, #0
    2dea:	d049      	beq.n	2e80 <TwoWire::endTransmission(unsigned char)+0xb0>
    2dec:	4e37      	ldr	r6, [pc, #220]	; (2ecc <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    2dee:	2400      	movs	r4, #0
    2df0:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    2df2:	e018      	b.n	2e26 <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
    2df4:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    2df6:	0519      	lsls	r1, r3, #20
    2df8:	d451      	bmi.n	2e9e <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
    2dfa:	04da      	lsls	r2, r3, #19
    2dfc:	d455      	bmi.n	2eaa <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
    2dfe:	0558      	lsls	r0, r3, #21
    2e00:	d459      	bmi.n	2eb6 <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    2e02:	0499      	lsls	r1, r3, #18
    2e04:	d441      	bmi.n	2e8a <TwoWire::endTransmission(unsigned char)+0xba>
    2e06:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    2e08:	1bd2      	subs	r2, r2, r7
    2e0a:	2a32      	cmp	r2, #50	; 0x32
    2e0c:	d83d      	bhi.n	2e8a <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
    2e0e:	4554      	cmp	r4, sl
    2e10:	d907      	bls.n	2e22 <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
    2e12:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    2e14:	0752      	lsls	r2, r2, #29
    2e16:	d104      	bne.n	2e22 <TwoWire::endTransmission(unsigned char)+0x52>
    2e18:	059b      	lsls	r3, r3, #22
    2e1a:	d455      	bmi.n	2ec8 <TwoWire::endTransmission(unsigned char)+0xf8>
    2e1c:	f1b8 0f00 	cmp.w	r8, #0
    2e20:	d052      	beq.n	2ec8 <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
    2e22:	f003 fb77 	bl	6514 <yield>
		if (tx_index <= tx_len) {
    2e26:	4554      	cmp	r4, sl
    2e28:	d8e4      	bhi.n	2df4 <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    2e2a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
    2e2c:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    2e2e:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    2e32:	d4df      	bmi.n	2df4 <TwoWire::endTransmission(unsigned char)+0x24>
    2e34:	e013      	b.n	2e5e <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    2e36:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
    2e3a:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    2e3c:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    2e3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
    2e42:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    2e44:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    2e46:	d01e      	beq.n	2e86 <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
    2e48:	458a      	cmp	sl, r1
				fifo_used++;
    2e4a:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    2e4e:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    2e52:	d90e      	bls.n	2e72 <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    2e54:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
    2e58:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    2e5a:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    2e5c:	d0ca      	beq.n	2df4 <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
    2e5e:	2101      	movs	r1, #1
				if (tx_index == 0) {
    2e60:	2c00      	cmp	r4, #0
    2e62:	d0e8      	beq.n	2e36 <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    2e64:	4621      	mov	r1, r4
				fifo_used++;
    2e66:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    2e68:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
    2e6a:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    2e6c:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    2e70:	d8f0      	bhi.n	2e54 <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    2e72:	f1b8 0f00 	cmp.w	r8, #0
    2e76:	d0bd      	beq.n	2df4 <TwoWire::endTransmission(unsigned char)+0x24>
    2e78:	f44f 7300 	mov.w	r3, #512	; 0x200
    2e7c:	662b      	str	r3, [r5, #96]	; 0x60
					break;
    2e7e:	e7b9      	b.n	2df4 <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
    2e80:	2004      	movs	r0, #4
}
    2e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
    2e86:	2401      	movs	r4, #1
    2e88:	e7b4      	b.n	2df4 <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2e8a:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    2e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    2e90:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2e92:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    2e96:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    2e98:	662a      	str	r2, [r5, #96]	; 0x60
}
    2e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2e9e:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    2ea0:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2ea2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    2ea6:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    2ea8:	e7eb      	b.n	2e82 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2eaa:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
    2eac:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2eae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    2eb2:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
    2eb4:	e7e5      	b.n	2e82 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2eb6:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    2eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    2ebc:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2ebe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    2ec2:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    2ec4:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    2ec6:	e7dc      	b.n	2e82 <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
    2ec8:	2000      	movs	r0, #0
    2eca:	e7da      	b.n	2e82 <TwoWire::endTransmission(unsigned char)+0xb2>
    2ecc:	2000ae44 	.word	0x2000ae44

00002ed0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    2ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ed4:	4683      	mov	fp, r0
    2ed6:	460c      	mov	r4, r1
    2ed8:	4615      	mov	r5, r2
    2eda:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    2edc:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
    2ee0:	f7ff ff56 	bl	2d90 <TwoWire::wait_idle()>
    2ee4:	2800      	cmp	r0, #0
    2ee6:	f000 809e 	beq.w	3026 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
    2eea:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
    2eec:	2d01      	cmp	r5, #1
    2eee:	f8df 813c 	ldr.w	r8, [pc, #316]	; 302c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    2ef2:	f240 4601 	movw	r6, #1025	; 0x401
    2ef6:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
    2ef8:	f04f 0100 	mov.w	r1, #0
    2efc:	bf38      	it	cc
    2efe:	2501      	movcc	r5, #1
    2f00:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    2f04:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    2f06:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
    2f08:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    2f0c:	e020      	b.n	2f50 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
    2f0e:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    2f12:	2b87      	cmp	r3, #135	; 0x87
    2f14:	d93f      	bls.n	2f96 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    2f16:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    2f1a:	0510      	lsls	r0, r2, #20
    2f1c:	d45a      	bmi.n	2fd4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    2f1e:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    2f22:	d170      	bne.n	3006 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
    2f24:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
    2f28:	eba3 0309 	sub.w	r3, r3, r9
    2f2c:	2b32      	cmp	r3, #50	; 0x32
    2f2e:	d86a      	bhi.n	3006 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
    2f30:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    2f34:	42ab      	cmp	r3, r5
    2f36:	d309      	bcc.n	2f4c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    2f38:	2c02      	cmp	r4, #2
    2f3a:	d907      	bls.n	2f4c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
    2f3c:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    2f40:	0759      	lsls	r1, r3, #29
    2f42:	d103      	bne.n	2f4c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    2f44:	0593      	lsls	r3, r2, #22
    2f46:	d44b      	bmi.n	2fe0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
    2f48:	2f00      	cmp	r7, #0
    2f4a:	d049      	beq.n	2fe0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
    2f4c:	f003 fae2 	bl	6514 <yield>
		if (tx_state < 3) {
    2f50:	2c02      	cmp	r4, #2
    2f52:	d8dc      	bhi.n	2f0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    2f54:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
    2f58:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    2f5c:	075b      	lsls	r3, r3, #29
    2f5e:	d4d6      	bmi.n	2f0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    2f60:	1e68      	subs	r0, r5, #1
    2f62:	4422      	add	r2, r4
    2f64:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
    2f68:	b94c      	cbnz	r4, 2f7e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    2f6a:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
    2f6e:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
    2f70:	1b13      	subs	r3, r2, r4
    2f72:	2b03      	cmp	r3, #3
    2f74:	d8cb      	bhi.n	2f0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
    2f76:	2c02      	cmp	r4, #2
    2f78:	d8c9      	bhi.n	2f0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
    2f7a:	2c00      	cmp	r4, #0
    2f7c:	d0f5      	beq.n	2f6a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
    2f7e:	2c01      	cmp	r4, #1
    2f80:	d037      	beq.n	2ff2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    2f82:	b11f      	cbz	r7, 2f8c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    2f84:	f44f 7300 	mov.w	r3, #512	; 0x200
    2f88:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
    2f8c:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
    2f90:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
    2f92:	2b87      	cmp	r3, #135	; 0x87
    2f94:	d8bf      	bhi.n	2f16 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    2f96:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    2f9a:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    2f9e:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    2fa2:	d0b8      	beq.n	2f16 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    2fa4:	1c59      	adds	r1, r3, #1
    2fa6:	449c      	add	ip, r3
    2fa8:	3319      	adds	r3, #25
    2faa:	b2c9      	uxtb	r1, r1
    2fac:	fa5f fc8c 	uxtb.w	ip, ip
    2fb0:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
    2fb4:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    2fb8:	1c4a      	adds	r2, r1, #1
    2fba:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
    2fbc:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    2fc0:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
    2fc2:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    2fc6:	d0a6      	beq.n	2f16 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    2fc8:	2989      	cmp	r1, #137	; 0x89
    2fca:	d1f3      	bne.n	2fb4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
    2fcc:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    2fd0:	0510      	lsls	r0, r2, #20
    2fd2:	d5a4      	bpl.n	2f1e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2fd4:	f8da 3010 	ldr.w	r3, [sl, #16]
    2fd8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    2fdc:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    2fe0:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    2fe4:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    2fe8:	d106      	bne.n	2ff8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
    2fea:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
    2fee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    2ff2:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
    2ff6:	e7ba      	b.n	2f6e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    2ff8:	f8da 3010 	ldr.w	r3, [sl, #16]
    2ffc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3000:	f8ca 3010 	str.w	r3, [sl, #16]
    3004:	e7f1      	b.n	2fea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    3006:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    300a:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    300e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    3012:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    3016:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    301a:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    301e:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    3022:	d0e2      	beq.n	2fea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
    3024:	e7e8      	b.n	2ff8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
    3026:	2004      	movs	r0, #4
}
    3028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    302c:	2000ae44 	.word	0x2000ae44

00003030 <TwoWire::isr()>:
{
    3030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    3032:	6906      	ldr	r6, [r0, #16]
{
    3034:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    3036:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    303a:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
    303e:	d001      	beq.n	3044 <TwoWire::isr()+0x14>
    3040:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    3044:	07a8      	lsls	r0, r5, #30
    3046:	d50b      	bpl.n	3060 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    3048:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    304c:	0411      	lsls	r1, r2, #16
    304e:	d53d      	bpl.n	30cc <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
    3050:	2300      	movs	r3, #0
    3052:	2101      	movs	r1, #1
    3054:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    3058:	4423      	add	r3, r4
    305a:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    305e:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    3060:	07ea      	lsls	r2, r5, #31
    3062:	d510      	bpl.n	3086 <TwoWire::isr()+0x56>
		if (!transmitting) {
    3064:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
    3068:	b1f7      	cbz	r7, 30a8 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    306a:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
    306e:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    3072:	42bb      	cmp	r3, r7
    3074:	d926      	bls.n	30c4 <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
    3076:	1c7b      	adds	r3, r7, #1
    3078:	4427      	add	r7, r4
    307a:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
    307e:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
    3082:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    3086:	05ab      	lsls	r3, r5, #22
    3088:	d50d      	bpl.n	30a6 <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    308a:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    308e:	b118      	cbz	r0, 3098 <TwoWire::isr()+0x68>
    3090:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    3094:	b103      	cbz	r3, 3098 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    3096:	4798      	blx	r3
		rxBufferIndex = 0;
    3098:	2300      	movs	r3, #0
    309a:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    309e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    30a2:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    30a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
    30a8:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    30ac:	b103      	cbz	r3, 30b0 <TwoWire::isr()+0x80>
				(*user_onRequest)();
    30ae:	4798      	blx	r3
			txBufferIndex = 0;
    30b0:	2300      	movs	r3, #0
    30b2:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    30b6:	2301      	movs	r3, #1
    30b8:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    30bc:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    30c0:	42bb      	cmp	r3, r7
    30c2:	d8d8      	bhi.n	3076 <TwoWire::isr()+0x46>
			port->STDR = 0;
    30c4:	2300      	movs	r3, #0
    30c6:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
    30ca:	e7dc      	b.n	3086 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    30cc:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    30d0:	2b87      	cmp	r3, #135	; 0x87
    30d2:	d8c5      	bhi.n	3060 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    30d4:	1c59      	adds	r1, r3, #1
    30d6:	b2c9      	uxtb	r1, r1
    30d8:	e7be      	b.n	3058 <TwoWire::isr()+0x28>
    30da:	bf00      	nop

000030dc <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    30dc:	4801      	ldr	r0, [pc, #4]	; (30e4 <lpi2c1_isr()+0x8>)
    30de:	f7ff bfa7 	b.w	3030 <TwoWire::isr()>
    30e2:	bf00      	nop
    30e4:	2000826c 	.word	0x2000826c

000030e8 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    30e8:	4801      	ldr	r0, [pc, #4]	; (30f0 <lpi2c3_isr()+0x8>)
    30ea:	f7ff bfa1 	b.w	3030 <TwoWire::isr()>
    30ee:	bf00      	nop
    30f0:	200083ac 	.word	0x200083ac

000030f4 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    30f4:	4801      	ldr	r0, [pc, #4]	; (30fc <lpi2c4_isr()+0x8>)
    30f6:	f7ff bf9b 	b.w	3030 <TwoWire::isr()>
    30fa:	bf00      	nop
    30fc:	200084ec 	.word	0x200084ec

00003100 <TwoWire::setClock(unsigned long)>:
{
    3100:	b410      	push	{r4}
	if (frequency < 400000) {
    3102:	4c14      	ldr	r4, [pc, #80]	; (3154 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    3104:	2200      	movs	r2, #0
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    3106:	6903      	ldr	r3, [r0, #16]
	if (frequency < 400000) {
    3108:	42a1      	cmp	r1, r4
	port->MCR = 0;
    310a:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    310c:	d814      	bhi.n	3138 <TwoWire::setClock(unsigned long)+0x38>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    310e:	4c12      	ldr	r4, [pc, #72]	; (3158 <TwoWire::setClock(unsigned long)+0x58>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    3110:	2001      	movs	r0, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    3112:	4912      	ldr	r1, [pc, #72]	; (315c <TwoWire::setClock(unsigned long)+0x5c>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    3114:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    3118:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    311a:	6258      	str	r0, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    311c:	6299      	str	r1, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    311e:	62da      	str	r2, [r3, #44]	; 0x2c
	port->MCCR1 = port->MCCR0;
    3120:	6c9c      	ldr	r4, [r3, #72]	; 0x48
	port->MCFGR0 = 0;
    3122:	2000      	movs	r0, #0
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    3124:	f04f 1101 	mov.w	r1, #65537	; 0x10001
	port->MCR = LPI2C_MCR_MEN;
    3128:	2201      	movs	r2, #1
	port->MCCR1 = port->MCCR0;
    312a:	651c      	str	r4, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    312c:	6218      	str	r0, [r3, #32]
}
    312e:	f85d 4b04 	ldr.w	r4, [sp], #4
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    3132:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    3134:	611a      	str	r2, [r3, #16]
}
    3136:	4770      	bx	lr
	} else if (frequency < 1000000) {
    3138:	4809      	ldr	r0, [pc, #36]	; (3160 <TwoWire::setClock(unsigned long)+0x60>)
    313a:	4281      	cmp	r1, r0
    313c:	d907      	bls.n	314e <TwoWire::setClock(unsigned long)+0x4e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    313e:	4c09      	ldr	r4, [pc, #36]	; (3164 <TwoWire::setClock(unsigned long)+0x64>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    3140:	4809      	ldr	r0, [pc, #36]	; (3168 <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    3142:	490a      	ldr	r1, [pc, #40]	; (316c <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    3144:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    3146:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    3148:	6298      	str	r0, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    314a:	62d9      	str	r1, [r3, #44]	; 0x2c
    314c:	e7e8      	b.n	3120 <TwoWire::setClock(unsigned long)+0x20>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    314e:	4c08      	ldr	r4, [pc, #32]	; (3170 <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    3150:	4808      	ldr	r0, [pc, #32]	; (3174 <TwoWire::setClock(unsigned long)+0x74>)
    3152:	e7f6      	b.n	3142 <TwoWire::setClock(unsigned long)+0x42>
    3154:	00061a7f 	.word	0x00061a7f
    3158:	1928373b 	.word	0x1928373b
    315c:	05050bb8 	.word	0x05050bb8
    3160:	000f423f 	.word	0x000f423f
    3164:	0407090a 	.word	0x0407090a
    3168:	01010960 	.word	0x01010960
    316c:	00057f00 	.word	0x00057f00
    3170:	0c121a1c 	.word	0x0c121a1c
    3174:	02020e10 	.word	0x02020e10

00003178 <Thread::setInterval(long)>:
	_cached_next_run = last_run + interval;
}

void Thread::setInterval(long _interval){
	// Filter intervals less than 0
	interval = (_interval < 0? 0: _interval);
    3178:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

	// Cache the next run based on the last_run
	_cached_next_run = last_run + interval;
    317c:	6883      	ldr	r3, [r0, #8]
    317e:	440b      	add	r3, r1
	interval = (_interval < 0? 0: _interval);
    3180:	6041      	str	r1, [r0, #4]
	_cached_next_run = last_run + interval;
    3182:	60c3      	str	r3, [r0, #12]
}
    3184:	4770      	bx	lr
    3186:	bf00      	nop

00003188 <Thread::setNextRunTime(long)>:

void Thread::setNextRunTime(long _nextTime){
	// Set this tasks next run time
	_cached_next_run = _nextTime;
    3188:	60c1      	str	r1, [r0, #12]
}
    318a:	4770      	bx	lr

0000318c <Thread::shouldRun(long)>:

bool Thread::shouldRun(long time)
{
	// If less than 0, then get current ticks
	if(time < 0) time = millis();
    318c:	2900      	cmp	r1, #0
    318e:	da01      	bge.n	3194 <Thread::shouldRun(long)+0x8>
    3190:	4b04      	ldr	r3, [pc, #16]	; (31a4 <Thread::shouldRun(long)+0x18>)
    3192:	6819      	ldr	r1, [r3, #0]
    // Added by GAA, 3/1/18. In case millisec timer is reset
    // Force it to run if time is less that the last run time.
//    if(time < last_run) _cached_next_run = time;
    
	// Exceeded the time limit, AND is enabled? Then should run...
	return ((time >= _cached_next_run) && enabled);
    3194:	68c3      	ldr	r3, [r0, #12]
    3196:	428b      	cmp	r3, r1
    3198:	bfd4      	ite	le
    319a:	f890 0028 	ldrble.w	r0, [r0, #40]	; 0x28
    319e:	2000      	movgt	r0, #0
}
    31a0:	4770      	bx	lr
    31a2:	bf00      	nop
    31a4:	2000ae44 	.word	0x2000ae44

000031a8 <Thread::run()>:
unsigned long Thread::runTimeMs(void)
{
   return runTime;
}

void Thread::run(){
    31a8:	b538      	push	{r3, r4, r5, lr}
    31aa:	4d08      	ldr	r5, [pc, #32]	; (31cc <Thread::run()+0x24>)
    31ac:	4604      	mov	r4, r0
	_cached_next_run = last_run + interval;
    31ae:	6843      	ldr	r3, [r0, #4]
    31b0:	6829      	ldr	r1, [r5, #0]
    31b2:	682a      	ldr	r2, [r5, #0]
    31b4:	440b      	add	r3, r1
	last_run = time;
    31b6:	6081      	str	r1, [r0, #8]
	runned();
	startTime = millis();
	if(_onRun != NULL)
    31b8:	6a41      	ldr	r1, [r0, #36]	; 0x24
	startTime = millis();
    31ba:	6102      	str	r2, [r0, #16]
	_cached_next_run = last_run + interval;
    31bc:	60c3      	str	r3, [r0, #12]
	if(_onRun != NULL)
    31be:	b109      	cbz	r1, 31c4 <Thread::run()+0x1c>
		_onRun();
    31c0:	4788      	blx	r1
	runTime = millis() - startTime;
    31c2:	6922      	ldr	r2, [r4, #16]
    31c4:	682b      	ldr	r3, [r5, #0]
    31c6:	1a9b      	subs	r3, r3, r2
    31c8:	6163      	str	r3, [r4, #20]

	// Update last_run and _cached_next_run
//	runned();
    31ca:	bd38      	pop	{r3, r4, r5, pc}
    31cc:	2000ae44 	.word	0x2000ae44

000031d0 <Thread::Thread(void (*)(), long)>:
Thread::Thread(void (*callback)(void), long _interval){
    31d0:	4b0b      	ldr	r3, [pc, #44]	; (3200 <Thread::Thread(void (*)(), long)+0x30>)
    31d2:	b570      	push	{r4, r5, r6, lr}
    31d4:	4615      	mov	r5, r2
    31d6:	4604      	mov	r4, r0
    31d8:	460e      	mov	r6, r1
    31da:	f840 3b18 	str.w	r3, [r0], #24
    31de:	2100      	movs	r1, #0
	interval = (_interval < 0? 0: _interval);
    31e0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
Thread::Thread(void (*callback)(void), long _interval){
    31e4:	f000 fec2 	bl	3f6c <String::String(char const*)>
	enabled = true;
    31e8:	2101      	movs	r1, #1
	last_run = 0;
    31ea:	2300      	movs	r3, #0
};
    31ec:	4620      	mov	r0, r4
	_onRun = callback;
    31ee:	6266      	str	r6, [r4, #36]	; 0x24
	ThreadID = (int)this;
    31f0:	62e4      	str	r4, [r4, #44]	; 0x2c
	enabled = true;
    31f2:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
	_cached_next_run = last_run + interval;
    31f6:	60e5      	str	r5, [r4, #12]
	interval = (_interval < 0? 0: _interval);
    31f8:	e9c4 5301 	strd	r5, r3, [r4, #4]
};
    31fc:	bd70      	pop	{r4, r5, r6, pc}
    31fe:	bf00      	nop
    3200:	200006f4 	.word	0x200006f4

00003204 <Thread::setName(char*)>:
   Name = name;
    3204:	3018      	adds	r0, #24
    3206:	f000 bf0b 	b.w	4020 <String::operator=(char const*)>
    320a:	bf00      	nop

0000320c <Thread::getName()>:
    320c:	6980      	ldr	r0, [r0, #24]
    320e:	b100      	cbz	r0, 3212 <Thread::getName()+0x6>
}
    3210:	4770      	bx	lr
    3212:	4801      	ldr	r0, [pc, #4]	; (3218 <Thread::getName()+0xc>)
    3214:	4770      	bx	lr
    3216:	bf00      	nop
    3218:	20007bc4 	.word	0x20007bc4

0000321c <Thread::runned(long)>:
	if(time < 0) time = millis();
    321c:	2900      	cmp	r1, #0
    321e:	da01      	bge.n	3224 <Thread::runned(long)+0x8>
    3220:	4b03      	ldr	r3, [pc, #12]	; (3230 <Thread::runned(long)+0x14>)
    3222:	6819      	ldr	r1, [r3, #0]
	_cached_next_run = last_run + interval;
    3224:	6843      	ldr	r3, [r0, #4]
	last_run = time;
    3226:	6081      	str	r1, [r0, #8]
	_cached_next_run = last_run + interval;
    3228:	440b      	add	r3, r1
    322a:	60c3      	str	r3, [r0, #12]
}
    322c:	4770      	bx	lr
    322e:	bf00      	nop
    3230:	2000ae44 	.word	0x2000ae44

00003234 <Thread::onRun(void (*)())>:
	_onRun = callback;
    3234:	6241      	str	r1, [r0, #36]	; 0x24
}
    3236:	4770      	bx	lr

00003238 <Thread::getID()>:
}
    3238:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    323a:	4770      	bx	lr

0000323c <Thread::getInterval()>:
}
    323c:	6840      	ldr	r0, [r0, #4]
    323e:	4770      	bx	lr

00003240 <Thread::runTimeMs()>:
}
    3240:	6940      	ldr	r0, [r0, #20]
    3242:	4770      	bx	lr

00003244 <ThreadController::run()>:
	if(_onRun != NULL)
    3244:	6a43      	ldr	r3, [r0, #36]	; 0x24
void ThreadController::run(){
    3246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    324a:	4606      	mov	r6, r0
	if(_onRun != NULL)
    324c:	b103      	cbz	r3, 3250 <ThreadController::run()+0xc>
		_onRun();
    324e:	4798      	blx	r3
    3250:	4b10      	ldr	r3, [pc, #64]	; (3294 <ThreadController::run()+0x50>)
    3252:	f106 042c 	add.w	r4, r6, #44	; 0x2c
    3256:	f106 0868 	add.w	r8, r6, #104	; 0x68
	int checks = 0;
    325a:	2500      	movs	r5, #0
    325c:	681f      	ldr	r7, [r3, #0]
	for(int i = 0; i < MAX_THREADS && checks <= cached_size; i++){
    325e:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
			if(thread[i]->shouldRun(time)){
    3260:	4639      	mov	r1, r7
	for(int i = 0; i < MAX_THREADS && checks <= cached_size; i++){
    3262:	42ab      	cmp	r3, r5
    3264:	db0e      	blt.n	3284 <ThreadController::run()+0x40>
		if(thread[i]){
    3266:	f854 3f04 	ldr.w	r3, [r4, #4]!
			if(thread[i]->shouldRun(time)){
    326a:	4618      	mov	r0, r3
		if(thread[i]){
    326c:	b143      	cbz	r3, 3280 <ThreadController::run()+0x3c>
			if(thread[i]->shouldRun(time)){
    326e:	681b      	ldr	r3, [r3, #0]
			checks++;
    3270:	3501      	adds	r5, #1
			if(thread[i]->shouldRun(time)){
    3272:	689b      	ldr	r3, [r3, #8]
    3274:	4798      	blx	r3
    3276:	b118      	cbz	r0, 3280 <ThreadController::run()+0x3c>
				thread[i]->run();
    3278:	6820      	ldr	r0, [r4, #0]
    327a:	6803      	ldr	r3, [r0, #0]
    327c:	68db      	ldr	r3, [r3, #12]
    327e:	4798      	blx	r3
	for(int i = 0; i < MAX_THREADS && checks <= cached_size; i++){
    3280:	45a0      	cmp	r8, r4
    3282:	d1ec      	bne.n	325e <ThreadController::run()+0x1a>
	runned();
    3284:	4630      	mov	r0, r6
    3286:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    328a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	runned();
    328e:	f7ff bfc5 	b.w	321c <Thread::runned(long)>
    3292:	bf00      	nop
    3294:	2000ae44 	.word	0x2000ae44

00003298 <ThreadController::ThreadController(long)>:
ThreadController::ThreadController(long _interval): Thread(){
    3298:	2200      	movs	r2, #0
    329a:	b538      	push	{r3, r4, r5, lr}
    329c:	460d      	mov	r5, r1
    329e:	4611      	mov	r1, r2
    32a0:	4604      	mov	r4, r0
    32a2:	f7ff ff95 	bl	31d0 <Thread::Thread(void (*)(), long)>
    32a6:	4b07      	ldr	r3, [pc, #28]	; (32c4 <ThreadController::ThreadController(long)+0x2c>)
	cached_size = 0;
    32a8:	2100      	movs	r1, #0

void ThreadController::clear(){
	for(int i = 0; i < MAX_THREADS; i++){
		thread[i] = NULL;
    32aa:	223c      	movs	r2, #60	; 0x3c
    32ac:	f104 0030 	add.w	r0, r4, #48	; 0x30
ThreadController::ThreadController(long _interval): Thread(){
    32b0:	6023      	str	r3, [r4, #0]
	cached_size = 0;
    32b2:	66e1      	str	r1, [r4, #108]	; 0x6c
		thread[i] = NULL;
    32b4:	f005 fa18 	bl	86e8 <memset>
	setInterval(_interval);
    32b8:	4620      	mov	r0, r4
    32ba:	4629      	mov	r1, r5
    32bc:	f7ff ff5c 	bl	3178 <Thread::setInterval(long)>
}
    32c0:	4620      	mov	r0, r4
    32c2:	bd38      	pop	{r3, r4, r5, pc}
    32c4:	20000684 	.word	0x20000684

000032c8 <ThreadController::add(Thread*)>:
	for(int i = 0; i < MAX_THREADS; i++){
    32c8:	f100 0c2c 	add.w	ip, r0, #44	; 0x2c
bool ThreadController::add(Thread* _thread){
    32cc:	b530      	push	{r4, r5, lr}
    32ce:	4663      	mov	r3, ip
    32d0:	4605      	mov	r5, r0
    32d2:	f100 0e68 	add.w	lr, r0, #104	; 0x68
		if(thread[i] != NULL && thread[i]->ThreadID == _thread->ThreadID)
    32d6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    32da:	b11a      	cbz	r2, 32e4 <ThreadController::add(Thread*)+0x1c>
    32dc:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    32de:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    32e0:	4294      	cmp	r4, r2
    32e2:	d00a      	beq.n	32fa <ThreadController::add(Thread*)+0x32>
	for(int i = 0; i < MAX_THREADS; i++){
    32e4:	4573      	cmp	r3, lr
    32e6:	d1f6      	bne.n	32d6 <ThreadController::add(Thread*)+0xe>
	for(int i = 0; i < MAX_THREADS; i++){
    32e8:	2300      	movs	r3, #0
		if(!thread[i]){
    32ea:	f85c 2f04 	ldr.w	r2, [ip, #4]!
    32ee:	b132      	cbz	r2, 32fe <ThreadController::add(Thread*)+0x36>
	for(int i = 0; i < MAX_THREADS; i++){
    32f0:	3301      	adds	r3, #1
    32f2:	2b0f      	cmp	r3, #15
    32f4:	d1f9      	bne.n	32ea <ThreadController::add(Thread*)+0x22>
	return false;
    32f6:	2000      	movs	r0, #0
}
    32f8:	bd30      	pop	{r4, r5, pc}
			return true;
    32fa:	2001      	movs	r0, #1
}
    32fc:	bd30      	pop	{r4, r5, pc}
			cached_size++;
    32fe:	6eea      	ldr	r2, [r5, #108]	; 0x6c
			return true;
    3300:	2001      	movs	r0, #1
			thread[i] = _thread;
    3302:	330c      	adds	r3, #12
			cached_size++;
    3304:	4402      	add	r2, r0
			thread[i] = _thread;
    3306:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
			cached_size++;
    330a:	66ea      	str	r2, [r5, #108]	; 0x6c
}
    330c:	bd30      	pop	{r4, r5, pc}
    330e:	bf00      	nop

00003310 <ThreadController::get(int)>:

	return cached_size;
}

Thread* ThreadController::get(int index){
	int pos = -1;
    3310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3314:	f100 032c 	add.w	r3, r0, #44	; 0x2c
    3318:	f100 0c68 	add.w	ip, r0, #104	; 0x68
	for(int i = 0; i < MAX_THREADS; i++){
		if(thread[i] != NULL){
    331c:	f853 0f04 	ldr.w	r0, [r3, #4]!
    3320:	b110      	cbz	r0, 3328 <ThreadController::get(int)+0x18>
			pos++;
    3322:	3201      	adds	r2, #1

			if(pos == index)
    3324:	428a      	cmp	r2, r1
    3326:	d002      	beq.n	332e <ThreadController::get(int)+0x1e>
	for(int i = 0; i < MAX_THREADS; i++){
    3328:	4563      	cmp	r3, ip
    332a:	d1f7      	bne.n	331c <ThreadController::get(int)+0xc>
				return thread[i];
		}
	}

	return NULL;
    332c:	2000      	movs	r0, #0
}
    332e:	4770      	bx	lr

00003330 <ThreadController::get(char const*)>:

Thread* ThreadController::get(const char *name)
{
    3330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(int i = 0; i < MAX_THREADS; i++)
    3332:	2400      	movs	r4, #0
{
    3334:	4607      	mov	r7, r0
    3336:	460e      	mov	r6, r1
    3338:	f100 052c 	add.w	r5, r0, #44	; 0x2c
	{
		if(thread[i] != NULL)
    333c:	f855 0f04 	ldr.w	r0, [r5, #4]!
    3340:	b130      	cbz	r0, 3350 <ThreadController::get(char const*)+0x20>
		{
			if(strcmp(name,(char *)thread[i]->getName()) == 0) return thread[i];
    3342:	f7ff ff63 	bl	320c <Thread::getName()>
    3346:	4601      	mov	r1, r0
    3348:	4630      	mov	r0, r6
    334a:	f005 fb1d 	bl	8988 <strcmp>
    334e:	b120      	cbz	r0, 335a <ThreadController::get(char const*)+0x2a>
	for(int i = 0; i < MAX_THREADS; i++)
    3350:	3401      	adds	r4, #1
    3352:	2c0f      	cmp	r4, #15
    3354:	d1f2      	bne.n	333c <ThreadController::get(char const*)+0xc>
		}
	}
	return NULL;
    3356:	2000      	movs	r0, #0
}
    3358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(strcmp(name,(char *)thread[i]->getName()) == 0) return thread[i];
    335a:	340c      	adds	r4, #12
    335c:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
}
    3360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3362:	bf00      	nop

00003364 <SerialBuffer::clear()>:
{
}

void SerialBuffer::clear()
{
   tail = head = sbsize = 0;
    3364:	2300      	movs	r3, #0
    3366:	f8a0 320e 	strh.w	r3, [r0, #526]	; 0x20e
    336a:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
}
    336e:	4770      	bx	lr

00003370 <SerialBuffer::write(unsigned char)>:
   wire = twi;
   twiadd = add;
}

size_t SerialBuffer::write(uint8_t by)
{
    3370:	b538      	push	{r3, r4, r5, lr}
   if(sbsize > SB_SIZE/2) flush();
    3372:	f8b0 3212 	ldrh.w	r3, [r0, #530]	; 0x212
{
    3376:	4604      	mov	r4, r0
    3378:	460d      	mov	r5, r1
   if(sbsize > SB_SIZE/2) flush();
    337a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    337e:	d907      	bls.n	3390 <SerialBuffer::write(unsigned char)+0x20>
    3380:	6803      	ldr	r3, [r0, #0]
    3382:	68db      	ldr	r3, [r3, #12]
    3384:	4798      	blx	r3
   if(sbsize == SB_SIZE) return(0);  // Full!
    3386:	f8b4 3212 	ldrh.w	r3, [r4, #530]	; 0x212
    338a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    338e:	d014      	beq.n	33ba <SerialBuffer::write(unsigned char)+0x4a>
   buf[head++] = by;
    3390:	f8b4 220e 	ldrh.w	r2, [r4, #526]	; 0x20e
    3394:	1c53      	adds	r3, r2, #1
    3396:	4422      	add	r2, r4
    3398:	b29b      	uxth	r3, r3
    339a:	7355      	strb	r5, [r2, #13]
   if(head >= SB_SIZE) head = 0;
    339c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    33a0:	bf28      	it	cs
    33a2:	2300      	movcs	r3, #0
    33a4:	f8a4 320e 	strh.w	r3, [r4, #526]	; 0x20e
   noInterrupts();
    33a8:	b672      	cpsid	i
   sbsize++;
    33aa:	f8b4 3212 	ldrh.w	r3, [r4, #530]	; 0x212
    33ae:	3301      	adds	r3, #1
    33b0:	f8a4 3212 	strh.w	r3, [r4, #530]	; 0x212
   interrupts();
    33b4:	b662      	cpsie	i
   return(1);
    33b6:	2001      	movs	r0, #1
}
    33b8:	bd38      	pop	{r3, r4, r5, pc}
   if(sbsize == SB_SIZE) return(0);  // Full!
    33ba:	2000      	movs	r0, #0
}
    33bc:	bd38      	pop	{r3, r4, r5, pc}
    33be:	bf00      	nop

000033c0 <SerialBuffer::available()>:
}

int SerialBuffer::available(void)
{
   return(sbsize);
}
    33c0:	f8b0 0212 	ldrh.w	r0, [r0, #530]	; 0x212
    33c4:	4770      	bx	lr
    33c6:	bf00      	nop

000033c8 <SerialBuffer::read()>:

int SerialBuffer::read(void)
{
   if(sbsize == 0) return(-1);	// empty
    33c8:	f8b0 2212 	ldrh.w	r2, [r0, #530]	; 0x212
{
    33cc:	4603      	mov	r3, r0
   if(sbsize == 0) return(-1);	// empty
    33ce:	b19a      	cbz	r2, 33f8 <SerialBuffer::read()+0x30>
   int i = buf[tail++];
    33d0:	f8b0 1210 	ldrh.w	r1, [r0, #528]	; 0x210
    33d4:	1c4a      	adds	r2, r1, #1
    33d6:	4401      	add	r1, r0
    33d8:	b292      	uxth	r2, r2
    33da:	7b48      	ldrb	r0, [r1, #13]
   if(tail >= SB_SIZE) tail = 0;
    33dc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    33e0:	bf28      	it	cs
    33e2:	2200      	movcs	r2, #0
    33e4:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
   noInterrupts();
    33e8:	b672      	cpsid	i
   sbsize--;
    33ea:	f8b3 2212 	ldrh.w	r2, [r3, #530]	; 0x212
    33ee:	3a01      	subs	r2, #1
    33f0:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
   interrupts();
    33f4:	b662      	cpsie	i
   return(i);
    33f6:	4770      	bx	lr
   if(sbsize == 0) return(-1);	// empty
    33f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    33fc:	4770      	bx	lr
    33fe:	bf00      	nop

00003400 <SerialBuffer::peek()>:

int SerialBuffer::peek(void)
{
	return(0);
}
    3400:	2000      	movs	r0, #0
    3402:	4770      	bx	lr

00003404 <SerialBuffer::write(unsigned char const*, unsigned int)>:
   if(sbsize > SB_SIZE/2) flush();
    3404:	f8b0 3212 	ldrh.w	r3, [r0, #530]	; 0x212
    3408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
{
    340c:	b570      	push	{r4, r5, r6, lr}
    340e:	4605      	mov	r5, r0
    3410:	460e      	mov	r6, r1
    3412:	4614      	mov	r4, r2
   if(sbsize > SB_SIZE/2) flush();
    3414:	d907      	bls.n	3426 <SerialBuffer::write(unsigned char const*, unsigned int)+0x22>
    3416:	6803      	ldr	r3, [r0, #0]
    3418:	68db      	ldr	r3, [r3, #12]
    341a:	4798      	blx	r3
   if(sbsize == SB_SIZE) return(0);  // Full!
    341c:	f8b5 3212 	ldrh.w	r3, [r5, #530]	; 0x212
    3420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3424:	d025      	beq.n	3472 <SerialBuffer::write(unsigned char const*, unsigned int)+0x6e>
   for(size_t i=0; i < sz; i++)
    3426:	b334      	cbz	r4, 3476 <SerialBuffer::write(unsigned char const*, unsigned int)+0x72>
    3428:	1930      	adds	r0, r6, r4
    342a:	1e74      	subs	r4, r6, #1
    342c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    3430:	e002      	b.n	3438 <SerialBuffer::write(unsigned char const*, unsigned int)+0x34>
      interrupts();
    3432:	b662      	cpsie	i
   for(size_t i=0; i < sz; i++)
    3434:	4564      	cmp	r4, ip
    3436:	d01a      	beq.n	346e <SerialBuffer::write(unsigned char const*, unsigned int)+0x6a>
      buf[head++] = ch[i];
    3438:	f8b5 120e 	ldrh.w	r1, [r5, #526]	; 0x20e
    343c:	4622      	mov	r2, r4
    343e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    3442:	1c4b      	adds	r3, r1, #1
    3444:	3202      	adds	r2, #2
    3446:	4429      	add	r1, r5
    3448:	b29b      	uxth	r3, r3
    344a:	7348      	strb	r0, [r1, #13]
      num++;
    344c:	1b90      	subs	r0, r2, r6
      if(head >= SB_SIZE) head = 0;
    344e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3452:	bf28      	it	cs
    3454:	2300      	movcs	r3, #0
    3456:	f8a5 320e 	strh.w	r3, [r5, #526]	; 0x20e
      noInterrupts();
    345a:	b672      	cpsid	i
      sbsize++;
    345c:	f8b5 3212 	ldrh.w	r3, [r5, #530]	; 0x212
    3460:	3301      	adds	r3, #1
    3462:	b29b      	uxth	r3, r3
      if(sbsize == SB_SIZE) break;
    3464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
      sbsize++;
    3468:	f8a5 3212 	strh.w	r3, [r5, #530]	; 0x212
      if(sbsize == SB_SIZE) break;
    346c:	d1e1      	bne.n	3432 <SerialBuffer::write(unsigned char const*, unsigned int)+0x2e>
   interrupts();
    346e:	b662      	cpsie	i
}
    3470:	bd70      	pop	{r4, r5, r6, pc}
   if(sbsize == SB_SIZE) return(0);  // Full!
    3472:	2000      	movs	r0, #0
}
    3474:	bd70      	pop	{r4, r5, r6, pc}
   for(size_t i=0; i < sz; i++)
    3476:	4620      	mov	r0, r4
    3478:	e7f9      	b.n	346e <SerialBuffer::write(unsigned char const*, unsigned int)+0x6a>
    347a:	bf00      	nop

0000347c <SerialBuffer::flush()>:

void SerialBuffer::flush(void)
{
   // If wire channel is defined and the buffer is not
   // empty then send chars
   if((wire != NULL) && (available() > 0))
    347c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
    3480:	2b00      	cmp	r3, #0
    3482:	d056      	beq.n	3532 <SerialBuffer::flush()+0xb6>
    3484:	6803      	ldr	r3, [r0, #0]
{
    3486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   if((wire != NULL) && (available() > 0))
    348a:	691b      	ldr	r3, [r3, #16]
    348c:	4604      	mov	r4, r0
    348e:	4e2b      	ldr	r6, [pc, #172]	; (353c <SerialBuffer::flush()+0xc0>)
    3490:	42b3      	cmp	r3, r6
    3492:	d14f      	bne.n	3534 <SerialBuffer::flush()+0xb8>
   return(sbsize);
    3494:	f8b0 0212 	ldrh.w	r0, [r0, #530]	; 0x212
   if((wire != NULL) && (available() > 0))
    3498:	2800      	cmp	r0, #0
    349a:	dd44      	ble.n	3526 <SerialBuffer::flush()+0xaa>
		txBuffer[0] = (address << 1);
    349c:	f894 2218 	ldrb.w	r2, [r4, #536]	; 0x218
		transmitting = 1;
    34a0:	2101      	movs	r1, #1
   {
      wire->beginTransmission(twiadd);
    34a2:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
		txBufferLength = 1;
    34a6:	251e      	movs	r5, #30
		txBuffer[0] = (address << 1);
    34a8:	408a      	lsls	r2, r1
    34aa:	4f25      	ldr	r7, [pc, #148]	; (3540 <SerialBuffer::flush()+0xc4>)
		transmitting = 1;
    34ac:	f883 1130 	strb.w	r1, [r3, #304]	; 0x130
		txBufferLength = 1;
    34b0:	f883 112f 	strb.w	r1, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    34b4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
      for(int i=0;i<30;i++)
    34b8:	e026      	b.n	3508 <SerialBuffer::flush()+0x8c>
   return(sbsize);
    34ba:	f8b4 0212 	ldrh.w	r0, [r4, #530]	; 0x212
      {
         if(available() > 0) wire->write(read());
    34be:	2800      	cmp	r0, #0
    34c0:	dd2a      	ble.n	3518 <SerialBuffer::flush()+0x9c>
    34c2:	6823      	ldr	r3, [r4, #0]
    34c4:	f8d4 8214 	ldr.w	r8, [r4, #532]	; 0x214
    34c8:	695b      	ldr	r3, [r3, #20]
    34ca:	42bb      	cmp	r3, r7
    34cc:	d12d      	bne.n	352a <SerialBuffer::flush()+0xae>
   if(sbsize == 0) return(-1);	// empty
    34ce:	f8b4 3212 	ldrh.w	r3, [r4, #530]	; 0x212
    34d2:	b38b      	cbz	r3, 3538 <SerialBuffer::flush()+0xbc>
   int i = buf[tail++];
    34d4:	f8b4 2210 	ldrh.w	r2, [r4, #528]	; 0x210
    34d8:	1c53      	adds	r3, r2, #1
    34da:	4422      	add	r2, r4
    34dc:	b29b      	uxth	r3, r3
    34de:	7b51      	ldrb	r1, [r2, #13]
   if(tail >= SB_SIZE) tail = 0;
    34e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    34e4:	bf28      	it	cs
    34e6:	2300      	movcs	r3, #0
    34e8:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
   noInterrupts();
    34ec:	b672      	cpsid	i
   sbsize--;
    34ee:	f8b4 3212 	ldrh.w	r3, [r4, #530]	; 0x212
    34f2:	3b01      	subs	r3, #1
    34f4:	f8a4 3212 	strh.w	r3, [r4, #530]	; 0x212
   interrupts();
    34f8:	b662      	cpsie	i
		return write((uint8_t)n);
    34fa:	f8d8 3000 	ldr.w	r3, [r8]
    34fe:	4640      	mov	r0, r8
    3500:	681b      	ldr	r3, [r3, #0]
    3502:	4798      	blx	r3
      for(int i=0;i<30;i++)
    3504:	3d01      	subs	r5, #1
    3506:	d007      	beq.n	3518 <SerialBuffer::flush()+0x9c>
         if(available() > 0) wire->write(read());
    3508:	6823      	ldr	r3, [r4, #0]
    350a:	691b      	ldr	r3, [r3, #16]
    350c:	42b3      	cmp	r3, r6
    350e:	d0d4      	beq.n	34ba <SerialBuffer::flush()+0x3e>
    3510:	4620      	mov	r0, r4
    3512:	4798      	blx	r3
    3514:	2800      	cmp	r0, #0
    3516:	dcd4      	bgt.n	34c2 <SerialBuffer::flush()+0x46>
		return endTransmission(1);
    3518:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
    351c:	2101      	movs	r1, #1
         else break;
      }
      wire->endTransmission();
   }
}
    351e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3522:	f7ff bc55 	b.w	2dd0 <TwoWire::endTransmission(unsigned char)>
    3526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         if(available() > 0) wire->write(read());
    352a:	4620      	mov	r0, r4
    352c:	4798      	blx	r3
		return write((uint8_t)n);
    352e:	b2c1      	uxtb	r1, r0
    3530:	e7e3      	b.n	34fa <SerialBuffer::flush()+0x7e>
    3532:	4770      	bx	lr
   if((wire != NULL) && (available() > 0))
    3534:	4798      	blx	r3
    3536:	e7af      	b.n	3498 <SerialBuffer::flush()+0x1c>
    3538:	21ff      	movs	r1, #255	; 0xff
    353a:	e7de      	b.n	34fa <SerialBuffer::flush()+0x7e>
    353c:	000033c1 	.word	0x000033c1
    3540:	000033c9 	.word	0x000033c9

00003544 <SerialBuffer::SerialBuffer()>:
	constexpr Print() : write_error(0) {}
    3544:	2200      	movs	r2, #0
SerialBuffer::SerialBuffer()
    3546:	4905      	ldr	r1, [pc, #20]	; (355c <SerialBuffer::SerialBuffer()+0x18>)
    3548:	b410      	push	{r4}
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    354a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    354e:	7302      	strb	r2, [r0, #12]
    3550:	6001      	str	r1, [r0, #0]
    3552:	e9c0 2401 	strd	r2, r4, [r0, #4]
}
    3556:	f85d 4b04 	ldr.w	r4, [sp], #4
    355a:	4770      	bx	lr
    355c:	2000065c 	.word	0x2000065c

00003560 <SerialBuffer::~SerialBuffer()>:
}
    3560:	4770      	bx	lr
    3562:	bf00      	nop

00003564 <EventResponder::runFromInterrupt()>:
{
    3564:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3566:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    356a:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    356c:	4c0c      	ldr	r4, [pc, #48]	; (35a0 <EventResponder::runFromInterrupt()+0x3c>)
    356e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3570:	b180      	cbz	r0, 3594 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    3572:	4e0c      	ldr	r6, [pc, #48]	; (35a4 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    3574:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    3576:	6943      	ldr	r3, [r0, #20]
    3578:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    357a:	b173      	cbz	r3, 359a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    357c:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    357e:	b902      	cbnz	r2, 3582 <EventResponder::runFromInterrupt()+0x1e>
    3580:	b662      	cpsie	i
			(*(first->_function))(*first);
    3582:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    3584:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3586:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3588:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    358c:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    358e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3590:	2800      	cmp	r0, #0
    3592:	d1f0      	bne.n	3576 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    3594:	b902      	cbnz	r2, 3598 <EventResponder::runFromInterrupt()+0x34>
    3596:	b662      	cpsie	i
}
    3598:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    359a:	6033      	str	r3, [r6, #0]
    359c:	e7ef      	b.n	357e <EventResponder::runFromInterrupt()+0x1a>
    359e:	bf00      	nop
    35a0:	2000a5ac 	.word	0x2000a5ac
    35a4:	2000a5a8 	.word	0x2000a5a8

000035a8 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    35a8:	f7ff bfdc 	b.w	3564 <EventResponder::runFromInterrupt()>

000035ac <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    35ac:	4904      	ldr	r1, [pc, #16]	; (35c0 <systick_isr+0x14>)
	systick_millis_count++;
    35ae:	4a05      	ldr	r2, [pc, #20]	; (35c4 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    35b0:	6849      	ldr	r1, [r1, #4]
    35b2:	4b05      	ldr	r3, [pc, #20]	; (35c8 <systick_isr+0x1c>)
    35b4:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    35b6:	6813      	ldr	r3, [r2, #0]
    35b8:	3301      	adds	r3, #1
    35ba:	6013      	str	r3, [r2, #0]
}
    35bc:	4770      	bx	lr
    35be:	bf00      	nop
    35c0:	e0001000 	.word	0xe0001000
    35c4:	2000ae44 	.word	0x2000ae44
    35c8:	2000ae40 	.word	0x2000ae40

000035cc <HardwareSerialIMXRT::operator bool()>:
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	*/

	operator bool()			{ return true; }
    35cc:	2001      	movs	r0, #1
    35ce:	4770      	bx	lr

000035d0 <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    35d0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    35d4:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    35d8:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    35da:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    35dc:	4293      	cmp	r3, r2
    35de:	d202      	bcs.n	35e6 <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
    35e0:	3a01      	subs	r2, #1
    35e2:	1ad0      	subs	r0, r2, r3
}
    35e4:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    35e6:	6b41      	ldr	r1, [r0, #52]	; 0x34
    35e8:	3901      	subs	r1, #1
    35ea:	440a      	add	r2, r1
    35ec:	1ad0      	subs	r0, r2, r3
    35ee:	4770      	bx	lr

000035f0 <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    35f0:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    35f2:	b672      	cpsid	i
	head = rx_buffer_head_;
    35f4:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    35f8:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    35fc:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    35fe:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    3600:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    3602:	bf3c      	itt	cc
    3604:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
    3606:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
    3608:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
    360a:	1ad3      	subs	r3, r2, r3
	__enable_irq();
    360c:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    360e:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
    3612:	4418      	add	r0, r3
    3614:	4770      	bx	lr
    3616:	bf00      	nop

00003618 <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
    3618:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    361c:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    361e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    3622:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    3624:	b29b      	uxth	r3, r3
	if (head == tail) {
    3626:	4299      	cmp	r1, r3
{
    3628:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    362a:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    362c:	d014      	beq.n	3658 <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    362e:	3301      	adds	r3, #1
    3630:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    3632:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    3634:	4298      	cmp	r0, r3
    3636:	bf98      	it	ls
    3638:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    363a:	4299      	cmp	r1, r3
    363c:	d806      	bhi.n	364c <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    363e:	1a5b      	subs	r3, r3, r1
    3640:	6a52      	ldr	r2, [r2, #36]	; 0x24
    3642:	5cd0      	ldrb	r0, [r2, r3]
    3644:	b2c0      	uxtb	r0, r0
	}
}
    3646:	f85d 4b04 	ldr.w	r4, [sp], #4
    364a:	4770      	bx	lr
		return rx_buffer_[tail];
    364c:	6a12      	ldr	r2, [r2, #32]
}
    364e:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
    3652:	5cd0      	ldrb	r0, [r2, r3]
    3654:	b2c0      	uxtb	r0, r0
}
    3656:	4770      	bx	lr
		__disable_irq();
    3658:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    365a:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    365e:	b280      	uxth	r0, r0
		if (head == tail) {
    3660:	4281      	cmp	r1, r0
    3662:	d001      	beq.n	3668 <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
    3664:	b662      	cpsie	i
    3666:	e7e2      	b.n	362e <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
    3668:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    366a:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    366e:	d103      	bne.n	3678 <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
    3670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    3674:	b662      	cpsie	i
			return c;
    3676:	e7e6      	b.n	3646 <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    3678:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
    367a:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    367c:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
    367e:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    3680:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    3684:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    3688:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    368a:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    368e:	704b      	strb	r3, [r1, #1]
    3690:	e7f0      	b.n	3674 <HardwareSerialIMXRT::peek()+0x5c>
    3692:	bf00      	nop

00003694 <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    3694:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    3698:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    369a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    369e:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    36a0:	b29b      	uxth	r3, r3
	if (head == tail) {
    36a2:	4299      	cmp	r1, r3
{
    36a4:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    36a6:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    36a8:	d025      	beq.n	36f6 <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    36aa:	3301      	adds	r3, #1
    36ac:	6b94      	ldr	r4, [r2, #56]	; 0x38
    36ae:	429c      	cmp	r4, r3
    36b0:	d916      	bls.n	36e0 <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
    36b2:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    36b4:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    36b8:	4298      	cmp	r0, r3
    36ba:	d917      	bls.n	36ec <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
    36bc:	6a10      	ldr	r0, [r2, #32]
    36be:	5cc0      	ldrb	r0, [r0, r3]
    36c0:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    36c2:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    36c4:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    36c8:	b145      	cbz	r5, 36dc <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    36ca:	4299      	cmp	r1, r3
    36cc:	d31c      	bcc.n	3708 <HardwareSerialIMXRT::read()+0x74>
    36ce:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    36d0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    36d2:	4299      	cmp	r1, r3
    36d4:	d302      	bcc.n	36dc <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    36d6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    36d8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    36dc:	bc30      	pop	{r4, r5}
    36de:	4770      	bx	lr
    36e0:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    36e4:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    36e6:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    36e8:	4298      	cmp	r0, r3
    36ea:	d8e7      	bhi.n	36bc <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    36ec:	1a18      	subs	r0, r3, r0
    36ee:	6a55      	ldr	r5, [r2, #36]	; 0x24
    36f0:	5c28      	ldrb	r0, [r5, r0]
    36f2:	b2c0      	uxtb	r0, r0
    36f4:	e7e5      	b.n	36c2 <HardwareSerialIMXRT::read()+0x2e>
    36f6:	4608      	mov	r0, r1
		__disable_irq();
    36f8:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    36fa:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    36fe:	b289      	uxth	r1, r1
		if (head == tail) {
    3700:	4288      	cmp	r0, r1
    3702:	d004      	beq.n	370e <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
    3704:	b662      	cpsie	i
    3706:	e7d0      	b.n	36aa <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
    3708:	440c      	add	r4, r1
    370a:	1ae3      	subs	r3, r4, r3
    370c:	e7e0      	b.n	36d0 <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
    370e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3710:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    3714:	d103      	bne.n	371e <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
    3716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    371a:	b662      	cpsie	i
			return c;
    371c:	e7de      	b.n	36dc <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    371e:	69e0      	ldr	r0, [r4, #28]
    3720:	f3c0 0009 	ubfx	r0, r0, #0, #10
    3724:	e7f9      	b.n	371a <HardwareSerialIMXRT::read()+0x86>
    3726:	bf00      	nop

00003728 <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
    3728:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    372c:	b143      	cbz	r3, 3740 <HardwareSerialIMXRT::flush()+0x18>
{
    372e:	b510      	push	{r4, lr}
    3730:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    3732:	f002 feef 	bl	6514 <yield>
    3736:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    373a:	2b00      	cmp	r3, #0
    373c:	d1f9      	bne.n	3732 <HardwareSerialIMXRT::flush()+0xa>
}
    373e:	bd10      	pop	{r4, pc}
    3740:	4770      	bx	lr
    3742:	bf00      	nop

00003744 <HardwareSerialIMXRT::end()>:
{
    3744:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    3746:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
    374a:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
    374e:	6809      	ldr	r1, [r1, #0]
    3750:	4211      	tst	r1, r2
    3752:	d028      	beq.n	37a6 <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
    3754:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
    3758:	4604      	mov	r4, r0
    375a:	b132      	cbz	r2, 376a <HardwareSerialIMXRT::end()+0x26>
    375c:	f002 feda 	bl	6514 <yield>
    3760:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    3764:	2b00      	cmp	r3, #0
    3766:	d1f9      	bne.n	375c <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    3768:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
    376a:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    376c:	4a0e      	ldr	r2, [pc, #56]	; (37a8 <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
    376e:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    3770:	7e20      	ldrb	r0, [r4, #24]
    3772:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    3776:	7d00      	ldrb	r0, [r0, #20]
    3778:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    377c:	6845      	ldr	r5, [r0, #4]
    377e:	2005      	movs	r0, #5
    3780:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    3782:	7e65      	ldrb	r5, [r4, #25]
    3784:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3788:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    378c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
    3790:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    3792:	6852      	ldr	r2, [r2, #4]
    3794:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
    3796:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    379a:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
    379e:	b113      	cbz	r3, 37a6 <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    37a0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    37a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    37a6:	bd38      	pop	{r3, r4, r5, pc}
    37a8:	20007568 	.word	0x20007568

000037ac <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    37ac:	ee07 1a90 	vmov	s15, r1
    37b0:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 3a1c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
    37b4:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    37b6:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    37ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    37be:	ed9f 6a98 	vldr	s12, [pc, #608]	; 3a20 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
    37c2:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    37c6:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    37ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
    37ce:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    37d0:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
    37d2:	2401      	movs	r4, #1
		float div = base / (float)osr;
    37d4:	ee07 1a90 	vmov	s15, r1
    37d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    37dc:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    37e0:	ee77 7a05 	vadd.f32	s15, s14, s10
    37e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    37e8:	ee17 3a90 	vmov	r3, s15
    37ec:	4563      	cmp	r3, ip
    37ee:	bfa8      	it	ge
    37f0:	4663      	movge	r3, ip
    37f2:	2b01      	cmp	r3, #1
    37f4:	bfb8      	it	lt
    37f6:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    37f8:	ee07 3a90 	vmov	s15, r3
    37fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    3800:	ee76 6ac7 	vsub.f32	s13, s13, s14
    3804:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    3808:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3810:	bf48      	it	mi
    3812:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    3816:	eef4 7ac6 	vcmpe.f32	s15, s12
    381a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    381e:	d803      	bhi.n	3828 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
    3820:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    3824:	468e      	mov	lr, r1
			bestdiv = divint;
    3826:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    3828:	3101      	adds	r1, #1
    382a:	2921      	cmp	r1, #33	; 0x21
    382c:	d1d2      	bne.n	37d4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    382e:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    3830:	6943      	ldr	r3, [r0, #20]
    3832:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    3836:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    383a:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    383e:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
    3840:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    3844:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
    3848:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    384c:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    3850:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    3854:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    3856:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    3858:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    385c:	eba1 010c 	sub.w	r1, r1, ip
    3860:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    3864:	6839      	ldr	r1, [r7, #0]
    3866:	691e      	ldr	r6, [r3, #16]
    3868:	ea41 0106 	orr.w	r1, r1, r6
    386c:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    386e:	bf14      	ite	ne
    3870:	2101      	movne	r1, #1
    3872:	2100      	moveq	r1, #0
    3874:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    3876:	f040 80ac 	bne.w	39d2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    387a:	7e01      	ldrb	r1, [r0, #24]
    387c:	4e69      	ldr	r6, [pc, #420]	; (3a24 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    387e:	eb03 1801 	add.w	r8, r3, r1, lsl #4
    3882:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 3a44 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
    3886:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    388a:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    388e:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    3892:	68b9      	ldr	r1, [r7, #8]
    3894:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    3898:	6879      	ldr	r1, [r7, #4]
    389a:	f8d8 7018 	ldr.w	r7, [r8, #24]
    389e:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    38a0:	f1ba 0f00 	cmp.w	sl, #0
    38a4:	d003      	beq.n	38ae <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    38a6:	f8d8 1020 	ldr.w	r1, [r8, #32]
    38aa:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    38ae:	7e47      	ldrb	r7, [r0, #25]
    38b0:	21d9      	movs	r1, #217	; 0xd9
    38b2:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    38b6:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
    38ba:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
    38be:	f8dc 7008 	ldr.w	r7, [ip, #8]
    38c2:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    38c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
    38c8:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
    38cc:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    38ce:	7e41      	ldrb	r1, [r0, #25]
    38d0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    38d4:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
    38d6:	b10f      	cbz	r7, 38dc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    38d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
    38da:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    38dc:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    38e0:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    38e4:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    38e8:	bfcc      	ite	gt
    38ea:	f04f 0e00 	movgt.w	lr, #0
    38ee:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    38f2:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    38f6:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
    38fa:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    38fc:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    38fe:	6129      	str	r1, [r5, #16]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    3900:	7859      	ldrb	r1, [r3, #1]
    3902:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
    3906:	2100      	movs	r1, #0
    3908:	60e9      	str	r1, [r5, #12]
    390a:	4947      	ldr	r1, [pc, #284]	; (3a28 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
    390c:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    3910:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    3912:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    3916:	4c45      	ldr	r4, [pc, #276]	; (3a2c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    3918:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    391c:	784f      	ldrb	r7, [r1, #1]
    391e:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    3922:	4b43      	ldr	r3, [pc, #268]	; (3a30 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    3924:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    3926:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
    392a:	6944      	ldr	r4, [r0, #20]
    392c:	7861      	ldrb	r1, [r4, #1]
    392e:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    3932:	f001 011f 	and.w	r1, r1, #31
    3936:	009b      	lsls	r3, r3, #2
    3938:	fa0e f101 	lsl.w	r1, lr, r1
    393c:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    393e:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    3940:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3942:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    3946:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    3948:	0753      	lsls	r3, r2, #29
    394a:	d43e      	bmi.n	39ca <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    394c:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    3950:	f002 010f 	and.w	r1, r2, #15
    3954:	2904      	cmp	r1, #4
    3956:	bf08      	it	eq
    3958:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
    395c:	0697      	lsls	r7, r2, #26
    395e:	d52e      	bpl.n	39be <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    3960:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
    3962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    3966:	2900      	cmp	r1, #0
    3968:	d13a      	bne.n	39e0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    396a:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    396c:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    396e:	d503      	bpl.n	3978 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
    3970:	692b      	ldr	r3, [r5, #16]
    3972:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    3976:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    3978:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    397a:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    397c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    3980:	bf48      	it	mi
    3982:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    3986:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    3988:	05d3      	lsls	r3, r2, #23
    398a:	d503      	bpl.n	3994 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
    398c:	692b      	ldr	r3, [r5, #16]
    398e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    3992:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
    3994:	68a3      	ldr	r3, [r4, #8]
    3996:	b183      	cbz	r3, 39ba <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    3998:	4e26      	ldr	r6, [pc, #152]	; (3a34 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
    399a:	7834      	ldrb	r4, [r6, #0]
    399c:	2c00      	cmp	r4, #0
    399e:	d03a      	beq.n	3a16 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
    39a0:	1e61      	subs	r1, r4, #1
    39a2:	4d25      	ldr	r5, [pc, #148]	; (3a38 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    39a4:	b2c9      	uxtb	r1, r1
    39a6:	1f2b      	subs	r3, r5, #4
    39a8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    39ac:	e001      	b.n	39b2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
    39ae:	4299      	cmp	r1, r3
    39b0:	d025      	beq.n	39fe <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    39b2:	f853 2f04 	ldr.w	r2, [r3, #4]!
    39b6:	4290      	cmp	r0, r2
    39b8:	d1f9      	bne.n	39ae <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
    39ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    39be:	7e81      	ldrb	r1, [r0, #26]
    39c0:	2900      	cmp	r1, #0
    39c2:	d0d2      	beq.n	396a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
    39c4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    39c8:	e7cf      	b.n	396a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    39ca:	4b1c      	ldr	r3, [pc, #112]	; (3a3c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
    39cc:	ea4c 0303 	orr.w	r3, ip, r3
    39d0:	e7be      	b.n	3950 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    39d2:	7e47      	ldrb	r7, [r0, #25]
    39d4:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
    39d8:	4e12      	ldr	r6, [pc, #72]	; (3a24 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    39da:	eb03 1807 	add.w	r8, r3, r7, lsl #4
    39de:	e76a      	b.n	38b6 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    39e0:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    39e2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    39e6:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    39ea:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    39ee:	eb06 1601 	add.w	r6, r6, r1, lsl #4
    39f2:	68b6      	ldr	r6, [r6, #8]
    39f4:	6831      	ldr	r1, [r6, #0]
    39f6:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
    39fa:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    39fc:	e7b5      	b.n	396a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    39fe:	1c63      	adds	r3, r4, #1
    3a00:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    3a02:	4a0f      	ldr	r2, [pc, #60]	; (3a40 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    3a04:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    3a06:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    3a08:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    3a0c:	f043 0302 	orr.w	r3, r3, #2
    3a10:	7013      	strb	r3, [r2, #0]
};
    3a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    3a16:	2301      	movs	r3, #1
    3a18:	4d07      	ldr	r5, [pc, #28]	; (3a38 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    3a1a:	e7f2      	b.n	3a02 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
    3a1c:	4bb71b00 	.word	0x4bb71b00
    3a20:	60ad78ec 	.word	0x60ad78ec
    3a24:	20007568 	.word	0x20007568
    3a28:	20009000 	.word	0x20009000
    3a2c:	e000e400 	.word	0xe000e400
    3a30:	38003840 	.word	0x38003840
    3a34:	2000afee 	.word	0x2000afee
    3a38:	2000a5b4 	.word	0x2000a5b4
    3a3c:	003c0010 	.word	0x003c0010
    3a40:	2000b006 	.word	0x2000b006
    3a44:	0001f038 	.word	0x0001f038

00003a48 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    3a48:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    3a4c:	b9b8      	cbnz	r0, 3a7e <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3a4e:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    3a52:	b94b      	cbnz	r3, 3a68 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3a54:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    3a58:	b93a      	cbnz	r2, 3a6a <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    3a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    3a5e:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    3a62:	b150      	cbz	r0, 3a7a <nvic_execution_priority()+0x32>
    3a64:	4298      	cmp	r0, r3
    3a66:	d208      	bcs.n	3a7a <nvic_execution_priority()+0x32>
}
    3a68:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    3a6a:	2a0f      	cmp	r2, #15
    3a6c:	d9f7      	bls.n	3a5e <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    3a6e:	4b05      	ldr	r3, [pc, #20]	; (3a84 <nvic_execution_priority()+0x3c>)
    3a70:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    3a72:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    3a76:	2800      	cmp	r0, #0
    3a78:	d1f4      	bne.n	3a64 <nvic_execution_priority()+0x1c>
    3a7a:	4618      	mov	r0, r3
	return priority;
    3a7c:	4770      	bx	lr
	if (faultmask) return -1;
    3a7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3a82:	e7f1      	b.n	3a68 <nvic_execution_priority()+0x20>
    3a84:	e000e3f0 	.word	0xe000e3f0

00003a88 <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    3a88:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    3a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a8e:	4604      	mov	r4, r0
    3a90:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    3a92:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    3a94:	b113      	cbz	r3, 3a9c <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
    3a96:	6d42      	ldr	r2, [r0, #84]	; 0x54
    3a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    3a9c:	7ea3      	ldrb	r3, [r4, #26]
    3a9e:	b12b      	cbz	r3, 3aac <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
    3aa0:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    3aa2:	69b3      	ldr	r3, [r6, #24]
    3aa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    3aa8:	61b3      	str	r3, [r6, #24]
		__enable_irq();
    3aaa:	b662      	cpsie	i
	head = tx_buffer_head_;
    3aac:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    3ab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    3ab2:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    3ab4:	3501      	adds	r5, #1
    3ab6:	42ab      	cmp	r3, r5
    3ab8:	d84c      	bhi.n	3b54 <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
    3aba:	f04f 0800 	mov.w	r8, #0
    3abe:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
    3ac0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    3ac4:	b29b      	uxth	r3, r3
    3ac6:	429d      	cmp	r5, r3
    3ac8:	d019      	beq.n	3afe <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
    3aca:	e028      	b.n	3b1e <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    3acc:	6973      	ldr	r3, [r6, #20]
    3ace:	021b      	lsls	r3, r3, #8
    3ad0:	d510      	bpl.n	3af4 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
    3ad2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    3ad6:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    3ad8:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    3ada:	3301      	adds	r3, #1
    3adc:	429a      	cmp	r2, r3
    3ade:	d936      	bls.n	3b4e <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
    3ae0:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    3ae2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    3ae4:	4299      	cmp	r1, r3
    3ae6:	d92d      	bls.n	3b44 <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
    3ae8:	69e1      	ldr	r1, [r4, #28]
    3aea:	5ccb      	ldrb	r3, [r1, r3]
    3aec:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    3aee:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
    3af0:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    3af4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    3af8:	b29b      	uxth	r3, r3
    3afa:	42ab      	cmp	r3, r5
    3afc:	d10f      	bne.n	3b1e <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
    3afe:	f7ff ffa3 	bl	3a48 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    3b02:	6963      	ldr	r3, [r4, #20]
    3b04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    3b08:	4283      	cmp	r3, r0
    3b0a:	dadf      	bge.n	3acc <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
    3b0c:	28ff      	cmp	r0, #255	; 0xff
    3b0e:	ddf1      	ble.n	3af4 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
    3b10:	f002 fd00 	bl	6514 <yield>
	while (tx_buffer_tail_ == head) {
    3b14:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    3b18:	b29b      	uxth	r3, r3
    3b1a:	42ab      	cmp	r3, r5
    3b1c:	d0ef      	beq.n	3afe <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
    3b1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3b20:	42ab      	cmp	r3, r5
    3b22:	d91a      	bls.n	3b5a <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
    3b24:	b2ff      	uxtb	r7, r7
    3b26:	69e3      	ldr	r3, [r4, #28]
    3b28:	555f      	strb	r7, [r3, r5]
	__disable_irq();
    3b2a:	b672      	cpsid	i
	transmitting_ = 1;
    3b2c:	2001      	movs	r0, #1
    3b2e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    3b32:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    3b36:	69b3      	ldr	r3, [r6, #24]
    3b38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    3b3c:	61b3      	str	r3, [r6, #24]
	__enable_irq();
    3b3e:	b662      	cpsie	i
}
    3b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    3b44:	1a5b      	subs	r3, r3, r1
    3b46:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    3b48:	5ccb      	ldrb	r3, [r1, r3]
    3b4a:	b2db      	uxtb	r3, r3
    3b4c:	e7cf      	b.n	3aee <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
    3b4e:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    3b50:	4613      	mov	r3, r2
    3b52:	e7c6      	b.n	3ae2 <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
    3b54:	fa1f f885 	uxth.w	r8, r5
    3b58:	e7b2      	b.n	3ac0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    3b5a:	1aed      	subs	r5, r5, r3
    3b5c:	b2ff      	uxtb	r7, r7
    3b5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3b60:	555f      	strb	r7, [r3, r5]
    3b62:	e7e2      	b.n	3b2a <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

00003b64 <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
    3b64:	f7ff bf90 	b.w	3a88 <HardwareSerialIMXRT::write9bit(unsigned long)>

00003b68 <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    3b68:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    3b6a:	6953      	ldr	r3, [r2, #20]
    3b6c:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    3b70:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    3b72:	d043      	beq.n	3bfc <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    3b74:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    3b76:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    3b7a:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    3b7e:	d03a      	beq.n	3bf6 <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
    3b80:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    3b84:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    3b88:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
    3b8a:	b2b6      	uxth	r6, r6
    3b8c:	e007      	b.n	3b9e <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
    3b8e:	6a01      	ldr	r1, [r0, #32]
    3b90:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
    3b94:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    3b98:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    3b9c:	d01d      	beq.n	3bda <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    3b9e:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    3ba0:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    3ba2:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    3ba4:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    3ba8:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    3bac:	429c      	cmp	r4, r3
    3bae:	bf98      	it	ls
    3bb0:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    3bb2:	fa1f fc8c 	uxth.w	ip, ip
    3bb6:	459c      	cmp	ip, r3
    3bb8:	d0ec      	beq.n	3b94 <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
    3bba:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
    3bbc:	fa5f fc81 	uxtb.w	ip, r1
    3bc0:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
    3bc2:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    3bc4:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
    3bc8:	d8e1      	bhi.n	3b8e <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    3bca:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3bcc:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
    3bd0:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    3bd4:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    3bd8:	d1e1      	bne.n	3b9e <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
    3bda:	b2ab      	uxth	r3, r5
    3bdc:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    3be0:	6d83      	ldr	r3, [r0, #88]	; 0x58
    3be2:	b143      	cbz	r3, 3bf6 <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
    3be4:	42b5      	cmp	r5, r6
    3be6:	d354      	bcc.n	3c92 <HardwareSerialIMXRT::IRQHandler()+0x12a>
    3be8:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
    3bea:	6c01      	ldr	r1, [r0, #64]	; 0x40
    3bec:	42a9      	cmp	r1, r5
    3bee:	d802      	bhi.n	3bf6 <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    3bf0:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    3bf2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    3bf6:	6953      	ldr	r3, [r2, #20]
    3bf8:	02d9      	lsls	r1, r3, #11
    3bfa:	d445      	bmi.n	3c88 <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
    3bfc:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    3bfe:	0233      	lsls	r3, r6, #8
    3c00:	d528      	bpl.n	3c54 <HardwareSerialIMXRT::IRQHandler()+0xec>
    3c02:	6953      	ldr	r3, [r2, #20]
    3c04:	021d      	lsls	r5, r3, #8
    3c06:	d525      	bpl.n	3c54 <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
    3c08:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    3c0c:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    3c10:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    3c12:	b29b      	uxth	r3, r3
    3c14:	e006      	b.n	3c24 <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
    3c16:	69c1      	ldr	r1, [r0, #28]
    3c18:	5cc9      	ldrb	r1, [r1, r3]
    3c1a:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    3c1c:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    3c1e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    3c20:	054c      	lsls	r4, r1, #21
    3c22:	d412      	bmi.n	3c4a <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
    3c24:	42ab      	cmp	r3, r5
    3c26:	d038      	beq.n	3c9a <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    3c28:	6b44      	ldr	r4, [r0, #52]	; 0x34
    3c2a:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    3c2c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    3c2e:	429c      	cmp	r4, r3
    3c30:	bf98      	it	ls
    3c32:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    3c34:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    3c36:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    3c3a:	d8ec      	bhi.n	3c16 <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    3c3c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    3c3e:	5d09      	ldrb	r1, [r1, r4]
    3c40:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    3c42:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    3c44:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    3c46:	054c      	lsls	r4, r1, #21
    3c48:	d5ec      	bpl.n	3c24 <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
    3c4a:	b299      	uxth	r1, r3
		if (head == tail) {
    3c4c:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
    3c4e:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    3c52:	d025      	beq.n	3ca0 <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    3c54:	0271      	lsls	r1, r6, #9
    3c56:	d516      	bpl.n	3c86 <HardwareSerialIMXRT::IRQHandler()+0x11e>
    3c58:	6953      	ldr	r3, [r2, #20]
    3c5a:	025b      	lsls	r3, r3, #9
    3c5c:	d513      	bpl.n	3c86 <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
    3c5e:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    3c60:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    3c62:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    3c66:	b113      	cbz	r3, 3c6e <HardwareSerialIMXRT::IRQHandler()+0x106>
    3c68:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3c6a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    3c6e:	7e83      	ldrb	r3, [r0, #26]
    3c70:	b12b      	cbz	r3, 3c7e <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
    3c72:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    3c74:	6993      	ldr	r3, [r2, #24]
    3c76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    3c7a:	6193      	str	r3, [r2, #24]
			__enable_irq();
    3c7c:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    3c7e:	6993      	ldr	r3, [r2, #24]
    3c80:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    3c84:	6193      	str	r3, [r2, #24]
}
    3c86:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    3c88:	6953      	ldr	r3, [r2, #20]
    3c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    3c8e:	6153      	str	r3, [r2, #20]
    3c90:	e7b4      	b.n	3bfc <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
    3c92:	6b81      	ldr	r1, [r0, #56]	; 0x38
    3c94:	1b89      	subs	r1, r1, r6
    3c96:	440d      	add	r5, r1
    3c98:	e7a7      	b.n	3bea <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
    3c9a:	b29b      	uxth	r3, r3
    3c9c:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    3ca0:	6993      	ldr	r3, [r2, #24]
    3ca2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3ca6:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    3ca8:	6993      	ldr	r3, [r2, #24]
    3caa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    3cae:	6193      	str	r3, [r2, #24]
    3cb0:	e7d0      	b.n	3c54 <HardwareSerialIMXRT::IRQHandler()+0xec>
    3cb2:	bf00      	nop

00003cb4 <IRQHandler_Serial1>:
	Serial1.IRQHandler();
    3cb4:	4801      	ldr	r0, [pc, #4]	; (3cbc <IRQHandler_Serial1+0x8>)
    3cb6:	f7ff bf57 	b.w	3b68 <HardwareSerialIMXRT::IRQHandler()>
    3cba:	bf00      	nop
    3cbc:	2000820c 	.word	0x2000820c

00003cc0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
		base = 10;
    3cc0:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    3cc2:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    3cc4:	bf08      	it	eq
    3cc6:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    3cc8:	b08a      	sub	sp, #40	; 0x28
	if (n == 0) {
    3cca:	b391      	cbz	r1, 3d32 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		i = sizeof(buf) - 1;
    3ccc:	f04f 0e21 	mov.w	lr, #33	; 0x21
    3cd0:	e001      	b.n	3cd6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
			i--;
    3cd2:	fa5f fe86 	uxtb.w	lr, r6
    3cd6:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
			digit = n % base;
    3cda:	fbb1 f5f2 	udiv	r5, r1, r2
    3cde:	fb02 1415 	mls	r4, r2, r5, r1
    3ce2:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3ce6:	2c09      	cmp	r4, #9
    3ce8:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    3cec:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    3cf0:	bf98      	it	ls
    3cf2:	fa5f f48c 	uxtbls.w	r4, ip
    3cf6:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    3cfa:	bf88      	it	hi
    3cfc:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    3cfe:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3d00:	44ec      	add	ip, sp
			n /= base;
    3d02:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3d04:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    3d08:	d2e3      	bcs.n	3cd2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
    3d0a:	b14b      	cbz	r3, 3d20 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    3d0c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
		buf[i] = '-';
    3d10:	222d      	movs	r2, #45	; 0x2d
		i--;
    3d12:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    3d16:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    3d1a:	446b      	add	r3, sp
    3d1c:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    3d20:	6803      	ldr	r3, [r0, #0]
    3d22:	a901      	add	r1, sp, #4
    3d24:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    3d28:	685b      	ldr	r3, [r3, #4]
    3d2a:	4471      	add	r1, lr
    3d2c:	4798      	blx	r3
}
    3d2e:	b00a      	add	sp, #40	; 0x28
    3d30:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    3d32:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    3d34:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    3d38:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    3d3c:	e7e5      	b.n	3d0a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    3d3e:	bf00      	nop

00003d40 <Print::write(unsigned char const*, unsigned int)>:
{
    3d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    3d44:	460c      	mov	r4, r1
    3d46:	b1d1      	cbz	r1, 3d7e <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
    3d48:	b1ea      	cbz	r2, 3d86 <Print::write(unsigned char const*, unsigned int)+0x46>
    3d4a:	4680      	mov	r8, r0
    3d4c:	188e      	adds	r6, r1, r2
	size_t count = 0;
    3d4e:	2500      	movs	r5, #0
    3d50:	4f0e      	ldr	r7, [pc, #56]	; (3d8c <Print::write(unsigned char const*, unsigned int)+0x4c>)
    3d52:	e004      	b.n	3d5e <Print::write(unsigned char const*, unsigned int)+0x1e>
    3d54:	f002 fb4a 	bl	63ec <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    3d58:	42b4      	cmp	r4, r6
    3d5a:	4405      	add	r5, r0
    3d5c:	d00c      	beq.n	3d78 <Print::write(unsigned char const*, unsigned int)+0x38>
    3d5e:	f8d8 3000 	ldr.w	r3, [r8]
    3d62:	f814 0b01 	ldrb.w	r0, [r4], #1
    3d66:	681b      	ldr	r3, [r3, #0]
    3d68:	42bb      	cmp	r3, r7
    3d6a:	d0f3      	beq.n	3d54 <Print::write(unsigned char const*, unsigned int)+0x14>
    3d6c:	4601      	mov	r1, r0
    3d6e:	4640      	mov	r0, r8
    3d70:	4798      	blx	r3
    3d72:	42b4      	cmp	r4, r6
    3d74:	4405      	add	r5, r0
    3d76:	d1f2      	bne.n	3d5e <Print::write(unsigned char const*, unsigned int)+0x1e>
}
    3d78:	4628      	mov	r0, r5
    3d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    3d7e:	460d      	mov	r5, r1
}
    3d80:	4628      	mov	r0, r5
    3d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    3d86:	4615      	mov	r5, r2
    3d88:	e7f6      	b.n	3d78 <Print::write(unsigned char const*, unsigned int)+0x38>
    3d8a:	bf00      	nop
    3d8c:	000020a9 	.word	0x000020a9

00003d90 <Print::print(long)>:
	if (n < 0) {
    3d90:	2900      	cmp	r1, #0
    3d92:	db03      	blt.n	3d9c <Print::print(long)+0xc>
	uint8_t sign=0;
    3d94:	2300      	movs	r3, #0
	if (base == 0) {
    3d96:	220a      	movs	r2, #10
    3d98:	f7ff bf92 	b.w	3cc0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    3d9c:	4249      	negs	r1, r1
		sign = '-';
    3d9e:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    3da0:	220a      	movs	r2, #10
    3da2:	f7ff bf8d 	b.w	3cc0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    3da6:	bf00      	nop

00003da8 <Print::println()>:
{
    3da8:	b500      	push	{lr}
	return write(buf, 2);
    3daa:	6803      	ldr	r3, [r0, #0]
{
    3dac:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    3dae:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    3db2:	2202      	movs	r2, #2
    3db4:	a901      	add	r1, sp, #4
    3db6:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    3db8:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    3dbc:	4798      	blx	r3
}
    3dbe:	b003      	add	sp, #12
    3dc0:	f85d fb04 	ldr.w	pc, [sp], #4

00003dc4 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    3dc4:	4b05      	ldr	r3, [pc, #20]	; (3ddc <_write+0x18>)
    3dc6:	2802      	cmp	r0, #2
    3dc8:	bf88      	it	hi
    3dca:	4603      	movhi	r3, r0
{
    3dcc:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    3dce:	681c      	ldr	r4, [r3, #0]
    3dd0:	4618      	mov	r0, r3
    3dd2:	6863      	ldr	r3, [r4, #4]
}
    3dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    3dd8:	4718      	bx	r3
    3dda:	bf00      	nop
    3ddc:	200081fc 	.word	0x200081fc

00003de0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    3de0:	b95a      	cbnz	r2, 3dfa <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    3de2:	6803      	ldr	r3, [r0, #0]
    3de4:	b2c9      	uxtb	r1, r1
    3de6:	4a07      	ldr	r2, [pc, #28]	; (3e04 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    3de8:	681b      	ldr	r3, [r3, #0]
    3dea:	4293      	cmp	r3, r2
{
    3dec:	b500      	push	{lr}
    3dee:	d106      	bne.n	3dfe <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    3df0:	4608      	mov	r0, r1
}
    3df2:	f85d eb04 	ldr.w	lr, [sp], #4
    3df6:	f002 baf9 	b.w	63ec <usb_serial_putchar>
    3dfa:	f7ff bf61 	b.w	3cc0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    3dfe:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    3e02:	4718      	bx	r3
    3e04:	000020a9 	.word	0x000020a9

00003e08 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    3e08:	eeb4 0b40 	vcmp.f64	d0, d0
{
    3e0c:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    3e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    3e12:	4605      	mov	r5, r0
    3e14:	ed2d 8b02 	vpush	{d8}
    3e18:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    3e1a:	d67c      	bvs.n	3f16 <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    3e1c:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    3e20:	ed9f 6b47 	vldr	d6, [pc, #284]	; 3f40 <Print::printFloat(double, unsigned char)+0x138>
    3e24:	eeb4 7b46 	vcmp.f64	d7, d6
    3e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e2c:	dc6b      	bgt.n	3f06 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    3e2e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 3f48 <Print::printFloat(double, unsigned char)+0x140>
    3e32:	eeb4 0bc7 	vcmpe.f64	d0, d7
    3e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e3a:	dc5a      	bgt.n	3ef2 <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    3e3c:	ed9f 7b44 	vldr	d7, [pc, #272]	; 3f50 <Print::printFloat(double, unsigned char)+0x148>
    3e40:	eeb4 0bc7 	vcmpe.f64	d0, d7
    3e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e48:	d453      	bmi.n	3ef2 <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    3e4a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    3e4e:	460c      	mov	r4, r1
    3e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e54:	d45b      	bmi.n	3f0e <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    3e56:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    3e58:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    3e5c:	2c00      	cmp	r4, #0
    3e5e:	d05e      	beq.n	3f1e <Print::printFloat(double, unsigned char)+0x116>
    3e60:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    3e64:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 3f58 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    3e68:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    3e6c:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    3e70:	fa5f f28c 	uxtb.w	r2, ip
    3e74:	42a2      	cmp	r2, r4
    3e76:	d3f7      	bcc.n	3e68 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    3e78:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    3e7c:	220a      	movs	r2, #10
    3e7e:	4628      	mov	r0, r5
    3e80:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    3e84:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    3e88:	ee17 1a90 	vmov	r1, s15
    3e8c:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    3e90:	f7ff ff16 	bl	3cc0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    3e94:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    3e96:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    3e9a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    3e9e:	4606      	mov	r6, r0
		buf[0] = '.';
    3ea0:	bf28      	it	cs
    3ea2:	240f      	movcs	r4, #15
    3ea4:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    3ea8:	f10d 0309 	add.w	r3, sp, #9
    3eac:	aa02      	add	r2, sp, #8
    3eae:	1e61      	subs	r1, r4, #1
    3eb0:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    3eb4:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    3eb8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    3ebc:	edcd 7a01 	vstr	s15, [sp, #4]
    3ec0:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    3ec4:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    3ec8:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    3eca:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    3ece:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    3ed2:	4291      	cmp	r1, r2
			remainder -= n; 
    3ed4:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    3ed8:	d1ec      	bne.n	3eb4 <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    3eda:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    3edc:	3401      	adds	r4, #1
		count += write(buf, count);
    3ede:	a902      	add	r1, sp, #8
    3ee0:	4628      	mov	r0, r5
    3ee2:	685b      	ldr	r3, [r3, #4]
    3ee4:	b2e2      	uxtb	r2, r4
    3ee6:	4798      	blx	r3
	}
	return count;
}
    3ee8:	4630      	mov	r0, r6
    3eea:	b006      	add	sp, #24
    3eec:	ecbd 8b02 	vpop	{d8}
    3ef0:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    3ef2:	682b      	ldr	r3, [r5, #0]
    3ef4:	2203      	movs	r2, #3
    3ef6:	491a      	ldr	r1, [pc, #104]	; (3f60 <Print::printFloat(double, unsigned char)+0x158>)
    3ef8:	685b      	ldr	r3, [r3, #4]
    3efa:	b006      	add	sp, #24
    3efc:	ecbd 8b02 	vpop	{d8}
    3f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3f04:	4718      	bx	r3
    3f06:	6803      	ldr	r3, [r0, #0]
    3f08:	2203      	movs	r2, #3
    3f0a:	4916      	ldr	r1, [pc, #88]	; (3f64 <Print::printFloat(double, unsigned char)+0x15c>)
    3f0c:	e7f4      	b.n	3ef8 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    3f0e:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    3f12:	2301      	movs	r3, #1
    3f14:	e7a0      	b.n	3e58 <Print::printFloat(double, unsigned char)+0x50>
    3f16:	6803      	ldr	r3, [r0, #0]
    3f18:	2203      	movs	r2, #3
    3f1a:	4913      	ldr	r1, [pc, #76]	; (3f68 <Print::printFloat(double, unsigned char)+0x160>)
    3f1c:	e7ec      	b.n	3ef8 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    3f1e:	ee30 0b07 	vadd.f64	d0, d0, d7
    3f22:	220a      	movs	r2, #10
    3f24:	4628      	mov	r0, r5
    3f26:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    3f2a:	ee17 1a90 	vmov	r1, s15
}
    3f2e:	b006      	add	sp, #24
    3f30:	ecbd 8b02 	vpop	{d8}
    3f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3f38:	f7ff bec2 	b.w	3cc0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    3f3c:	f3af 8000 	nop.w
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	7fefffff 	.word	0x7fefffff
    3f48:	e0000000 	.word	0xe0000000
    3f4c:	41efffff 	.word	0x41efffff
    3f50:	e0000000 	.word	0xe0000000
    3f54:	c1efffff 	.word	0xc1efffff
    3f58:	9999999a 	.word	0x9999999a
    3f5c:	3fb99999 	.word	0x3fb99999
    3f60:	20000650 	.word	0x20000650
    3f64:	2000064c 	.word	0x2000064c
    3f68:	20000648 	.word	0x20000648

00003f6c <String::String(char const*)>:
String::String(const char *cstr)
    3f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer = NULL;
    3f6e:	2600      	movs	r6, #0
String::String(const char *cstr)
    3f70:	4604      	mov	r4, r0
	capacity = 0;
    3f72:	e9c0 6600 	strd	r6, r6, [r0]
	len = 0;
    3f76:	6086      	str	r6, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    3f78:	b129      	cbz	r1, 3f86 <String::String(char const*)+0x1a>
    3f7a:	4608      	mov	r0, r1
    3f7c:	460d      	mov	r5, r1
    3f7e:	f004 feff 	bl	8d80 <strlen>
	if (length == 0) {
    3f82:	4607      	mov	r7, r0
    3f84:	b908      	cbnz	r0, 3f8a <String::String(char const*)+0x1e>
}
    3f86:	4620      	mov	r0, r4
    3f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    3f8a:	3001      	adds	r0, #1
    3f8c:	f002 fcd0 	bl	6930 <malloc>
	if (newbuffer) {
    3f90:	2800      	cmp	r0, #0
    3f92:	d0f8      	beq.n	3f86 <String::String(char const*)+0x1a>
	strcpy(buffer, cstr);
    3f94:	4629      	mov	r1, r5
		if (len == 0) buffer[0] = 0;
    3f96:	7006      	strb	r6, [r0, #0]
		buffer = newbuffer;
    3f98:	6020      	str	r0, [r4, #0]
	len = length;
    3f9a:	e9c4 7701 	strd	r7, r7, [r4, #4]
	strcpy(buffer, cstr);
    3f9e:	f004 fe5d 	bl	8c5c <strcpy>
}
    3fa2:	4620      	mov	r0, r4
    3fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fa6:	bf00      	nop

00003fa8 <String::~String()>:
String::~String()
    3fa8:	b510      	push	{r4, lr}
    3faa:	4604      	mov	r4, r0
	free(buffer);
    3fac:	6800      	ldr	r0, [r0, #0]
    3fae:	f002 fcc7 	bl	6940 <free>
}
    3fb2:	4620      	mov	r0, r4
    3fb4:	bd10      	pop	{r4, pc}
    3fb6:	bf00      	nop

00003fb8 <String::copy(char const*, unsigned int)>:
{
    3fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fba:	4604      	mov	r4, r0
	if (length == 0) {
    3fbc:	4615      	mov	r5, r2
    3fbe:	b932      	cbnz	r2, 3fce <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    3fc0:	6803      	ldr	r3, [r0, #0]
    3fc2:	b103      	cbz	r3, 3fc6 <String::copy(char const*, unsigned int)+0xe>
    3fc4:	701a      	strb	r2, [r3, #0]
		len = 0;
    3fc6:	2300      	movs	r3, #0
}
    3fc8:	4620      	mov	r0, r4
		len = 0;
    3fca:	60a3      	str	r3, [r4, #8]
}
    3fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    3fce:	6843      	ldr	r3, [r0, #4]
    3fd0:	460e      	mov	r6, r1
    3fd2:	429a      	cmp	r2, r3
    3fd4:	d91c      	bls.n	4010 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    3fd6:	1c51      	adds	r1, r2, #1
    3fd8:	6800      	ldr	r0, [r0, #0]
    3fda:	f002 ff75 	bl	6ec8 <realloc>
	if (newbuffer) {
    3fde:	4607      	mov	r7, r0
    3fe0:	b160      	cbz	r0, 3ffc <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    3fe2:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    3fe4:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    3fe8:	b90b      	cbnz	r3, 3fee <String::copy(char const*, unsigned int)+0x36>
    3fea:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    3fec:	6827      	ldr	r7, [r4, #0]
    3fee:	4631      	mov	r1, r6
    3ff0:	4638      	mov	r0, r7
	len = length;
    3ff2:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    3ff4:	f004 fe32 	bl	8c5c <strcpy>
}
    3ff8:	4620      	mov	r0, r4
    3ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    3ffc:	6820      	ldr	r0, [r4, #0]
    3ffe:	b110      	cbz	r0, 4006 <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    4000:	f002 fc9e 	bl	6940 <free>
			buffer = NULL;
    4004:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    4006:	2300      	movs	r3, #0
}
    4008:	4620      	mov	r0, r4
		len = capacity = 0;
    400a:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    400e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    4010:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    4012:	4631      	mov	r1, r6
	len = length;
    4014:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    4016:	4638      	mov	r0, r7
    4018:	f004 fe20 	bl	8c5c <strcpy>
	return *this;
    401c:	e7ec      	b.n	3ff8 <String::copy(char const*, unsigned int)+0x40>
    401e:	bf00      	nop

00004020 <String::operator=(char const*)>:
{
    4020:	b538      	push	{r3, r4, r5, lr}
    4022:	4605      	mov	r5, r0
	if (cstr) {
    4024:	460c      	mov	r4, r1
    4026:	b149      	cbz	r1, 403c <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    4028:	4608      	mov	r0, r1
    402a:	f004 fea9 	bl	8d80 <strlen>
    402e:	4621      	mov	r1, r4
    4030:	4602      	mov	r2, r0
    4032:	4628      	mov	r0, r5
    4034:	f7ff ffc0 	bl	3fb8 <String::copy(char const*, unsigned int)>
}
    4038:	4628      	mov	r0, r5
    403a:	bd38      	pop	{r3, r4, r5, pc}
    403c:	4628      	mov	r0, r5
		len = 0;
    403e:	60a9      	str	r1, [r5, #8]
}
    4040:	bd38      	pop	{r3, r4, r5, pc}
    4042:	bf00      	nop

00004044 <String::trim()>:
	}
	return *this;
}

String & String::trim(void)
{
    4044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
    4048:	6807      	ldr	r7, [r0, #0]
{
    404a:	4606      	mov	r6, r0
	if (!buffer || len == 0) return *this;
    404c:	b1e7      	cbz	r7, 4088 <String::trim()+0x44>
    404e:	6884      	ldr	r4, [r0, #8]
    4050:	b1d4      	cbz	r4, 4088 <String::trim()+0x44>
    4052:	46b8      	mov	r8, r7
    4054:	4645      	mov	r5, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    4056:	f818 0b01 	ldrb.w	r0, [r8], #1
    405a:	f002 fc5d 	bl	6918 <isspace>
    405e:	2800      	cmp	r0, #0
    4060:	d1f8      	bne.n	4054 <String::trim()+0x10>
	char *end = buffer + len - 1;
    4062:	3c01      	subs	r4, #1
    4064:	443c      	add	r4, r7
	while (isspace(*end) && end >= begin) end--;
    4066:	e002      	b.n	406e <String::trim()+0x2a>
    4068:	42a5      	cmp	r5, r4
    406a:	d805      	bhi.n	4078 <String::trim()+0x34>
    406c:	3c01      	subs	r4, #1
    406e:	7820      	ldrb	r0, [r4, #0]
    4070:	f002 fc52 	bl	6918 <isspace>
    4074:	2800      	cmp	r0, #0
    4076:	d1f7      	bne.n	4068 <String::trim()+0x24>
	len = end + 1 - begin;
    4078:	1c62      	adds	r2, r4, #1
	if (begin > buffer) memcpy(buffer, begin, len);
    407a:	42af      	cmp	r7, r5
	len = end + 1 - begin;
    407c:	eba2 0205 	sub.w	r2, r2, r5
    4080:	60b2      	str	r2, [r6, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
    4082:	d304      	bcc.n	408e <String::trim()+0x4a>
	buffer[len] = 0;
    4084:	2300      	movs	r3, #0
    4086:	54bb      	strb	r3, [r7, r2]
	return *this;
}
    4088:	4630      	mov	r0, r6
    408a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (begin > buffer) memcpy(buffer, begin, len);
    408e:	4638      	mov	r0, r7
    4090:	4629      	mov	r1, r5
    4092:	f000 fd7b 	bl	4b8c <memcpy>
	buffer[len] = 0;
    4096:	6837      	ldr	r7, [r6, #0]
    4098:	68b2      	ldr	r2, [r6, #8]
    409a:	e7f3      	b.n	4084 <String::trim()+0x40>

0000409c <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    409c:	6800      	ldr	r0, [r0, #0]
    409e:	b108      	cbz	r0, 40a4 <String::toInt() const+0x8>
    40a0:	f002 bc42 	b.w	6928 <atol>
	return 0;
}
    40a4:	4770      	bx	lr
    40a6:	bf00      	nop

000040a8 <String::toFloat() const>:

float String::toFloat(void) const
{
	if (buffer) return strtof(buffer, (char **)NULL);
    40a8:	6800      	ldr	r0, [r0, #0]
    40aa:	b110      	cbz	r0, 40b2 <String::toFloat() const+0xa>
    40ac:	2100      	movs	r1, #0
    40ae:	f004 b843 	b.w	8138 <strtof>
	return 0.0;
}
    40b2:	ed9f 0a01 	vldr	s0, [pc, #4]	; 40b8 <String::toFloat() const+0x10>
    40b6:	4770      	bx	lr
    40b8:	00000000 	.word	0x00000000

000040bc <analogRead>:
	if (pin > sizeof(pin_to_channel)) return 0;
    40bc:	281c      	cmp	r0, #28
    40be:	d849      	bhi.n	4154 <analogRead+0x98>
{
    40c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (calibrating) wait_for_cal();
    40c2:	4f25      	ldr	r7, [pc, #148]	; (4158 <analogRead+0x9c>)
    40c4:	4604      	mov	r4, r0
    40c6:	783b      	ldrb	r3, [r7, #0]
    40c8:	b9e3      	cbnz	r3, 4104 <analogRead+0x48>
	uint8_t ch = pin_to_channel[pin];
    40ca:	4b24      	ldr	r3, [pc, #144]	; (415c <analogRead+0xa0>)
    40cc:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    40ce:	2bff      	cmp	r3, #255	; 0xff
    40d0:	d029      	beq.n	4126 <analogRead+0x6a>
	volatile uint32_t *pad = portControlRegister(pin);
    40d2:	4a23      	ldr	r2, [pc, #140]	; (4160 <analogRead+0xa4>)
    40d4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    40d8:	6891      	ldr	r1, [r2, #8]
	uint32_t padval = *pad;
    40da:	680a      	ldr	r2, [r1, #0]
	if ((padval & (IOMUXC_PAD_PUE | IOMUXC_PAD_PKE)) == IOMUXC_PAD_PKE) {
    40dc:	f402 5040 	and.w	r0, r2, #12288	; 0x3000
    40e0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    40e4:	d030      	beq.n	4148 <analogRead+0x8c>
	if(!(ch & 0x80)) {
    40e6:	061c      	lsls	r4, r3, #24
    40e8:	d41f      	bmi.n	412a <analogRead+0x6e>
		ADC1_HC0 = ch;
    40ea:	4c1e      	ldr	r4, [pc, #120]	; (4164 <analogRead+0xa8>)
    40ec:	6023      	str	r3, [r4, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    40ee:	6a23      	ldr	r3, [r4, #32]
    40f0:	07d8      	lsls	r0, r3, #31
    40f2:	d404      	bmi.n	40fe <analogRead+0x42>
			yield(); // TODO: what happens if yield-called code uses analogRead()
    40f4:	f002 fa0e 	bl	6514 <yield>
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    40f8:	6a23      	ldr	r3, [r4, #32]
    40fa:	07d9      	lsls	r1, r3, #31
    40fc:	d5fa      	bpl.n	40f4 <analogRead+0x38>
		return ADC1_R0;
    40fe:	4b19      	ldr	r3, [pc, #100]	; (4164 <analogRead+0xa8>)
    4100:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    4102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    4104:	4d17      	ldr	r5, [pc, #92]	; (4164 <analogRead+0xa8>)
    4106:	4e18      	ldr	r6, [pc, #96]	; (4168 <analogRead+0xac>)
    4108:	e001      	b.n	410e <analogRead+0x52>
		yield();
    410a:	f002 fa03 	bl	6514 <yield>
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    410e:	6cab      	ldr	r3, [r5, #72]	; 0x48
    4110:	061b      	lsls	r3, r3, #24
    4112:	d4fa      	bmi.n	410a <analogRead+0x4e>
    4114:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    4116:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    411a:	d1f6      	bne.n	410a <analogRead+0x4e>
	calibrating = 0;
    411c:	703b      	strb	r3, [r7, #0]
	uint8_t ch = pin_to_channel[pin];
    411e:	4b0f      	ldr	r3, [pc, #60]	; (415c <analogRead+0xa0>)
    4120:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    4122:	2bff      	cmp	r3, #255	; 0xff
    4124:	d1d5      	bne.n	40d2 <analogRead+0x16>
	if (pin > sizeof(pin_to_channel)) return 0;
    4126:	2000      	movs	r0, #0
}
    4128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ADC2_HC0 = ch & 0x7f;
    412a:	4c0f      	ldr	r4, [pc, #60]	; (4168 <analogRead+0xac>)
    412c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4130:	6023      	str	r3, [r4, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    4132:	6a23      	ldr	r3, [r4, #32]
    4134:	07da      	lsls	r2, r3, #31
    4136:	d404      	bmi.n	4142 <analogRead+0x86>
			yield(); // TODO: what happens if yield-called code uses analogRead()
    4138:	f002 f9ec 	bl	6514 <yield>
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    413c:	6a23      	ldr	r3, [r4, #32]
    413e:	07db      	lsls	r3, r3, #31
    4140:	d5fa      	bpl.n	4138 <analogRead+0x7c>
		return ADC2_R0;
    4142:	4b09      	ldr	r3, [pc, #36]	; (4168 <analogRead+0xac>)
    4144:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    4146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*pad = padval & ~IOMUXC_PAD_PKE;
    4148:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
	if(!(ch & 0x80)) {
    414c:	061c      	lsls	r4, r3, #24
		*pad = padval & ~IOMUXC_PAD_PKE;
    414e:	600a      	str	r2, [r1, #0]
	if(!(ch & 0x80)) {
    4150:	d4eb      	bmi.n	412a <analogRead+0x6e>
    4152:	e7ca      	b.n	40ea <analogRead+0x2e>
	if (pin > sizeof(pin_to_channel)) return 0;
    4154:	2000      	movs	r0, #0
}
    4156:	4770      	bx	lr
    4158:	2000aff3 	.word	0x2000aff3
    415c:	2000781c 	.word	0x2000781c
    4160:	20007568 	.word	0x20007568
    4164:	400c4000 	.word	0x400c4000
    4168:	400c8000 	.word	0x400c8000

0000416c <analogReadRes>:
   if (bits == 8) {
    416c:	2808      	cmp	r0, #8
{
    416e:	b430      	push	{r4, r5}
   if (bits == 8) {
    4170:	d022      	beq.n	41b8 <analogReadRes+0x4c>
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
    4172:	280a      	cmp	r0, #10
    4174:	bf0c      	ite	eq
    4176:	f44f 7105 	moveq.w	r1, #532	; 0x214
    417a:	f44f 7146 	movne.w	r1, #792	; 0x318
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    417e:	4c10      	ldr	r4, [pc, #64]	; (41c0 <analogReadRes+0x54>)
    4180:	4d10      	ldr	r5, [pc, #64]	; (41c4 <analogReadRes+0x58>)
    4182:	6c63      	ldr	r3, [r4, #68]	; 0x44
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    4184:	6c62      	ldr	r2, [r4, #68]	; 0x44
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    4186:	402b      	ands	r3, r5
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    4188:	480f      	ldr	r0, [pc, #60]	; (41c8 <analogReadRes+0x5c>)
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    418a:	f002 0203 	and.w	r2, r2, #3
    418e:	431a      	orrs	r2, r3
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
    4190:	6c63      	ldr	r3, [r4, #68]	; 0x44
    4192:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    4196:	4313      	orrs	r3, r2
  tmp32 |= mode; 
    4198:	430b      	orrs	r3, r1
  ADC1_CFG = tmp32;
    419a:	6463      	str	r3, [r4, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    419c:	6c43      	ldr	r3, [r0, #68]	; 0x44
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    419e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    41a0:	402b      	ands	r3, r5
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    41a2:	f002 0203 	and.w	r2, r2, #3
    41a6:	431a      	orrs	r2, r3
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
    41a8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    41aa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    41ae:	4313      	orrs	r3, r2
  tmp32 |= mode; 
    41b0:	4319      	orrs	r1, r3
}
    41b2:	bc30      	pop	{r4, r5}
  ADC2_CFG = tmp32;
    41b4:	6441      	str	r1, [r0, #68]	; 0x44
}
    41b6:	4770      	bx	lr
    mode = ADC_CFG_MODE(0) | ADC_CFG_ADSTS(3);
    41b8:	f44f 7140 	mov.w	r1, #768	; 0x300
    41bc:	e7df      	b.n	417e <analogReadRes+0x12>
    41be:	bf00      	nop
    41c0:	400c4000 	.word	0x400c4000
    41c4:	fffffc00 	.word	0xfffffc00
    41c8:	400c8000 	.word	0x400c8000

000041cc <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    41cc:	49a2      	ldr	r1, [pc, #648]	; (4458 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    41ce:	4ba3      	ldr	r3, [pc, #652]	; (445c <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    41d0:	4288      	cmp	r0, r1
{
    41d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    41d6:	4ca2      	ldr	r4, [pc, #648]	; (4460 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    41d8:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    41da:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    41dc:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    41e0:	d91b      	bls.n	421a <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    41e2:	4ba0      	ldr	r3, [pc, #640]	; (4464 <set_arm_clock+0x298>)
    41e4:	4298      	cmp	r0, r3
    41e6:	f240 8102 	bls.w	43ee <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    41ea:	1ac3      	subs	r3, r0, r3
    41ec:	499e      	ldr	r1, [pc, #632]	; (4468 <set_arm_clock+0x29c>)
    41ee:	0a1b      	lsrs	r3, r3, #8
    41f0:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    41f4:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    41f8:	09db      	lsrs	r3, r3, #7
    41fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    41fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4202:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    4206:	428b      	cmp	r3, r1
    4208:	bf28      	it	cs
    420a:	460b      	movcs	r3, r1
    420c:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    4210:	4b96      	ldr	r3, [pc, #600]	; (446c <set_arm_clock+0x2a0>)
    4212:	fba3 3707 	umull	r3, r7, r3, r7
    4216:	08ff      	lsrs	r7, r7, #3
    4218:	e004      	b.n	4224 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    421a:	4f95      	ldr	r7, [pc, #596]	; (4470 <set_arm_clock+0x2a4>)
    421c:	42b8      	cmp	r0, r7
    421e:	bf8c      	ite	hi
    4220:	270e      	movhi	r7, #14
    4222:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    4224:	498d      	ldr	r1, [pc, #564]	; (445c <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    4226:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    422a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    422e:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    4230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    4234:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    4238:	d20c      	bcs.n	4254 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    423a:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    423e:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    4242:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    4246:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    424a:	680b      	ldr	r3, [r1, #0]
    424c:	2b00      	cmp	r3, #0
    424e:	dafc      	bge.n	424a <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    4250:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    4254:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    4258:	d124      	bne.n	42a4 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    425a:	4986      	ldr	r1, [pc, #536]	; (4474 <set_arm_clock+0x2a8>)
    425c:	690c      	ldr	r4, [r1, #16]
    425e:	4986      	ldr	r1, [pc, #536]	; (4478 <set_arm_clock+0x2ac>)
    4260:	43a1      	bics	r1, r4
    4262:	f000 80ea 	beq.w	443a <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    4266:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    426a:	4634      	mov	r4, r6
    426c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    4270:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    4274:	d004      	beq.n	4280 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    4276:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    427a:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    427c:	4b77      	ldr	r3, [pc, #476]	; (445c <set_arm_clock+0x290>)
    427e:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    4280:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    4284:	d007      	beq.n	4296 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    4286:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    428a:	4974      	ldr	r1, [pc, #464]	; (445c <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    428c:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    428e:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    4290:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    4292:	071a      	lsls	r2, r3, #28
    4294:	d4fc      	bmi.n	4290 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    4296:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    429a:	4a70      	ldr	r2, [pc, #448]	; (445c <set_arm_clock+0x290>)
    429c:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    429e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    42a0:	069b      	lsls	r3, r3, #26
    42a2:	d4fc      	bmi.n	429e <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    42a4:	4c75      	ldr	r4, [pc, #468]	; (447c <set_arm_clock+0x2b0>)
    42a6:	42a0      	cmp	r0, r4
    42a8:	f200 80ce 	bhi.w	4448 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    42ac:	f04f 0c01 	mov.w	ip, #1
    42b0:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    42b2:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    42b4:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    42b8:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    42bc:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    42c0:	42a2      	cmp	r2, r4
    42c2:	d818      	bhi.n	42f6 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    42c4:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    42c8:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    42cc:	f040 808d 	bne.w	43ea <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    42d0:	f1bc 0f04 	cmp.w	ip, #4
    42d4:	f200 8091 	bhi.w	43fa <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    42d8:	180a      	adds	r2, r1, r0
    42da:	42a2      	cmp	r2, r4
    42dc:	f200 80a4 	bhi.w	4428 <set_arm_clock+0x25c>
    42e0:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    42e4:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    42e6:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    42ea:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    42ee:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    42f2:	42a2      	cmp	r2, r4
    42f4:	d9e6      	bls.n	42c4 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    42f6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    42fa:	028c      	lsls	r4, r1, #10
    42fc:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    4300:	485f      	ldr	r0, [pc, #380]	; (4480 <set_arm_clock+0x2b4>)
    4302:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    4304:	4a5f      	ldr	r2, [pc, #380]	; (4484 <set_arm_clock+0x2b8>)
    4306:	4290      	cmp	r0, r2
    4308:	d97f      	bls.n	440a <set_arm_clock+0x23e>
    430a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 44b0 <set_arm_clock+0x2e4>
    430e:	226c      	movs	r2, #108	; 0x6c
    4310:	485d      	ldr	r0, [pc, #372]	; (4488 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    4312:	4d58      	ldr	r5, [pc, #352]	; (4474 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    4314:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    4318:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    431c:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    4320:	f8df c190 	ldr.w	ip, [pc, #400]	; 44b4 <set_arm_clock+0x2e8>
    4324:	ea0e 0c0c 	and.w	ip, lr, ip
    4328:	45d4      	cmp	ip, sl
    432a:	d009      	beq.n	4340 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    432c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    4330:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    4334:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    4338:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    433a:	682a      	ldr	r2, [r5, #0]
    433c:	2a00      	cmp	r2, #0
    433e:	dafc      	bge.n	433a <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    4340:	4a46      	ldr	r2, [pc, #280]	; (445c <set_arm_clock+0x290>)
    4342:	6915      	ldr	r5, [r2, #16]
    4344:	f005 0507 	and.w	r5, r5, #7
    4348:	429d      	cmp	r5, r3
    434a:	d003      	beq.n	4354 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    434c:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    434e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    4350:	03dd      	lsls	r5, r3, #15
    4352:	d4fc      	bmi.n	434e <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    4354:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    4358:	d009      	beq.n	436e <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    435a:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    435e:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    4362:	4a3e      	ldr	r2, [pc, #248]	; (445c <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    4364:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    4366:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    4368:	6c93      	ldr	r3, [r2, #72]	; 0x48
    436a:	0799      	lsls	r1, r3, #30
    436c:	d4fc      	bmi.n	4368 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    436e:	4947      	ldr	r1, [pc, #284]	; (448c <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    4370:	4a47      	ldr	r2, [pc, #284]	; (4490 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    4372:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    4374:	4291      	cmp	r1, r2
    4376:	d83c      	bhi.n	43f2 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    4378:	4b46      	ldr	r3, [pc, #280]	; (4494 <set_arm_clock+0x2c8>)
    437a:	09c9      	lsrs	r1, r1, #7
    437c:	fba3 3101 	umull	r3, r1, r3, r1
    4380:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    4382:	1e4b      	subs	r3, r1, #1
    4384:	021b      	lsls	r3, r3, #8
    4386:	ea86 0203 	eor.w	r2, r6, r3
    438a:	f412 7f40 	tst.w	r2, #768	; 0x300
    438e:	d006      	beq.n	439e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    4390:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    4394:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    4398:	4a30      	ldr	r2, [pc, #192]	; (445c <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    439a:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    439c:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    439e:	4a2f      	ldr	r2, [pc, #188]	; (445c <set_arm_clock+0x290>)
    43a0:	6953      	ldr	r3, [r2, #20]
    43a2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    43a6:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    43a8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    43aa:	069b      	lsls	r3, r3, #26
    43ac:	d4fc      	bmi.n	43a8 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    43ae:	4b3a      	ldr	r3, [pc, #232]	; (4498 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    43b0:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    43b2:	fba3 2300 	umull	r2, r3, r3, r0
    43b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    43ba:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    43be:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    43c2:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    43c6:	4a35      	ldr	r2, [pc, #212]	; (449c <set_arm_clock+0x2d0>)
    43c8:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    43ca:	4a35      	ldr	r2, [pc, #212]	; (44a0 <set_arm_clock+0x2d4>)
    43cc:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    43ce:	4a35      	ldr	r2, [pc, #212]	; (44a4 <set_arm_clock+0x2d8>)
    43d0:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    43d2:	d208      	bcs.n	43e6 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    43d4:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    43d8:	4a21      	ldr	r2, [pc, #132]	; (4460 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    43da:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    43de:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    43e0:	6813      	ldr	r3, [r2, #0]
    43e2:	2b00      	cmp	r3, #0
    43e4:	dafc      	bge.n	43e0 <set_arm_clock+0x214>
	}

	return frequency;
}
    43e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    43ea:	4673      	mov	r3, lr
    43ec:	e762      	b.n	42b4 <set_arm_clock+0xe8>
    43ee:	2712      	movs	r7, #18
    43f0:	e718      	b.n	4224 <set_arm_clock+0x58>
    43f2:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    43f6:	2104      	movs	r1, #4
    43f8:	e7c5      	b.n	4386 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    43fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    43fe:	4820      	ldr	r0, [pc, #128]	; (4480 <set_arm_clock+0x2b4>)
    4400:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    4402:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    4404:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    4406:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    440a:	4a27      	ldr	r2, [pc, #156]	; (44a8 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    440c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 44b8 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    4410:	fba2 2000 	umull	r2, r0, r2, r0
    4414:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    4416:	4825      	ldr	r0, [pc, #148]	; (44ac <set_arm_clock+0x2e0>)
    4418:	2a36      	cmp	r2, #54	; 0x36
    441a:	bf38      	it	cc
    441c:	2236      	movcc	r2, #54	; 0x36
    441e:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    4422:	ea42 0a0a 	orr.w	sl, r2, sl
    4426:	e774      	b.n	4312 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    4428:	ea4f 248c 	mov.w	r4, ip, lsl #10
    442c:	2300      	movs	r3, #0
    442e:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    4432:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    4436:	46ac      	mov	ip, r5
    4438:	e762      	b.n	4300 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    443a:	461d      	mov	r5, r3
    443c:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    4440:	4611      	mov	r1, r2
    4442:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    4446:	e713      	b.n	4270 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    4448:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    444a:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    444e:	4602      	mov	r2, r0
    4450:	4631      	mov	r1, r6
    4452:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    4454:	46e6      	mov	lr, ip
    4456:	e753      	b.n	4300 <set_arm_clock+0x134>
    4458:	1f78a400 	.word	0x1f78a400
    445c:	400fc000 	.word	0x400fc000
    4460:	40080000 	.word	0x40080000
    4464:	23c34600 	.word	0x23c34600
    4468:	004cb223 	.word	0x004cb223
    446c:	51eb851f 	.word	0x51eb851f
    4470:	016e3600 	.word	0x016e3600
    4474:	400d8000 	.word	0x400d8000
    4478:	80003040 	.word	0x80003040
    447c:	269fb1ff 	.word	0x269fb1ff
    4480:	005b8d80 	.word	0x005b8d80
    4484:	4df67eff 	.word	0x4df67eff
    4488:	4d3f6400 	.word	0x4d3f6400
    448c:	08f0d17f 	.word	0x08f0d17f
    4490:	2cb4177f 	.word	0x2cb4177f
    4494:	00e5109f 	.word	0x00e5109f
    4498:	431bde83 	.word	0x431bde83
    449c:	20008104 	.word	0x20008104
    44a0:	20008100 	.word	0x20008100
    44a4:	2000adf8 	.word	0x2000adf8
    44a8:	165e9f81 	.word	0x165e9f81
    44ac:	00b71b00 	.word	0x00b71b00
    44b0:	8000206c 	.word	0x8000206c
    44b4:	8001307f 	.word	0x8001307f
    44b8:	80002000 	.word	0x80002000

000044bc <delay>:
	if (msec == 0) return;
    44bc:	b900      	cbnz	r0, 44c0 <delay+0x4>
    44be:	4770      	bx	lr
{
    44c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    44c4:	2101      	movs	r1, #1
    44c6:	4681      	mov	r9, r0
    44c8:	4c21      	ldr	r4, [pc, #132]	; (4550 <delay+0x94>)
    44ca:	4d22      	ldr	r5, [pc, #136]	; (4554 <delay+0x98>)
    44cc:	4e22      	ldr	r6, [pc, #136]	; (4558 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    44ce:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    44d2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    44d4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    44d6:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    44da:	2b00      	cmp	r3, #0
    44dc:	d1f7      	bne.n	44ce <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    44de:	491f      	ldr	r1, [pc, #124]	; (455c <delay+0xa0>)
    44e0:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    44e2:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    44e6:	f8df a078 	ldr.w	sl, [pc, #120]	; 4560 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    44ea:	1a1b      	subs	r3, r3, r0
    44ec:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    44ee:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    44f2:	f8da 2000 	ldr.w	r2, [sl]
    44f6:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    44fa:	455a      	cmp	r2, fp
    44fc:	bf94      	ite	ls
    44fe:	4490      	addls	r8, r2
    4500:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    4502:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    4506:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    4508:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    450a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    450e:	2b00      	cmp	r3, #0
    4510:	d1f7      	bne.n	4502 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    4512:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    4514:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    4518:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    451a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    451e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    4522:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    4526:	bf94      	ite	ls
    4528:	4462      	addls	r2, ip
    452a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    452e:	eba2 0208 	sub.w	r2, r2, r8
    4532:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    4536:	d306      	bcc.n	4546 <delay+0x8a>
			if (--msec == 0) return;
    4538:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    453c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    4540:	d1df      	bne.n	4502 <delay+0x46>
}
    4542:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    4546:	f001 ffe5 	bl	6514 <yield>
		while ((micros() - start) >= 1000) {
    454a:	4904      	ldr	r1, [pc, #16]	; (455c <delay+0xa0>)
    454c:	e7d9      	b.n	4502 <delay+0x46>
    454e:	bf00      	nop
    4550:	2000ae48 	.word	0x2000ae48
    4554:	2000ae44 	.word	0x2000ae44
    4558:	2000ae40 	.word	0x2000ae40
    455c:	e0001000 	.word	0xe0001000
    4560:	2000adf8 	.word	0x2000adf8

00004564 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    4564:	2827      	cmp	r0, #39	; 0x27
    4566:	d816      	bhi.n	4596 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    4568:	0102      	lsls	r2, r0, #4
    456a:	4b10      	ldr	r3, [pc, #64]	; (45ac <digitalWrite+0x48>)
    456c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    4570:	589b      	ldr	r3, [r3, r2]
{
    4572:	b410      	push	{r4}
	mask = p->mask;
    4574:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    4576:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    4578:	4214      	tst	r4, r2
    457a:	d005      	beq.n	4588 <digitalWrite+0x24>
		if (val) {
    457c:	b961      	cbnz	r1, 4598 <digitalWrite+0x34>
		}
	}
}
    457e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    4582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    4586:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    4588:	6883      	ldr	r3, [r0, #8]
		if (val) {
    458a:	b151      	cbz	r1, 45a2 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    458c:	4a08      	ldr	r2, [pc, #32]	; (45b0 <digitalWrite+0x4c>)
}
    458e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    4592:	601a      	str	r2, [r3, #0]
}
    4594:	4770      	bx	lr
    4596:	4770      	bx	lr
    4598:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    459c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    45a0:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    45a2:	4a04      	ldr	r2, [pc, #16]	; (45b4 <digitalWrite+0x50>)
}
    45a4:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    45a8:	601a      	str	r2, [r3, #0]
}
    45aa:	4770      	bx	lr
    45ac:	20007568 	.word	0x20007568
    45b0:	0001f038 	.word	0x0001f038
    45b4:	00013038 	.word	0x00013038

000045b8 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    45b8:	2827      	cmp	r0, #39	; 0x27
    45ba:	d80b      	bhi.n	45d4 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    45bc:	4b06      	ldr	r3, [pc, #24]	; (45d8 <digitalRead+0x20>)
    45be:	0102      	lsls	r2, r0, #4
    45c0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    45c4:	589a      	ldr	r2, [r3, r2]
    45c6:	68c3      	ldr	r3, [r0, #12]
    45c8:	6892      	ldr	r2, [r2, #8]
    45ca:	421a      	tst	r2, r3
    45cc:	bf14      	ite	ne
    45ce:	2001      	movne	r0, #1
    45d0:	2000      	moveq	r0, #0
    45d2:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    45d4:	2000      	movs	r0, #0
}
    45d6:	4770      	bx	lr
    45d8:	20007568 	.word	0x20007568

000045dc <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    45dc:	2827      	cmp	r0, #39	; 0x27
    45de:	d829      	bhi.n	4634 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    45e0:	4b16      	ldr	r3, [pc, #88]	; (463c <pinMode+0x60>)
    45e2:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    45e4:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    45e6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    45ea:	589a      	ldr	r2, [r3, r2]
{
    45ec:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    45ee:	6853      	ldr	r3, [r2, #4]
    45f0:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    45f2:	d00e      	beq.n	4612 <pinMode+0x36>
    45f4:	2904      	cmp	r1, #4
    45f6:	d00c      	beq.n	4612 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    45f8:	ea23 0304 	bic.w	r3, r3, r4
    45fc:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    45fe:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    4600:	b1a9      	cbz	r1, 462e <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    4602:	2902      	cmp	r1, #2
    4604:	d017      	beq.n	4636 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    4606:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    4608:	bf0c      	ite	eq
    460a:	4a0d      	ldreq	r2, [pc, #52]	; (4640 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    460c:	4a0d      	ldrne	r2, [pc, #52]	; (4644 <pinMode+0x68>)
    460e:	601a      	str	r2, [r3, #0]
    4610:	e007      	b.n	4622 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    4612:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    4614:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    4616:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    4618:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    461a:	d008      	beq.n	462e <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    461c:	f640 0238 	movw	r2, #2104	; 0x838
    4620:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    4622:	6843      	ldr	r3, [r0, #4]
    4624:	2215      	movs	r2, #21
}
    4626:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    462a:	601a      	str	r2, [r3, #0]
}
    462c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    462e:	2238      	movs	r2, #56	; 0x38
    4630:	601a      	str	r2, [r3, #0]
    4632:	e7f6      	b.n	4622 <pinMode+0x46>
    4634:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    4636:	4a04      	ldr	r2, [pc, #16]	; (4648 <pinMode+0x6c>)
    4638:	601a      	str	r2, [r3, #0]
    463a:	e7f2      	b.n	4622 <pinMode+0x46>
    463c:	20007568 	.word	0x20007568
    4640:	00013038 	.word	0x00013038
    4644:	00010038 	.word	0x00010038
    4648:	0001f038 	.word	0x0001f038

0000464c <flash_wait>:
{
    464c:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    464e:	4a12      	ldr	r2, [pc, #72]	; (4698 <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
    4650:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    4652:	4b12      	ldr	r3, [pc, #72]	; (469c <flash_wait+0x50>)
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    4654:	2101      	movs	r1, #1
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    4656:	4d12      	ldr	r5, [pc, #72]	; (46a0 <flash_wait+0x54>)
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    4658:	4c12      	ldr	r4, [pc, #72]	; (46a4 <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    465a:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    465e:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    4662:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    4666:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    466a:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    466e:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    4672:	6953      	ldr	r3, [r2, #20]
    4674:	07db      	lsls	r3, r3, #31
    4676:	d5fc      	bpl.n	4672 <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    4678:	6151      	str	r1, [r2, #20]
	} while (status & 1);
    467a:	7823      	ldrb	r3, [r4, #0]
    467c:	07db      	lsls	r3, r3, #31
    467e:	d4f0      	bmi.n	4662 <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    4680:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    4682:	4905      	ldr	r1, [pc, #20]	; (4698 <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    4684:	f043 0301 	orr.w	r3, r3, #1
    4688:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    468a:	680b      	ldr	r3, [r1, #0]
    468c:	07db      	lsls	r3, r3, #31
    468e:	d4fc      	bmi.n	468a <flash_wait+0x3e>
	__enable_irq();
    4690:	b662      	cpsie	i
}
    4692:	bc30      	pop	{r4, r5}
    4694:	4770      	bx	lr
    4696:	bf00      	nop
    4698:	402a8000 	.word	0x402a8000
    469c:	24010405 	.word	0x24010405
    46a0:	000f0001 	.word	0x000f0001
    46a4:	402a8100 	.word	0x402a8100

000046a8 <eeprom_initialize>:
{
    46a8:	b570      	push	{r4, r5, r6, lr}
    46aa:	4c0e      	ldr	r4, [pc, #56]	; (46e4 <eeprom_initialize+0x3c>)
			if (*p++ == 0xFFFF) break;
    46ac:	f64f 7eff 	movw	lr, #65535	; 0xffff
{
    46b0:	4e0d      	ldr	r6, [pc, #52]	; (46e8 <eeprom_initialize+0x40>)
    46b2:	f104 051e 	add.w	r5, r4, #30
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    46b6:	f5a6 5380 	sub.w	r3, r6, #4096	; 0x1000
		uint16_t index = 0;
    46ba:	2100      	movs	r1, #0
    46bc:	e002      	b.n	46c4 <eeprom_initialize+0x1c>
		} while (p < end);
    46be:	42b3      	cmp	r3, r6
			index++;
    46c0:	b281      	uxth	r1, r0
		} while (p < end);
    46c2:	d204      	bcs.n	46ce <eeprom_initialize+0x26>
			if (*p++ == 0xFFFF) break;
    46c4:	881a      	ldrh	r2, [r3, #0]
			index++;
    46c6:	1c48      	adds	r0, r1, #1
			if (*p++ == 0xFFFF) break;
    46c8:	3302      	adds	r3, #2
    46ca:	4572      	cmp	r2, lr
    46cc:	d1f7      	bne.n	46be <eeprom_initialize+0x16>
		sector_index[sector] = index;
    46ce:	f824 1f02 	strh.w	r1, [r4, #2]!
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    46d2:	42ac      	cmp	r4, r5
    46d4:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
    46d8:	d1ed      	bne.n	46b6 <eeprom_initialize+0xe>
	initialized = 1;
    46da:	4b04      	ldr	r3, [pc, #16]	; (46ec <eeprom_initialize+0x44>)
    46dc:	2201      	movs	r2, #1
    46de:	701a      	strb	r2, [r3, #0]
}
    46e0:	bd70      	pop	{r4, r5, r6, pc}
    46e2:	bf00      	nop
    46e4:	2000ae16 	.word	0x2000ae16
    46e8:	601f1000 	.word	0x601f1000
    46ec:	2000aff5 	.word	0x2000aff5

000046f0 <eeprom_read_byte>:
	if (addr > E2END) return 0xFF;
    46f0:	f5b0 6f87 	cmp.w	r0, #1080	; 0x438
    46f4:	d22c      	bcs.n	4750 <eeprom_read_byte+0x60>
	if (!initialized) eeprom_initialize();
    46f6:	4b17      	ldr	r3, [pc, #92]	; (4754 <eeprom_read_byte+0x64>)
{
    46f8:	b510      	push	{r4, lr}
	if (!initialized) eeprom_initialize();
    46fa:	781b      	ldrb	r3, [r3, #0]
    46fc:	4604      	mov	r4, r0
    46fe:	b323      	cbz	r3, 474a <eeprom_read_byte+0x5a>
	sector = (addr >> 2) % FLASH_SECTORS;
    4700:	08a0      	lsrs	r0, r4, #2
    4702:	4b15      	ldr	r3, [pc, #84]	; (4758 <eeprom_read_byte+0x68>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    4704:	f004 0103 	and.w	r1, r4, #3
	end = p + sector_index[sector];
    4708:	4c14      	ldr	r4, [pc, #80]	; (475c <eeprom_read_byte+0x6c>)
	sector = (addr >> 2) % FLASH_SECTORS;
    470a:	fba3 2300 	umull	r2, r3, r3, r0
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    470e:	4a14      	ldr	r2, [pc, #80]	; (4760 <eeprom_read_byte+0x70>)
	sector = (addr >> 2) % FLASH_SECTORS;
    4710:	08db      	lsrs	r3, r3, #3
    4712:	ebc3 1e03 	rsb	lr, r3, r3, lsl #4
    4716:	469c      	mov	ip, r3
    4718:	eba0 030e 	sub.w	r3, r0, lr
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    471c:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
	uint8_t data=0xFF;
    4720:	20ff      	movs	r0, #255	; 0xff
	end = p + sector_index[sector];
    4722:	f834 c013 	ldrh.w	ip, [r4, r3, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    4726:	441a      	add	r2, r3
	end = p + sector_index[sector];
    4728:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    472c:	0313      	lsls	r3, r2, #12
	end = p + sector_index[sector];
    472e:	eb0c 3c02 	add.w	ip, ip, r2, lsl #12
	while (p < end) {
    4732:	ebbc 3f02 	cmp.w	ip, r2, lsl #12
    4736:	d907      	bls.n	4748 <eeprom_read_byte+0x58>
		uint32_t val = *p++;
    4738:	881a      	ldrh	r2, [r3, #0]
    473a:	3302      	adds	r3, #2
		if ((val & 255) == offset) data = val >> 8;
    473c:	b2d4      	uxtb	r4, r2
    473e:	428c      	cmp	r4, r1
    4740:	bf08      	it	eq
    4742:	0a10      	lsreq	r0, r2, #8
	while (p < end) {
    4744:	459c      	cmp	ip, r3
    4746:	d8f7      	bhi.n	4738 <eeprom_read_byte+0x48>
}
    4748:	bd10      	pop	{r4, pc}
	if (!initialized) eeprom_initialize();
    474a:	f7ff ffad 	bl	46a8 <eeprom_initialize>
    474e:	e7d7      	b.n	4700 <eeprom_read_byte+0x10>
	if (addr > E2END) return 0xFF;
    4750:	20ff      	movs	r0, #255	; 0xff
}
    4752:	4770      	bx	lr
    4754:	2000aff5 	.word	0x2000aff5
    4758:	88888889 	.word	0x88888889
    475c:	2000ae18 	.word	0x2000ae18
    4760:	000601f0 	.word	0x000601f0

00004764 <eepromemu_flash_write>:
{
    4764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4766:	460f      	mov	r7, r1
    4768:	4616      	mov	r6, r2
	__disable_irq();
    476a:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    476c:	4b34      	ldr	r3, [pc, #208]	; (4840 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    476e:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    4772:	4a34      	ldr	r2, [pc, #208]	; (4844 <eepromemu_flash_write+0xe0>)
    4774:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    4776:	2202      	movs	r2, #2
    4778:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    477a:	2200      	movs	r2, #0
    477c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    4780:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    4784:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    4788:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    478c:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    4790:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    4794:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    4798:	2201      	movs	r2, #1
    479a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    479e:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
    47a2:	1982      	adds	r2, r0, r6
	asm volatile("": : :"memory");
	asm("dsb");
    47a4:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    47a8:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    47ac:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
    47b0:	3320      	adds	r3, #32
	} while (location < end_addr);
    47b2:	429a      	cmp	r2, r3
    47b4:	d8fa      	bhi.n	47ac <eepromemu_flash_write+0x48>
	asm("dsb");
    47b6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    47ba:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    47be:	4d20      	ldr	r5, [pc, #128]	; (4840 <eepromemu_flash_write+0xdc>)
    47c0:	696b      	ldr	r3, [r5, #20]
    47c2:	07da      	lsls	r2, r3, #31
    47c4:	d5fc      	bpl.n	47c0 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    47c6:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    47c8:	491f      	ldr	r1, [pc, #124]	; (4848 <eepromemu_flash_write+0xe4>)
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    47ca:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    47cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    47d0:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    47d2:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    47d6:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    47da:	f242 2101 	movw	r1, #8705	; 0x2201
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    47de:	4c18      	ldr	r4, [pc, #96]	; (4840 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    47e0:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    47e4:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    47e8:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    47ec:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    47f0:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    47f4:	4d15      	ldr	r5, [pc, #84]	; (484c <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    47f6:	e001      	b.n	47fc <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
    47f8:	065b      	lsls	r3, r3, #25
    47fa:	d409      	bmi.n	4810 <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    47fc:	6963      	ldr	r3, [r4, #20]
    47fe:	f013 0001 	ands.w	r0, r3, #1
    4802:	d0f9      	beq.n	47f8 <eepromemu_flash_write+0x94>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    4804:	2341      	movs	r3, #65	; 0x41
    4806:	6163      	str	r3, [r4, #20]
}
    4808:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
    480c:	f7ff bf1e 	b.w	464c <flash_wait>
			if (wrlen > 8) wrlen = 8;
    4810:	2e08      	cmp	r6, #8
    4812:	d80a      	bhi.n	482a <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    4814:	b136      	cbz	r6, 4824 <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    4816:	4632      	mov	r2, r6
    4818:	4639      	mov	r1, r7
				src += wrlen;
    481a:	4437      	add	r7, r6
				len -= wrlen;
    481c:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    481e:	4628      	mov	r0, r5
    4820:	f000 f9b4 	bl	4b8c <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    4824:	2340      	movs	r3, #64	; 0x40
    4826:	6163      	str	r3, [r4, #20]
    4828:	e7e8      	b.n	47fc <eepromemu_flash_write+0x98>
    482a:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
    482e:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    4830:	4639      	mov	r1, r7
    4832:	4632      	mov	r2, r6
				src += wrlen;
    4834:	4437      	add	r7, r6
				len -= wrlen;
    4836:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    4838:	4628      	mov	r0, r5
    483a:	f000 f9a7 	bl	4b8c <memcpy>
				len -= wrlen;
    483e:	e7f1      	b.n	4824 <eepromemu_flash_write+0xc0>
    4840:	402a8000 	.word	0x402a8000
    4844:	5af05af0 	.word	0x5af05af0
    4848:	08180432 	.word	0x08180432
    484c:	402a8180 	.word	0x402a8180

00004850 <eepromemu_flash_erase_sector>:
{
    4850:	b410      	push	{r4}
	__disable_irq();
    4852:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    4854:	4b28      	ldr	r3, [pc, #160]	; (48f8 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    4856:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    4858:	4c28      	ldr	r4, [pc, #160]	; (48fc <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT61 = 0;
    485a:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    485c:	619c      	str	r4, [r3, #24]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    485e:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    4862:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    4864:	f240 4106 	movw	r1, #1030	; 0x406
    4868:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    486c:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
    486e:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    4872:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    4876:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    487a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    487e:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    4882:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    4886:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    4888:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
    488c:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    4890:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
    4894:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
    4898:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    489c:	4299      	cmp	r1, r3
    489e:	bf34      	ite	cc
    48a0:	2101      	movcc	r1, #1
    48a2:	2180      	movcs	r1, #128	; 0x80
    48a4:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
    48a8:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
    48aa:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
    48ae:	461a      	mov	r2, r3
	} while (location < end_addr);
    48b0:	f103 0320 	add.w	r3, r3, #32
    48b4:	d1f8      	bne.n	48a8 <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
    48b6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    48ba:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    48be:	4a0e      	ldr	r2, [pc, #56]	; (48f8 <eepromemu_flash_erase_sector+0xa8>)
    48c0:	6953      	ldr	r3, [r2, #20]
    48c2:	07d9      	lsls	r1, r3, #31
    48c4:	d5fc      	bpl.n	48c0 <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    48c6:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    48c8:	490d      	ldr	r1, [pc, #52]	; (4900 <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    48ca:	4b0e      	ldr	r3, [pc, #56]	; (4904 <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    48cc:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    48ce:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    48d0:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    48d4:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    48d8:	4907      	ldr	r1, [pc, #28]	; (48f8 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    48da:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    48de:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    48e2:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    48e6:	694b      	ldr	r3, [r1, #20]
    48e8:	07db      	lsls	r3, r3, #31
    48ea:	d5fc      	bpl.n	48e6 <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    48ec:	2301      	movs	r3, #1
}
    48ee:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    48f2:	614b      	str	r3, [r1, #20]
	flash_wait();
    48f4:	f7ff beaa 	b.w	464c <flash_wait>
    48f8:	402a8000 	.word	0x402a8000
    48fc:	5af05af0 	.word	0x5af05af0
    4900:	08180420 	.word	0x08180420
    4904:	00fff000 	.word	0x00fff000

00004908 <eeprom_write_byte>:
	if (addr > E2END) return;
    4908:	f5b0 6f87 	cmp.w	r0, #1080	; 0x438
    490c:	f080 8086 	bcs.w	4a1c <eeprom_write_byte+0x114>
	if (!initialized) eeprom_initialize();
    4910:	4b44      	ldr	r3, [pc, #272]	; (4a24 <eeprom_write_byte+0x11c>)
{
    4912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!initialized) eeprom_initialize();
    4916:	781b      	ldrb	r3, [r3, #0]
{
    4918:	b0c2      	sub	sp, #264	; 0x108
    491a:	4605      	mov	r5, r0
    491c:	4689      	mov	r9, r1
	if (!initialized) eeprom_initialize();
    491e:	2b00      	cmp	r3, #0
    4920:	d079      	beq.n	4a16 <eeprom_write_byte+0x10e>
	sector = (addr >> 2) % FLASH_SECTORS; 
    4922:	08ab      	lsrs	r3, r5, #2
    4924:	4e40      	ldr	r6, [pc, #256]	; (4a28 <eeprom_write_byte+0x120>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    4926:	f005 0503 	and.w	r5, r5, #3
	end = p + sector_index[sector];
    492a:	4f40      	ldr	r7, [pc, #256]	; (4a2c <eeprom_write_byte+0x124>)
	sector = (addr >> 2) % FLASH_SECTORS; 
    492c:	fba6 2603 	umull	r2, r6, r6, r3
    4930:	08f6      	lsrs	r6, r6, #3
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    4932:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    4936:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    493a:	1b9e      	subs	r6, r3, r6
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    493c:	4b3c      	ldr	r3, [pc, #240]	; (4a30 <eeprom_write_byte+0x128>)
	end = p + sector_index[sector];
    493e:	f837 4016 	ldrh.w	r4, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    4942:	4433      	add	r3, r6
	end = p + sector_index[sector];
    4944:	0060      	lsls	r0, r4, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    4946:	ea4f 3803 	mov.w	r8, r3, lsl #12
	end = p + sector_index[sector];
    494a:	eb00 3003 	add.w	r0, r0, r3, lsl #12
	while (p < end) {
    494e:	ebb0 3f03 	cmp.w	r0, r3, lsl #12
    4952:	d964      	bls.n	4a1e <eeprom_write_byte+0x116>
    4954:	4643      	mov	r3, r8
	uint8_t olddata=0xFF;
    4956:	f04f 0cff 	mov.w	ip, #255	; 0xff
		uint16_t val = *p++;
    495a:	881a      	ldrh	r2, [r3, #0]
    495c:	3302      	adds	r3, #2
		if ((val & 255) == offset) olddata = val >> 8;
    495e:	b2d1      	uxtb	r1, r2
    4960:	42a9      	cmp	r1, r5
    4962:	bf08      	it	eq
    4964:	ea4f 2c12 	moveq.w	ip, r2, lsr #8
	while (p < end) {
    4968:	4298      	cmp	r0, r3
    496a:	d8f6      	bhi.n	495a <eeprom_write_byte+0x52>
	if (data == olddata) return;
    496c:	45e1      	cmp	r9, ip
    496e:	d041      	beq.n	49f4 <eeprom_write_byte+0xec>
	if (sector_index[sector] < 2048) {
    4970:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    4974:	d341      	bcc.n	49fa <eeprom_write_byte+0xf2>
		memset(buf, 0xFF, sizeof(buf));
    4976:	ac02      	add	r4, sp, #8
    4978:	f44f 7280 	mov.w	r2, #256	; 0x100
    497c:	21ff      	movs	r1, #255	; 0xff
    497e:	4620      	mov	r0, r4
    4980:	f003 feb2 	bl	86e8 <memset>
		while (p < end) {
    4984:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
    4988:	f108 0302 	add.w	r3, r8, #2
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    498c:	4642      	mov	r2, r8
    498e:	4298      	cmp	r0, r3
    4990:	bf34      	ite	cc
    4992:	2001      	movcc	r0, #1
    4994:	f44f 6000 	movcs.w	r0, #2048	; 0x800
    4998:	eb08 0040 	add.w	r0, r8, r0, lsl #1
			uint16_t val = *p++;
    499c:	4613      	mov	r3, r2
    499e:	3202      	adds	r2, #2
    49a0:	881b      	ldrh	r3, [r3, #0]
		while (p < end) {
    49a2:	4282      	cmp	r2, r0
			buf[val & 255] = val >> 8;
    49a4:	b2d9      	uxtb	r1, r3
    49a6:	ea4f 2313 	mov.w	r3, r3, lsr #8
    49aa:	5463      	strb	r3, [r4, r1]
		while (p < end) {
    49ac:	d1f6      	bne.n	499c <eeprom_write_byte+0x94>
		buf[offset] = data;
    49ae:	f804 9005 	strb.w	r9, [r4, r5]
		eepromemu_flash_erase_sector(p);
    49b2:	f10d 0907 	add.w	r9, sp, #7
    49b6:	f20d 1a07 	addw	sl, sp, #263	; 0x107
		index = 0;
    49ba:	2500      	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    49bc:	464c      	mov	r4, r9
    49be:	4640      	mov	r0, r8
    49c0:	f7ff ff46 	bl	4850 <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    49c4:	f814 cf01 	ldrb.w	ip, [r4, #1]!
				eepromemu_flash_write(p + index, &newval, 2);
    49c8:	eb08 0045 	add.w	r0, r8, r5, lsl #1
    49cc:	2202      	movs	r2, #2
    49ce:	f10d 0106 	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    49d2:	1e63      	subs	r3, r4, #1
			if (buf[i] != 0xFF) {
    49d4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
				uint16_t newval = i | (buf[i] << 8);
    49d8:	eba3 0309 	sub.w	r3, r3, r9
			if (buf[i] != 0xFF) {
    49dc:	d006      	beq.n	49ec <eeprom_write_byte+0xe4>
				uint16_t newval = i | (buf[i] << 8);
    49de:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
				index = index + 1;
    49e2:	3501      	adds	r5, #1
				uint16_t newval = i | (buf[i] << 8);
    49e4:	f8ad 3006 	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    49e8:	f7ff febc 	bl	4764 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    49ec:	45a2      	cmp	sl, r4
    49ee:	d1e9      	bne.n	49c4 <eeprom_write_byte+0xbc>
		sector_index[sector] = index;
    49f0:	f827 5016 	strh.w	r5, [r7, r6, lsl #1]
}
    49f4:	b042      	add	sp, #264	; 0x108
    49f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t newdata = offset | (data << 8);
    49fa:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
		eepromemu_flash_write(end, &newdata, 2);
    49fe:	a902      	add	r1, sp, #8
    4a00:	2202      	movs	r2, #2
		sector_index[sector] = sector_index[sector] + 1;
    4a02:	3401      	adds	r4, #1
		uint16_t newdata = offset | (data << 8);
    4a04:	f8ad 5008 	strh.w	r5, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    4a08:	f7ff feac 	bl	4764 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    4a0c:	f827 4016 	strh.w	r4, [r7, r6, lsl #1]
}
    4a10:	b042      	add	sp, #264	; 0x108
    4a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!initialized) eeprom_initialize();
    4a16:	f7ff fe47 	bl	46a8 <eeprom_initialize>
    4a1a:	e782      	b.n	4922 <eeprom_write_byte+0x1a>
    4a1c:	4770      	bx	lr
	uint8_t olddata=0xFF;
    4a1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4a22:	e7a3      	b.n	496c <eeprom_write_byte+0x64>
    4a24:	2000aff5 	.word	0x2000aff5
    4a28:	88888889 	.word	0x88888889
    4a2c:	2000ae18 	.word	0x2000ae18
    4a30:	000601f0 	.word	0x000601f0

00004a34 <eeprom_write_block>:
	while (len--) {
    4a34:	b162      	cbz	r2, 4a50 <eeprom_write_block+0x1c>
{
    4a36:	b570      	push	{r4, r5, r6, lr}
    4a38:	4605      	mov	r5, r0
    4a3a:	460c      	mov	r4, r1
    4a3c:	188e      	adds	r6, r1, r2
		eeprom_write_byte(p++, *src++);
    4a3e:	4620      	mov	r0, r4
    4a40:	3401      	adds	r4, #1
    4a42:	f815 1b01 	ldrb.w	r1, [r5], #1
    4a46:	f7ff ff5f 	bl	4908 <eeprom_write_byte>
	while (len--) {
    4a4a:	42b4      	cmp	r4, r6
    4a4c:	d1f7      	bne.n	4a3e <eeprom_write_block+0xa>
}
    4a4e:	bd70      	pop	{r4, r5, r6, pc}
    4a50:	4770      	bx	lr
    4a52:	bf00      	nop

00004a54 <dummy_isr>:
static void dummy_isr() {};
    4a54:	4770      	bx	lr
    4a56:	bf00      	nop

00004a58 <attachInterrupt>:

#endif

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    4a58:	2827      	cmp	r0, #39	; 0x27
    4a5a:	d858      	bhi.n	4b0e <attachInterrupt+0xb6>
	//printf("attachInterrupt, pin=%u\n", pin);
	volatile uint32_t *gpio = portOutputRegister(pin);
    4a5c:	0100      	lsls	r0, r0, #4
{
    4a5e:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *gpio = portOutputRegister(pin);
    4a60:	4c34      	ldr	r4, [pc, #208]	; (4b34 <attachInterrupt+0xdc>)

	voidFuncPtr *table;

#if defined(__IMXRT1062__)

	switch((uint32_t)gpio) {
    4a62:	4d35      	ldr	r5, [pc, #212]	; (4b38 <attachInterrupt+0xe0>)
	volatile uint32_t *gpio = portOutputRegister(pin);
    4a64:	5823      	ldr	r3, [r4, r0]
	switch((uint32_t)gpio) {
    4a66:	42ab      	cmp	r3, r5
    4a68:	d056      	beq.n	4b18 <attachInterrupt+0xc0>
    4a6a:	d849      	bhi.n	4b00 <attachInterrupt+0xa8>
    4a6c:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    4a70:	d04b      	beq.n	4b0a <attachInterrupt+0xb2>
    4a72:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
    4a76:	42ab      	cmp	r3, r5
    4a78:	d140      	bne.n	4afc <attachInterrupt+0xa4>
    4a7a:	4d30      	ldr	r5, [pc, #192]	; (4b3c <attachInterrupt+0xe4>)
	volatile uint32_t *mux = portConfigRegister(pin);
    4a7c:	4420      	add	r0, r4
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    4a7e:	4e30      	ldr	r6, [pc, #192]	; (4b40 <attachInterrupt+0xe8>)
    4a80:	4c30      	ldr	r4, [pc, #192]	; (4b44 <attachInterrupt+0xec>)
    4a82:	f8c4 62b4 	str.w	r6, [r4, #692]	; 0x2b4
	volatile uint32_t *pad = portControlRegister(pin);
    4a86:	e9d0 c401 	ldrd	ip, r4, [r0, #4]
	uint32_t mask = digitalPinToBitMask(pin);
    4a8a:	68c0      	ldr	r0, [r0, #12]
		default:
			return;
	}

	attachInterruptVector(IRQ_GPIO6789, &irq_gpio6789);
	NVIC_ENABLE_IRQ(IRQ_GPIO6789);
    4a8c:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    4a90:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
    4a94:	2a04      	cmp	r2, #4
    4a96:	f8c6 7110 	str.w	r7, [r6, #272]	; 0x110

#endif

	uint32_t icr;
	switch (mode) {
    4a9a:	d82f      	bhi.n	4afc <attachInterrupt+0xa4>
		case HIGH:    icr = 1; break;
		default: return;
	}

	// TODO: global interrupt disable to protect these read-modify-write accesses?
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
    4a9c:	695e      	ldr	r6, [r3, #20]
    4a9e:	ea26 0600 	bic.w	r6, r6, r0
    4aa2:	615e      	str	r6, [r3, #20]
	*mux = 5;			// pin is GPIO
    4aa4:	f04f 0605 	mov.w	r6, #5
    4aa8:	f8cc 6000 	str.w	r6, [ip]
	*pad |= IOMUXC_PAD_HYS;		// use hystersis avoid false trigger by slow signals
    4aac:	6826      	ldr	r6, [r4, #0]
    4aae:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
    4ab2:	6026      	str	r6, [r4, #0]
	gpio[GDIR_INDEX] &= ~mask;	// pin to input mode
    4ab4:	685c      	ldr	r4, [r3, #4]
    4ab6:	ea24 0400 	bic.w	r4, r4, r0
    4aba:	605c      	str	r4, [r3, #4]
    4abc:	4c22      	ldr	r4, [pc, #136]	; (4b48 <attachInterrupt+0xf0>)
    4abe:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
	uint32_t index = __builtin_ctz(mask);
    4ac2:	fa90 f2a0 	rbit	r2, r0
    4ac6:	fab2 f282 	clz	r2, r2
	table[index] = function;
    4aca:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
    4ace:	ea6f 0100 	mvn.w	r1, r0
	if (mode == CHANGE) {
    4ad2:	d01d      	beq.n	4b10 <attachInterrupt+0xb8>
		gpio[EDGE_INDEX] |= mask;
	} else {
		gpio[EDGE_INDEX] &= ~mask;
    4ad4:	69dd      	ldr	r5, [r3, #28]
		if (index < 16) {
    4ad6:	2a0f      	cmp	r2, #15
		gpio[EDGE_INDEX] &= ~mask;
    4ad8:	ea01 0105 	and.w	r1, r1, r5
    4adc:	61d9      	str	r1, [r3, #28]
		if (index < 16) {
    4ade:	dc1d      	bgt.n	4b1c <attachInterrupt+0xc4>
			uint32_t shift = index * 2;
    4ae0:	0052      	lsls	r2, r2, #1
			gpio[ICR1_INDEX] = (gpio[ICR1_INDEX] & ~(3 << shift)) | (icr << shift);
    4ae2:	2503      	movs	r5, #3
    4ae4:	68d9      	ldr	r1, [r3, #12]
    4ae6:	4094      	lsls	r4, r2
    4ae8:	fa05 f202 	lsl.w	r2, r5, r2
    4aec:	ea21 0202 	bic.w	r2, r1, r2
    4af0:	4322      	orrs	r2, r4
    4af2:	60da      	str	r2, [r3, #12]
		} else {
			uint32_t shift = (index - 16) * 2;
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
		}
	}
	gpio[ISR_INDEX] = mask;  // clear any prior pending interrupt
    4af4:	6198      	str	r0, [r3, #24]
	gpio[IMR_INDEX] |= mask; // enable interrupt
    4af6:	695a      	ldr	r2, [r3, #20]
    4af8:	4302      	orrs	r2, r0
    4afa:	615a      	str	r2, [r3, #20]
}
    4afc:	bcf0      	pop	{r4, r5, r6, r7}
    4afe:	4770      	bx	lr
	switch((uint32_t)gpio) {
    4b00:	4d12      	ldr	r5, [pc, #72]	; (4b4c <attachInterrupt+0xf4>)
    4b02:	42ab      	cmp	r3, r5
    4b04:	d1fa      	bne.n	4afc <attachInterrupt+0xa4>
			table = isr_table_gpio4;
    4b06:	4d12      	ldr	r5, [pc, #72]	; (4b50 <attachInterrupt+0xf8>)
    4b08:	e7b8      	b.n	4a7c <attachInterrupt+0x24>
			table = isr_table_gpio1;
    4b0a:	4d12      	ldr	r5, [pc, #72]	; (4b54 <attachInterrupt+0xfc>)
    4b0c:	e7b6      	b.n	4a7c <attachInterrupt+0x24>
    4b0e:	4770      	bx	lr
		gpio[EDGE_INDEX] |= mask;
    4b10:	69da      	ldr	r2, [r3, #28]
    4b12:	4302      	orrs	r2, r0
    4b14:	61da      	str	r2, [r3, #28]
    4b16:	e7ed      	b.n	4af4 <attachInterrupt+0x9c>
			table = isr_table_gpio3;
    4b18:	4d0f      	ldr	r5, [pc, #60]	; (4b58 <attachInterrupt+0x100>)
    4b1a:	e7af      	b.n	4a7c <attachInterrupt+0x24>
			uint32_t shift = (index - 16) * 2;
    4b1c:	3a10      	subs	r2, #16
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
    4b1e:	2503      	movs	r5, #3
    4b20:	6919      	ldr	r1, [r3, #16]
			uint32_t shift = (index - 16) * 2;
    4b22:	0052      	lsls	r2, r2, #1
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
    4b24:	4094      	lsls	r4, r2
    4b26:	fa05 f202 	lsl.w	r2, r5, r2
    4b2a:	ea21 0202 	bic.w	r2, r1, r2
    4b2e:	4322      	orrs	r2, r4
    4b30:	611a      	str	r2, [r3, #16]
    4b32:	e7df      	b.n	4af4 <attachInterrupt+0x9c>
    4b34:	20007568 	.word	0x20007568
    4b38:	42008000 	.word	0x42008000
    4b3c:	20008c58 	.word	0x20008c58
    4b40:	00000021 	.word	0x00000021
    4b44:	20009000 	.word	0x20009000
    4b48:	20000398 	.word	0x20000398
    4b4c:	4200c000 	.word	0x4200c000
    4b50:	20008d58 	.word	0x20008d58
    4b54:	20008bd8 	.word	0x20008bd8
    4b58:	20008cd8 	.word	0x20008cd8

00004b5c <detachInterrupt>:

void detachInterrupt(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    4b5c:	2827      	cmp	r0, #39	; 0x27
    4b5e:	d809      	bhi.n	4b74 <detachInterrupt+0x18>
	volatile uint32_t *gpio = portOutputRegister(pin);
    4b60:	4b05      	ldr	r3, [pc, #20]	; (4b78 <detachInterrupt+0x1c>)
    4b62:	0102      	lsls	r2, r0, #4
    4b64:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    4b68:	589a      	ldr	r2, [r3, r2]
	uint32_t mask = digitalPinToBitMask(pin);
	gpio[IMR_INDEX] &= ~mask;
    4b6a:	68c1      	ldr	r1, [r0, #12]
    4b6c:	6953      	ldr	r3, [r2, #20]
    4b6e:	ea23 0301 	bic.w	r3, r3, r1
    4b72:	6153      	str	r3, [r2, #20]
}
    4b74:	4770      	bx	lr
    4b76:	bf00      	nop
    4b78:	20007568 	.word	0x20007568

00004b7c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    4b7c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    4b7e:	f7fd f823 	bl	1bc8 <setup>
	while (1) {
		loop();
    4b82:	f7fd f8f9 	bl	1d78 <loop>
		yield();
    4b86:	f001 fcc5 	bl	6514 <yield>
	while (1) {
    4b8a:	e7fa      	b.n	4b82 <main+0x6>

00004b8c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    4b8c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    4b8e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    4b92:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    4b96:	d16d      	bne.n	4c74 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    4b98:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    4b9a:	d341      	bcc.n	4c20 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    4b9c:	f851 3b04 	ldr.w	r3, [r1], #4
    4ba0:	f840 3b04 	str.w	r3, [r0], #4
    4ba4:	f851 3b04 	ldr.w	r3, [r1], #4
    4ba8:	f840 3b04 	str.w	r3, [r0], #4
    4bac:	f851 3b04 	ldr.w	r3, [r1], #4
    4bb0:	f840 3b04 	str.w	r3, [r0], #4
    4bb4:	f851 3b04 	ldr.w	r3, [r1], #4
    4bb8:	f840 3b04 	str.w	r3, [r0], #4
    4bbc:	f851 3b04 	ldr.w	r3, [r1], #4
    4bc0:	f840 3b04 	str.w	r3, [r0], #4
    4bc4:	f851 3b04 	ldr.w	r3, [r1], #4
    4bc8:	f840 3b04 	str.w	r3, [r0], #4
    4bcc:	f851 3b04 	ldr.w	r3, [r1], #4
    4bd0:	f840 3b04 	str.w	r3, [r0], #4
    4bd4:	f851 3b04 	ldr.w	r3, [r1], #4
    4bd8:	f840 3b04 	str.w	r3, [r0], #4
    4bdc:	f851 3b04 	ldr.w	r3, [r1], #4
    4be0:	f840 3b04 	str.w	r3, [r0], #4
    4be4:	f851 3b04 	ldr.w	r3, [r1], #4
    4be8:	f840 3b04 	str.w	r3, [r0], #4
    4bec:	f851 3b04 	ldr.w	r3, [r1], #4
    4bf0:	f840 3b04 	str.w	r3, [r0], #4
    4bf4:	f851 3b04 	ldr.w	r3, [r1], #4
    4bf8:	f840 3b04 	str.w	r3, [r0], #4
    4bfc:	f851 3b04 	ldr.w	r3, [r1], #4
    4c00:	f840 3b04 	str.w	r3, [r0], #4
    4c04:	f851 3b04 	ldr.w	r3, [r1], #4
    4c08:	f840 3b04 	str.w	r3, [r0], #4
    4c0c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c10:	f840 3b04 	str.w	r3, [r0], #4
    4c14:	f851 3b04 	ldr.w	r3, [r1], #4
    4c18:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    4c1c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    4c1e:	d2bd      	bcs.n	4b9c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    4c20:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    4c22:	d311      	bcc.n	4c48 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    4c24:	f851 3b04 	ldr.w	r3, [r1], #4
    4c28:	f840 3b04 	str.w	r3, [r0], #4
    4c2c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c30:	f840 3b04 	str.w	r3, [r0], #4
    4c34:	f851 3b04 	ldr.w	r3, [r1], #4
    4c38:	f840 3b04 	str.w	r3, [r0], #4
    4c3c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c40:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    4c44:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    4c46:	d2ed      	bcs.n	4c24 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    4c48:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    4c4a:	d305      	bcc.n	4c58 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    4c4c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    4c50:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    4c54:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    4c56:	d2f9      	bcs.n	4c4c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    4c58:	3204      	adds	r2, #4
	beq	.Ldone
    4c5a:	d008      	beq.n	4c6e <memcpy+0xe2>

	lsls	r2, r2, #31
    4c5c:	07d2      	lsls	r2, r2, #31
	itt ne
    4c5e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    4c60:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    4c64:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    4c68:	d301      	bcc.n	4c6e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    4c6a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    4c6c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    4c6e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    4c70:	4770      	bx	lr
    4c72:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    4c74:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    4c76:	d313      	bcc.n	4ca0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    4c78:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    4c7a:	d08d      	beq.n	4b98 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    4c7c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    4c80:	d08a      	beq.n	4b98 <memcpy+0xc>

	rsb	r3, #4
    4c82:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    4c86:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    4c88:	07db      	lsls	r3, r3, #31
	itt ne
    4c8a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    4c8c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    4c90:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    4c94:	d380      	bcc.n	4b98 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    4c96:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    4c9a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    4c9e:	e77b      	b.n	4b98 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    4ca0:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    4ca2:	d3d9      	bcc.n	4c58 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    4ca4:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    4ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    4caa:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    4cae:	d2f9      	bcs.n	4ca4 <memcpy+0x118>

	ldrb	r3, [r1]
    4cb0:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    4cb2:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    4cb4:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    4cb6:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    4cb8:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    4cba:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    4cbc:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    4cbe:	4770      	bx	lr

00004cc0 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    4cc0:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
    4cc4:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    4cc6:	4666      	mov	r6, ip
	int i=0, j;
    4cc8:	2400      	movs	r4, #0
    4cca:	e000      	b.n	4cce <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    4ccc:	3401      	adds	r4, #1
		digit = val % radix;
    4cce:	fbb0 f5f2 	udiv	r5, r0, r2
    4cd2:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4cd6:	2b09      	cmp	r3, #9
    4cd8:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    4cdc:	f103 0330 	add.w	r3, r3, #48	; 0x30
    4ce0:	fa5f fe8e 	uxtb.w	lr, lr
    4ce4:	bf98      	it	ls
    4ce6:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    4cea:	4290      	cmp	r0, r2
		val /= radix;
    4cec:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4cee:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    4cf2:	d2eb      	bcs.n	4ccc <ultoa+0xc>
	}
	buf[i + 1] = 0;
    4cf4:	1c63      	adds	r3, r4, #1
    4cf6:	2200      	movs	r2, #0
    4cf8:	18c8      	adds	r0, r1, r3
    4cfa:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    4cfc:	b17c      	cbz	r4, 4d1e <ultoa+0x5e>
		t = buf[j];
    4cfe:	4662      	mov	r2, ip
    4d00:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    4d04:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    4d08:	eba1 030c 	sub.w	r3, r1, ip
    4d0c:	3202      	adds	r2, #2
		buf[j] = buf[i];
    4d0e:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    4d12:	3b01      	subs	r3, #1
    4d14:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    4d16:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    4d18:	4423      	add	r3, r4
    4d1a:	429a      	cmp	r2, r3
    4d1c:	dbef      	blt.n	4cfe <ultoa+0x3e>
	}
	return buf;
}
    4d1e:	4608      	mov	r0, r1
    4d20:	bd70      	pop	{r4, r5, r6, pc}
    4d22:	bf00      	nop

00004d24 <flexpwmWrite>:

#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
    4d24:	f04f 0c01 	mov.w	ip, #1
    4d28:	fa0c fc01 	lsl.w	ip, ip, r1
	uint32_t modulo = p->SM[submodule].VAL1;
    4d2c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4d30:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
    4d34:	b570      	push	{r4, r5, r6, lr}
	uint32_t modulo = p->SM[submodule].VAL1;
    4d36:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
	uint16_t mask = 1 << submodule;
    4d3a:	fa1f f58c 	uxth.w	r5, ip
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    4d3e:	4c25      	ldr	r4, [pc, #148]	; (4dd4 <flexpwmWrite+0xb0>)
	uint32_t modulo = p->SM[submodule].VAL1;
    4d40:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    4d44:	7824      	ldrb	r4, [r4, #0]
	if (cval > modulo) cval = modulo; // TODO: is this check correct?

	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    4d46:	012e      	lsls	r6, r5, #4
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    4d48:	fb0e 3303 	mla	r3, lr, r3, r3
    4d4c:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    4d50:	40e3      	lsrs	r3, r4
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    4d52:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
    4d56:	4573      	cmp	r3, lr
    4d58:	b2a4      	uxth	r4, r4
    4d5a:	bf28      	it	cs
    4d5c:	4673      	movcs	r3, lr
    4d5e:	4334      	orrs	r4, r6
	switch (channel) {
    4d60:	2a01      	cmp	r2, #1
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    4d62:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	switch (channel) {
    4d66:	d00d      	beq.n	4d84 <flexpwmWrite+0x60>
    4d68:	2a02      	cmp	r2, #2
    4d6a:	d028      	beq.n	4dbe <flexpwmWrite+0x9a>
    4d6c:	b1c2      	cbz	r2, 4da0 <flexpwmWrite+0x7c>
    4d6e:	f00c 020f 	and.w	r2, ip, #15
	  case 2: // B
		p->SM[submodule].VAL5 = cval;
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
		//printf(" write channel B\n");
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    4d72:	f8b0 c188 	ldrh.w	ip, [r0, #392]	; 0x188
    4d76:	fa1f fc8c 	uxth.w	ip, ip
    4d7a:	ea4c 0c02 	orr.w	ip, ip, r2
    4d7e:	f8a0 c188 	strh.w	ip, [r0, #392]	; 0x188
}
    4d82:	bd70      	pop	{r4, r5, r6, pc}
		p->SM[submodule].VAL3 = cval;
    4d84:	b29b      	uxth	r3, r3
    4d86:	f00c 020f 	and.w	r2, ip, #15
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    4d8a:	022d      	lsls	r5, r5, #8
		p->SM[submodule].VAL3 = cval;
    4d8c:	82cb      	strh	r3, [r1, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    4d8e:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    4d92:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    4d96:	b29b      	uxth	r3, r3
    4d98:	432b      	orrs	r3, r5
    4d9a:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    4d9e:	e7e8      	b.n	4d72 <flexpwmWrite+0x4e>
		p->SM[submodule].VAL0 = modulo - cval;
    4da0:	ebae 0e03 	sub.w	lr, lr, r3
    4da4:	f00c 020f 	and.w	r2, ip, #15
    4da8:	fa1f fe8e 	uxth.w	lr, lr
    4dac:	f8a1 e00a 	strh.w	lr, [r1, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
    4db0:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    4db4:	b29b      	uxth	r3, r3
    4db6:	4313      	orrs	r3, r2
    4db8:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    4dbc:	e7d9      	b.n	4d72 <flexpwmWrite+0x4e>
		p->SM[submodule].VAL5 = cval;
    4dbe:	b29b      	uxth	r3, r3
    4dc0:	f00c 020f 	and.w	r2, ip, #15
    4dc4:	83cb      	strh	r3, [r1, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
    4dc6:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    4dca:	b29b      	uxth	r3, r3
    4dcc:	431e      	orrs	r6, r3
    4dce:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
    4dd2:	e7ce      	b.n	4d72 <flexpwmWrite+0x4e>
    4dd4:	20008e2e 	.word	0x20008e2e

00004dd8 <flexpwmFrequency>:

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel __attribute__((unused)), float frequency)
{
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
    4dd8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    4ddc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	uint32_t olddiv = p->SM[submodule].VAL1;
    4de0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    4de4:	f8b3 c00e 	ldrh.w	ip, [r3, #14]
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    4de8:	4b31      	ldr	r3, [pc, #196]	; (4eb0 <flexpwmFrequency+0xd8>)
	uint32_t olddiv = p->SM[submodule].VAL1;
    4dea:	fa1f fc8c 	uxth.w	ip, ip
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    4dee:	ed93 7a00 	vldr	s14, [r3]
    4df2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{
    4df6:	b570      	push	{r4, r5, r6, lr}
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    4df8:	eec7 7a00 	vdiv.f32	s15, s14, s0
	uint16_t mask = 1 << submodule;
    4dfc:	f04f 0e01 	mov.w	lr, #1
	uint32_t olddiv = p->SM[submodule].VAL1;
    4e00:	004e      	lsls	r6, r1, #1
	uint16_t mask = 1 << submodule;
    4e02:	fa0e fe01 	lsl.w	lr, lr, r1
    4e06:	fa1f f58e 	uxth.w	r5, lr
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    4e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
    4e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4e12:	ee17 3a90 	vmov	r3, s15
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
    4e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    4e1a:	d346      	bcc.n	4eaa <flexpwmFrequency+0xd2>
	uint32_t prescale = 0;
    4e1c:	2200      	movs	r2, #0
	while (newdiv > 65535 && prescale < 7) {
    4e1e:	f64f 74ff 	movw	r4, #65535	; 0xffff
		newdiv = newdiv >> 1;
    4e22:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
    4e24:	3201      	adds	r2, #1
	while (newdiv > 65535 && prescale < 7) {
    4e26:	42a3      	cmp	r3, r4
    4e28:	d901      	bls.n	4e2e <flexpwmFrequency+0x56>
    4e2a:	2a06      	cmp	r2, #6
    4e2c:	d9f9      	bls.n	4e22 <flexpwmFrequency+0x4a>
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    4e2e:	0112      	lsls	r2, r2, #4
    4e30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    4e34:	b292      	uxth	r2, r2
	if (newdiv > 65535) {
    4e36:	2b02      	cmp	r3, #2
    4e38:	f64f 74ff 	movw	r4, #65535	; 0xffff
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    4e3c:	ea4f 1505 	mov.w	r5, r5, lsl #4
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    4e40:	4431      	add	r1, r6
    4e42:	bf38      	it	cc
    4e44:	2302      	movcc	r3, #2
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    4e46:	f00e 0e0f 	and.w	lr, lr, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    4e4a:	b2ed      	uxtb	r5, r5
    4e4c:	42a3      	cmp	r3, r4
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    4e4e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    4e52:	bf28      	it	cs
    4e54:	4623      	movcs	r3, r4
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    4e56:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
    4e5a:	b2a4      	uxth	r4, r4
    4e5c:	432c      	orrs	r4, r5
    4e5e:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    4e62:	80ca      	strh	r2, [r1, #6]
	p->SM[submodule].VAL1 = newdiv - 1;
    4e64:	1e5a      	subs	r2, r3, #1
    4e66:	b292      	uxth	r2, r2
    4e68:	81ca      	strh	r2, [r1, #14]
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
    4e6a:	894a      	ldrh	r2, [r1, #10]
    4e6c:	b292      	uxth	r2, r2
    4e6e:	fb03 f202 	mul.w	r2, r3, r2
    4e72:	fbb2 f2fc 	udiv	r2, r2, ip
    4e76:	b292      	uxth	r2, r2
    4e78:	814a      	strh	r2, [r1, #10]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
    4e7a:	8aca      	ldrh	r2, [r1, #22]
    4e7c:	b292      	uxth	r2, r2
    4e7e:	fb03 f202 	mul.w	r2, r3, r2
    4e82:	fbb2 f2fc 	udiv	r2, r2, ip
    4e86:	b292      	uxth	r2, r2
    4e88:	82ca      	strh	r2, [r1, #22]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
    4e8a:	8bca      	ldrh	r2, [r1, #30]
    4e8c:	b292      	uxth	r2, r2
    4e8e:	fb02 f303 	mul.w	r3, r2, r3
    4e92:	fbb3 f3fc 	udiv	r3, r3, ip
    4e96:	b29b      	uxth	r3, r3
    4e98:	83cb      	strh	r3, [r1, #30]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    4e9a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    4e9e:	b29b      	uxth	r3, r3
    4ea0:	ea43 030e 	orr.w	r3, r3, lr
    4ea4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    4ea8:	bd70      	pop	{r4, r5, r6, pc}
	while (newdiv > 65535 && prescale < 7) {
    4eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4eae:	e7c2      	b.n	4e36 <flexpwmFrequency+0x5e>
    4eb0:	20008100 	.word	0x20008100

00004eb4 <quadtimerFrequency>:
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    4eb4:	4b21      	ldr	r3, [pc, #132]	; (4f3c <quadtimerFrequency+0x88>)
    4eb6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
    4eba:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    4ebe:	ed93 7a00 	vldr	s14, [r3]
    4ec2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    4ec6:	eec7 7a00 	vdiv.f32	s15, s14, s0
    4eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
    4ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4ed2:	ee17 3a90 	vmov	r3, s15
	while (newdiv > 65534 && prescale < 7) {
    4ed6:	4563      	cmp	r3, ip
    4ed8:	d92c      	bls.n	4f34 <quadtimerFrequency+0x80>
	uint32_t prescale = 0;
    4eda:	2200      	movs	r2, #0
		newdiv = newdiv >> 1; 
    4edc:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
    4ede:	3201      	adds	r2, #1
	while (newdiv > 65534 && prescale < 7) {
    4ee0:	4563      	cmp	r3, ip
    4ee2:	d901      	bls.n	4ee8 <quadtimerFrequency+0x34>
    4ee4:	2a06      	cmp	r2, #6
    4ee6:	d9f9      	bls.n	4edc <quadtimerFrequency+0x28>
	// TODO: low must never be less than 2 - can it happen with this?
	uint32_t low = newdiv - high;
	//printf(" high=%lu, low=%lu\n", high, low);
	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    4ee8:	3208      	adds	r2, #8
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
    4eea:	f242 0c26 	movw	ip, #8230	; 0x2026
    4eee:	ea4c 2c42 	orr.w	ip, ip, r2, lsl #9
    4ef2:	fa1f fc8c 	uxth.w	ip, ip
	if (newdiv > 65534) {
    4ef6:	2b02      	cmp	r3, #2
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
    4ef8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    4efc:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    4f00:	bf38      	it	cc
    4f02:	2302      	movcc	r3, #2
    4f04:	8a0a      	ldrh	r2, [r1, #16]
    4f06:	4283      	cmp	r3, r0
    4f08:	b292      	uxth	r2, r2
    4f0a:	bf28      	it	cs
    4f0c:	4603      	movcs	r3, r0
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    4f0e:	88c8      	ldrh	r0, [r1, #6]
    4f10:	b280      	uxth	r0, r0
    4f12:	f1c0 1001 	rsb	r0, r0, #65537	; 0x10001
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    4f16:	4410      	add	r0, r2
    4f18:	fb03 f202 	mul.w	r2, r3, r2
    4f1c:	fbb2 f2f0 	udiv	r2, r2, r0
	uint32_t low = newdiv - high;
    4f20:	1a9b      	subs	r3, r3, r2
	p->CH[submodule].CMPLD1 = high;
    4f22:	b292      	uxth	r2, r2
	p->CH[submodule].LOAD = 65537 - low;
    4f24:	f1c3 0301 	rsb	r3, r3, #1
    4f28:	b29b      	uxth	r3, r3
    4f2a:	80cb      	strh	r3, [r1, #6]
	p->CH[submodule].CMPLD1 = high;
    4f2c:	820a      	strh	r2, [r1, #16]
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    4f2e:	f8a1 c00c 	strh.w	ip, [r1, #12]
}
    4f32:	4770      	bx	lr
	while (newdiv > 65534 && prescale < 7) {
    4f34:	f243 0c26 	movw	ip, #12326	; 0x3026
    4f38:	e7dd      	b.n	4ef6 <quadtimerFrequency+0x42>
    4f3a:	bf00      	nop
    4f3c:	20008100 	.word	0x20008100

00004f40 <analogWrite>:

void analogWrite(uint8_t pin, int val)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
    4f40:	2827      	cmp	r0, #39	; 0x27
    4f42:	d84b      	bhi.n	4fdc <analogWrite+0x9c>
{
    4f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
    4f46:	4d2a      	ldr	r5, [pc, #168]	; (4ff0 <analogWrite+0xb0>)
    4f48:	4604      	mov	r4, r0
	if (info->type == 1) {
    4f4a:	f815 2020 	ldrb.w	r2, [r5, r0, lsl #2]
	info = pwm_pin_info + pin;
    4f4e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
	if (info->type == 1) {
    4f52:	2a01      	cmp	r2, #1
    4f54:	d02d      	beq.n	4fb2 <analogWrite+0x72>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
    4f56:	2a02      	cmp	r2, #2
    4f58:	d13f      	bne.n	4fda <analogWrite+0x9a>
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    4f5a:	786b      	ldrb	r3, [r5, #1]
    4f5c:	f3c3 1001 	ubfx	r0, r3, #4, #2
    4f60:	2803      	cmp	r0, #3
    4f62:	d03e      	beq.n	4fe2 <analogWrite+0xa2>
    4f64:	4a23      	ldr	r2, [pc, #140]	; (4ff4 <analogWrite+0xb4>)
    4f66:	eb02 3280 	add.w	r2, r2, r0, lsl #14
		  case 0: qtimer = &IMXRT_TMR1; break;
		  case 1: qtimer = &IMXRT_TMR2; break;
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerWrite(qtimer, info->module & 0x03, val);
    4f6a:	f003 0c03 	and.w	ip, r3, #3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    4f6e:	4822      	ldr	r0, [pc, #136]	; (4ff8 <analogWrite+0xb8>)
    4f70:	b289      	uxth	r1, r1
    4f72:	4663      	mov	r3, ip
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    4f74:	eb02 1c4c 	add.w	ip, r2, ip, lsl #5
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    4f78:	7806      	ldrb	r6, [r0, #0]
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    4f7a:	f8bc e006 	ldrh.w	lr, [ip, #6]
    4f7e:	0158      	lsls	r0, r3, #5
    4f80:	f8bc 3010 	ldrh.w	r3, [ip, #16]
    4f84:	fa1f fe8e 	uxth.w	lr, lr
    4f88:	f1ce 1e01 	rsb	lr, lr, #65537	; 0x10001
    4f8c:	fa1e f383 	uxtah	r3, lr, r3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    4f90:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
    4f94:	fb0e f101 	mul.w	r1, lr, r1
    4f98:	40f1      	lsrs	r1, r6
	if (high >= modulo - 1) high = modulo - 2;
    4f9a:	458e      	cmp	lr, r1
    4f9c:	d923      	bls.n	4fe6 <analogWrite+0xa6>
	uint32_t low = modulo - high; // low must 2 or higher
    4f9e:	1a5b      	subs	r3, r3, r1
	p->CH[submodule].LOAD = 65537 - low;
    4fa0:	f1c3 0301 	rsb	r3, r3, #1
    4fa4:	b29b      	uxth	r3, r3
	p->CH[submodule].CMPLD1 = high;
    4fa6:	b289      	uxth	r1, r1
    4fa8:	4402      	add	r2, r0
	p->CH[submodule].LOAD = 65537 - low;
    4faa:	f8ac 3006 	strh.w	r3, [ip, #6]
	p->CH[submodule].CMPLD1 = high;
    4fae:	8211      	strh	r1, [r2, #16]
}
    4fb0:	e00d      	b.n	4fce <analogWrite+0x8e>
		switch ((info->module >> 4) & 3) {
    4fb2:	786a      	ldrb	r2, [r5, #1]
    4fb4:	f3c2 1301 	ubfx	r3, r2, #4, #2
    4fb8:	2b03      	cmp	r3, #3
    4fba:	d010      	beq.n	4fde <analogWrite+0x9e>
    4fbc:	480f      	ldr	r0, [pc, #60]	; (4ffc <analogWrite+0xbc>)
    4fbe:	eb00 3083 	add.w	r0, r0, r3, lsl #14
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
    4fc2:	b28b      	uxth	r3, r1
    4fc4:	f002 0103 	and.w	r1, r2, #3
    4fc8:	78aa      	ldrb	r2, [r5, #2]
    4fca:	f7ff feab 	bl	4d24 <flexpwmWrite>
	} else {
		return;
	}
	*(portConfigRegister(pin)) = info->muxval;
    4fce:	4b0c      	ldr	r3, [pc, #48]	; (5000 <analogWrite+0xc0>)
    4fd0:	78ea      	ldrb	r2, [r5, #3]
    4fd2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4fd6:	685b      	ldr	r3, [r3, #4]
    4fd8:	601a      	str	r2, [r3, #0]
	// TODO: pad config register
}
    4fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fdc:	4770      	bx	lr
		switch ((info->module >> 4) & 3) {
    4fde:	4809      	ldr	r0, [pc, #36]	; (5004 <analogWrite+0xc4>)
    4fe0:	e7ef      	b.n	4fc2 <analogWrite+0x82>
		switch ((info->module >> 4) & 3) {
    4fe2:	4a09      	ldr	r2, [pc, #36]	; (5008 <analogWrite+0xc8>)
    4fe4:	e7c1      	b.n	4f6a <analogWrite+0x2a>
	if (high >= modulo - 1) high = modulo - 2;
    4fe6:	1e99      	subs	r1, r3, #2
    4fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4fec:	e7db      	b.n	4fa6 <analogWrite+0x66>
    4fee:	bf00      	nop
    4ff0:	20007838 	.word	0x20007838
    4ff4:	401dc000 	.word	0x401dc000
    4ff8:	20008e2e 	.word	0x20008e2e
    4ffc:	403dc000 	.word	0x403dc000
    5000:	20007568 	.word	0x20007568
    5004:	403e8000 	.word	0x403e8000
    5008:	401e8000 	.word	0x401e8000

0000500c <analogWriteFrequency>:

void analogWriteFrequency(uint8_t pin, float frequency)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
    500c:	2827      	cmp	r0, #39	; 0x27
    500e:	d808      	bhi.n	5022 <analogWriteFrequency+0x16>
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
    5010:	4b15      	ldr	r3, [pc, #84]	; (5068 <analogWriteFrequency+0x5c>)
	if (info->type == 1) {
    5012:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
	info = pwm_pin_info + pin;
    5016:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	if (info->type == 1) {
    501a:	2a01      	cmp	r2, #1
    501c:	d002      	beq.n	5024 <analogWriteFrequency+0x18>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
	} else if (info->type == 2) {
    501e:	2a02      	cmp	r2, #2
    5020:	d00d      	beq.n	503e <analogWriteFrequency+0x32>
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
	}
}
    5022:	4770      	bx	lr
		switch ((info->module >> 4) & 3) {
    5024:	7859      	ldrb	r1, [r3, #1]
    5026:	f3c1 1201 	ubfx	r2, r1, #4, #2
    502a:	2a03      	cmp	r2, #3
    502c:	d013      	beq.n	5056 <analogWriteFrequency+0x4a>
    502e:	480f      	ldr	r0, [pc, #60]	; (506c <analogWriteFrequency+0x60>)
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
    5030:	f001 0103 	and.w	r1, r1, #3
    5034:	eb00 3082 	add.w	r0, r0, r2, lsl #14
    5038:	789a      	ldrb	r2, [r3, #2]
    503a:	f7ff becd 	b.w	4dd8 <flexpwmFrequency>
		switch ((info->module >> 4) & 3) {
    503e:	7859      	ldrb	r1, [r3, #1]
    5040:	f3c1 1301 	ubfx	r3, r1, #4, #2
    5044:	2b03      	cmp	r3, #3
    5046:	d00c      	beq.n	5062 <analogWriteFrequency+0x56>
    5048:	4809      	ldr	r0, [pc, #36]	; (5070 <analogWriteFrequency+0x64>)
    504a:	eb00 3083 	add.w	r0, r0, r3, lsl #14
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
    504e:	f001 0103 	and.w	r1, r1, #3
    5052:	f7ff bf2f 	b.w	4eb4 <quadtimerFrequency>
		switch ((info->module >> 4) & 3) {
    5056:	4807      	ldr	r0, [pc, #28]	; (5074 <analogWriteFrequency+0x68>)
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
    5058:	f001 0103 	and.w	r1, r1, #3
    505c:	789a      	ldrb	r2, [r3, #2]
    505e:	f7ff bebb 	b.w	4dd8 <flexpwmFrequency>
		switch ((info->module >> 4) & 3) {
    5062:	4805      	ldr	r0, [pc, #20]	; (5078 <analogWriteFrequency+0x6c>)
    5064:	e7f3      	b.n	504e <analogWriteFrequency+0x42>
    5066:	bf00      	nop
    5068:	20007838 	.word	0x20007838
    506c:	403dc000 	.word	0x403dc000
    5070:	401dc000 	.word	0x401dc000
    5074:	403e8000 	.word	0x403e8000
    5078:	401e8000 	.word	0x401e8000

0000507c <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    507c:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    507e:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    5080:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    5084:	4619      	mov	r1, r3
{
    5086:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    5088:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    508c:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    5090:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5094:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    5098:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    509c:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    509e:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    50a2:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    50a6:	b29b      	uxth	r3, r3
    50a8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    50ac:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    50b0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    50b4:	3101      	adds	r1, #1
    50b6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    50ba:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    50bc:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    50be:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    50c2:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    50c4:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    50c6:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    50c8:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    50ca:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    50ce:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    50d0:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    50d2:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    50d4:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    50d6:	d1eb      	bne.n	50b0 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    50d8:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    50dc:	b29b      	uxth	r3, r3
    50de:	f043 030f 	orr.w	r3, r3, #15
    50e2:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    50e6:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    50ea:	b29b      	uxth	r3, r3
    50ec:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    50f0:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    50f4:	bd10      	pop	{r4, pc}
    50f6:	bf00      	nop

000050f8 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    50f8:	4b37      	ldr	r3, [pc, #220]	; (51d8 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    50fa:	4a38      	ldr	r2, [pc, #224]	; (51dc <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    50fc:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    50fe:	4838      	ldr	r0, [pc, #224]	; (51e0 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    5100:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    5104:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    5106:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5108:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    510c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5110:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5114:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    5118:	430a      	orrs	r2, r1
    511a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    511e:	f7ff ffad 	bl	507c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    5122:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    5126:	f7ff ffa9 	bl	507c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    512a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    512e:	f7ff ffa5 	bl	507c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    5132:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    5136:	f7ff ffa1 	bl	507c <flexpwm_init>
	for (i=0; i < 4; i++) {
    513a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    513c:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5140:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    5144:	4611      	mov	r1, r2
    5146:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    514a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    514e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    5150:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    5152:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    5154:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5156:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    515a:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    515c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    515e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    5162:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5164:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    5166:	d1ee      	bne.n	5146 <pwm_init+0x4e>
    5168:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    516a:	481e      	ldr	r0, [pc, #120]	; (51e4 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    516c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5170:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    5174:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5176:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    517a:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    517e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    5182:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    5186:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    5188:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    518a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    518c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    518e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5192:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5194:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    5196:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    519a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    519c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    519e:	d1ee      	bne.n	517e <pwm_init+0x86>
    51a0:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    51a2:	4811      	ldr	r0, [pc, #68]	; (51e8 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    51a4:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    51a6:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    51aa:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    51ac:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    51b0:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    51b4:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    51b8:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    51bc:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    51be:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    51c0:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    51c2:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    51c4:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    51c6:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    51c8:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    51ca:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    51ce:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    51d0:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    51d4:	d1ee      	bne.n	51b4 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    51d6:	bd70      	pop	{r4, r5, r6, pc}
    51d8:	400fc000 	.word	0x400fc000
    51dc:	fc030000 	.word	0xfc030000
    51e0:	403dc000 	.word	0x403dc000
    51e4:	401e0000 	.word	0x401e0000
    51e8:	401e4000 	.word	0x401e4000

000051ec <analogWriteRes>:
		bits = 1;
	} else if (bits > 16) {
		bits = 16;
	}
	prior = analog_write_res;
	analog_write_res = bits;
    51ec:	2810      	cmp	r0, #16
    51ee:	4603      	mov	r3, r0
	prior = analog_write_res;
    51f0:	4a04      	ldr	r2, [pc, #16]	; (5204 <analogWriteRes+0x18>)
	analog_write_res = bits;
    51f2:	bf28      	it	cs
    51f4:	2310      	movcs	r3, #16
	prior = analog_write_res;
    51f6:	7810      	ldrb	r0, [r2, #0]
	analog_write_res = bits;
    51f8:	2b01      	cmp	r3, #1
    51fa:	bf38      	it	cc
    51fc:	2301      	movcc	r3, #1
    51fe:	7013      	strb	r3, [r2, #0]
	return prior;
}
    5200:	4770      	bx	lr
    5202:	bf00      	nop
    5204:	20008e2e 	.word	0x20008e2e

00005208 <unused_interrupt_vector>:
	__disable_irq();
    5208:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    520a:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    520e:	4c52      	ldr	r4, [pc, #328]	; (5358 <unused_interrupt_vector+0x150>)
    5210:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    5214:	f01e 0f04 	tst.w	lr, #4
    5218:	bf0c      	ite	eq
    521a:	f3ef 8208 	mrseq	r2, MSP
    521e:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    5222:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    5226:	4e4d      	ldr	r6, [pc, #308]	; (535c <unused_interrupt_vector+0x154>)
	while (p < end) {
    5228:	4d4d      	ldr	r5, [pc, #308]	; (5360 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    522a:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    522e:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    5232:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    5236:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    523a:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    523e:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    5242:	6993      	ldr	r3, [r2, #24]
    5244:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    5248:	69d3      	ldr	r3, [r2, #28]
    524a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    524e:	f000 f8d1 	bl	53f4 <tempmonGetTemp>
    5252:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    5256:	f001 f9c9 	bl	65ec <rtc_get>
	info->len = sizeof(*info) / 4;
    525a:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    525c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
    5260:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    5264:	460b      	mov	r3, r1
    5266:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    526a:	493e      	ldr	r1, [pc, #248]	; (5364 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    526c:	1d30      	adds	r0, r6, #4
    526e:	405a      	eors	r2, r3
    5270:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    5272:	f002 0301 	and.w	r3, r2, #1
    5276:	3c01      	subs	r4, #1
    5278:	fb01 f303 	mul.w	r3, r1, r3
    527c:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    5280:	d1f7      	bne.n	5272 <unused_interrupt_vector+0x6a>
	while (p < end) {
    5282:	42a8      	cmp	r0, r5
    5284:	d002      	beq.n	528c <unused_interrupt_vector+0x84>
		crc ^= *p++;
    5286:	6873      	ldr	r3, [r6, #4]
    5288:	4606      	mov	r6, r0
    528a:	e7ef      	b.n	526c <unused_interrupt_vector+0x64>
	info->crc = crc;
    528c:	4b32      	ldr	r3, [pc, #200]	; (5358 <unused_interrupt_vector+0x150>)
    528e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    5292:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    5296:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    529a:	4930      	ldr	r1, [pc, #192]	; (535c <unused_interrupt_vector+0x154>)
    529c:	4a32      	ldr	r2, [pc, #200]	; (5368 <unused_interrupt_vector+0x160>)
    529e:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    52a2:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    52a6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    52aa:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    52ae:	4a2f      	ldr	r2, [pc, #188]	; (536c <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    52b0:	2502      	movs	r5, #2
    52b2:	482f      	ldr	r0, [pc, #188]	; (5370 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    52b4:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    52b6:	492f      	ldr	r1, [pc, #188]	; (5374 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    52b8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    52bc:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    52be:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    52c0:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    52c2:	482d      	ldr	r0, [pc, #180]	; (5378 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    52c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    52c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    52cc:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    52ce:	680b      	ldr	r3, [r1, #0]
    52d0:	4283      	cmp	r3, r0
    52d2:	d83d      	bhi.n	5350 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    52d4:	4d26      	ldr	r5, [pc, #152]	; (5370 <unused_interrupt_vector+0x168>)
    52d6:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    52d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    52dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
    52e0:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    52e2:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    52e4:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    52e8:	4924      	ldr	r1, [pc, #144]	; (537c <unused_interrupt_vector+0x174>)
    52ea:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    52ee:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    52f2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    52f6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    52fa:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    52fe:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    5302:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    5306:	e001      	b.n	530c <unused_interrupt_vector+0x104>
		usb_isr();
    5308:	f000 f966 	bl	55d8 <usb_isr>
		if (PIT_TFLG0) {
    530c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    5310:	2b00      	cmp	r3, #0
    5312:	d0f9      	beq.n	5308 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    5314:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    5316:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    531a:	2c4f      	cmp	r4, #79	; 0x4f
    531c:	d9f4      	bls.n	5308 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    531e:	4b18      	ldr	r3, [pc, #96]	; (5380 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    5320:	2002      	movs	r0, #2
    5322:	4918      	ldr	r1, [pc, #96]	; (5384 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    5324:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    5328:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    532c:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    532e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    5332:	b93b      	cbnz	r3, 5344 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    5334:	4814      	ldr	r0, [pc, #80]	; (5388 <unused_interrupt_vector+0x180>)
    5336:	4915      	ldr	r1, [pc, #84]	; (538c <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    5338:	4a0d      	ldr	r2, [pc, #52]	; (5370 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    533a:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    533c:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    5340:	2b00      	cmp	r3, #0
    5342:	d0fa      	beq.n	533a <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    5344:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5348:	4a11      	ldr	r2, [pc, #68]	; (5390 <unused_interrupt_vector+0x188>)
    534a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    534e:	e7fe      	b.n	534e <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    5350:	f7fe ff3c 	bl	41cc <set_arm_clock>
    5354:	e7be      	b.n	52d4 <unused_interrupt_vector+0xcc>
    5356:	bf00      	nop
    5358:	2027ff00 	.word	0x2027ff00
    535c:	2027ff80 	.word	0x2027ff80
    5360:	2027ffa8 	.word	0x2027ffa8
    5364:	edb88320 	.word	0xedb88320
    5368:	2027ffa0 	.word	0x2027ffa0
    536c:	400fc000 	.word	0x400fc000
    5370:	40084000 	.word	0x40084000
    5374:	20008104 	.word	0x20008104
    5378:	0bcd3d80 	.word	0x0bcd3d80
    537c:	00249f00 	.word	0x00249f00
    5380:	400d9000 	.word	0x400d9000
    5384:	402e0000 	.word	0x402e0000
    5388:	400f8000 	.word	0x400f8000
    538c:	0bad00f1 	.word	0x0bad00f1
    5390:	05fa0004 	.word	0x05fa0004

00005394 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    5394:	490a      	ldr	r1, [pc, #40]	; (53c0 <_sbrk+0x2c>)
    5396:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    5398:	b138      	cbz	r0, 53aa <_sbrk+0x16>
{
    539a:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    539c:	1813      	adds	r3, r2, r0
    539e:	4809      	ldr	r0, [pc, #36]	; (53c4 <_sbrk+0x30>)
    53a0:	4283      	cmp	r3, r0
    53a2:	d804      	bhi.n	53ae <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    53a4:	4610      	mov	r0, r2
                __brkval = prev + incr;
    53a6:	600b      	str	r3, [r1, #0]
}
    53a8:	bd08      	pop	{r3, pc}
    53aa:	4610      	mov	r0, r2
    53ac:	4770      	bx	lr
                        errno = ENOMEM;
    53ae:	f003 fad7 	bl	8960 <__errno>
    53b2:	230c      	movs	r3, #12
                        return (void *)-1;
    53b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                        errno = ENOMEM;
    53b8:	6003      	str	r3, [r0, #0]
}
    53ba:	4610      	mov	r0, r2
    53bc:	bd08      	pop	{r3, pc}
    53be:	bf00      	nop
    53c0:	20008630 	.word	0x20008630
    53c4:	20280000 	.word	0x20280000

000053c8 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    53c8:	2000      	movs	r0, #0
    53ca:	4770      	bx	lr

000053cc <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    53cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    53d0:	4770      	bx	lr
    53d2:	bf00      	nop

000053d4 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    53d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    53d8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    53da:	604b      	str	r3, [r1, #4]
}
    53dc:	4770      	bx	lr
    53de:	bf00      	nop

000053e0 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    53e0:	2001      	movs	r0, #1
    53e2:	4770      	bx	lr

000053e4 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    53e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    53e8:	4770      	bx	lr
    53ea:	bf00      	nop

000053ec <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    53ec:	bf30      	wfi
    53ee:	e7fd      	b.n	53ec <abort>

000053f0 <Panic_Temp_isr>:
  unused_interrupt_vector();
    53f0:	f7ff bf0a 	b.w	5208 <unused_interrupt_vector>

000053f4 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    53f4:	4a12      	ldr	r2, [pc, #72]	; (5440 <tempmonGetTemp+0x4c>)
    53f6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    53fa:	075b      	lsls	r3, r3, #29
    53fc:	d5fb      	bpl.n	53f6 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    53fe:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    5402:	4810      	ldr	r0, [pc, #64]	; (5444 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    5404:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    5408:	490f      	ldr	r1, [pc, #60]	; (5448 <tempmonGetTemp+0x54>)
    540a:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    540e:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    5412:	ed91 6a00 	vldr	s12, [r1]
    5416:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    541a:	4a0c      	ldr	r2, [pc, #48]	; (544c <tempmonGetTemp+0x58>)
    541c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5420:	4b0b      	ldr	r3, [pc, #44]	; (5450 <tempmonGetTemp+0x5c>)
    5422:	edd2 6a00 	vldr	s13, [r2]
    5426:	ee77 7ac7 	vsub.f32	s15, s15, s14
    542a:	ed93 7a00 	vldr	s14, [r3]
    542e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    5432:	ee67 7a86 	vmul.f32	s15, s15, s12
    5436:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    543a:	ee37 0a40 	vsub.f32	s0, s14, s0
    543e:	4770      	bx	lr
    5440:	400d8100 	.word	0x400d8100
    5444:	2000abc8 	.word	0x2000abc8
    5448:	2000abd0 	.word	0x2000abd0
    544c:	2000abd4 	.word	0x2000abd4
    5450:	2000abcc 	.word	0x2000abcc

00005454 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    5454:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    5456:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    5458:	b11b      	cbz	r3, 5462 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    545a:	6853      	ldr	r3, [r2, #4]
    545c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    5460:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    5462:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    5464:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    5466:	b33c      	cbz	r4, 54b8 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    5468:	4b1a      	ldr	r3, [pc, #104]	; (54d4 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    546a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    546c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    5470:	420c      	tst	r4, r1
    5472:	d11d      	bne.n	54b0 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    5474:	4e18      	ldr	r6, [pc, #96]	; (54d8 <schedule_transfer+0x84>)
    5476:	6877      	ldr	r7, [r6, #4]
    5478:	e004      	b.n	5484 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    547a:	6874      	ldr	r4, [r6, #4]
    547c:	1be4      	subs	r4, r4, r7
    547e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    5482:	d20b      	bcs.n	549c <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    5484:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    5488:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    548c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    5490:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    5494:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    5498:	0464      	lsls	r4, r4, #17
    549a:	d5ee      	bpl.n	547a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    549c:	400d      	ands	r5, r1
    549e:	d107      	bne.n	54b0 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    54a0:	4c0c      	ldr	r4, [pc, #48]	; (54d4 <schedule_transfer+0x80>)
		endpoint->status = 0;
    54a2:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    54a6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    54aa:	430b      	orrs	r3, r1
    54ac:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    54b0:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    54b2:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    54b4:	bcf0      	pop	{r4, r5, r6, r7}
    54b6:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    54b8:	4d06      	ldr	r5, [pc, #24]	; (54d4 <schedule_transfer+0x80>)
	endpoint->status = 0;
    54ba:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    54be:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    54c2:	430b      	orrs	r3, r1
    54c4:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    54c8:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    54ca:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    54cc:	b662      	cpsie	i
}
    54ce:	bcf0      	pop	{r4, r5, r6, r7}
    54d0:	4770      	bx	lr
    54d2:	bf00      	nop
    54d4:	402e0000 	.word	0x402e0000
    54d8:	e0001000 	.word	0xe0001000

000054dc <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    54dc:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    54de:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    54e0:	b19d      	cbz	r5, 550a <run_callbacks+0x2e>
    54e2:	4606      	mov	r6, r0
    54e4:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    54e6:	2400      	movs	r4, #0
    54e8:	e003      	b.n	54f2 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    54ea:	6812      	ldr	r2, [r2, #0]
		count++;
    54ec:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    54ee:	2a01      	cmp	r2, #1
    54f0:	d00c      	beq.n	550c <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    54f2:	6853      	ldr	r3, [r2, #4]
    54f4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    54f8:	d0f7      	beq.n	54ea <run_callbacks+0xe>
			ep->first_transfer = t;
    54fa:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    54fc:	b12c      	cbz	r4, 550a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    54fe:	4628      	mov	r0, r5
		ep->callback_function(first);
    5500:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    5502:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    5504:	4798      	blx	r3
	while (count) {
    5506:	3c01      	subs	r4, #1
    5508:	d1f9      	bne.n	54fe <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    550a:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    550c:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    5510:	e7f4      	b.n	54fc <run_callbacks+0x20>
    5512:	bf00      	nop

00005514 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    5514:	b430      	push	{r4, r5}
	if (len > 0) {
    5516:	b9d9      	cbnz	r1, 5550 <endpoint0_transmit.constprop.0+0x3c>
    5518:	4c1f      	ldr	r4, [pc, #124]	; (5598 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    551a:	4b20      	ldr	r3, [pc, #128]	; (559c <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    551c:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    551e:	4a20      	ldr	r2, [pc, #128]	; (55a0 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    5520:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    5522:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    5526:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    5528:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    552a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    552e:	2480      	movs	r4, #128	; 0x80
    5530:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    5532:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    5536:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    553a:	481a      	ldr	r0, [pc, #104]	; (55a4 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    553c:	432b      	orrs	r3, r5
    553e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    5542:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    5544:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    5548:	2b00      	cmp	r3, #0
    554a:	d1fb      	bne.n	5544 <endpoint0_transmit.constprop.0+0x30>
}
    554c:	bc30      	pop	{r4, r5}
    554e:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    5550:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    5552:	4b15      	ldr	r3, [pc, #84]	; (55a8 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    5554:	4c10      	ldr	r4, [pc, #64]	; (5598 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    5556:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    5558:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    555c:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    555e:	4a10      	ldr	r2, [pc, #64]	; (55a0 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    5560:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    5562:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    5566:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    5568:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    556a:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    556e:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    5570:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    5572:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    5576:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    557a:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    557c:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    557e:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    5580:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    5582:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    5586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    558a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    558e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    5592:	2b00      	cmp	r3, #0
    5594:	d1fb      	bne.n	558e <endpoint0_transmit.constprop.0+0x7a>
    5596:	e7c0      	b.n	551a <endpoint0_transmit.constprop.0+0x6>
    5598:	20000000 	.word	0x20000000
    559c:	200092c0 	.word	0x200092c0
    55a0:	402e0000 	.word	0x402e0000
    55a4:	2000aa6c 	.word	0x2000aa6c
    55a8:	200092e0 	.word	0x200092e0

000055ac <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    55ac:	4908      	ldr	r1, [pc, #32]	; (55d0 <usb_stop_sof_interrupts+0x24>)
    55ae:	2201      	movs	r2, #1
    55b0:	780b      	ldrb	r3, [r1, #0]
    55b2:	fa02 f000 	lsl.w	r0, r2, r0
    55b6:	ea23 0000 	bic.w	r0, r3, r0
    55ba:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    55bc:	b930      	cbnz	r0, 55cc <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    55be:	4a05      	ldr	r2, [pc, #20]	; (55d4 <usb_stop_sof_interrupts+0x28>)
    55c0:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    55c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    55c8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    55cc:	4770      	bx	lr
    55ce:	bf00      	nop
    55d0:	2000affb 	.word	0x2000affb
    55d4:	402e0000 	.word	0x402e0000

000055d8 <usb_isr>:
{
    55d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    55dc:	4c97      	ldr	r4, [pc, #604]	; (583c <usb_isr+0x264>)
{
    55de:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    55e0:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    55e4:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    55e6:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    55ea:	d553      	bpl.n	5694 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    55ec:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    55f0:	2a00      	cmp	r2, #0
    55f2:	d04a      	beq.n	568a <usb_isr+0xb2>
    55f4:	4e92      	ldr	r6, [pc, #584]	; (5840 <usb_isr+0x268>)
    55f6:	f8df a260 	ldr.w	sl, [pc, #608]	; 5858 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    55fa:	f8df 9274 	ldr.w	r9, [pc, #628]	; 5870 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    55fe:	f8df b274 	ldr.w	fp, [pc, #628]	; 5874 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    5602:	f8df 8274 	ldr.w	r8, [pc, #628]	; 5878 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    5606:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    560a:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    560e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    5612:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    5616:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    561a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    561e:	049d      	lsls	r5, r3, #18
    5620:	d5f5      	bpl.n	560e <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    5622:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    5626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    562a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    562e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    5632:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    5636:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    563a:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    563e:	d1fa      	bne.n	5636 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    5640:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    5642:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    5644:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    5648:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    564c:	f000 81cf 	beq.w	59ee <usb_isr+0x416>
    5650:	f200 80db 	bhi.w	580a <usb_isr+0x232>
    5654:	f240 3102 	movw	r1, #770	; 0x302
    5658:	428b      	cmp	r3, r1
    565a:	f000 81e7 	beq.w	5a2c <usb_isr+0x454>
    565e:	f200 809a 	bhi.w	5796 <usb_isr+0x1be>
    5662:	2b82      	cmp	r3, #130	; 0x82
    5664:	f000 81cb 	beq.w	59fe <usb_isr+0x426>
    5668:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    566c:	f040 808a 	bne.w	5784 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    5670:	f010 0f78 	tst.w	r0, #120	; 0x78
    5674:	b283      	uxth	r3, r0
    5676:	f000 8203 	beq.w	5a80 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    567a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    567e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    5682:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    5686:	2a00      	cmp	r2, #0
    5688:	d1bd      	bne.n	5606 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    568a:	4a6c      	ldr	r2, [pc, #432]	; (583c <usb_isr+0x264>)
    568c:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    5690:	2b00      	cmp	r3, #0
    5692:	d142      	bne.n	571a <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    5694:	067e      	lsls	r6, r7, #25
    5696:	d516      	bpl.n	56c6 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    5698:	4b68      	ldr	r3, [pc, #416]	; (583c <usb_isr+0x264>)
    569a:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    569e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    56a2:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    56a6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    56aa:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    56ae:	2c00      	cmp	r4, #0
    56b0:	d1fb      	bne.n	56aa <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    56b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    56b6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    56ba:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    56be:	f000 fd2d 	bl	611c <usb_serial_reset>
		endpointN_notify_mask = 0;
    56c2:	4b60      	ldr	r3, [pc, #384]	; (5844 <usb_isr+0x26c>)
    56c4:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    56c6:	01fc      	lsls	r4, r7, #7
    56c8:	d503      	bpl.n	56d2 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    56ca:	4b5f      	ldr	r3, [pc, #380]	; (5848 <usb_isr+0x270>)
    56cc:	681b      	ldr	r3, [r3, #0]
    56ce:	b103      	cbz	r3, 56d2 <usb_isr+0xfa>
    56d0:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    56d2:	01b8      	lsls	r0, r7, #6
    56d4:	d503      	bpl.n	56de <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    56d6:	4b5d      	ldr	r3, [pc, #372]	; (584c <usb_isr+0x274>)
    56d8:	681b      	ldr	r3, [r3, #0]
    56da:	b103      	cbz	r3, 56de <usb_isr+0x106>
    56dc:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    56de:	0779      	lsls	r1, r7, #29
    56e0:	d508      	bpl.n	56f4 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    56e2:	4b56      	ldr	r3, [pc, #344]	; (583c <usb_isr+0x264>)
    56e4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    56e8:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    56ec:	d047      	beq.n	577e <usb_isr+0x1a6>
			usb_high_speed = 1;
    56ee:	4b58      	ldr	r3, [pc, #352]	; (5850 <usb_isr+0x278>)
    56f0:	2201      	movs	r2, #1
    56f2:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    56f4:	4b51      	ldr	r3, [pc, #324]	; (583c <usb_isr+0x264>)
    56f6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    56fa:	061a      	lsls	r2, r3, #24
    56fc:	d50a      	bpl.n	5714 <usb_isr+0x13c>
    56fe:	063b      	lsls	r3, r7, #24
    5700:	d508      	bpl.n	5714 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    5702:	4a54      	ldr	r2, [pc, #336]	; (5854 <usb_isr+0x27c>)
    5704:	7813      	ldrb	r3, [r2, #0]
    5706:	b12b      	cbz	r3, 5714 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    5708:	3b01      	subs	r3, #1
    570a:	b2db      	uxtb	r3, r3
    570c:	7013      	strb	r3, [r2, #0]
    570e:	2b00      	cmp	r3, #0
    5710:	f000 8272 	beq.w	5bf8 <usb_isr+0x620>
}
    5714:	b003      	add	sp, #12
    5716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    571a:	494f      	ldr	r1, [pc, #316]	; (5858 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    571c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    5720:	6808      	ldr	r0, [r1, #0]
    5722:	4203      	tst	r3, r0
    5724:	f040 81d1 	bne.w	5aca <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    5728:	4a46      	ldr	r2, [pc, #280]	; (5844 <usb_isr+0x26c>)
    572a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    572c:	401c      	ands	r4, r3
    572e:	d0b1      	beq.n	5694 <usb_isr+0xbc>
				while (tx) {
    5730:	ea5f 4814 	movs.w	r8, r4, lsr #16
    5734:	d010      	beq.n	5758 <usb_isr+0x180>
    5736:	4e42      	ldr	r6, [pc, #264]	; (5840 <usb_isr+0x268>)
					tx &= ~(1<<p);
    5738:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    573c:	fa98 f5a8 	rbit	r5, r8
    5740:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    5744:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    5748:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    574c:	3040      	adds	r0, #64	; 0x40
    574e:	f7ff fec5 	bl	54dc <run_callbacks>
				while (tx) {
    5752:	ea38 0805 	bics.w	r8, r8, r5
    5756:	d1f1      	bne.n	573c <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    5758:	b2a4      	uxth	r4, r4
				while(rx) {
    575a:	2c00      	cmp	r4, #0
    575c:	d09a      	beq.n	5694 <usb_isr+0xbc>
    575e:	4e38      	ldr	r6, [pc, #224]	; (5840 <usb_isr+0x268>)
					rx &= ~(1<<p);
    5760:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    5764:	fa94 f5a4 	rbit	r5, r4
    5768:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    576c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    5770:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    5774:	f7ff feb2 	bl	54dc <run_callbacks>
				while(rx) {
    5778:	43ac      	bics	r4, r5
    577a:	d1f3      	bne.n	5764 <usb_isr+0x18c>
    577c:	e78a      	b.n	5694 <usb_isr+0xbc>
			usb_high_speed = 0;
    577e:	4a34      	ldr	r2, [pc, #208]	; (5850 <usb_isr+0x278>)
    5780:	7013      	strb	r3, [r2, #0]
    5782:	e7b7      	b.n	56f4 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    5784:	2b80      	cmp	r3, #128	; 0x80
    5786:	f47f af78 	bne.w	567a <usb_isr+0xa2>
		reply_buffer[0] = 0;
    578a:	4834      	ldr	r0, [pc, #208]	; (585c <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    578c:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    578e:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    5790:	f7ff fec0 	bl	5514 <endpoint0_transmit.constprop.0>
		return;
    5794:	e775      	b.n	5682 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    5796:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    579a:	f000 810b 	beq.w	59b4 <usb_isr+0x3dc>
    579e:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    57a2:	2b01      	cmp	r3, #1
    57a4:	f63f af69 	bhi.w	567a <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    57a8:	4b2d      	ldr	r3, [pc, #180]	; (5860 <usb_isr+0x288>)
    57aa:	685d      	ldr	r5, [r3, #4]
    57ac:	2d00      	cmp	r5, #0
    57ae:	f43f af64 	beq.w	567a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    57b2:	fa1f fc8c 	uxth.w	ip, ip
    57b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    57ba:	e004      	b.n	57c6 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    57bc:	691d      	ldr	r5, [r3, #16]
    57be:	330c      	adds	r3, #12
    57c0:	2d00      	cmp	r5, #0
    57c2:	f43f af5a 	beq.w	567a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    57c6:	881a      	ldrh	r2, [r3, #0]
    57c8:	4572      	cmp	r2, lr
    57ca:	d1f7      	bne.n	57bc <usb_isr+0x1e4>
    57cc:	885a      	ldrh	r2, [r3, #2]
    57ce:	4562      	cmp	r2, ip
    57d0:	d1f4      	bne.n	57bc <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    57d2:	ea4f 221e 	mov.w	r2, lr, lsr #8
    57d6:	2a03      	cmp	r2, #3
    57d8:	f000 81a5 	beq.w	5b26 <usb_isr+0x54e>
					datalen = list->length;
    57dc:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    57de:	0c00      	lsrs	r0, r0, #16
    57e0:	4282      	cmp	r2, r0
    57e2:	bf28      	it	cs
    57e4:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    57e6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    57ea:	f040 81a1 	bne.w	5b30 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    57ee:	4b18      	ldr	r3, [pc, #96]	; (5850 <usb_isr+0x278>)
    57f0:	491c      	ldr	r1, [pc, #112]	; (5864 <usb_isr+0x28c>)
    57f2:	7818      	ldrb	r0, [r3, #0]
    57f4:	4b1c      	ldr	r3, [pc, #112]	; (5868 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    57f6:	9201      	str	r2, [sp, #4]
    57f8:	2800      	cmp	r0, #0
    57fa:	bf18      	it	ne
    57fc:	4619      	movne	r1, r3
    57fe:	481b      	ldr	r0, [pc, #108]	; (586c <usb_isr+0x294>)
    5800:	f7ff f9c4 	bl	4b8c <memcpy>
    5804:	4d19      	ldr	r5, [pc, #100]	; (586c <usb_isr+0x294>)
    5806:	9a01      	ldr	r2, [sp, #4]
    5808:	e1e1      	b.n	5bce <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    580a:	f242 2121 	movw	r1, #8737	; 0x2221
    580e:	428b      	cmp	r3, r1
    5810:	d07c      	beq.n	590c <usb_isr+0x334>
    5812:	d933      	bls.n	587c <usb_isr+0x2a4>
    5814:	f242 3121 	movw	r1, #8993	; 0x2321
    5818:	428b      	cmp	r3, r1
    581a:	f000 8081 	beq.w	5920 <usb_isr+0x348>
    581e:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    5822:	428b      	cmp	r3, r1
    5824:	f47f af29 	bne.w	567a <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    5828:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    582c:	b283      	uxth	r3, r0
    582e:	f47f af24 	bne.w	567a <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    5832:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    5836:	f363 0c0f 	bfi	ip, r3, #0, #16
    583a:	e7b5      	b.n	57a8 <usb_isr+0x1d0>
    583c:	402e0000 	.word	0x402e0000
    5840:	20000000 	.word	0x20000000
    5844:	2000aa70 	.word	0x2000aa70
    5848:	2000afdc 	.word	0x2000afdc
    584c:	2000afe0 	.word	0x2000afe0
    5850:	2000b004 	.word	0x2000b004
    5854:	2000b005 	.word	0x2000b005
    5858:	2000aa6c 	.word	0x2000aa6c
    585c:	2000ab8c 	.word	0x2000ab8c
    5860:	20007b20 	.word	0x20007b20
    5864:	60001dc8 	.word	0x60001dc8
    5868:	60001e2c 	.word	0x60001e2c
    586c:	20200000 	.word	0x20200000
    5870:	2000aa64 	.word	0x2000aa64
    5874:	b8c6cf5d 	.word	0xb8c6cf5d
    5878:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    587c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    5880:	d066      	beq.n	5950 <usb_isr+0x378>
    5882:	f242 0121 	movw	r1, #8225	; 0x2021
    5886:	428b      	cmp	r3, r1
    5888:	f47f aef7 	bne.w	567a <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    588c:	0c03      	lsrs	r3, r0, #16
    588e:	2b07      	cmp	r3, #7
    5890:	f47f aef3 	bne.w	567a <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    5894:	4bb2      	ldr	r3, [pc, #712]	; (5b60 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    5896:	49b3      	ldr	r1, [pc, #716]	; (5b64 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    5898:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    589a:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    589c:	49b2      	ldr	r1, [pc, #712]	; (5b68 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    589e:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    58a0:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    58a4:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    58a8:	2201      	movs	r2, #1
    58aa:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    58ac:	4aaf      	ldr	r2, [pc, #700]	; (5b6c <usb_isr+0x594>)
    58ae:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    58b0:	4aaf      	ldr	r2, [pc, #700]	; (5b70 <usb_isr+0x598>)
    58b2:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    58b4:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    58b8:	f041 0101 	orr.w	r1, r1, #1
    58bc:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    58c0:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    58c4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    58c8:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    58ca:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    58cc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    58d0:	2b00      	cmp	r3, #0
    58d2:	d1fb      	bne.n	58cc <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    58d4:	4aa7      	ldr	r2, [pc, #668]	; (5b74 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    58d6:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    58d8:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    58da:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    58dc:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    58de:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    58e0:	f248 0380 	movw	r3, #32896	; 0x8080
    58e4:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    58e6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    58ea:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    58ee:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    58f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    58f6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    58fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    58fe:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    5902:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    5906:	2b00      	cmp	r3, #0
    5908:	d1fb      	bne.n	5902 <usb_isr+0x32a>
    590a:	e6ba      	b.n	5682 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    590c:	b280      	uxth	r0, r0
    590e:	b938      	cbnz	r0, 5920 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    5910:	4b99      	ldr	r3, [pc, #612]	; (5b78 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    5912:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    5916:	6819      	ldr	r1, [r3, #0]
    5918:	4b98      	ldr	r3, [pc, #608]	; (5b7c <usb_isr+0x5a4>)
    591a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    591c:	4b98      	ldr	r3, [pc, #608]	; (5b80 <usb_isr+0x5a8>)
    591e:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    5920:	4b94      	ldr	r3, [pc, #592]	; (5b74 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    5922:	2200      	movs	r2, #0
    5924:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    5926:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    5928:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    592a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    592c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    592e:	2280      	movs	r2, #128	; 0x80
    5930:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    5932:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    5936:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    593a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    593e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5942:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    5946:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    594a:	2b00      	cmp	r3, #0
    594c:	d1fb      	bne.n	5946 <usb_isr+0x36e>
    594e:	e698      	b.n	5682 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    5950:	f3c2 4207 	ubfx	r2, r2, #16, #8
    5954:	4b8b      	ldr	r3, [pc, #556]	; (5b84 <usb_isr+0x5ac>)
    5956:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    5958:	4b8b      	ldr	r3, [pc, #556]	; (5b88 <usb_isr+0x5b0>)
    595a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    595e:	4b8b      	ldr	r3, [pc, #556]	; (5b8c <usb_isr+0x5b4>)
    5960:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    5964:	4b8a      	ldr	r3, [pc, #552]	; (5b90 <usb_isr+0x5b8>)
    5966:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    596a:	f000 fbd9 	bl	6120 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    596e:	2280      	movs	r2, #128	; 0x80
    5970:	4629      	mov	r1, r5
    5972:	4888      	ldr	r0, [pc, #544]	; (5b94 <usb_isr+0x5bc>)
    5974:	f002 feb8 	bl	86e8 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    5978:	4b87      	ldr	r3, [pc, #540]	; (5b98 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    597a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    597c:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    5980:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    5984:	4b7b      	ldr	r3, [pc, #492]	; (5b74 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    5986:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    5988:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    598a:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    598c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    598e:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    5990:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    5992:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    5996:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    599a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    599e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    59a2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    59a6:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    59aa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    59ae:	2b00      	cmp	r3, #0
    59b0:	d1fb      	bne.n	59aa <usb_isr+0x3d2>
    59b2:	e666      	b.n	5682 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    59b4:	4b6f      	ldr	r3, [pc, #444]	; (5b74 <usb_isr+0x59c>)
    59b6:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    59b8:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    59ba:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    59bc:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    59be:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    59c0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    59c2:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    59c4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    59c8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    59cc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    59d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    59d4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    59d8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    59dc:	2b00      	cmp	r3, #0
    59de:	d1fb      	bne.n	59d8 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    59e0:	0c13      	lsrs	r3, r2, #16
    59e2:	065b      	lsls	r3, r3, #25
    59e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    59e8:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    59ec:	e649      	b.n	5682 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    59ee:	4b65      	ldr	r3, [pc, #404]	; (5b84 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    59f0:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    59f2:	486a      	ldr	r0, [pc, #424]	; (5b9c <usb_isr+0x5c4>)
    59f4:	781b      	ldrb	r3, [r3, #0]
    59f6:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    59f8:	f7ff fd8c 	bl	5514 <endpoint0_transmit.constprop.0>
		return;
    59fc:	e641      	b.n	5682 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    59fe:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    5a00:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    5a04:	f47f ae39 	bne.w	567a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    5a08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    5a0c:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    5a10:	4a62      	ldr	r2, [pc, #392]	; (5b9c <usb_isr+0x5c4>)
    5a12:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    5a14:	0618      	lsls	r0, r3, #24
    5a16:	f100 809e 	bmi.w	5b56 <usb_isr+0x57e>
    5a1a:	07cb      	lsls	r3, r1, #31
    5a1c:	d501      	bpl.n	5a22 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    5a1e:	2301      	movs	r3, #1
    5a20:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    5a22:	2102      	movs	r1, #2
    5a24:	485d      	ldr	r0, [pc, #372]	; (5b9c <usb_isr+0x5c4>)
    5a26:	f7ff fd75 	bl	5514 <endpoint0_transmit.constprop.0>
		return;
    5a2a:	e62a      	b.n	5682 <usb_isr+0xaa>
		if (endpoint > 7) break;
    5a2c:	f010 0f78 	tst.w	r0, #120	; 0x78
    5a30:	b283      	uxth	r3, r0
    5a32:	f47f ae22 	bne.w	567a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    5a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    5a3a:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    5a3e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    5a42:	bf14      	ite	ne
    5a44:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    5a48:	f043 0301 	orreq.w	r3, r3, #1
    5a4c:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    5a50:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    5a52:	4b48      	ldr	r3, [pc, #288]	; (5b74 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    5a54:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    5a56:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    5a58:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    5a5a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    5a5c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    5a5e:	2280      	movs	r2, #128	; 0x80
    5a60:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    5a62:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    5a66:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    5a6a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    5a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5a72:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    5a76:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    5a7a:	2b00      	cmp	r3, #0
    5a7c:	d1fb      	bne.n	5a76 <usb_isr+0x49e>
    5a7e:	e600      	b.n	5682 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    5a80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    5a84:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    5a88:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    5a8c:	bf14      	ite	ne
    5a8e:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    5a92:	f023 0301 	biceq.w	r3, r3, #1
    5a96:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    5a9a:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    5a9c:	4b35      	ldr	r3, [pc, #212]	; (5b74 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    5a9e:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    5aa0:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    5aa2:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    5aa4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    5aa6:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    5aa8:	2280      	movs	r2, #128	; 0x80
    5aaa:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    5aac:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    5ab0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    5ab4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    5ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5abc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    5ac0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    5ac4:	2b00      	cmp	r3, #0
    5ac6:	d1fb      	bne.n	5ac0 <usb_isr+0x4e8>
    5ac8:	e5db      	b.n	5682 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    5aca:	2000      	movs	r0, #0
    5acc:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    5ace:	4926      	ldr	r1, [pc, #152]	; (5b68 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    5ad0:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    5ad2:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    5ad4:	f242 0121 	movw	r1, #8225	; 0x2021
    5ad8:	428c      	cmp	r4, r1
    5ada:	f47f ae25 	bne.w	5728 <usb_isr+0x150>
    5ade:	b280      	uxth	r0, r0
    5ae0:	2800      	cmp	r0, #0
    5ae2:	f47f ae21 	bne.w	5728 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    5ae6:	492e      	ldr	r1, [pc, #184]	; (5ba0 <usb_isr+0x5c8>)
    5ae8:	4c2e      	ldr	r4, [pc, #184]	; (5ba4 <usb_isr+0x5cc>)
    5aea:	c903      	ldmia	r1, {r0, r1}
    5aec:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    5aee:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    5af0:	ea4f 4111 	mov.w	r1, r1, lsr #16
    5af4:	6020      	str	r0, [r4, #0]
    5af6:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    5af8:	f47f ae16 	bne.w	5728 <usb_isr+0x150>
	__disable_irq();
    5afc:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    5afe:	482a      	ldr	r0, [pc, #168]	; (5ba8 <usb_isr+0x5d0>)
    5b00:	7801      	ldrb	r1, [r0, #0]
    5b02:	f041 0108 	orr.w	r1, r1, #8
    5b06:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    5b08:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    5b0c:	060d      	lsls	r5, r1, #24
    5b0e:	d405      	bmi.n	5b1c <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    5b10:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    5b12:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    5b14:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    5b18:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    5b1c:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    5b1e:	4a23      	ldr	r2, [pc, #140]	; (5bac <usb_isr+0x5d4>)
    5b20:	2150      	movs	r1, #80	; 0x50
    5b22:	7011      	strb	r1, [r2, #0]
    5b24:	e600      	b.n	5728 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    5b26:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    5b28:	782a      	ldrb	r2, [r5, #0]
    5b2a:	4282      	cmp	r2, r0
    5b2c:	bf28      	it	cs
    5b2e:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    5b30:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    5b34:	d144      	bne.n	5bc0 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    5b36:	4b1e      	ldr	r3, [pc, #120]	; (5bb0 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    5b38:	4d1e      	ldr	r5, [pc, #120]	; (5bb4 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    5b3a:	7818      	ldrb	r0, [r3, #0]
    5b3c:	491e      	ldr	r1, [pc, #120]	; (5bb8 <usb_isr+0x5e0>)
    5b3e:	4b1f      	ldr	r3, [pc, #124]	; (5bbc <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    5b40:	9201      	str	r2, [sp, #4]
    5b42:	2800      	cmp	r0, #0
    5b44:	bf18      	it	ne
    5b46:	4619      	movne	r1, r3
    5b48:	4628      	mov	r0, r5
    5b4a:	f7ff f81f 	bl	4b8c <memcpy>
					usb_descriptor_buffer[1] = 7;
    5b4e:	2307      	movs	r3, #7
    5b50:	706b      	strb	r3, [r5, #1]
    5b52:	9a01      	ldr	r2, [sp, #4]
    5b54:	e03b      	b.n	5bce <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    5b56:	03c9      	lsls	r1, r1, #15
    5b58:	f53f af61 	bmi.w	5a1e <usb_isr+0x446>
    5b5c:	e761      	b.n	5a22 <usb_isr+0x44a>
    5b5e:	bf00      	nop
    5b60:	200092e0 	.word	0x200092e0
    5b64:	2000ba64 	.word	0x2000ba64
    5b68:	20009480 	.word	0x20009480
    5b6c:	00070080 	.word	0x00070080
    5b70:	2000ca64 	.word	0x2000ca64
    5b74:	200092c0 	.word	0x200092c0
    5b78:	2000ae44 	.word	0x2000ae44
    5b7c:	2000afd8 	.word	0x2000afd8
    5b80:	2000b002 	.word	0x2000b002
    5b84:	2000b003 	.word	0x2000b003
    5b88:	00cc0002 	.word	0x00cc0002
    5b8c:	000200c8 	.word	0x000200c8
    5b90:	00c80002 	.word	0x00c80002
    5b94:	20000080 	.word	0x20000080
    5b98:	74d59319 	.word	0x74d59319
    5b9c:	2000ab8c 	.word	0x2000ab8c
    5ba0:	2000aa64 	.word	0x2000aa64
    5ba4:	2000afd0 	.word	0x2000afd0
    5ba8:	2000affb 	.word	0x2000affb
    5bac:	2000b005 	.word	0x2000b005
    5bb0:	2000b004 	.word	0x2000b004
    5bb4:	20200000 	.word	0x20200000
    5bb8:	60001e2c 	.word	0x60001e2c
    5bbc:	60001dc8 	.word	0x60001dc8
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    5bc0:	4629      	mov	r1, r5
    5bc2:	4d10      	ldr	r5, [pc, #64]	; (5c04 <usb_isr+0x62c>)
    5bc4:	9201      	str	r2, [sp, #4]
    5bc6:	4628      	mov	r0, r5
    5bc8:	f7fe ffe0 	bl	4b8c <memcpy>
    5bcc:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    5bce:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    5bd2:	4415      	add	r5, r2
	asm("dsb");
    5bd4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    5bd8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    5bdc:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    5be0:	3320      	adds	r3, #32
	} while (location < end_addr);
    5be2:	429d      	cmp	r5, r3
    5be4:	d8fa      	bhi.n	5bdc <usb_isr+0x604>
	asm("dsb");
    5be6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    5bea:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    5bee:	4805      	ldr	r0, [pc, #20]	; (5c04 <usb_isr+0x62c>)
    5bf0:	4611      	mov	r1, r2
    5bf2:	f7ff fc8f 	bl	5514 <endpoint0_transmit.constprop.0>
				return;
    5bf6:	e544      	b.n	5682 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    5bf8:	2003      	movs	r0, #3
    5bfa:	f7ff fcd7 	bl	55ac <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    5bfe:	f00b fb0f 	bl	11220 <___reboot_Teensyduino__veneer>
    5c02:	bf00      	nop
    5c04:	20200000 	.word	0x20200000

00005c08 <usb_config_rx>:
{
    5c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c0c:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    5c0e:	1e83      	subs	r3, r0, #2
    5c10:	2b02      	cmp	r3, #2
    5c12:	d901      	bls.n	5c18 <usb_config_rx+0x10>
}
    5c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    5c18:	f8df 904c 	ldr.w	r9, [pc, #76]	; 5c68 <usb_config_rx+0x60>
    5c1c:	4615      	mov	r5, r2
    5c1e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    5c20:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    5c22:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    5c26:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    5c28:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    5c2c:	2100      	movs	r1, #0
    5c2e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    5c32:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    5c34:	f002 fd58 	bl	86e8 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    5c38:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    5c3c:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    5c3e:	0952      	lsrs	r2, r2, #5
    5c40:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    5c44:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    5c48:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    5c4c:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    5c50:	2f00      	cmp	r7, #0
    5c52:	d0df      	beq.n	5c14 <usb_config_rx+0xc>
    5c54:	4a03      	ldr	r2, [pc, #12]	; (5c64 <usb_config_rx+0x5c>)
    5c56:	40b3      	lsls	r3, r6
    5c58:	6811      	ldr	r1, [r2, #0]
    5c5a:	430b      	orrs	r3, r1
    5c5c:	6013      	str	r3, [r2, #0]
}
    5c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c62:	bf00      	nop
    5c64:	2000aa70 	.word	0x2000aa70
    5c68:	20000000 	.word	0x20000000

00005c6c <usb_config_tx>:
{
    5c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c70:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    5c72:	1e81      	subs	r1, r0, #2
    5c74:	2902      	cmp	r1, #2
    5c76:	d901      	bls.n	5c7c <usb_config_tx+0x10>
}
    5c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    5c7c:	01c7      	lsls	r7, r0, #7
    5c7e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 5ccc <usb_config_tx+0x60>
    5c82:	4692      	mov	sl, r2
    5c84:	4604      	mov	r4, r0
    5c86:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    5c88:	223c      	movs	r2, #60	; 0x3c
    5c8a:	2100      	movs	r1, #0
    5c8c:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    5c8e:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    5c92:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    5c94:	f108 0004 	add.w	r0, r8, #4
    5c98:	f002 fd26 	bl	86e8 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    5c9c:	faba f28a 	clz	r2, sl
    5ca0:	0952      	lsrs	r2, r2, #5
    5ca2:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    5ca6:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    5caa:	2201      	movs	r2, #1
	qh->callback_function = callback;
    5cac:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    5cb0:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    5cb4:	2e00      	cmp	r6, #0
    5cb6:	d0df      	beq.n	5c78 <usb_config_tx+0xc>
    5cb8:	4b03      	ldr	r3, [pc, #12]	; (5cc8 <usb_config_tx+0x5c>)
    5cba:	3410      	adds	r4, #16
    5cbc:	6819      	ldr	r1, [r3, #0]
    5cbe:	40a2      	lsls	r2, r4
    5cc0:	430a      	orrs	r2, r1
    5cc2:	601a      	str	r2, [r3, #0]
}
    5cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5cc8:	2000aa70 	.word	0x2000aa70
    5ccc:	20000000 	.word	0x20000000

00005cd0 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    5cd0:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    5cd2:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    5cd4:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    5cd6:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    5cda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    5cde:	b410      	push	{r4}
	transfer->next = 1;
    5ce0:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    5ce2:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    5ce4:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    5ce8:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    5cea:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    5cee:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    5cf2:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    5cf4:	6181      	str	r1, [r0, #24]
}
    5cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    5cfa:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    5cfe:	4770      	bx	lr

00005d00 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    5d00:	1e83      	subs	r3, r0, #2
{
    5d02:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    5d04:	2b02      	cmp	r3, #2
    5d06:	d900      	bls.n	5d0a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    5d08:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    5d0a:	4b06      	ldr	r3, [pc, #24]	; (5d24 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    5d0c:	f100 0110 	add.w	r1, r0, #16
    5d10:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    5d14:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    5d18:	fa0c f101 	lsl.w	r1, ip, r1
    5d1c:	3040      	adds	r0, #64	; 0x40
    5d1e:	f7ff bb99 	b.w	5454 <schedule_transfer>
    5d22:	bf00      	nop
    5d24:	20000000 	.word	0x20000000

00005d28 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    5d28:	1e83      	subs	r3, r0, #2
{
    5d2a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    5d2c:	2b02      	cmp	r3, #2
    5d2e:	d900      	bls.n	5d32 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    5d30:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    5d32:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    5d34:	4b02      	ldr	r3, [pc, #8]	; (5d40 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    5d36:	4081      	lsls	r1, r0
    5d38:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    5d3c:	f7ff bb8a 	b.w	5454 <schedule_transfer>
    5d40:	20000000 	.word	0x20000000

00005d44 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    5d44:	6840      	ldr	r0, [r0, #4]
#endif
}
    5d46:	4770      	bx	lr

00005d48 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    5d48:	4a12      	ldr	r2, [pc, #72]	; (5d94 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    5d4a:	4b13      	ldr	r3, [pc, #76]	; (5d98 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    5d4c:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    5d50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    5d54:	4298      	cmp	r0, r3
{
    5d56:	b510      	push	{r4, lr}
    5d58:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    5d5a:	d202      	bcs.n	5d62 <usb_init_serialnumber+0x1a>
    5d5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5d60:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    5d62:	4c0e      	ldr	r4, [pc, #56]	; (5d9c <usb_init_serialnumber+0x54>)
    5d64:	a901      	add	r1, sp, #4
    5d66:	220a      	movs	r2, #10
    5d68:	f7fe ffaa 	bl	4cc0 <ultoa>
	for (i=0; i<10; i++) {
    5d6c:	a901      	add	r1, sp, #4
    5d6e:	2300      	movs	r3, #0
    5d70:	4620      	mov	r0, r4
		char c = buf[i];
    5d72:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    5d76:	3301      	adds	r3, #1
		if (!c) break;
    5d78:	b13a      	cbz	r2, 5d8a <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    5d7a:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    5d7c:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    5d80:	d1f7      	bne.n	5d72 <usb_init_serialnumber+0x2a>
    5d82:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    5d84:	7023      	strb	r3, [r4, #0]
}
    5d86:	b004      	add	sp, #16
    5d88:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    5d8a:	005b      	lsls	r3, r3, #1
    5d8c:	b2db      	uxtb	r3, r3
    5d8e:	7023      	strb	r3, [r4, #0]
}
    5d90:	b004      	add	sp, #16
    5d92:	bd10      	pop	{r4, pc}
    5d94:	401f4400 	.word	0x401f4400
    5d98:	00989680 	.word	0x00989680
    5d9c:	20008e18 	.word	0x20008e18

00005da0 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    5da0:	f000 badc 	b.w	635c <usb_serial_flush_input>

00005da4 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    5da4:	f000 baac 	b.w	6300 <usb_serial_peekchar>

00005da8 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    5da8:	f000 bb10 	b.w	63cc <usb_serial_getchar>

00005dac <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    5dac:	f000 baca 	b.w	6344 <usb_serial_available>

00005db0 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    5db0:	f000 bb66 	b.w	6480 <usb_serial_flush_output>

00005db4 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    5db4:	f000 bb3c 	b.w	6430 <usb_serial_write_buffer_free>

00005db8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5db8:	4608      	mov	r0, r1
    5dba:	4611      	mov	r1, r2
    5dbc:	f000 bb2c 	b.w	6418 <usb_serial_write>

00005dc0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    5dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    5dc2:	4c14      	ldr	r4, [pc, #80]	; (5e14 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    5dc4:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    5dc8:	4e13      	ldr	r6, [pc, #76]	; (5e18 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    5dca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    5dce:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    5dd2:	4f12      	ldr	r7, [pc, #72]	; (5e1c <rx_queue_transfer+0x5c>)
    5dd4:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    5dd8:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    5dda:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    5dde:	4621      	mov	r1, r4
    5de0:	883a      	ldrh	r2, [r7, #0]
    5de2:	4630      	mov	r0, r6
    5de4:	f7ff ff74 	bl	5cd0 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    5de8:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    5dea:	4423      	add	r3, r4
	asm("dsb");
    5dec:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    5df0:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    5df4:	3420      	adds	r4, #32
	} while (location < end_addr);
    5df6:	42a3      	cmp	r3, r4
    5df8:	d8fa      	bhi.n	5df0 <rx_queue_transfer+0x30>
	asm("dsb");
    5dfa:	f3bf 8f4f 	dsb	sy
	asm("isb");
    5dfe:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    5e02:	2003      	movs	r0, #3
    5e04:	4631      	mov	r1, r6
    5e06:	f7ff ff8f 	bl	5d28 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    5e0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    5e0e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    5e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e14:	20200080 	.word	0x20200080
    5e18:	20009300 	.word	0x20009300
    5e1c:	2000afe4 	.word	0x2000afe4

00005e20 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    5e20:	4b24      	ldr	r3, [pc, #144]	; (5eb4 <rx_event+0x94>)
{
    5e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    5e26:	881c      	ldrh	r4, [r3, #0]
    5e28:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    5e2a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    5e2c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    5e30:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    5e32:	2c00      	cmp	r4, #0
    5e34:	dd24      	ble.n	5e80 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    5e36:	4920      	ldr	r1, [pc, #128]	; (5eb8 <rx_event+0x98>)
		if (head != rx_tail) {
    5e38:	4820      	ldr	r0, [pc, #128]	; (5ebc <rx_event+0x9c>)
		uint32_t head = rx_head;
    5e3a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    5e3c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    5e3e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    5e40:	4e1f      	ldr	r6, [pc, #124]	; (5ec0 <rx_event+0xa0>)
		if (head != rx_tail) {
    5e42:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    5e44:	481f      	ldr	r0, [pc, #124]	; (5ec4 <rx_event+0xa4>)
		if (head != rx_tail) {
    5e46:	d007      	beq.n	5e58 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    5e48:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    5e4c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    5e50:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    5e54:	4294      	cmp	r4, r2
    5e56:	d918      	bls.n	5e8a <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    5e58:	3301      	adds	r3, #1
		rx_index[i] = 0;
    5e5a:	2200      	movs	r2, #0
		rx_count[i] = len;
    5e5c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    5e60:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    5e62:	4e19      	ldr	r6, [pc, #100]	; (5ec8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    5e64:	bf88      	it	hi
    5e66:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    5e68:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    5e6c:	bf98      	it	ls
    5e6e:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    5e70:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    5e72:	4b16      	ldr	r3, [pc, #88]	; (5ecc <rx_event+0xac>)
		rx_head = head;
    5e74:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    5e76:	681a      	ldr	r2, [r3, #0]
    5e78:	4414      	add	r4, r2
    5e7a:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    5e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    5e80:	4628      	mov	r0, r5
}
    5e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    5e86:	f7ff bf9b 	b.w	5dc0 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    5e8a:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    5e8e:	4910      	ldr	r1, [pc, #64]	; (5ed0 <rx_event+0xb0>)
    5e90:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    5e92:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    5e94:	4408      	add	r0, r1
    5e96:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    5e9a:	f7fe fe77 	bl	4b8c <memcpy>
				rx_available += len;
    5e9e:	4a0b      	ldr	r2, [pc, #44]	; (5ecc <rx_event+0xac>)
				rx_queue_transfer(i);
    5ea0:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    5ea2:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    5ea6:	6813      	ldr	r3, [r2, #0]
    5ea8:	4423      	add	r3, r4
}
    5eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    5eae:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    5eb0:	f7ff bf86 	b.w	5dc0 <rx_queue_transfer>
    5eb4:	2000afe4 	.word	0x2000afe4
    5eb8:	2000aff7 	.word	0x2000aff7
    5ebc:	2000aff8 	.word	0x2000aff8
    5ec0:	2000ab9c 	.word	0x2000ab9c
    5ec4:	2000abbc 	.word	0x2000abbc
    5ec8:	2000abac 	.word	0x2000abac
    5ecc:	2000ab98 	.word	0x2000ab98
    5ed0:	20200080 	.word	0x20200080

00005ed4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    5ed4:	4b1d      	ldr	r3, [pc, #116]	; (5f4c <usb_serial_flush_callback+0x78>)
    5ed6:	781a      	ldrb	r2, [r3, #0]
    5ed8:	2a00      	cmp	r2, #0
    5eda:	d136      	bne.n	5f4a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    5edc:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    5ee0:	4a1b      	ldr	r2, [pc, #108]	; (5f50 <usb_serial_flush_callback+0x7c>)
    5ee2:	7812      	ldrb	r2, [r2, #0]
    5ee4:	b38a      	cbz	r2, 5f4a <usb_serial_flush_callback+0x76>
{
    5ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    5eea:	4d1a      	ldr	r5, [pc, #104]	; (5f54 <usb_serial_flush_callback+0x80>)
    5eec:	882a      	ldrh	r2, [r5, #0]
    5eee:	b352      	cbz	r2, 5f46 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    5ef0:	4e19      	ldr	r6, [pc, #100]	; (5f58 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    5ef2:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    5ef6:	4f19      	ldr	r7, [pc, #100]	; (5f5c <usb_serial_flush_callback+0x88>)
    5ef8:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    5efa:	4c19      	ldr	r4, [pc, #100]	; (5f60 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    5efc:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    5f00:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    5f04:	4642      	mov	r2, r8
    5f06:	4638      	mov	r0, r7
    5f08:	4621      	mov	r1, r4
    5f0a:	f7ff fee1 	bl	5cd0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    5f0e:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    5f12:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    5f16:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5f1a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    5f1e:	3420      	adds	r4, #32
	} while (location < end_addr);
    5f20:	42a2      	cmp	r2, r4
    5f22:	d8fa      	bhi.n	5f1a <usb_serial_flush_callback+0x46>
	asm("dsb");
    5f24:	f3bf 8f4f 	dsb	sy
	asm("isb");
    5f28:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    5f2c:	2004      	movs	r0, #4
    5f2e:	4639      	mov	r1, r7
    5f30:	f7ff fee6 	bl	5d00 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    5f34:	7833      	ldrb	r3, [r6, #0]
    5f36:	3301      	adds	r3, #1
    5f38:	b2db      	uxtb	r3, r3
    5f3a:	2b03      	cmp	r3, #3
    5f3c:	bf88      	it	hi
    5f3e:	2300      	movhi	r3, #0
    5f40:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    5f42:	2300      	movs	r3, #0
    5f44:	802b      	strh	r3, [r5, #0]
}
    5f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f4a:	4770      	bx	lr
    5f4c:	2000b001 	.word	0x2000b001
    5f50:	2000b003 	.word	0x2000b003
    5f54:	2000afe6 	.word	0x2000afe6
    5f58:	2000b000 	.word	0x2000b000
    5f5c:	20009400 	.word	0x20009400
    5f60:	20201080 	.word	0x20201080

00005f64 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    5f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f68:	b085      	sub	sp, #20
	while (size > 0) {
    5f6a:	e9cd 1001 	strd	r1, r0, [sp, #4]
    5f6e:	2900      	cmp	r1, #0
    5f70:	f000 80bf 	beq.w	60f2 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    5f74:	2300      	movs	r3, #0
    5f76:	4c60      	ldr	r4, [pc, #384]	; (60f8 <usb_serial_write.part.0+0x194>)
    5f78:	f8df 8198 	ldr.w	r8, [pc, #408]	; 6114 <usb_serial_write.part.0+0x1b0>
    5f7c:	f8df a198 	ldr.w	sl, [pc, #408]	; 6118 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    5f80:	4f5e      	ldr	r7, [pc, #376]	; (60fc <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    5f82:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    5f84:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    5f86:	4a5e      	ldr	r2, [pc, #376]	; (6100 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    5f88:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    5f8a:	4b5e      	ldr	r3, [pc, #376]	; (6104 <usb_serial_write.part.0+0x1a0>)
    5f8c:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    5f8e:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    5f92:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    5f96:	2b00      	cmp	r3, #0
    5f98:	f040 80a7 	bne.w	60ea <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    5f9c:	461e      	mov	r6, r3
		int waiting=0;
    5f9e:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    5fa0:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    5fa2:	4648      	mov	r0, r9
    5fa4:	f7ff fece 	bl	5d44 <usb_transfer_status>
			if (!(status & 0x80)) {
    5fa8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    5fac:	f000 808c 	beq.w	60c8 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    5fb0:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    5fb4:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    5fb8:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    5fbc:	b905      	cbnz	r5, 5fc0 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    5fbe:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    5fc0:	2b00      	cmp	r3, #0
    5fc2:	d17d      	bne.n	60c0 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    5fc4:	683b      	ldr	r3, [r7, #0]
    5fc6:	1b9b      	subs	r3, r3, r6
    5fc8:	2b78      	cmp	r3, #120	; 0x78
    5fca:	f200 8087 	bhi.w	60dc <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    5fce:	4b4e      	ldr	r3, [pc, #312]	; (6108 <usb_serial_write.part.0+0x1a4>)
    5fd0:	781b      	ldrb	r3, [r3, #0]
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d074      	beq.n	60c0 <usb_serial_write.part.0+0x15c>
			yield();
    5fd6:	f000 fa9d 	bl	6514 <yield>
			tx_noautoflush = 1;
    5fda:	2201      	movs	r2, #1
		while (!tx_available) {
    5fdc:	f8b8 3000 	ldrh.w	r3, [r8]
    5fe0:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    5fe2:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    5fe4:	2b00      	cmp	r3, #0
    5fe6:	d0dc      	beq.n	5fa2 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    5fe8:	4a46      	ldr	r2, [pc, #280]	; (6104 <usb_serial_write.part.0+0x1a0>)
    5fea:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    5fee:	7811      	ldrb	r1, [r2, #0]
    5ff0:	461a      	mov	r2, r3
    5ff2:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    5ff6:	4d45      	ldr	r5, [pc, #276]	; (610c <usb_serial_write.part.0+0x1a8>)
    5ff8:	02c9      	lsls	r1, r1, #11
    5ffa:	4428      	add	r0, r5
		if (size >= tx_available) {
    5ffc:	9d01      	ldr	r5, [sp, #4]
    5ffe:	4295      	cmp	r5, r2
    6000:	d217      	bcs.n	6032 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    6002:	9303      	str	r3, [sp, #12]
    6004:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    6008:	462a      	mov	r2, r5
    600a:	f7fe fdbf 	bl	4b8c <memcpy>
			tx_available -= size;
    600e:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    6010:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    6014:	1b5b      	subs	r3, r3, r5
    6016:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    601a:	4b3d      	ldr	r3, [pc, #244]	; (6110 <usb_serial_write.part.0+0x1ac>)
    601c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    6020:	f3bf 8f4f 	dsb	sy
			sent += size;
    6024:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    6026:	2300      	movs	r3, #0
			sent += size;
    6028:	4428      	add	r0, r5
		tx_noautoflush = 0;
    602a:	7023      	strb	r3, [r4, #0]
}
    602c:	b005      	add	sp, #20
    602e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    6032:	4b36      	ldr	r3, [pc, #216]	; (610c <usb_serial_write.part.0+0x1a8>)
    6034:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    6036:	9902      	ldr	r1, [sp, #8]
    6038:	f7fe fda8 	bl	4b8c <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    603c:	2300      	movs	r3, #0
    603e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6042:	4629      	mov	r1, r5
    6044:	4648      	mov	r0, r9
    6046:	f7ff fe43 	bl	5cd0 <usb_prepare_transfer>
	asm("dsb");
    604a:	f3bf 8f4f 	dsb	sy
    604e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    6052:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    6056:	4293      	cmp	r3, r2
    6058:	bf34      	ite	cc
    605a:	2301      	movcc	r3, #1
    605c:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    605e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    6062:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    6066:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    606a:	3520      	adds	r5, #32
	} while (location < end_addr);
    606c:	42ab      	cmp	r3, r5
    606e:	d1fa      	bne.n	6066 <usb_serial_write.part.0+0x102>
	asm("dsb");
    6070:	f3bf 8f4f 	dsb	sy
	asm("isb");
    6074:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    6078:	2004      	movs	r0, #4
    607a:	4649      	mov	r1, r9
    607c:	f7ff fe40 	bl	5d00 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    6080:	4a20      	ldr	r2, [pc, #128]	; (6104 <usb_serial_write.part.0+0x1a0>)
    6082:	7813      	ldrb	r3, [r2, #0]
    6084:	3301      	adds	r3, #1
    6086:	b2db      	uxtb	r3, r3
    6088:	2b03      	cmp	r3, #3
    608a:	bf84      	itt	hi
    608c:	2300      	movhi	r3, #0
    608e:	4a1d      	ldrhi	r2, [pc, #116]	; (6104 <usb_serial_write.part.0+0x1a0>)
    6090:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    6092:	f8b8 3000 	ldrh.w	r3, [r8]
    6096:	9a01      	ldr	r2, [sp, #4]
    6098:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    609a:	9a00      	ldr	r2, [sp, #0]
    609c:	441a      	add	r2, r3
			size -= tx_available;
    609e:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    60a0:	9200      	str	r2, [sp, #0]
			data += tx_available;
    60a2:	9a02      	ldr	r2, [sp, #8]
    60a4:	441a      	add	r2, r3
			tx_available = 0;
    60a6:	2300      	movs	r3, #0
			data += tx_available;
    60a8:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    60aa:	4a19      	ldr	r2, [pc, #100]	; (6110 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    60ac:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    60b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    60b4:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    60b8:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    60ba:	2900      	cmp	r1, #0
    60bc:	f47f af62 	bne.w	5f84 <usb_serial_write.part.0+0x20>
	return sent;
    60c0:	9800      	ldr	r0, [sp, #0]
}
    60c2:	b005      	add	sp, #20
    60c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    60c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    60cc:	4b0d      	ldr	r3, [pc, #52]	; (6104 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    60ce:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    60d2:	7819      	ldrb	r1, [r3, #0]
				break;
    60d4:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    60d6:	f8a8 2000 	strh.w	r2, [r8]
				break;
    60da:	e78a      	b.n	5ff2 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    60dc:	2301      	movs	r3, #1
				return sent;
    60de:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    60e0:	f88a 3000 	strb.w	r3, [sl]
}
    60e4:	b005      	add	sp, #20
    60e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    60ea:	461a      	mov	r2, r3
    60ec:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    60f0:	e77f      	b.n	5ff2 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    60f2:	9801      	ldr	r0, [sp, #4]
	return sent;
    60f4:	e7e5      	b.n	60c2 <usb_serial_write.part.0+0x15e>
    60f6:	bf00      	nop
    60f8:	2000b001 	.word	0x2000b001
    60fc:	2000ae44 	.word	0x2000ae44
    6100:	20009400 	.word	0x20009400
    6104:	2000b000 	.word	0x2000b000
    6108:	2000b003 	.word	0x2000b003
    610c:	20201080 	.word	0x20201080
    6110:	402e0000 	.word	0x402e0000
    6114:	2000afe6 	.word	0x2000afe6
    6118:	2000affd 	.word	0x2000affd

0000611c <usb_serial_reset>:
}
    611c:	4770      	bx	lr
    611e:	bf00      	nop

00006120 <usb_serial_configure>:
	if (usb_high_speed) {
    6120:	4b2d      	ldr	r3, [pc, #180]	; (61d8 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    6122:	2100      	movs	r1, #0
    6124:	2280      	movs	r2, #128	; 0x80
    6126:	482d      	ldr	r0, [pc, #180]	; (61dc <usb_serial_configure+0xbc>)
{
    6128:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    612a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    612c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    612e:	4d2c      	ldr	r5, [pc, #176]	; (61e0 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    6130:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    6132:	4e2c      	ldr	r6, [pc, #176]	; (61e4 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    6134:	bf0c      	ite	eq
    6136:	2340      	moveq	r3, #64	; 0x40
    6138:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    613c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    613e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    6140:	f002 fad2 	bl	86e8 <memset>
	tx_head = 0;
    6144:	4a28      	ldr	r2, [pc, #160]	; (61e8 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    6146:	4621      	mov	r1, r4
	tx_available = 0;
    6148:	4b28      	ldr	r3, [pc, #160]	; (61ec <usb_serial_configure+0xcc>)
	tx_head = 0;
    614a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    614c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6150:	4827      	ldr	r0, [pc, #156]	; (61f0 <usb_serial_configure+0xd0>)
	tx_available = 0;
    6152:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    6154:	f002 fac8 	bl	86e8 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    6158:	4a26      	ldr	r2, [pc, #152]	; (61f4 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    615a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    615c:	4b26      	ldr	r3, [pc, #152]	; (61f8 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    615e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    6160:	e9c2 4400 	strd	r4, r4, [r2]
    6164:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    6168:	4a24      	ldr	r2, [pc, #144]	; (61fc <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    616a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    616e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    6170:	4a23      	ldr	r2, [pc, #140]	; (6200 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    6172:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    6176:	4b23      	ldr	r3, [pc, #140]	; (6204 <usb_serial_configure+0xe4>)
    6178:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    617a:	4623      	mov	r3, r4
	rx_available = 0;
    617c:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    617e:	4622      	mov	r2, r4
    6180:	f7ff fd74 	bl	5c6c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    6184:	4622      	mov	r2, r4
    6186:	8831      	ldrh	r1, [r6, #0]
    6188:	2003      	movs	r0, #3
    618a:	4b1f      	ldr	r3, [pc, #124]	; (6208 <usb_serial_configure+0xe8>)
    618c:	f7ff fd3c 	bl	5c08 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    6190:	4623      	mov	r3, r4
    6192:	2201      	movs	r2, #1
    6194:	8829      	ldrh	r1, [r5, #0]
    6196:	2004      	movs	r0, #4
    6198:	f7ff fd68 	bl	5c6c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    619c:	4620      	mov	r0, r4
    619e:	3401      	adds	r4, #1
    61a0:	f7ff fe0e 	bl	5dc0 <rx_queue_transfer>
    61a4:	2c08      	cmp	r4, #8
    61a6:	d1f9      	bne.n	619c <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    61a8:	4b18      	ldr	r3, [pc, #96]	; (620c <usb_serial_configure+0xec>)
    61aa:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    61ac:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    61ae:	4818      	ldr	r0, [pc, #96]	; (6210 <usb_serial_configure+0xf0>)
    61b0:	4c18      	ldr	r4, [pc, #96]	; (6214 <usb_serial_configure+0xf4>)
    61b2:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    61b4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    61b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    61bc:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    61c0:	4915      	ldr	r1, [pc, #84]	; (6218 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    61c2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    61c6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    61ca:	b121      	cbz	r1, 61d6 <usb_serial_configure+0xb6>
    61cc:	4a13      	ldr	r2, [pc, #76]	; (621c <usb_serial_configure+0xfc>)
    61ce:	7813      	ldrb	r3, [r2, #0]
    61d0:	f043 0301 	orr.w	r3, r3, #1
    61d4:	7013      	strb	r3, [r2, #0]
}
    61d6:	bd70      	pop	{r4, r5, r6, pc}
    61d8:	2000b004 	.word	0x2000b004
    61dc:	20009400 	.word	0x20009400
    61e0:	2000afe8 	.word	0x2000afe8
    61e4:	2000afe4 	.word	0x2000afe4
    61e8:	2000b000 	.word	0x2000b000
    61ec:	2000afe6 	.word	0x2000afe6
    61f0:	20009300 	.word	0x20009300
    61f4:	2000ab9c 	.word	0x2000ab9c
    61f8:	2000abac 	.word	0x2000abac
    61fc:	2000aff7 	.word	0x2000aff7
    6200:	2000ab98 	.word	0x2000ab98
    6204:	2000aff8 	.word	0x2000aff8
    6208:	00005e21 	.word	0x00005e21
    620c:	402e0000 	.word	0x402e0000
    6210:	2000afdc 	.word	0x2000afdc
    6214:	00005ed5 	.word	0x00005ed5
    6218:	00000000 	.word	0x00000000
    621c:	2000b006 	.word	0x2000b006

00006220 <usb_serial_read>:
{
    6220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    6224:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6228:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    622c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 62f8 <usb_serial_read+0xd8>
{
    6230:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    6232:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    6236:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    6238:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    623c:	2900      	cmp	r1, #0
    623e:	d04f      	beq.n	62e0 <usb_serial_read+0xc0>
    6240:	4680      	mov	r8, r0
    6242:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    6244:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    6246:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 62fc <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    624a:	4b26      	ldr	r3, [pc, #152]	; (62e4 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    624c:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    6250:	4925      	ldr	r1, [pc, #148]	; (62e8 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    6252:	781b      	ldrb	r3, [r3, #0]
    6254:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    6256:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    625a:	d03f      	beq.n	62dc <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    625c:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    625e:	4b23      	ldr	r3, [pc, #140]	; (62ec <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    6260:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    6262:	bf28      	it	cs
    6264:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    6266:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    6268:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    626c:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    6270:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    6272:	4b1f      	ldr	r3, [pc, #124]	; (62f0 <usb_serial_read+0xd0>)
    6274:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    6278:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    627c:	42aa      	cmp	r2, r5
    627e:	d21c      	bcs.n	62ba <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    6280:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    6284:	4918      	ldr	r1, [pc, #96]	; (62e8 <usb_serial_read+0xc8>)
			rx_available -= len;
    6286:	4c1b      	ldr	r4, [pc, #108]	; (62f4 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    6288:	4461      	add	r1, ip
    628a:	9201      	str	r2, [sp, #4]
    628c:	f7fe fc7e 	bl	4b8c <memcpy>
			rx_available -= len;
    6290:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    6292:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    6296:	4658      	mov	r0, fp
			rx_index[i] += len;
    6298:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    629a:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    629e:	442a      	add	r2, r5
			rx_available -= len;
    62a0:	4439      	add	r1, r7
			rx_index[i] += len;
    62a2:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    62a6:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    62a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    62ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    62b0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    62b4:	b003      	add	sp, #12
    62b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    62ba:	462a      	mov	r2, r5
			count += avail;
    62bc:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    62be:	f7fe fc65 	bl	4b8c <memcpy>
			rx_available -= avail;
    62c2:	490c      	ldr	r1, [pc, #48]	; (62f4 <usb_serial_read+0xd4>)
			rx_tail = tail;
    62c4:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    62c6:	4630      	mov	r0, r6
			rx_available -= avail;
    62c8:	680a      	ldr	r2, [r1, #0]
			p += avail;
    62ca:	44a8      	add	r8, r5
			rx_available -= avail;
    62cc:	1b52      	subs	r2, r2, r5
    62ce:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    62d0:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    62d4:	f7ff fd74 	bl	5dc0 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    62d8:	45bb      	cmp	fp, r7
    62da:	d8b6      	bhi.n	624a <usb_serial_read+0x2a>
	return count;
    62dc:	4638      	mov	r0, r7
    62de:	e7e3      	b.n	62a8 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    62e0:	4608      	mov	r0, r1
    62e2:	e7e1      	b.n	62a8 <usb_serial_read+0x88>
    62e4:	2000aff7 	.word	0x2000aff7
    62e8:	20200080 	.word	0x20200080
    62ec:	2000abbc 	.word	0x2000abbc
    62f0:	2000ab9c 	.word	0x2000ab9c
    62f4:	2000ab98 	.word	0x2000ab98
    62f8:	2000aff8 	.word	0x2000aff8
    62fc:	2000abac 	.word	0x2000abac

00006300 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    6300:	4b0b      	ldr	r3, [pc, #44]	; (6330 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    6302:	4a0c      	ldr	r2, [pc, #48]	; (6334 <usb_serial_peekchar+0x34>)
    6304:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    6306:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    6308:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    630a:	428a      	cmp	r2, r1
    630c:	d00d      	beq.n	632a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    630e:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    6310:	4809      	ldr	r0, [pc, #36]	; (6338 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    6312:	4a0a      	ldr	r2, [pc, #40]	; (633c <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    6314:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    6316:	490a      	ldr	r1, [pc, #40]	; (6340 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    6318:	bf28      	it	cs
    631a:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    631c:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    631e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    6322:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    6326:	5c58      	ldrb	r0, [r3, r1]
    6328:	4770      	bx	lr
	if (tail == rx_head) return -1;
    632a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    632e:	4770      	bx	lr
    6330:	2000aff7 	.word	0x2000aff7
    6334:	2000aff8 	.word	0x2000aff8
    6338:	2000abbc 	.word	0x2000abbc
    633c:	20200080 	.word	0x20200080
    6340:	2000abac 	.word	0x2000abac

00006344 <usb_serial_available>:
	uint32_t n = rx_available;
    6344:	4b04      	ldr	r3, [pc, #16]	; (6358 <usb_serial_available+0x14>)
{
    6346:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    6348:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    634a:	b10c      	cbz	r4, 6350 <usb_serial_available+0xc>
}
    634c:	4620      	mov	r0, r4
    634e:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    6350:	f000 f8e0 	bl	6514 <yield>
}
    6354:	4620      	mov	r0, r4
    6356:	bd10      	pop	{r4, pc}
    6358:	2000ab98 	.word	0x2000ab98

0000635c <usb_serial_flush_input>:
{
    635c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    6360:	4e14      	ldr	r6, [pc, #80]	; (63b4 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    6362:	4d15      	ldr	r5, [pc, #84]	; (63b8 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    6364:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    6366:	782a      	ldrb	r2, [r5, #0]
    6368:	4293      	cmp	r3, r2
    636a:	d021      	beq.n	63b0 <usb_serial_flush_input+0x54>
    636c:	b2dc      	uxtb	r4, r3
    636e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 63c0 <usb_serial_flush_input+0x64>
    6372:	f8df b050 	ldr.w	fp, [pc, #80]	; 63c4 <usb_serial_flush_input+0x68>
    6376:	f8df 8050 	ldr.w	r8, [pc, #80]	; 63c8 <usb_serial_flush_input+0x6c>
    637a:	4f10      	ldr	r7, [pc, #64]	; (63bc <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    637c:	3401      	adds	r4, #1
    637e:	2c08      	cmp	r4, #8
		rx_tail = tail;
    6380:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    6384:	d901      	bls.n	638a <usb_serial_flush_input+0x2e>
    6386:	2400      	movs	r4, #0
    6388:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    638a:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    638e:	f8db 3000 	ldr.w	r3, [fp]
    6392:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    6396:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    639a:	1a52      	subs	r2, r2, r1
    639c:	1a9b      	subs	r3, r3, r2
    639e:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    63a2:	f7ff fd0d 	bl	5dc0 <rx_queue_transfer>
		rx_tail = tail;
    63a6:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    63aa:	782b      	ldrb	r3, [r5, #0]
    63ac:	42a3      	cmp	r3, r4
    63ae:	d1e5      	bne.n	637c <usb_serial_flush_input+0x20>
}
    63b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    63b4:	2000aff8 	.word	0x2000aff8
    63b8:	2000aff7 	.word	0x2000aff7
    63bc:	2000abac 	.word	0x2000abac
    63c0:	2000abbc 	.word	0x2000abbc
    63c4:	2000ab98 	.word	0x2000ab98
    63c8:	2000ab9c 	.word	0x2000ab9c

000063cc <usb_serial_getchar>:
{
    63cc:	b500      	push	{lr}
    63ce:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    63d0:	2101      	movs	r1, #1
    63d2:	f10d 0007 	add.w	r0, sp, #7
    63d6:	f7ff ff23 	bl	6220 <usb_serial_read>
    63da:	b120      	cbz	r0, 63e6 <usb_serial_getchar+0x1a>
    63dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    63e0:	b003      	add	sp, #12
    63e2:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    63e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    63ea:	e7f9      	b.n	63e0 <usb_serial_getchar+0x14>

000063ec <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    63ec:	4b09      	ldr	r3, [pc, #36]	; (6414 <usb_serial_putchar+0x28>)
{
    63ee:	b500      	push	{lr}
    63f0:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    63f2:	781b      	ldrb	r3, [r3, #0]
{
    63f4:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    63f8:	b13b      	cbz	r3, 640a <usb_serial_putchar+0x1e>
    63fa:	2101      	movs	r1, #1
    63fc:	f10d 0007 	add.w	r0, sp, #7
    6400:	f7ff fdb0 	bl	5f64 <usb_serial_write.part.0>
}
    6404:	b003      	add	sp, #12
    6406:	f85d fb04 	ldr.w	pc, [sp], #4
    640a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    640e:	b003      	add	sp, #12
    6410:	f85d fb04 	ldr.w	pc, [sp], #4
    6414:	2000b003 	.word	0x2000b003

00006418 <usb_serial_write>:
	if (!usb_configuration) return 0;
    6418:	4b04      	ldr	r3, [pc, #16]	; (642c <usb_serial_write+0x14>)
    641a:	781b      	ldrb	r3, [r3, #0]
    641c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    6420:	b10b      	cbz	r3, 6426 <usb_serial_write+0xe>
    6422:	f7ff bd9f 	b.w	5f64 <usb_serial_write.part.0>
}
    6426:	4610      	mov	r0, r2
    6428:	4770      	bx	lr
    642a:	bf00      	nop
    642c:	2000b003 	.word	0x2000b003

00006430 <usb_serial_write_buffer_free>:
{
    6430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    6434:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    6436:	f8df 8044 	ldr.w	r8, [pc, #68]	; 647c <usb_serial_write_buffer_free+0x4c>
    643a:	2301      	movs	r3, #1
    643c:	4d0d      	ldr	r5, [pc, #52]	; (6474 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    643e:	4627      	mov	r7, r4
    6440:	4e0d      	ldr	r6, [pc, #52]	; (6478 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    6442:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    6446:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    6448:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    644a:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    644c:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    644e:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    6452:	d005      	beq.n	6460 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    6454:	f7ff fc76 	bl	5d44 <usb_transfer_status>
    6458:	0603      	lsls	r3, r0, #24
    645a:	bf58      	it	pl
    645c:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    6460:	2c04      	cmp	r4, #4
    6462:	d1f0      	bne.n	6446 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    6464:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    6468:	2300      	movs	r3, #0
}
    646a:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    646c:	f888 3000 	strb.w	r3, [r8]
}
    6470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6474:	20009400 	.word	0x20009400
    6478:	2000b000 	.word	0x2000b000
    647c:	2000b001 	.word	0x2000b001

00006480 <usb_serial_flush_output>:
{
    6480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    6484:	4b1d      	ldr	r3, [pc, #116]	; (64fc <usb_serial_flush_output+0x7c>)
    6486:	781b      	ldrb	r3, [r3, #0]
    6488:	b113      	cbz	r3, 6490 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    648a:	4d1d      	ldr	r5, [pc, #116]	; (6500 <usb_serial_flush_output+0x80>)
    648c:	882a      	ldrh	r2, [r5, #0]
    648e:	b90a      	cbnz	r2, 6494 <usb_serial_flush_output+0x14>
}
    6490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    6494:	4e1b      	ldr	r6, [pc, #108]	; (6504 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    6496:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    649a:	491b      	ldr	r1, [pc, #108]	; (6508 <usb_serial_flush_output+0x88>)
    649c:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    649e:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    64a0:	4c1a      	ldr	r4, [pc, #104]	; (650c <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    64a2:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    64a6:	4f1a      	ldr	r7, [pc, #104]	; (6510 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    64a8:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    64ac:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    64ae:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    64b0:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    64b2:	4621      	mov	r1, r4
    64b4:	2300      	movs	r3, #0
    64b6:	f7ff fc0b 	bl	5cd0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    64ba:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    64be:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    64c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    64c6:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    64ca:	3420      	adds	r4, #32
	} while (location < end_addr);
    64cc:	42a2      	cmp	r2, r4
    64ce:	d8fa      	bhi.n	64c6 <usb_serial_flush_output+0x46>
	asm("dsb");
    64d0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    64d4:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    64d8:	2004      	movs	r0, #4
    64da:	4641      	mov	r1, r8
    64dc:	f7ff fc10 	bl	5d00 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    64e0:	7833      	ldrb	r3, [r6, #0]
    64e2:	3301      	adds	r3, #1
    64e4:	b2db      	uxtb	r3, r3
    64e6:	2b03      	cmp	r3, #3
    64e8:	bf88      	it	hi
    64ea:	2300      	movhi	r3, #0
    64ec:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    64ee:	2300      	movs	r3, #0
    64f0:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    64f2:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    64f6:	703b      	strb	r3, [r7, #0]
}
    64f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    64fc:	2000b003 	.word	0x2000b003
    6500:	2000afe6 	.word	0x2000afe6
    6504:	2000b000 	.word	0x2000b000
    6508:	20009400 	.word	0x20009400
    650c:	20201080 	.word	0x20201080
    6510:	2000b001 	.word	0x2000b001

00006514 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    6514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    6518:	4b2d      	ldr	r3, [pc, #180]	; (65d0 <yield+0xbc>)
    651a:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    651c:	b166      	cbz	r6, 6538 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    651e:	4f2d      	ldr	r7, [pc, #180]	; (65d4 <yield+0xc0>)
    6520:	783b      	ldrb	r3, [r7, #0]
    6522:	b94b      	cbnz	r3, 6538 <yield+0x24>
	running = 1;
    6524:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    6526:	07f1      	lsls	r1, r6, #31
	running = 1;
    6528:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    652a:	d443      	bmi.n	65b4 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    652c:	07b2      	lsls	r2, r6, #30
    652e:	d426      	bmi.n	657e <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    6530:	2300      	movs	r3, #0
    6532:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    6534:	0773      	lsls	r3, r6, #29
    6536:	d401      	bmi.n	653c <yield+0x28>
		EventResponder::runFromYield();
	}
};
    6538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    653c:	4b26      	ldr	r3, [pc, #152]	; (65d8 <yield+0xc4>)
    653e:	681a      	ldr	r2, [r3, #0]
    6540:	2a00      	cmp	r2, #0
    6542:	d0f9      	beq.n	6538 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    6544:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    6548:	2a00      	cmp	r2, #0
    654a:	d1f5      	bne.n	6538 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    654c:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    6550:	b672      	cpsid	i
		EventResponder *first = firstYield;
    6552:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    6554:	2800      	cmp	r0, #0
    6556:	d034      	beq.n	65c2 <yield+0xae>
		if (runningFromYield) {
    6558:	4c20      	ldr	r4, [pc, #128]	; (65dc <yield+0xc8>)
    655a:	7821      	ldrb	r1, [r4, #0]
    655c:	2900      	cmp	r1, #0
    655e:	d130      	bne.n	65c2 <yield+0xae>
		runningFromYield = true;
    6560:	2201      	movs	r2, #1
    6562:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    6564:	6942      	ldr	r2, [r0, #20]
    6566:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    6568:	2a00      	cmp	r2, #0
    656a:	d02e      	beq.n	65ca <yield+0xb6>
			firstYield->_prev = nullptr;
    656c:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    656e:	b905      	cbnz	r5, 6572 <yield+0x5e>
    6570:	b662      	cpsie	i
		first->_triggered = false;
    6572:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    6574:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    6576:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    6578:	4798      	blx	r3
		runningFromYield = false;
    657a:	7025      	strb	r5, [r4, #0]
    657c:	e7dc      	b.n	6538 <yield+0x24>

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    657e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 65e4 <yield+0xd0>
    6582:	f898 3000 	ldrb.w	r3, [r8]
    6586:	2b00      	cmp	r3, #0
    6588:	d0d2      	beq.n	6530 <yield+0x1c>
    658a:	2500      	movs	r5, #0
    658c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 65e8 <yield+0xd4>
    6590:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    6592:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    6596:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    6598:	6823      	ldr	r3, [r4, #0]
    659a:	4620      	mov	r0, r4
    659c:	691b      	ldr	r3, [r3, #16]
    659e:	4798      	blx	r3
    65a0:	b110      	cbz	r0, 65a8 <yield+0x94>
    65a2:	6963      	ldr	r3, [r4, #20]
    65a4:	689b      	ldr	r3, [r3, #8]
    65a6:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    65a8:	f898 2000 	ldrb.w	r2, [r8]
    65ac:	b2eb      	uxtb	r3, r5
    65ae:	429a      	cmp	r2, r3
    65b0:	d8ef      	bhi.n	6592 <yield+0x7e>
    65b2:	e7bd      	b.n	6530 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    65b4:	f7ff fec6 	bl	6344 <usb_serial_available>
		if (Serial.available()) serialEvent();
    65b8:	2800      	cmp	r0, #0
    65ba:	d0b7      	beq.n	652c <yield+0x18>
    65bc:	f3af 8000 	nop.w
    65c0:	e7b4      	b.n	652c <yield+0x18>
		if (doit) __enable_irq();
    65c2:	2d00      	cmp	r5, #0
    65c4:	d1b8      	bne.n	6538 <yield+0x24>
    65c6:	b662      	cpsie	i
    65c8:	e7b6      	b.n	6538 <yield+0x24>
			lastYield = nullptr;
    65ca:	4b05      	ldr	r3, [pc, #20]	; (65e0 <yield+0xcc>)
    65cc:	601a      	str	r2, [r3, #0]
    65ce:	e7ce      	b.n	656e <yield+0x5a>
    65d0:	2000b006 	.word	0x2000b006
    65d4:	2000aff2 	.word	0x2000aff2
    65d8:	2000a5a4 	.word	0x2000a5a4
    65dc:	2000afed 	.word	0x2000afed
    65e0:	2000a5b0 	.word	0x2000a5b0
    65e4:	2000afee 	.word	0x2000afee
    65e8:	2000a5b4 	.word	0x2000a5b4

000065ec <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    65ec:	4a07      	ldr	r2, [pc, #28]	; (660c <rtc_get+0x20>)
    65ee:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    65f0:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    65f2:	4619      	mov	r1, r3
    65f4:	4684      	mov	ip, r0
    65f6:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    65f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    65fa:	4299      	cmp	r1, r3
    65fc:	d1f9      	bne.n	65f2 <rtc_get+0x6>
    65fe:	4584      	cmp	ip, r0
    6600:	d1f7      	bne.n	65f2 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    6602:	0bdb      	lsrs	r3, r3, #15
}
    6604:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    6608:	4770      	bx	lr
    660a:	bf00      	nop
    660c:	400d4000 	.word	0x400d4000

00006610 <__aeabi_atexit>:
    6610:	4603      	mov	r3, r0
    6612:	4608      	mov	r0, r1
    6614:	4619      	mov	r1, r3
    6616:	f002 b95f 	b.w	88d8 <__cxa_atexit>
    661a:	bf00      	nop

0000661c <__aeabi_uldivmod>:
    661c:	b953      	cbnz	r3, 6634 <__aeabi_uldivmod+0x18>
    661e:	b94a      	cbnz	r2, 6634 <__aeabi_uldivmod+0x18>
    6620:	2900      	cmp	r1, #0
    6622:	bf08      	it	eq
    6624:	2800      	cmpeq	r0, #0
    6626:	bf1c      	itt	ne
    6628:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    662c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6630:	f000 b970 	b.w	6914 <__aeabi_idiv0>
    6634:	f1ad 0c08 	sub.w	ip, sp, #8
    6638:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    663c:	f000 f806 	bl	664c <__udivmoddi4>
    6640:	f8dd e004 	ldr.w	lr, [sp, #4]
    6644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6648:	b004      	add	sp, #16
    664a:	4770      	bx	lr

0000664c <__udivmoddi4>:
    664c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6650:	9e08      	ldr	r6, [sp, #32]
    6652:	460d      	mov	r5, r1
    6654:	4604      	mov	r4, r0
    6656:	460f      	mov	r7, r1
    6658:	2b00      	cmp	r3, #0
    665a:	d14a      	bne.n	66f2 <__udivmoddi4+0xa6>
    665c:	428a      	cmp	r2, r1
    665e:	4694      	mov	ip, r2
    6660:	d965      	bls.n	672e <__udivmoddi4+0xe2>
    6662:	fab2 f382 	clz	r3, r2
    6666:	b143      	cbz	r3, 667a <__udivmoddi4+0x2e>
    6668:	fa02 fc03 	lsl.w	ip, r2, r3
    666c:	f1c3 0220 	rsb	r2, r3, #32
    6670:	409f      	lsls	r7, r3
    6672:	fa20 f202 	lsr.w	r2, r0, r2
    6676:	4317      	orrs	r7, r2
    6678:	409c      	lsls	r4, r3
    667a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    667e:	fa1f f58c 	uxth.w	r5, ip
    6682:	fbb7 f1fe 	udiv	r1, r7, lr
    6686:	0c22      	lsrs	r2, r4, #16
    6688:	fb0e 7711 	mls	r7, lr, r1, r7
    668c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    6690:	fb01 f005 	mul.w	r0, r1, r5
    6694:	4290      	cmp	r0, r2
    6696:	d90a      	bls.n	66ae <__udivmoddi4+0x62>
    6698:	eb1c 0202 	adds.w	r2, ip, r2
    669c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
    66a0:	f080 811c 	bcs.w	68dc <__udivmoddi4+0x290>
    66a4:	4290      	cmp	r0, r2
    66a6:	f240 8119 	bls.w	68dc <__udivmoddi4+0x290>
    66aa:	3902      	subs	r1, #2
    66ac:	4462      	add	r2, ip
    66ae:	1a12      	subs	r2, r2, r0
    66b0:	b2a4      	uxth	r4, r4
    66b2:	fbb2 f0fe 	udiv	r0, r2, lr
    66b6:	fb0e 2210 	mls	r2, lr, r0, r2
    66ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    66be:	fb00 f505 	mul.w	r5, r0, r5
    66c2:	42a5      	cmp	r5, r4
    66c4:	d90a      	bls.n	66dc <__udivmoddi4+0x90>
    66c6:	eb1c 0404 	adds.w	r4, ip, r4
    66ca:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    66ce:	f080 8107 	bcs.w	68e0 <__udivmoddi4+0x294>
    66d2:	42a5      	cmp	r5, r4
    66d4:	f240 8104 	bls.w	68e0 <__udivmoddi4+0x294>
    66d8:	4464      	add	r4, ip
    66da:	3802      	subs	r0, #2
    66dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    66e0:	1b64      	subs	r4, r4, r5
    66e2:	2100      	movs	r1, #0
    66e4:	b11e      	cbz	r6, 66ee <__udivmoddi4+0xa2>
    66e6:	40dc      	lsrs	r4, r3
    66e8:	2300      	movs	r3, #0
    66ea:	e9c6 4300 	strd	r4, r3, [r6]
    66ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    66f2:	428b      	cmp	r3, r1
    66f4:	d908      	bls.n	6708 <__udivmoddi4+0xbc>
    66f6:	2e00      	cmp	r6, #0
    66f8:	f000 80ed 	beq.w	68d6 <__udivmoddi4+0x28a>
    66fc:	2100      	movs	r1, #0
    66fe:	e9c6 0500 	strd	r0, r5, [r6]
    6702:	4608      	mov	r0, r1
    6704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6708:	fab3 f183 	clz	r1, r3
    670c:	2900      	cmp	r1, #0
    670e:	d149      	bne.n	67a4 <__udivmoddi4+0x158>
    6710:	42ab      	cmp	r3, r5
    6712:	d302      	bcc.n	671a <__udivmoddi4+0xce>
    6714:	4282      	cmp	r2, r0
    6716:	f200 80f8 	bhi.w	690a <__udivmoddi4+0x2be>
    671a:	1a84      	subs	r4, r0, r2
    671c:	eb65 0203 	sbc.w	r2, r5, r3
    6720:	2001      	movs	r0, #1
    6722:	4617      	mov	r7, r2
    6724:	2e00      	cmp	r6, #0
    6726:	d0e2      	beq.n	66ee <__udivmoddi4+0xa2>
    6728:	e9c6 4700 	strd	r4, r7, [r6]
    672c:	e7df      	b.n	66ee <__udivmoddi4+0xa2>
    672e:	b902      	cbnz	r2, 6732 <__udivmoddi4+0xe6>
    6730:	deff      	udf	#255	; 0xff
    6732:	fab2 f382 	clz	r3, r2
    6736:	2b00      	cmp	r3, #0
    6738:	f040 8090 	bne.w	685c <__udivmoddi4+0x210>
    673c:	1a8a      	subs	r2, r1, r2
    673e:	ea4f 471c 	mov.w	r7, ip, lsr #16
    6742:	fa1f fe8c 	uxth.w	lr, ip
    6746:	2101      	movs	r1, #1
    6748:	fbb2 f5f7 	udiv	r5, r2, r7
    674c:	fb07 2015 	mls	r0, r7, r5, r2
    6750:	0c22      	lsrs	r2, r4, #16
    6752:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    6756:	fb0e f005 	mul.w	r0, lr, r5
    675a:	4290      	cmp	r0, r2
    675c:	d908      	bls.n	6770 <__udivmoddi4+0x124>
    675e:	eb1c 0202 	adds.w	r2, ip, r2
    6762:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
    6766:	d202      	bcs.n	676e <__udivmoddi4+0x122>
    6768:	4290      	cmp	r0, r2
    676a:	f200 80cb 	bhi.w	6904 <__udivmoddi4+0x2b8>
    676e:	4645      	mov	r5, r8
    6770:	1a12      	subs	r2, r2, r0
    6772:	b2a4      	uxth	r4, r4
    6774:	fbb2 f0f7 	udiv	r0, r2, r7
    6778:	fb07 2210 	mls	r2, r7, r0, r2
    677c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    6780:	fb0e fe00 	mul.w	lr, lr, r0
    6784:	45a6      	cmp	lr, r4
    6786:	d908      	bls.n	679a <__udivmoddi4+0x14e>
    6788:	eb1c 0404 	adds.w	r4, ip, r4
    678c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    6790:	d202      	bcs.n	6798 <__udivmoddi4+0x14c>
    6792:	45a6      	cmp	lr, r4
    6794:	f200 80bb 	bhi.w	690e <__udivmoddi4+0x2c2>
    6798:	4610      	mov	r0, r2
    679a:	eba4 040e 	sub.w	r4, r4, lr
    679e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    67a2:	e79f      	b.n	66e4 <__udivmoddi4+0x98>
    67a4:	f1c1 0720 	rsb	r7, r1, #32
    67a8:	408b      	lsls	r3, r1
    67aa:	fa22 fc07 	lsr.w	ip, r2, r7
    67ae:	ea4c 0c03 	orr.w	ip, ip, r3
    67b2:	fa05 f401 	lsl.w	r4, r5, r1
    67b6:	fa20 f307 	lsr.w	r3, r0, r7
    67ba:	40fd      	lsrs	r5, r7
    67bc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    67c0:	4323      	orrs	r3, r4
    67c2:	fbb5 f8f9 	udiv	r8, r5, r9
    67c6:	fa1f fe8c 	uxth.w	lr, ip
    67ca:	fb09 5518 	mls	r5, r9, r8, r5
    67ce:	0c1c      	lsrs	r4, r3, #16
    67d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    67d4:	fb08 f50e 	mul.w	r5, r8, lr
    67d8:	42a5      	cmp	r5, r4
    67da:	fa02 f201 	lsl.w	r2, r2, r1
    67de:	fa00 f001 	lsl.w	r0, r0, r1
    67e2:	d90b      	bls.n	67fc <__udivmoddi4+0x1b0>
    67e4:	eb1c 0404 	adds.w	r4, ip, r4
    67e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    67ec:	f080 8088 	bcs.w	6900 <__udivmoddi4+0x2b4>
    67f0:	42a5      	cmp	r5, r4
    67f2:	f240 8085 	bls.w	6900 <__udivmoddi4+0x2b4>
    67f6:	f1a8 0802 	sub.w	r8, r8, #2
    67fa:	4464      	add	r4, ip
    67fc:	1b64      	subs	r4, r4, r5
    67fe:	b29d      	uxth	r5, r3
    6800:	fbb4 f3f9 	udiv	r3, r4, r9
    6804:	fb09 4413 	mls	r4, r9, r3, r4
    6808:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    680c:	fb03 fe0e 	mul.w	lr, r3, lr
    6810:	45a6      	cmp	lr, r4
    6812:	d908      	bls.n	6826 <__udivmoddi4+0x1da>
    6814:	eb1c 0404 	adds.w	r4, ip, r4
    6818:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
    681c:	d26c      	bcs.n	68f8 <__udivmoddi4+0x2ac>
    681e:	45a6      	cmp	lr, r4
    6820:	d96a      	bls.n	68f8 <__udivmoddi4+0x2ac>
    6822:	3b02      	subs	r3, #2
    6824:	4464      	add	r4, ip
    6826:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    682a:	fba3 9502 	umull	r9, r5, r3, r2
    682e:	eba4 040e 	sub.w	r4, r4, lr
    6832:	42ac      	cmp	r4, r5
    6834:	46c8      	mov	r8, r9
    6836:	46ae      	mov	lr, r5
    6838:	d356      	bcc.n	68e8 <__udivmoddi4+0x29c>
    683a:	d053      	beq.n	68e4 <__udivmoddi4+0x298>
    683c:	b156      	cbz	r6, 6854 <__udivmoddi4+0x208>
    683e:	ebb0 0208 	subs.w	r2, r0, r8
    6842:	eb64 040e 	sbc.w	r4, r4, lr
    6846:	fa04 f707 	lsl.w	r7, r4, r7
    684a:	40ca      	lsrs	r2, r1
    684c:	40cc      	lsrs	r4, r1
    684e:	4317      	orrs	r7, r2
    6850:	e9c6 7400 	strd	r7, r4, [r6]
    6854:	4618      	mov	r0, r3
    6856:	2100      	movs	r1, #0
    6858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    685c:	f1c3 0120 	rsb	r1, r3, #32
    6860:	fa02 fc03 	lsl.w	ip, r2, r3
    6864:	fa20 f201 	lsr.w	r2, r0, r1
    6868:	fa25 f101 	lsr.w	r1, r5, r1
    686c:	409d      	lsls	r5, r3
    686e:	432a      	orrs	r2, r5
    6870:	ea4f 471c 	mov.w	r7, ip, lsr #16
    6874:	fa1f fe8c 	uxth.w	lr, ip
    6878:	fbb1 f0f7 	udiv	r0, r1, r7
    687c:	fb07 1510 	mls	r5, r7, r0, r1
    6880:	0c11      	lsrs	r1, r2, #16
    6882:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    6886:	fb00 f50e 	mul.w	r5, r0, lr
    688a:	428d      	cmp	r5, r1
    688c:	fa04 f403 	lsl.w	r4, r4, r3
    6890:	d908      	bls.n	68a4 <__udivmoddi4+0x258>
    6892:	eb1c 0101 	adds.w	r1, ip, r1
    6896:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    689a:	d22f      	bcs.n	68fc <__udivmoddi4+0x2b0>
    689c:	428d      	cmp	r5, r1
    689e:	d92d      	bls.n	68fc <__udivmoddi4+0x2b0>
    68a0:	3802      	subs	r0, #2
    68a2:	4461      	add	r1, ip
    68a4:	1b49      	subs	r1, r1, r5
    68a6:	b292      	uxth	r2, r2
    68a8:	fbb1 f5f7 	udiv	r5, r1, r7
    68ac:	fb07 1115 	mls	r1, r7, r5, r1
    68b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    68b4:	fb05 f10e 	mul.w	r1, r5, lr
    68b8:	4291      	cmp	r1, r2
    68ba:	d908      	bls.n	68ce <__udivmoddi4+0x282>
    68bc:	eb1c 0202 	adds.w	r2, ip, r2
    68c0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
    68c4:	d216      	bcs.n	68f4 <__udivmoddi4+0x2a8>
    68c6:	4291      	cmp	r1, r2
    68c8:	d914      	bls.n	68f4 <__udivmoddi4+0x2a8>
    68ca:	3d02      	subs	r5, #2
    68cc:	4462      	add	r2, ip
    68ce:	1a52      	subs	r2, r2, r1
    68d0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    68d4:	e738      	b.n	6748 <__udivmoddi4+0xfc>
    68d6:	4631      	mov	r1, r6
    68d8:	4630      	mov	r0, r6
    68da:	e708      	b.n	66ee <__udivmoddi4+0xa2>
    68dc:	4639      	mov	r1, r7
    68de:	e6e6      	b.n	66ae <__udivmoddi4+0x62>
    68e0:	4610      	mov	r0, r2
    68e2:	e6fb      	b.n	66dc <__udivmoddi4+0x90>
    68e4:	4548      	cmp	r0, r9
    68e6:	d2a9      	bcs.n	683c <__udivmoddi4+0x1f0>
    68e8:	ebb9 0802 	subs.w	r8, r9, r2
    68ec:	eb65 0e0c 	sbc.w	lr, r5, ip
    68f0:	3b01      	subs	r3, #1
    68f2:	e7a3      	b.n	683c <__udivmoddi4+0x1f0>
    68f4:	4645      	mov	r5, r8
    68f6:	e7ea      	b.n	68ce <__udivmoddi4+0x282>
    68f8:	462b      	mov	r3, r5
    68fa:	e794      	b.n	6826 <__udivmoddi4+0x1da>
    68fc:	4640      	mov	r0, r8
    68fe:	e7d1      	b.n	68a4 <__udivmoddi4+0x258>
    6900:	46d0      	mov	r8, sl
    6902:	e77b      	b.n	67fc <__udivmoddi4+0x1b0>
    6904:	3d02      	subs	r5, #2
    6906:	4462      	add	r2, ip
    6908:	e732      	b.n	6770 <__udivmoddi4+0x124>
    690a:	4608      	mov	r0, r1
    690c:	e70a      	b.n	6724 <__udivmoddi4+0xd8>
    690e:	4464      	add	r4, ip
    6910:	3802      	subs	r0, #2
    6912:	e742      	b.n	679a <__udivmoddi4+0x14e>

00006914 <__aeabi_idiv0>:
    6914:	4770      	bx	lr
    6916:	bf00      	nop

00006918 <isspace>:
    6918:	4b02      	ldr	r3, [pc, #8]	; (6924 <isspace+0xc>)
    691a:	4418      	add	r0, r3
    691c:	7840      	ldrb	r0, [r0, #1]
    691e:	f000 0008 	and.w	r0, r0, #8
    6922:	4770      	bx	lr
    6924:	20000954 	.word	0x20000954

00006928 <atol>:
    6928:	220a      	movs	r2, #10
    692a:	2100      	movs	r1, #0
    692c:	f001 bcfa 	b.w	8324 <strtol>

00006930 <malloc>:
    6930:	4b02      	ldr	r3, [pc, #8]	; (693c <malloc+0xc>)
    6932:	4601      	mov	r1, r0
    6934:	6818      	ldr	r0, [r3, #0]
    6936:	f000 b80b 	b.w	6950 <_malloc_r>
    693a:	bf00      	nop
    693c:	20008bc0 	.word	0x20008bc0

00006940 <free>:
    6940:	4b02      	ldr	r3, [pc, #8]	; (694c <free+0xc>)
    6942:	4601      	mov	r1, r0
    6944:	6818      	ldr	r0, [r3, #0]
    6946:	f002 bb2d 	b.w	8fa4 <_free_r>
    694a:	bf00      	nop
    694c:	20008bc0 	.word	0x20008bc0

00006950 <_malloc_r>:
    6950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6954:	f101 060b 	add.w	r6, r1, #11
    6958:	2e16      	cmp	r6, #22
    695a:	b083      	sub	sp, #12
    695c:	4604      	mov	r4, r0
    695e:	d824      	bhi.n	69aa <_malloc_r+0x5a>
    6960:	2910      	cmp	r1, #16
    6962:	f200 80ba 	bhi.w	6ada <_malloc_r+0x18a>
    6966:	f000 faa3 	bl	6eb0 <__malloc_lock>
    696a:	2610      	movs	r6, #16
    696c:	2218      	movs	r2, #24
    696e:	2002      	movs	r0, #2
    6970:	4fb5      	ldr	r7, [pc, #724]	; (6c48 <_malloc_r+0x2f8>)
    6972:	443a      	add	r2, r7
    6974:	f1a2 0108 	sub.w	r1, r2, #8
    6978:	6853      	ldr	r3, [r2, #4]
    697a:	428b      	cmp	r3, r1
    697c:	f000 80ba 	beq.w	6af4 <_malloc_r+0x1a4>
    6980:	685a      	ldr	r2, [r3, #4]
    6982:	68d9      	ldr	r1, [r3, #12]
    6984:	f022 0203 	bic.w	r2, r2, #3
    6988:	441a      	add	r2, r3
    698a:	689d      	ldr	r5, [r3, #8]
    698c:	60e9      	str	r1, [r5, #12]
    698e:	608d      	str	r5, [r1, #8]
    6990:	6851      	ldr	r1, [r2, #4]
    6992:	f041 0101 	orr.w	r1, r1, #1
    6996:	4620      	mov	r0, r4
    6998:	6051      	str	r1, [r2, #4]
    699a:	f103 0508 	add.w	r5, r3, #8
    699e:	f000 fa8d 	bl	6ebc <__malloc_unlock>
    69a2:	4628      	mov	r0, r5
    69a4:	b003      	add	sp, #12
    69a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    69aa:	f036 0607 	bics.w	r6, r6, #7
    69ae:	f100 8094 	bmi.w	6ada <_malloc_r+0x18a>
    69b2:	42b1      	cmp	r1, r6
    69b4:	f200 8091 	bhi.w	6ada <_malloc_r+0x18a>
    69b8:	f000 fa7a 	bl	6eb0 <__malloc_lock>
    69bc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    69c0:	f0c0 819a 	bcc.w	6cf8 <_malloc_r+0x3a8>
    69c4:	0a73      	lsrs	r3, r6, #9
    69c6:	f000 808f 	beq.w	6ae8 <_malloc_r+0x198>
    69ca:	2b04      	cmp	r3, #4
    69cc:	f200 816f 	bhi.w	6cae <_malloc_r+0x35e>
    69d0:	09b3      	lsrs	r3, r6, #6
    69d2:	f103 0039 	add.w	r0, r3, #57	; 0x39
    69d6:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    69da:	00c3      	lsls	r3, r0, #3
    69dc:	4f9a      	ldr	r7, [pc, #616]	; (6c48 <_malloc_r+0x2f8>)
    69de:	443b      	add	r3, r7
    69e0:	f1a3 0508 	sub.w	r5, r3, #8
    69e4:	685b      	ldr	r3, [r3, #4]
    69e6:	429d      	cmp	r5, r3
    69e8:	d106      	bne.n	69f8 <_malloc_r+0xa8>
    69ea:	e00c      	b.n	6a06 <_malloc_r+0xb6>
    69ec:	2900      	cmp	r1, #0
    69ee:	f280 8127 	bge.w	6c40 <_malloc_r+0x2f0>
    69f2:	68db      	ldr	r3, [r3, #12]
    69f4:	429d      	cmp	r5, r3
    69f6:	d006      	beq.n	6a06 <_malloc_r+0xb6>
    69f8:	685a      	ldr	r2, [r3, #4]
    69fa:	f022 0203 	bic.w	r2, r2, #3
    69fe:	1b91      	subs	r1, r2, r6
    6a00:	290f      	cmp	r1, #15
    6a02:	ddf3      	ble.n	69ec <_malloc_r+0x9c>
    6a04:	4660      	mov	r0, ip
    6a06:	693d      	ldr	r5, [r7, #16]
    6a08:	f8df c250 	ldr.w	ip, [pc, #592]	; 6c5c <_malloc_r+0x30c>
    6a0c:	4565      	cmp	r5, ip
    6a0e:	d07c      	beq.n	6b0a <_malloc_r+0x1ba>
    6a10:	686a      	ldr	r2, [r5, #4]
    6a12:	f022 0203 	bic.w	r2, r2, #3
    6a16:	1b93      	subs	r3, r2, r6
    6a18:	2b0f      	cmp	r3, #15
    6a1a:	f300 817b 	bgt.w	6d14 <_malloc_r+0x3c4>
    6a1e:	2b00      	cmp	r3, #0
    6a20:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    6a24:	f280 816c 	bge.w	6d00 <_malloc_r+0x3b0>
    6a28:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    6a2c:	f080 811a 	bcs.w	6c64 <_malloc_r+0x314>
    6a30:	08d3      	lsrs	r3, r2, #3
    6a32:	6879      	ldr	r1, [r7, #4]
    6a34:	3301      	adds	r3, #1
    6a36:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    6a3a:	2201      	movs	r2, #1
    6a3c:	fa02 f20e 	lsl.w	r2, r2, lr
    6a40:	430a      	orrs	r2, r1
    6a42:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    6a46:	f8c5 e008 	str.w	lr, [r5, #8]
    6a4a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    6a4e:	3908      	subs	r1, #8
    6a50:	60e9      	str	r1, [r5, #12]
    6a52:	607a      	str	r2, [r7, #4]
    6a54:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    6a58:	f8ce 500c 	str.w	r5, [lr, #12]
    6a5c:	1083      	asrs	r3, r0, #2
    6a5e:	2101      	movs	r1, #1
    6a60:	4099      	lsls	r1, r3
    6a62:	4291      	cmp	r1, r2
    6a64:	d857      	bhi.n	6b16 <_malloc_r+0x1c6>
    6a66:	4211      	tst	r1, r2
    6a68:	d106      	bne.n	6a78 <_malloc_r+0x128>
    6a6a:	f020 0003 	bic.w	r0, r0, #3
    6a6e:	0049      	lsls	r1, r1, #1
    6a70:	4211      	tst	r1, r2
    6a72:	f100 0004 	add.w	r0, r0, #4
    6a76:	d0fa      	beq.n	6a6e <_malloc_r+0x11e>
    6a78:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    6a7c:	464d      	mov	r5, r9
    6a7e:	4686      	mov	lr, r0
    6a80:	f8d5 800c 	ldr.w	r8, [r5, #12]
    6a84:	4545      	cmp	r5, r8
    6a86:	d108      	bne.n	6a9a <_malloc_r+0x14a>
    6a88:	e11d      	b.n	6cc6 <_malloc_r+0x376>
    6a8a:	2b00      	cmp	r3, #0
    6a8c:	f280 8124 	bge.w	6cd8 <_malloc_r+0x388>
    6a90:	f8d8 800c 	ldr.w	r8, [r8, #12]
    6a94:	4545      	cmp	r5, r8
    6a96:	f000 8116 	beq.w	6cc6 <_malloc_r+0x376>
    6a9a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6a9e:	f022 0203 	bic.w	r2, r2, #3
    6aa2:	1b93      	subs	r3, r2, r6
    6aa4:	2b0f      	cmp	r3, #15
    6aa6:	ddf0      	ble.n	6a8a <_malloc_r+0x13a>
    6aa8:	4620      	mov	r0, r4
    6aaa:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    6aae:	eb08 0106 	add.w	r1, r8, r6
    6ab2:	f046 0601 	orr.w	r6, r6, #1
    6ab6:	f8c8 6004 	str.w	r6, [r8, #4]
    6aba:	60ec      	str	r4, [r5, #12]
    6abc:	60a5      	str	r5, [r4, #8]
    6abe:	f043 0401 	orr.w	r4, r3, #1
    6ac2:	e9c7 1104 	strd	r1, r1, [r7, #16]
    6ac6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    6aca:	604c      	str	r4, [r1, #4]
    6acc:	f848 3002 	str.w	r3, [r8, r2]
    6ad0:	f000 f9f4 	bl	6ebc <__malloc_unlock>
    6ad4:	f108 0508 	add.w	r5, r8, #8
    6ad8:	e002      	b.n	6ae0 <_malloc_r+0x190>
    6ada:	230c      	movs	r3, #12
    6adc:	6023      	str	r3, [r4, #0]
    6ade:	2500      	movs	r5, #0
    6ae0:	4628      	mov	r0, r5
    6ae2:	b003      	add	sp, #12
    6ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
    6aec:	2040      	movs	r0, #64	; 0x40
    6aee:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    6af2:	e773      	b.n	69dc <_malloc_r+0x8c>
    6af4:	68d3      	ldr	r3, [r2, #12]
    6af6:	429a      	cmp	r2, r3
    6af8:	bf08      	it	eq
    6afa:	3002      	addeq	r0, #2
    6afc:	f47f af40 	bne.w	6980 <_malloc_r+0x30>
    6b00:	693d      	ldr	r5, [r7, #16]
    6b02:	f8df c158 	ldr.w	ip, [pc, #344]	; 6c5c <_malloc_r+0x30c>
    6b06:	4565      	cmp	r5, ip
    6b08:	d182      	bne.n	6a10 <_malloc_r+0xc0>
    6b0a:	687a      	ldr	r2, [r7, #4]
    6b0c:	1083      	asrs	r3, r0, #2
    6b0e:	2101      	movs	r1, #1
    6b10:	4099      	lsls	r1, r3
    6b12:	4291      	cmp	r1, r2
    6b14:	d9a7      	bls.n	6a66 <_malloc_r+0x116>
    6b16:	68bd      	ldr	r5, [r7, #8]
    6b18:	686b      	ldr	r3, [r5, #4]
    6b1a:	f023 0903 	bic.w	r9, r3, #3
    6b1e:	454e      	cmp	r6, r9
    6b20:	d803      	bhi.n	6b2a <_malloc_r+0x1da>
    6b22:	eba9 0306 	sub.w	r3, r9, r6
    6b26:	2b0f      	cmp	r3, #15
    6b28:	dc7a      	bgt.n	6c20 <_malloc_r+0x2d0>
    6b2a:	f8df b134 	ldr.w	fp, [pc, #308]	; 6c60 <_malloc_r+0x310>
    6b2e:	4b47      	ldr	r3, [pc, #284]	; (6c4c <_malloc_r+0x2fc>)
    6b30:	f8db 2000 	ldr.w	r2, [fp]
    6b34:	681b      	ldr	r3, [r3, #0]
    6b36:	3201      	adds	r2, #1
    6b38:	4433      	add	r3, r6
    6b3a:	eb05 0a09 	add.w	sl, r5, r9
    6b3e:	f000 8133 	beq.w	6da8 <_malloc_r+0x458>
    6b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    6b46:	330f      	adds	r3, #15
    6b48:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    6b4c:	f028 080f 	bic.w	r8, r8, #15
    6b50:	4641      	mov	r1, r8
    6b52:	4620      	mov	r0, r4
    6b54:	f001 fedc 	bl	8910 <_sbrk_r>
    6b58:	1c41      	adds	r1, r0, #1
    6b5a:	4602      	mov	r2, r0
    6b5c:	f000 80f3 	beq.w	6d46 <_malloc_r+0x3f6>
    6b60:	4582      	cmp	sl, r0
    6b62:	f200 80ee 	bhi.w	6d42 <_malloc_r+0x3f2>
    6b66:	4b3a      	ldr	r3, [pc, #232]	; (6c50 <_malloc_r+0x300>)
    6b68:	6819      	ldr	r1, [r3, #0]
    6b6a:	4441      	add	r1, r8
    6b6c:	6019      	str	r1, [r3, #0]
    6b6e:	4608      	mov	r0, r1
    6b70:	f000 814e 	beq.w	6e10 <_malloc_r+0x4c0>
    6b74:	f8db 1000 	ldr.w	r1, [fp]
    6b78:	9301      	str	r3, [sp, #4]
    6b7a:	3101      	adds	r1, #1
    6b7c:	bf1b      	ittet	ne
    6b7e:	eba2 010a 	subne.w	r1, r2, sl
    6b82:	1809      	addne	r1, r1, r0
    6b84:	f8cb 2000 	streq.w	r2, [fp]
    6b88:	6019      	strne	r1, [r3, #0]
    6b8a:	f012 0b07 	ands.w	fp, r2, #7
    6b8e:	f000 8117 	beq.w	6dc0 <_malloc_r+0x470>
    6b92:	f1cb 0108 	rsb	r1, fp, #8
    6b96:	440a      	add	r2, r1
    6b98:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    6b9c:	4490      	add	r8, r2
    6b9e:	3108      	adds	r1, #8
    6ba0:	eba1 0108 	sub.w	r1, r1, r8
    6ba4:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    6ba8:	4651      	mov	r1, sl
    6baa:	4620      	mov	r0, r4
    6bac:	9200      	str	r2, [sp, #0]
    6bae:	f001 feaf 	bl	8910 <_sbrk_r>
    6bb2:	1c42      	adds	r2, r0, #1
    6bb4:	e9dd 2300 	ldrd	r2, r3, [sp]
    6bb8:	f000 814f 	beq.w	6e5a <_malloc_r+0x50a>
    6bbc:	1a80      	subs	r0, r0, r2
    6bbe:	eb00 080a 	add.w	r8, r0, sl
    6bc2:	6819      	ldr	r1, [r3, #0]
    6bc4:	60ba      	str	r2, [r7, #8]
    6bc6:	f048 0001 	orr.w	r0, r8, #1
    6bca:	4451      	add	r1, sl
    6bcc:	42bd      	cmp	r5, r7
    6bce:	6050      	str	r0, [r2, #4]
    6bd0:	6019      	str	r1, [r3, #0]
    6bd2:	f000 8129 	beq.w	6e28 <_malloc_r+0x4d8>
    6bd6:	f1b9 0f0f 	cmp.w	r9, #15
    6bda:	f240 8127 	bls.w	6e2c <_malloc_r+0x4dc>
    6bde:	6868      	ldr	r0, [r5, #4]
    6be0:	f1a9 0c0c 	sub.w	ip, r9, #12
    6be4:	f02c 0c07 	bic.w	ip, ip, #7
    6be8:	f000 0001 	and.w	r0, r0, #1
    6bec:	ea40 000c 	orr.w	r0, r0, ip
    6bf0:	6068      	str	r0, [r5, #4]
    6bf2:	f04f 0e05 	mov.w	lr, #5
    6bf6:	eb05 000c 	add.w	r0, r5, ip
    6bfa:	f1bc 0f0f 	cmp.w	ip, #15
    6bfe:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    6c02:	f200 8132 	bhi.w	6e6a <_malloc_r+0x51a>
    6c06:	6850      	ldr	r0, [r2, #4]
    6c08:	4615      	mov	r5, r2
    6c0a:	4b12      	ldr	r3, [pc, #72]	; (6c54 <_malloc_r+0x304>)
    6c0c:	681a      	ldr	r2, [r3, #0]
    6c0e:	428a      	cmp	r2, r1
    6c10:	bf38      	it	cc
    6c12:	6019      	strcc	r1, [r3, #0]
    6c14:	4b10      	ldr	r3, [pc, #64]	; (6c58 <_malloc_r+0x308>)
    6c16:	681a      	ldr	r2, [r3, #0]
    6c18:	428a      	cmp	r2, r1
    6c1a:	bf38      	it	cc
    6c1c:	6019      	strcc	r1, [r3, #0]
    6c1e:	e094      	b.n	6d4a <_malloc_r+0x3fa>
    6c20:	19aa      	adds	r2, r5, r6
    6c22:	f043 0301 	orr.w	r3, r3, #1
    6c26:	f046 0601 	orr.w	r6, r6, #1
    6c2a:	606e      	str	r6, [r5, #4]
    6c2c:	4620      	mov	r0, r4
    6c2e:	60ba      	str	r2, [r7, #8]
    6c30:	6053      	str	r3, [r2, #4]
    6c32:	f000 f943 	bl	6ebc <__malloc_unlock>
    6c36:	3508      	adds	r5, #8
    6c38:	4628      	mov	r0, r5
    6c3a:	b003      	add	sp, #12
    6c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c40:	68d9      	ldr	r1, [r3, #12]
    6c42:	441a      	add	r2, r3
    6c44:	e6a1      	b.n	698a <_malloc_r+0x3a>
    6c46:	bf00      	nop
    6c48:	200087a4 	.word	0x200087a4
    6c4c:	2000a8b0 	.word	0x2000a8b0
    6c50:	2000a880 	.word	0x2000a880
    6c54:	2000a8a8 	.word	0x2000a8a8
    6c58:	2000a8ac 	.word	0x2000a8ac
    6c5c:	200087ac 	.word	0x200087ac
    6c60:	20008bac 	.word	0x20008bac
    6c64:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    6c68:	ea4f 2352 	mov.w	r3, r2, lsr #9
    6c6c:	d363      	bcc.n	6d36 <_malloc_r+0x3e6>
    6c6e:	2b14      	cmp	r3, #20
    6c70:	f200 80b7 	bhi.w	6de2 <_malloc_r+0x492>
    6c74:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    6c78:	00c9      	lsls	r1, r1, #3
    6c7a:	335b      	adds	r3, #91	; 0x5b
    6c7c:	eb07 0e01 	add.w	lr, r7, r1
    6c80:	5879      	ldr	r1, [r7, r1]
    6c82:	f1ae 0e08 	sub.w	lr, lr, #8
    6c86:	458e      	cmp	lr, r1
    6c88:	f000 8091 	beq.w	6dae <_malloc_r+0x45e>
    6c8c:	684b      	ldr	r3, [r1, #4]
    6c8e:	f023 0303 	bic.w	r3, r3, #3
    6c92:	4293      	cmp	r3, r2
    6c94:	d902      	bls.n	6c9c <_malloc_r+0x34c>
    6c96:	6889      	ldr	r1, [r1, #8]
    6c98:	458e      	cmp	lr, r1
    6c9a:	d1f7      	bne.n	6c8c <_malloc_r+0x33c>
    6c9c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    6ca0:	687a      	ldr	r2, [r7, #4]
    6ca2:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    6ca6:	f8ce 5008 	str.w	r5, [lr, #8]
    6caa:	60cd      	str	r5, [r1, #12]
    6cac:	e6d6      	b.n	6a5c <_malloc_r+0x10c>
    6cae:	2b14      	cmp	r3, #20
    6cb0:	d959      	bls.n	6d66 <_malloc_r+0x416>
    6cb2:	2b54      	cmp	r3, #84	; 0x54
    6cb4:	f200 809d 	bhi.w	6df2 <_malloc_r+0x4a2>
    6cb8:	0b33      	lsrs	r3, r6, #12
    6cba:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    6cbe:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    6cc2:	00c3      	lsls	r3, r0, #3
    6cc4:	e68a      	b.n	69dc <_malloc_r+0x8c>
    6cc6:	f10e 0e01 	add.w	lr, lr, #1
    6cca:	f01e 0f03 	tst.w	lr, #3
    6cce:	f105 0508 	add.w	r5, r5, #8
    6cd2:	f47f aed5 	bne.w	6a80 <_malloc_r+0x130>
    6cd6:	e051      	b.n	6d7c <_malloc_r+0x42c>
    6cd8:	4442      	add	r2, r8
    6cda:	4645      	mov	r5, r8
    6cdc:	6853      	ldr	r3, [r2, #4]
    6cde:	f8d8 100c 	ldr.w	r1, [r8, #12]
    6ce2:	f043 0301 	orr.w	r3, r3, #1
    6ce6:	6053      	str	r3, [r2, #4]
    6ce8:	f855 3f08 	ldr.w	r3, [r5, #8]!
    6cec:	4620      	mov	r0, r4
    6cee:	60d9      	str	r1, [r3, #12]
    6cf0:	608b      	str	r3, [r1, #8]
    6cf2:	f000 f8e3 	bl	6ebc <__malloc_unlock>
    6cf6:	e6f3      	b.n	6ae0 <_malloc_r+0x190>
    6cf8:	08f0      	lsrs	r0, r6, #3
    6cfa:	f106 0208 	add.w	r2, r6, #8
    6cfe:	e637      	b.n	6970 <_malloc_r+0x20>
    6d00:	442a      	add	r2, r5
    6d02:	4620      	mov	r0, r4
    6d04:	6853      	ldr	r3, [r2, #4]
    6d06:	f043 0301 	orr.w	r3, r3, #1
    6d0a:	6053      	str	r3, [r2, #4]
    6d0c:	3508      	adds	r5, #8
    6d0e:	f000 f8d5 	bl	6ebc <__malloc_unlock>
    6d12:	e6e5      	b.n	6ae0 <_malloc_r+0x190>
    6d14:	19a9      	adds	r1, r5, r6
    6d16:	4620      	mov	r0, r4
    6d18:	f046 0601 	orr.w	r6, r6, #1
    6d1c:	f043 0401 	orr.w	r4, r3, #1
    6d20:	606e      	str	r6, [r5, #4]
    6d22:	e9c7 1104 	strd	r1, r1, [r7, #16]
    6d26:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    6d2a:	604c      	str	r4, [r1, #4]
    6d2c:	50ab      	str	r3, [r5, r2]
    6d2e:	f000 f8c5 	bl	6ebc <__malloc_unlock>
    6d32:	3508      	adds	r5, #8
    6d34:	e6d4      	b.n	6ae0 <_malloc_r+0x190>
    6d36:	0993      	lsrs	r3, r2, #6
    6d38:	f103 0139 	add.w	r1, r3, #57	; 0x39
    6d3c:	00c9      	lsls	r1, r1, #3
    6d3e:	3338      	adds	r3, #56	; 0x38
    6d40:	e79c      	b.n	6c7c <_malloc_r+0x32c>
    6d42:	42bd      	cmp	r5, r7
    6d44:	d05f      	beq.n	6e06 <_malloc_r+0x4b6>
    6d46:	68bd      	ldr	r5, [r7, #8]
    6d48:	6868      	ldr	r0, [r5, #4]
    6d4a:	f020 0803 	bic.w	r8, r0, #3
    6d4e:	4546      	cmp	r6, r8
    6d50:	eba8 0306 	sub.w	r3, r8, r6
    6d54:	d802      	bhi.n	6d5c <_malloc_r+0x40c>
    6d56:	2b0f      	cmp	r3, #15
    6d58:	f73f af62 	bgt.w	6c20 <_malloc_r+0x2d0>
    6d5c:	4620      	mov	r0, r4
    6d5e:	f000 f8ad 	bl	6ebc <__malloc_unlock>
    6d62:	2500      	movs	r5, #0
    6d64:	e6bc      	b.n	6ae0 <_malloc_r+0x190>
    6d66:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    6d6a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    6d6e:	00c3      	lsls	r3, r0, #3
    6d70:	e634      	b.n	69dc <_malloc_r+0x8c>
    6d72:	f859 3908 	ldr.w	r3, [r9], #-8
    6d76:	454b      	cmp	r3, r9
    6d78:	f040 8096 	bne.w	6ea8 <_malloc_r+0x558>
    6d7c:	f010 0f03 	tst.w	r0, #3
    6d80:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    6d84:	d1f5      	bne.n	6d72 <_malloc_r+0x422>
    6d86:	687b      	ldr	r3, [r7, #4]
    6d88:	ea23 0301 	bic.w	r3, r3, r1
    6d8c:	607b      	str	r3, [r7, #4]
    6d8e:	0049      	lsls	r1, r1, #1
    6d90:	4299      	cmp	r1, r3
    6d92:	f63f aec0 	bhi.w	6b16 <_malloc_r+0x1c6>
    6d96:	b919      	cbnz	r1, 6da0 <_malloc_r+0x450>
    6d98:	e6bd      	b.n	6b16 <_malloc_r+0x1c6>
    6d9a:	0049      	lsls	r1, r1, #1
    6d9c:	f10e 0e04 	add.w	lr, lr, #4
    6da0:	4219      	tst	r1, r3
    6da2:	d0fa      	beq.n	6d9a <_malloc_r+0x44a>
    6da4:	4670      	mov	r0, lr
    6da6:	e667      	b.n	6a78 <_malloc_r+0x128>
    6da8:	f103 0810 	add.w	r8, r3, #16
    6dac:	e6d0      	b.n	6b50 <_malloc_r+0x200>
    6dae:	109a      	asrs	r2, r3, #2
    6db0:	f04f 0801 	mov.w	r8, #1
    6db4:	687b      	ldr	r3, [r7, #4]
    6db6:	fa08 f202 	lsl.w	r2, r8, r2
    6dba:	431a      	orrs	r2, r3
    6dbc:	607a      	str	r2, [r7, #4]
    6dbe:	e770      	b.n	6ca2 <_malloc_r+0x352>
    6dc0:	eb02 0108 	add.w	r1, r2, r8
    6dc4:	4249      	negs	r1, r1
    6dc6:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    6dca:	4651      	mov	r1, sl
    6dcc:	4620      	mov	r0, r4
    6dce:	9200      	str	r2, [sp, #0]
    6dd0:	f001 fd9e 	bl	8910 <_sbrk_r>
    6dd4:	1c43      	adds	r3, r0, #1
    6dd6:	e9dd 2300 	ldrd	r2, r3, [sp]
    6dda:	f47f aeef 	bne.w	6bbc <_malloc_r+0x26c>
    6dde:	46da      	mov	sl, fp
    6de0:	e6ef      	b.n	6bc2 <_malloc_r+0x272>
    6de2:	2b54      	cmp	r3, #84	; 0x54
    6de4:	d825      	bhi.n	6e32 <_malloc_r+0x4e2>
    6de6:	0b13      	lsrs	r3, r2, #12
    6de8:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    6dec:	00c9      	lsls	r1, r1, #3
    6dee:	336e      	adds	r3, #110	; 0x6e
    6df0:	e744      	b.n	6c7c <_malloc_r+0x32c>
    6df2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    6df6:	d825      	bhi.n	6e44 <_malloc_r+0x4f4>
    6df8:	0bf3      	lsrs	r3, r6, #15
    6dfa:	f103 0078 	add.w	r0, r3, #120	; 0x78
    6dfe:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    6e02:	00c3      	lsls	r3, r0, #3
    6e04:	e5ea      	b.n	69dc <_malloc_r+0x8c>
    6e06:	4b29      	ldr	r3, [pc, #164]	; (6eac <_malloc_r+0x55c>)
    6e08:	6818      	ldr	r0, [r3, #0]
    6e0a:	4440      	add	r0, r8
    6e0c:	6018      	str	r0, [r3, #0]
    6e0e:	e6b1      	b.n	6b74 <_malloc_r+0x224>
    6e10:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    6e14:	f1bc 0f00 	cmp.w	ip, #0
    6e18:	f47f aeac 	bne.w	6b74 <_malloc_r+0x224>
    6e1c:	68bd      	ldr	r5, [r7, #8]
    6e1e:	44c8      	add	r8, r9
    6e20:	f048 0001 	orr.w	r0, r8, #1
    6e24:	6068      	str	r0, [r5, #4]
    6e26:	e6f0      	b.n	6c0a <_malloc_r+0x2ba>
    6e28:	4615      	mov	r5, r2
    6e2a:	e6ee      	b.n	6c0a <_malloc_r+0x2ba>
    6e2c:	2301      	movs	r3, #1
    6e2e:	6053      	str	r3, [r2, #4]
    6e30:	e794      	b.n	6d5c <_malloc_r+0x40c>
    6e32:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    6e36:	d823      	bhi.n	6e80 <_malloc_r+0x530>
    6e38:	0bd3      	lsrs	r3, r2, #15
    6e3a:	f103 0178 	add.w	r1, r3, #120	; 0x78
    6e3e:	00c9      	lsls	r1, r1, #3
    6e40:	3377      	adds	r3, #119	; 0x77
    6e42:	e71b      	b.n	6c7c <_malloc_r+0x32c>
    6e44:	f240 5254 	movw	r2, #1364	; 0x554
    6e48:	4293      	cmp	r3, r2
    6e4a:	d823      	bhi.n	6e94 <_malloc_r+0x544>
    6e4c:	0cb3      	lsrs	r3, r6, #18
    6e4e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    6e52:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    6e56:	00c3      	lsls	r3, r0, #3
    6e58:	e5c0      	b.n	69dc <_malloc_r+0x8c>
    6e5a:	f1ab 0b08 	sub.w	fp, fp, #8
    6e5e:	44d8      	add	r8, fp
    6e60:	eba8 0802 	sub.w	r8, r8, r2
    6e64:	f04f 0a00 	mov.w	sl, #0
    6e68:	e6ab      	b.n	6bc2 <_malloc_r+0x272>
    6e6a:	f105 0108 	add.w	r1, r5, #8
    6e6e:	4620      	mov	r0, r4
    6e70:	9300      	str	r3, [sp, #0]
    6e72:	f002 f897 	bl	8fa4 <_free_r>
    6e76:	68bd      	ldr	r5, [r7, #8]
    6e78:	9b00      	ldr	r3, [sp, #0]
    6e7a:	6868      	ldr	r0, [r5, #4]
    6e7c:	6819      	ldr	r1, [r3, #0]
    6e7e:	e6c4      	b.n	6c0a <_malloc_r+0x2ba>
    6e80:	f240 5154 	movw	r1, #1364	; 0x554
    6e84:	428b      	cmp	r3, r1
    6e86:	d80b      	bhi.n	6ea0 <_malloc_r+0x550>
    6e88:	0c93      	lsrs	r3, r2, #18
    6e8a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    6e8e:	00c9      	lsls	r1, r1, #3
    6e90:	337c      	adds	r3, #124	; 0x7c
    6e92:	e6f3      	b.n	6c7c <_malloc_r+0x32c>
    6e94:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    6e98:	207f      	movs	r0, #127	; 0x7f
    6e9a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    6e9e:	e59d      	b.n	69dc <_malloc_r+0x8c>
    6ea0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    6ea4:	237e      	movs	r3, #126	; 0x7e
    6ea6:	e6e9      	b.n	6c7c <_malloc_r+0x32c>
    6ea8:	687b      	ldr	r3, [r7, #4]
    6eaa:	e770      	b.n	6d8e <_malloc_r+0x43e>
    6eac:	2000a880 	.word	0x2000a880

00006eb0 <__malloc_lock>:
    6eb0:	4801      	ldr	r0, [pc, #4]	; (6eb8 <__malloc_lock+0x8>)
    6eb2:	f001 bf59 	b.w	8d68 <__retarget_lock_acquire_recursive>
    6eb6:	bf00      	nop
    6eb8:	2000a878 	.word	0x2000a878

00006ebc <__malloc_unlock>:
    6ebc:	4801      	ldr	r0, [pc, #4]	; (6ec4 <__malloc_unlock+0x8>)
    6ebe:	f001 bf55 	b.w	8d6c <__retarget_lock_release_recursive>
    6ec2:	bf00      	nop
    6ec4:	2000a878 	.word	0x2000a878

00006ec8 <realloc>:
    6ec8:	b410      	push	{r4}
    6eca:	4c04      	ldr	r4, [pc, #16]	; (6edc <realloc+0x14>)
    6ecc:	4603      	mov	r3, r0
    6ece:	460a      	mov	r2, r1
    6ed0:	6820      	ldr	r0, [r4, #0]
    6ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
    6ed6:	4619      	mov	r1, r3
    6ed8:	f000 b802 	b.w	6ee0 <_realloc_r>
    6edc:	20008bc0 	.word	0x20008bc0

00006ee0 <_realloc_r>:
    6ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ee4:	4617      	mov	r7, r2
    6ee6:	2900      	cmp	r1, #0
    6ee8:	f000 8098 	beq.w	701c <_realloc_r+0x13c>
    6eec:	460c      	mov	r4, r1
    6eee:	f107 050b 	add.w	r5, r7, #11
    6ef2:	4680      	mov	r8, r0
    6ef4:	f7ff ffdc 	bl	6eb0 <__malloc_lock>
    6ef8:	2d16      	cmp	r5, #22
    6efa:	f854 1c04 	ldr.w	r1, [r4, #-4]
    6efe:	d85b      	bhi.n	6fb8 <_realloc_r+0xd8>
    6f00:	2510      	movs	r5, #16
    6f02:	462a      	mov	r2, r5
    6f04:	42af      	cmp	r7, r5
    6f06:	d85c      	bhi.n	6fc2 <_realloc_r+0xe2>
    6f08:	f021 0603 	bic.w	r6, r1, #3
    6f0c:	4296      	cmp	r6, r2
    6f0e:	f1a4 0908 	sub.w	r9, r4, #8
    6f12:	da62      	bge.n	6fda <_realloc_r+0xfa>
    6f14:	4bbc      	ldr	r3, [pc, #752]	; (7208 <_realloc_r+0x328>)
    6f16:	f8d3 c008 	ldr.w	ip, [r3, #8]
    6f1a:	eb09 0006 	add.w	r0, r9, r6
    6f1e:	4584      	cmp	ip, r0
    6f20:	f000 8097 	beq.w	7052 <_realloc_r+0x172>
    6f24:	f8d0 c004 	ldr.w	ip, [r0, #4]
    6f28:	f02c 0301 	bic.w	r3, ip, #1
    6f2c:	4403      	add	r3, r0
    6f2e:	685b      	ldr	r3, [r3, #4]
    6f30:	07db      	lsls	r3, r3, #31
    6f32:	d468      	bmi.n	7006 <_realloc_r+0x126>
    6f34:	f02c 0c03 	bic.w	ip, ip, #3
    6f38:	eb06 030c 	add.w	r3, r6, ip
    6f3c:	4293      	cmp	r3, r2
    6f3e:	da47      	bge.n	6fd0 <_realloc_r+0xf0>
    6f40:	07cb      	lsls	r3, r1, #31
    6f42:	d410      	bmi.n	6f66 <_realloc_r+0x86>
    6f44:	f854 3c08 	ldr.w	r3, [r4, #-8]
    6f48:	eba9 0a03 	sub.w	sl, r9, r3
    6f4c:	f8da 3004 	ldr.w	r3, [sl, #4]
    6f50:	f023 0103 	bic.w	r1, r3, #3
    6f54:	448c      	add	ip, r1
    6f56:	44b4      	add	ip, r6
    6f58:	4594      	cmp	ip, r2
    6f5a:	f280 8111 	bge.w	7180 <_realloc_r+0x2a0>
    6f5e:	1873      	adds	r3, r6, r1
    6f60:	4293      	cmp	r3, r2
    6f62:	f280 80e8 	bge.w	7136 <_realloc_r+0x256>
    6f66:	4639      	mov	r1, r7
    6f68:	4640      	mov	r0, r8
    6f6a:	f7ff fcf1 	bl	6950 <_malloc_r>
    6f6e:	4607      	mov	r7, r0
    6f70:	b1e0      	cbz	r0, 6fac <_realloc_r+0xcc>
    6f72:	f854 3c04 	ldr.w	r3, [r4, #-4]
    6f76:	f023 0301 	bic.w	r3, r3, #1
    6f7a:	444b      	add	r3, r9
    6f7c:	f1a0 0208 	sub.w	r2, r0, #8
    6f80:	4293      	cmp	r3, r2
    6f82:	f000 80d2 	beq.w	712a <_realloc_r+0x24a>
    6f86:	1f32      	subs	r2, r6, #4
    6f88:	2a24      	cmp	r2, #36	; 0x24
    6f8a:	f200 80f5 	bhi.w	7178 <_realloc_r+0x298>
    6f8e:	2a13      	cmp	r2, #19
    6f90:	f200 80ac 	bhi.w	70ec <_realloc_r+0x20c>
    6f94:	4603      	mov	r3, r0
    6f96:	4622      	mov	r2, r4
    6f98:	6811      	ldr	r1, [r2, #0]
    6f9a:	6019      	str	r1, [r3, #0]
    6f9c:	6851      	ldr	r1, [r2, #4]
    6f9e:	6059      	str	r1, [r3, #4]
    6fa0:	6892      	ldr	r2, [r2, #8]
    6fa2:	609a      	str	r2, [r3, #8]
    6fa4:	4621      	mov	r1, r4
    6fa6:	4640      	mov	r0, r8
    6fa8:	f001 fffc 	bl	8fa4 <_free_r>
    6fac:	4640      	mov	r0, r8
    6fae:	f7ff ff85 	bl	6ebc <__malloc_unlock>
    6fb2:	4638      	mov	r0, r7
    6fb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fb8:	f025 0507 	bic.w	r5, r5, #7
    6fbc:	2d00      	cmp	r5, #0
    6fbe:	462a      	mov	r2, r5
    6fc0:	daa0      	bge.n	6f04 <_realloc_r+0x24>
    6fc2:	230c      	movs	r3, #12
    6fc4:	f8c8 3000 	str.w	r3, [r8]
    6fc8:	2700      	movs	r7, #0
    6fca:	4638      	mov	r0, r7
    6fcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fd0:	461e      	mov	r6, r3
    6fd2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    6fd6:	60d3      	str	r3, [r2, #12]
    6fd8:	609a      	str	r2, [r3, #8]
    6fda:	1b73      	subs	r3, r6, r5
    6fdc:	2b0f      	cmp	r3, #15
    6fde:	d822      	bhi.n	7026 <_realloc_r+0x146>
    6fe0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    6fe4:	f003 0301 	and.w	r3, r3, #1
    6fe8:	4333      	orrs	r3, r6
    6fea:	444e      	add	r6, r9
    6fec:	f8c9 3004 	str.w	r3, [r9, #4]
    6ff0:	6873      	ldr	r3, [r6, #4]
    6ff2:	f043 0301 	orr.w	r3, r3, #1
    6ff6:	6073      	str	r3, [r6, #4]
    6ff8:	4640      	mov	r0, r8
    6ffa:	4627      	mov	r7, r4
    6ffc:	f7ff ff5e 	bl	6ebc <__malloc_unlock>
    7000:	4638      	mov	r0, r7
    7002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7006:	07c9      	lsls	r1, r1, #31
    7008:	d4ad      	bmi.n	6f66 <_realloc_r+0x86>
    700a:	f854 3c08 	ldr.w	r3, [r4, #-8]
    700e:	eba9 0a03 	sub.w	sl, r9, r3
    7012:	f8da 1004 	ldr.w	r1, [sl, #4]
    7016:	f021 0103 	bic.w	r1, r1, #3
    701a:	e7a0      	b.n	6f5e <_realloc_r+0x7e>
    701c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7020:	4611      	mov	r1, r2
    7022:	f7ff bc95 	b.w	6950 <_malloc_r>
    7026:	f8d9 2004 	ldr.w	r2, [r9, #4]
    702a:	eb09 0105 	add.w	r1, r9, r5
    702e:	f002 0201 	and.w	r2, r2, #1
    7032:	444e      	add	r6, r9
    7034:	f043 0301 	orr.w	r3, r3, #1
    7038:	432a      	orrs	r2, r5
    703a:	f8c9 2004 	str.w	r2, [r9, #4]
    703e:	604b      	str	r3, [r1, #4]
    7040:	6873      	ldr	r3, [r6, #4]
    7042:	f043 0301 	orr.w	r3, r3, #1
    7046:	3108      	adds	r1, #8
    7048:	6073      	str	r3, [r6, #4]
    704a:	4640      	mov	r0, r8
    704c:	f001 ffaa 	bl	8fa4 <_free_r>
    7050:	e7d2      	b.n	6ff8 <_realloc_r+0x118>
    7052:	f8dc 0004 	ldr.w	r0, [ip, #4]
    7056:	f020 0b03 	bic.w	fp, r0, #3
    705a:	eb06 0c0b 	add.w	ip, r6, fp
    705e:	f105 0010 	add.w	r0, r5, #16
    7062:	4584      	cmp	ip, r0
    7064:	da4d      	bge.n	7102 <_realloc_r+0x222>
    7066:	07c9      	lsls	r1, r1, #31
    7068:	f53f af7d 	bmi.w	6f66 <_realloc_r+0x86>
    706c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    7070:	eba9 0a01 	sub.w	sl, r9, r1
    7074:	f8da 1004 	ldr.w	r1, [sl, #4]
    7078:	f021 0103 	bic.w	r1, r1, #3
    707c:	448b      	add	fp, r1
    707e:	44b3      	add	fp, r6
    7080:	4558      	cmp	r0, fp
    7082:	f73f af6c 	bgt.w	6f5e <_realloc_r+0x7e>
    7086:	4657      	mov	r7, sl
    7088:	f8da 100c 	ldr.w	r1, [sl, #12]
    708c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    7090:	1f32      	subs	r2, r6, #4
    7092:	2a24      	cmp	r2, #36	; 0x24
    7094:	60c1      	str	r1, [r0, #12]
    7096:	6088      	str	r0, [r1, #8]
    7098:	f200 80db 	bhi.w	7252 <_realloc_r+0x372>
    709c:	2a13      	cmp	r2, #19
    709e:	f240 80d6 	bls.w	724e <_realloc_r+0x36e>
    70a2:	6821      	ldr	r1, [r4, #0]
    70a4:	f8ca 1008 	str.w	r1, [sl, #8]
    70a8:	6861      	ldr	r1, [r4, #4]
    70aa:	f8ca 100c 	str.w	r1, [sl, #12]
    70ae:	2a1b      	cmp	r2, #27
    70b0:	f200 80df 	bhi.w	7272 <_realloc_r+0x392>
    70b4:	3408      	adds	r4, #8
    70b6:	f10a 0210 	add.w	r2, sl, #16
    70ba:	6821      	ldr	r1, [r4, #0]
    70bc:	6011      	str	r1, [r2, #0]
    70be:	6861      	ldr	r1, [r4, #4]
    70c0:	6051      	str	r1, [r2, #4]
    70c2:	68a1      	ldr	r1, [r4, #8]
    70c4:	6091      	str	r1, [r2, #8]
    70c6:	eb0a 0105 	add.w	r1, sl, r5
    70ca:	ebab 0205 	sub.w	r2, fp, r5
    70ce:	f042 0201 	orr.w	r2, r2, #1
    70d2:	6099      	str	r1, [r3, #8]
    70d4:	604a      	str	r2, [r1, #4]
    70d6:	f8da 3004 	ldr.w	r3, [sl, #4]
    70da:	f003 0301 	and.w	r3, r3, #1
    70de:	432b      	orrs	r3, r5
    70e0:	4640      	mov	r0, r8
    70e2:	f8ca 3004 	str.w	r3, [sl, #4]
    70e6:	f7ff fee9 	bl	6ebc <__malloc_unlock>
    70ea:	e76e      	b.n	6fca <_realloc_r+0xea>
    70ec:	6823      	ldr	r3, [r4, #0]
    70ee:	6003      	str	r3, [r0, #0]
    70f0:	6863      	ldr	r3, [r4, #4]
    70f2:	6043      	str	r3, [r0, #4]
    70f4:	2a1b      	cmp	r2, #27
    70f6:	d868      	bhi.n	71ca <_realloc_r+0x2ea>
    70f8:	f104 0208 	add.w	r2, r4, #8
    70fc:	f100 0308 	add.w	r3, r0, #8
    7100:	e74a      	b.n	6f98 <_realloc_r+0xb8>
    7102:	eb09 0205 	add.w	r2, r9, r5
    7106:	609a      	str	r2, [r3, #8]
    7108:	ebac 0305 	sub.w	r3, ip, r5
    710c:	f043 0301 	orr.w	r3, r3, #1
    7110:	6053      	str	r3, [r2, #4]
    7112:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7116:	f003 0301 	and.w	r3, r3, #1
    711a:	432b      	orrs	r3, r5
    711c:	4640      	mov	r0, r8
    711e:	f844 3c04 	str.w	r3, [r4, #-4]
    7122:	f7ff fecb 	bl	6ebc <__malloc_unlock>
    7126:	4627      	mov	r7, r4
    7128:	e74f      	b.n	6fca <_realloc_r+0xea>
    712a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    712e:	f023 0303 	bic.w	r3, r3, #3
    7132:	441e      	add	r6, r3
    7134:	e751      	b.n	6fda <_realloc_r+0xfa>
    7136:	4657      	mov	r7, sl
    7138:	f8da 100c 	ldr.w	r1, [sl, #12]
    713c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    7140:	1f32      	subs	r2, r6, #4
    7142:	2a24      	cmp	r2, #36	; 0x24
    7144:	60c1      	str	r1, [r0, #12]
    7146:	6088      	str	r0, [r1, #8]
    7148:	d84c      	bhi.n	71e4 <_realloc_r+0x304>
    714a:	2a13      	cmp	r2, #19
    714c:	d948      	bls.n	71e0 <_realloc_r+0x300>
    714e:	6821      	ldr	r1, [r4, #0]
    7150:	f8ca 1008 	str.w	r1, [sl, #8]
    7154:	6861      	ldr	r1, [r4, #4]
    7156:	f8ca 100c 	str.w	r1, [sl, #12]
    715a:	2a1b      	cmp	r2, #27
    715c:	d856      	bhi.n	720c <_realloc_r+0x32c>
    715e:	3408      	adds	r4, #8
    7160:	f10a 0210 	add.w	r2, sl, #16
    7164:	461e      	mov	r6, r3
    7166:	6823      	ldr	r3, [r4, #0]
    7168:	6013      	str	r3, [r2, #0]
    716a:	6863      	ldr	r3, [r4, #4]
    716c:	6053      	str	r3, [r2, #4]
    716e:	68a3      	ldr	r3, [r4, #8]
    7170:	6093      	str	r3, [r2, #8]
    7172:	46d1      	mov	r9, sl
    7174:	463c      	mov	r4, r7
    7176:	e730      	b.n	6fda <_realloc_r+0xfa>
    7178:	4621      	mov	r1, r4
    717a:	f001 fa39 	bl	85f0 <memmove>
    717e:	e711      	b.n	6fa4 <_realloc_r+0xc4>
    7180:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    7184:	4657      	mov	r7, sl
    7186:	60cb      	str	r3, [r1, #12]
    7188:	6099      	str	r1, [r3, #8]
    718a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    718e:	f8da 300c 	ldr.w	r3, [sl, #12]
    7192:	60cb      	str	r3, [r1, #12]
    7194:	1f32      	subs	r2, r6, #4
    7196:	2a24      	cmp	r2, #36	; 0x24
    7198:	6099      	str	r1, [r3, #8]
    719a:	d82d      	bhi.n	71f8 <_realloc_r+0x318>
    719c:	2a13      	cmp	r2, #19
    719e:	d929      	bls.n	71f4 <_realloc_r+0x314>
    71a0:	6823      	ldr	r3, [r4, #0]
    71a2:	f8ca 3008 	str.w	r3, [sl, #8]
    71a6:	6863      	ldr	r3, [r4, #4]
    71a8:	f8ca 300c 	str.w	r3, [sl, #12]
    71ac:	2a1b      	cmp	r2, #27
    71ae:	d842      	bhi.n	7236 <_realloc_r+0x356>
    71b0:	3408      	adds	r4, #8
    71b2:	f10a 0310 	add.w	r3, sl, #16
    71b6:	6822      	ldr	r2, [r4, #0]
    71b8:	601a      	str	r2, [r3, #0]
    71ba:	6862      	ldr	r2, [r4, #4]
    71bc:	605a      	str	r2, [r3, #4]
    71be:	68a2      	ldr	r2, [r4, #8]
    71c0:	609a      	str	r2, [r3, #8]
    71c2:	4666      	mov	r6, ip
    71c4:	46d1      	mov	r9, sl
    71c6:	463c      	mov	r4, r7
    71c8:	e707      	b.n	6fda <_realloc_r+0xfa>
    71ca:	68a3      	ldr	r3, [r4, #8]
    71cc:	6083      	str	r3, [r0, #8]
    71ce:	68e3      	ldr	r3, [r4, #12]
    71d0:	60c3      	str	r3, [r0, #12]
    71d2:	2a24      	cmp	r2, #36	; 0x24
    71d4:	d026      	beq.n	7224 <_realloc_r+0x344>
    71d6:	f104 0210 	add.w	r2, r4, #16
    71da:	f100 0310 	add.w	r3, r0, #16
    71de:	e6db      	b.n	6f98 <_realloc_r+0xb8>
    71e0:	463a      	mov	r2, r7
    71e2:	e7bf      	b.n	7164 <_realloc_r+0x284>
    71e4:	4621      	mov	r1, r4
    71e6:	4638      	mov	r0, r7
    71e8:	461e      	mov	r6, r3
    71ea:	46d1      	mov	r9, sl
    71ec:	f001 fa00 	bl	85f0 <memmove>
    71f0:	463c      	mov	r4, r7
    71f2:	e6f2      	b.n	6fda <_realloc_r+0xfa>
    71f4:	463b      	mov	r3, r7
    71f6:	e7de      	b.n	71b6 <_realloc_r+0x2d6>
    71f8:	4621      	mov	r1, r4
    71fa:	4638      	mov	r0, r7
    71fc:	4666      	mov	r6, ip
    71fe:	46d1      	mov	r9, sl
    7200:	f001 f9f6 	bl	85f0 <memmove>
    7204:	463c      	mov	r4, r7
    7206:	e6e8      	b.n	6fda <_realloc_r+0xfa>
    7208:	200087a4 	.word	0x200087a4
    720c:	68a1      	ldr	r1, [r4, #8]
    720e:	f8ca 1010 	str.w	r1, [sl, #16]
    7212:	68e1      	ldr	r1, [r4, #12]
    7214:	f8ca 1014 	str.w	r1, [sl, #20]
    7218:	2a24      	cmp	r2, #36	; 0x24
    721a:	d020      	beq.n	725e <_realloc_r+0x37e>
    721c:	3410      	adds	r4, #16
    721e:	f10a 0218 	add.w	r2, sl, #24
    7222:	e79f      	b.n	7164 <_realloc_r+0x284>
    7224:	6923      	ldr	r3, [r4, #16]
    7226:	6103      	str	r3, [r0, #16]
    7228:	6961      	ldr	r1, [r4, #20]
    722a:	6141      	str	r1, [r0, #20]
    722c:	f104 0218 	add.w	r2, r4, #24
    7230:	f100 0318 	add.w	r3, r0, #24
    7234:	e6b0      	b.n	6f98 <_realloc_r+0xb8>
    7236:	68a3      	ldr	r3, [r4, #8]
    7238:	f8ca 3010 	str.w	r3, [sl, #16]
    723c:	68e3      	ldr	r3, [r4, #12]
    723e:	f8ca 3014 	str.w	r3, [sl, #20]
    7242:	2a24      	cmp	r2, #36	; 0x24
    7244:	d021      	beq.n	728a <_realloc_r+0x3aa>
    7246:	3410      	adds	r4, #16
    7248:	f10a 0318 	add.w	r3, sl, #24
    724c:	e7b3      	b.n	71b6 <_realloc_r+0x2d6>
    724e:	463a      	mov	r2, r7
    7250:	e733      	b.n	70ba <_realloc_r+0x1da>
    7252:	4621      	mov	r1, r4
    7254:	4638      	mov	r0, r7
    7256:	f001 f9cb 	bl	85f0 <memmove>
    725a:	4b16      	ldr	r3, [pc, #88]	; (72b4 <_realloc_r+0x3d4>)
    725c:	e733      	b.n	70c6 <_realloc_r+0x1e6>
    725e:	6922      	ldr	r2, [r4, #16]
    7260:	f8ca 2018 	str.w	r2, [sl, #24]
    7264:	6962      	ldr	r2, [r4, #20]
    7266:	f8ca 201c 	str.w	r2, [sl, #28]
    726a:	3418      	adds	r4, #24
    726c:	f10a 0220 	add.w	r2, sl, #32
    7270:	e778      	b.n	7164 <_realloc_r+0x284>
    7272:	68a1      	ldr	r1, [r4, #8]
    7274:	f8ca 1010 	str.w	r1, [sl, #16]
    7278:	68e1      	ldr	r1, [r4, #12]
    727a:	f8ca 1014 	str.w	r1, [sl, #20]
    727e:	2a24      	cmp	r2, #36	; 0x24
    7280:	d00d      	beq.n	729e <_realloc_r+0x3be>
    7282:	3410      	adds	r4, #16
    7284:	f10a 0218 	add.w	r2, sl, #24
    7288:	e717      	b.n	70ba <_realloc_r+0x1da>
    728a:	6923      	ldr	r3, [r4, #16]
    728c:	f8ca 3018 	str.w	r3, [sl, #24]
    7290:	6963      	ldr	r3, [r4, #20]
    7292:	f8ca 301c 	str.w	r3, [sl, #28]
    7296:	3418      	adds	r4, #24
    7298:	f10a 0320 	add.w	r3, sl, #32
    729c:	e78b      	b.n	71b6 <_realloc_r+0x2d6>
    729e:	6922      	ldr	r2, [r4, #16]
    72a0:	f8ca 2018 	str.w	r2, [sl, #24]
    72a4:	6962      	ldr	r2, [r4, #20]
    72a6:	f8ca 201c 	str.w	r2, [sl, #28]
    72aa:	3418      	adds	r4, #24
    72ac:	f10a 0220 	add.w	r2, sl, #32
    72b0:	e703      	b.n	70ba <_realloc_r+0x1da>
    72b2:	bf00      	nop
    72b4:	200087a4 	.word	0x200087a4

000072b8 <_strtod_l>:
    72b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72bc:	ed2d 8b10 	vpush	{d8-d15}
    72c0:	b097      	sub	sp, #92	; 0x5c
    72c2:	468a      	mov	sl, r1
    72c4:	2100      	movs	r1, #0
    72c6:	9207      	str	r2, [sp, #28]
    72c8:	9112      	str	r1, [sp, #72]	; 0x48
    72ca:	2200      	movs	r2, #0
    72cc:	2100      	movs	r1, #0
    72ce:	e9cd 1204 	strd	r1, r2, [sp, #16]
    72d2:	4680      	mov	r8, r0
    72d4:	4651      	mov	r1, sl
    72d6:	9111      	str	r1, [sp, #68]	; 0x44
    72d8:	460f      	mov	r7, r1
    72da:	f811 2b01 	ldrb.w	r2, [r1], #1
    72de:	2a2d      	cmp	r2, #45	; 0x2d
    72e0:	d85e      	bhi.n	73a0 <_strtod_l+0xe8>
    72e2:	a001      	add	r0, pc, #4	; (adr r0, 72e8 <_strtod_l+0x30>)
    72e4:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    72e8:	00007489 	.word	0x00007489
    72ec:	000073a1 	.word	0x000073a1
    72f0:	000073a1 	.word	0x000073a1
    72f4:	000073a1 	.word	0x000073a1
    72f8:	000073a1 	.word	0x000073a1
    72fc:	000073a1 	.word	0x000073a1
    7300:	000073a1 	.word	0x000073a1
    7304:	000073a1 	.word	0x000073a1
    7308:	000073a1 	.word	0x000073a1
    730c:	000072d7 	.word	0x000072d7
    7310:	000072d7 	.word	0x000072d7
    7314:	000072d7 	.word	0x000072d7
    7318:	000072d7 	.word	0x000072d7
    731c:	000072d7 	.word	0x000072d7
    7320:	000073a1 	.word	0x000073a1
    7324:	000073a1 	.word	0x000073a1
    7328:	000073a1 	.word	0x000073a1
    732c:	000073a1 	.word	0x000073a1
    7330:	000073a1 	.word	0x000073a1
    7334:	000073a1 	.word	0x000073a1
    7338:	000073a1 	.word	0x000073a1
    733c:	000073a1 	.word	0x000073a1
    7340:	000073a1 	.word	0x000073a1
    7344:	000073a1 	.word	0x000073a1
    7348:	000073a1 	.word	0x000073a1
    734c:	000073a1 	.word	0x000073a1
    7350:	000073a1 	.word	0x000073a1
    7354:	000073a1 	.word	0x000073a1
    7358:	000073a1 	.word	0x000073a1
    735c:	000073a1 	.word	0x000073a1
    7360:	000073a1 	.word	0x000073a1
    7364:	000073a1 	.word	0x000073a1
    7368:	000072d7 	.word	0x000072d7
    736c:	000073a1 	.word	0x000073a1
    7370:	000073a1 	.word	0x000073a1
    7374:	000073a1 	.word	0x000073a1
    7378:	000073a1 	.word	0x000073a1
    737c:	000073a1 	.word	0x000073a1
    7380:	000073a1 	.word	0x000073a1
    7384:	000073a1 	.word	0x000073a1
    7388:	000073a1 	.word	0x000073a1
    738c:	000073a1 	.word	0x000073a1
    7390:	000073a1 	.word	0x000073a1
    7394:	00007ac3 	.word	0x00007ac3
    7398:	000073a1 	.word	0x000073a1
    739c:	00007aaf 	.word	0x00007aaf
    73a0:	2100      	movs	r1, #0
    73a2:	9109      	str	r1, [sp, #36]	; 0x24
    73a4:	2a30      	cmp	r2, #48	; 0x30
    73a6:	d07d      	beq.n	74a4 <_strtod_l+0x1ec>
    73a8:	2300      	movs	r3, #0
    73aa:	9308      	str	r3, [sp, #32]
    73ac:	2a2f      	cmp	r2, #47	; 0x2f
    73ae:	4614      	mov	r4, r2
    73b0:	f240 84cd 	bls.w	7d4e <_strtod_l+0xa96>
    73b4:	f04f 0900 	mov.w	r9, #0
    73b8:	4638      	mov	r0, r7
    73ba:	464e      	mov	r6, r9
    73bc:	464d      	mov	r5, r9
    73be:	e012      	b.n	73e6 <_strtod_l+0x12e>
    73c0:	3001      	adds	r0, #1
    73c2:	2d08      	cmp	r5, #8
    73c4:	9011      	str	r0, [sp, #68]	; 0x44
    73c6:	bfc8      	it	gt
    73c8:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    73cc:	7804      	ldrb	r4, [r0, #0]
    73ce:	bfc6      	itte	gt
    73d0:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    73d4:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    73d8:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    73dc:	2c2f      	cmp	r4, #47	; 0x2f
    73de:	f105 0501 	add.w	r5, r5, #1
    73e2:	4622      	mov	r2, r4
    73e4:	dd6f      	ble.n	74c6 <_strtod_l+0x20e>
    73e6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    73ea:	2c39      	cmp	r4, #57	; 0x39
    73ec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    73f0:	dde6      	ble.n	73c0 <_strtod_l+0x108>
    73f2:	499f      	ldr	r1, [pc, #636]	; (7670 <_strtod_l+0x3b8>)
    73f4:	2201      	movs	r2, #1
    73f6:	f001 f9c9 	bl	878c <strncmp>
    73fa:	2800      	cmp	r0, #0
    73fc:	d137      	bne.n	746e <_strtod_l+0x1b6>
    73fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7400:	461a      	mov	r2, r3
    7402:	3301      	adds	r3, #1
    7404:	9311      	str	r3, [sp, #68]	; 0x44
    7406:	7854      	ldrb	r4, [r2, #1]
    7408:	2d00      	cmp	r5, #0
    740a:	f040 8543 	bne.w	7e94 <_strtod_l+0xbdc>
    740e:	2c30      	cmp	r4, #48	; 0x30
    7410:	f040 8524 	bne.w	7e5c <_strtod_l+0xba4>
    7414:	f1c3 0201 	rsb	r2, r3, #1
    7418:	1898      	adds	r0, r3, r2
    741a:	3301      	adds	r3, #1
    741c:	9311      	str	r3, [sp, #68]	; 0x44
    741e:	781c      	ldrb	r4, [r3, #0]
    7420:	2c30      	cmp	r4, #48	; 0x30
    7422:	d0f9      	beq.n	7418 <_strtod_l+0x160>
    7424:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    7428:	2b08      	cmp	r3, #8
    742a:	f200 8301 	bhi.w	7a30 <_strtod_l+0x778>
    742e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    7430:	1c43      	adds	r3, r0, #1
    7432:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    7436:	930b      	str	r3, [sp, #44]	; 0x2c
    7438:	2501      	movs	r5, #1
    743a:	46bc      	mov	ip, r7
    743c:	f04f 0e00 	mov.w	lr, #0
    7440:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    7444:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    7448:	2000      	movs	r0, #0
    744a:	f10c 0301 	add.w	r3, ip, #1
    744e:	9311      	str	r3, [sp, #68]	; 0x44
    7450:	f89c 4001 	ldrb.w	r4, [ip, #1]
    7454:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    7458:	2909      	cmp	r1, #9
    745a:	f200 82bb 	bhi.w	79d4 <_strtod_l+0x71c>
    745e:	3001      	adds	r0, #1
    7460:	468b      	mov	fp, r1
    7462:	2900      	cmp	r1, #0
    7464:	f040 844f 	bne.w	7d06 <_strtod_l+0xa4e>
    7468:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    746c:	e7ed      	b.n	744a <_strtod_l+0x192>
    746e:	2000      	movs	r0, #0
    7470:	2c65      	cmp	r4, #101	; 0x65
    7472:	46ae      	mov	lr, r5
    7474:	900b      	str	r0, [sp, #44]	; 0x2c
    7476:	4684      	mov	ip, r0
    7478:	d001      	beq.n	747e <_strtod_l+0x1c6>
    747a:	2c45      	cmp	r4, #69	; 0x45
    747c:	d130      	bne.n	74e0 <_strtod_l+0x228>
    747e:	2d00      	cmp	r5, #0
    7480:	d16b      	bne.n	755a <_strtod_l+0x2a2>
    7482:	9b08      	ldr	r3, [sp, #32]
    7484:	4303      	orrs	r3, r0
    7486:	d167      	bne.n	7558 <_strtod_l+0x2a0>
    7488:	9b07      	ldr	r3, [sp, #28]
    748a:	ed9f 8b77 	vldr	d8, [pc, #476]	; 7668 <_strtod_l+0x3b0>
    748e:	b113      	cbz	r3, 7496 <_strtod_l+0x1de>
    7490:	9b07      	ldr	r3, [sp, #28]
    7492:	f8c3 a000 	str.w	sl, [r3]
    7496:	eeb0 0b48 	vmov.f64	d0, d8
    749a:	b017      	add	sp, #92	; 0x5c
    749c:	ecbd 8b10 	vpop	{d8-d15}
    74a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74a4:	787a      	ldrb	r2, [r7, #1]
    74a6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    74aa:	2a58      	cmp	r2, #88	; 0x58
    74ac:	f000 840c 	beq.w	7cc8 <_strtod_l+0xa10>
    74b0:	3701      	adds	r7, #1
    74b2:	9711      	str	r7, [sp, #68]	; 0x44
    74b4:	783a      	ldrb	r2, [r7, #0]
    74b6:	2a30      	cmp	r2, #48	; 0x30
    74b8:	d0fa      	beq.n	74b0 <_strtod_l+0x1f8>
    74ba:	2a00      	cmp	r2, #0
    74bc:	f000 80b7 	beq.w	762e <_strtod_l+0x376>
    74c0:	2301      	movs	r3, #1
    74c2:	9308      	str	r3, [sp, #32]
    74c4:	e772      	b.n	73ac <_strtod_l+0xf4>
    74c6:	496a      	ldr	r1, [pc, #424]	; (7670 <_strtod_l+0x3b8>)
    74c8:	2201      	movs	r2, #1
    74ca:	f001 f95f 	bl	878c <strncmp>
    74ce:	2800      	cmp	r0, #0
    74d0:	f000 80c0 	beq.w	7654 <_strtod_l+0x39c>
    74d4:	46ae      	mov	lr, r5
    74d6:	f04f 0c00 	mov.w	ip, #0
    74da:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    74de:	4660      	mov	r0, ip
    74e0:	f04f 0b00 	mov.w	fp, #0
    74e4:	2d00      	cmp	r5, #0
    74e6:	d07e      	beq.n	75e6 <_strtod_l+0x32e>
    74e8:	ee07 6a90 	vmov	s15, r6
    74ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    74ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    74f2:	ebab 0303 	sub.w	r3, fp, r3
    74f6:	f1be 0f00 	cmp.w	lr, #0
    74fa:	bf08      	it	eq
    74fc:	46ae      	moveq	lr, r5
    74fe:	2d10      	cmp	r5, #16
    7500:	930a      	str	r3, [sp, #40]	; 0x28
    7502:	462b      	mov	r3, r5
    7504:	bfa8      	it	ge
    7506:	2310      	movge	r3, #16
    7508:	2d09      	cmp	r5, #9
    750a:	ed8d 7b04 	vstr	d7, [sp, #16]
    750e:	dd0c      	ble.n	752a <_strtod_l+0x272>
    7510:	4a58      	ldr	r2, [pc, #352]	; (7674 <_strtod_l+0x3bc>)
    7512:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    7516:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    751a:	ee06 9a90 	vmov	s13, r9
    751e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    7522:	eea7 6b05 	vfma.f64	d6, d7, d5
    7526:	ed8d 6b04 	vstr	d6, [sp, #16]
    752a:	2d0f      	cmp	r5, #15
    752c:	f300 80a8 	bgt.w	7680 <_strtod_l+0x3c8>
    7530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7532:	2a00      	cmp	r2, #0
    7534:	f000 83e4 	beq.w	7d00 <_strtod_l+0xa48>
    7538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    753a:	f340 833c 	ble.w	7bb6 <_strtod_l+0x8fe>
    753e:	2a16      	cmp	r2, #22
    7540:	f340 8498 	ble.w	7e74 <_strtod_l+0xbbc>
    7544:	990a      	ldr	r1, [sp, #40]	; 0x28
    7546:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    754a:	428a      	cmp	r2, r1
    754c:	f280 84a6 	bge.w	7e9c <_strtod_l+0xbe4>
    7550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7552:	1aeb      	subs	r3, r5, r3
    7554:	4413      	add	r3, r2
    7556:	e099      	b.n	768c <_strtod_l+0x3d4>
    7558:	2500      	movs	r5, #0
    755a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    755e:	f10a 0301 	add.w	r3, sl, #1
    7562:	9311      	str	r3, [sp, #68]	; 0x44
    7564:	f89a 4001 	ldrb.w	r4, [sl, #1]
    7568:	2c2b      	cmp	r4, #43	; 0x2b
    756a:	f000 825e 	beq.w	7a2a <_strtod_l+0x772>
    756e:	2c2d      	cmp	r4, #45	; 0x2d
    7570:	f000 81f7 	beq.w	7962 <_strtod_l+0x6aa>
    7574:	2300      	movs	r3, #0
    7576:	930a      	str	r3, [sp, #40]	; 0x28
    7578:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    757c:	2b09      	cmp	r3, #9
    757e:	f200 81eb 	bhi.w	7958 <_strtod_l+0x6a0>
    7582:	2c30      	cmp	r4, #48	; 0x30
    7584:	d105      	bne.n	7592 <_strtod_l+0x2da>
    7586:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7588:	3301      	adds	r3, #1
    758a:	9311      	str	r3, [sp, #68]	; 0x44
    758c:	781c      	ldrb	r4, [r3, #0]
    758e:	2c30      	cmp	r4, #48	; 0x30
    7590:	d0fa      	beq.n	7588 <_strtod_l+0x2d0>
    7592:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    7596:	2b08      	cmp	r3, #8
    7598:	d8a2      	bhi.n	74e0 <_strtod_l+0x228>
    759a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    759c:	920c      	str	r2, [sp, #48]	; 0x30
    759e:	1c53      	adds	r3, r2, #1
    75a0:	9311      	str	r3, [sp, #68]	; 0x44
    75a2:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    75a6:	7854      	ldrb	r4, [r2, #1]
    75a8:	2c2f      	cmp	r4, #47	; 0x2f
    75aa:	dc07      	bgt.n	75bc <_strtod_l+0x304>
    75ac:	e3de      	b.n	7d6c <_strtod_l+0xab4>
    75ae:	3301      	adds	r3, #1
    75b0:	9311      	str	r3, [sp, #68]	; 0x44
    75b2:	784c      	ldrb	r4, [r1, #1]
    75b4:	2c2f      	cmp	r4, #47	; 0x2f
    75b6:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    75ba:	dd06      	ble.n	75ca <_strtod_l+0x312>
    75bc:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    75c0:	2c39      	cmp	r4, #57	; 0x39
    75c2:	4619      	mov	r1, r3
    75c4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    75c8:	ddf1      	ble.n	75ae <_strtod_l+0x2f6>
    75ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    75cc:	1a9b      	subs	r3, r3, r2
    75ce:	2b08      	cmp	r3, #8
    75d0:	f340 83cc 	ble.w	7d6c <_strtod_l+0xab4>
    75d4:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    75d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    75da:	2b00      	cmp	r3, #0
    75dc:	d082      	beq.n	74e4 <_strtod_l+0x22c>
    75de:	f1cb 0b00 	rsb	fp, fp, #0
    75e2:	2d00      	cmp	r5, #0
    75e4:	d180      	bne.n	74e8 <_strtod_l+0x230>
    75e6:	9b08      	ldr	r3, [sp, #32]
    75e8:	4303      	orrs	r3, r0
    75ea:	d120      	bne.n	762e <_strtod_l+0x376>
    75ec:	f1bc 0f00 	cmp.w	ip, #0
    75f0:	f47f af4a 	bne.w	7488 <_strtod_l+0x1d0>
    75f4:	2c69      	cmp	r4, #105	; 0x69
    75f6:	f000 83cf 	beq.w	7d98 <_strtod_l+0xae0>
    75fa:	f300 82f3 	bgt.w	7be4 <_strtod_l+0x92c>
    75fe:	2c49      	cmp	r4, #73	; 0x49
    7600:	f000 83ca 	beq.w	7d98 <_strtod_l+0xae0>
    7604:	2c4e      	cmp	r4, #78	; 0x4e
    7606:	f47f af3f 	bne.w	7488 <_strtod_l+0x1d0>
    760a:	491b      	ldr	r1, [pc, #108]	; (7678 <_strtod_l+0x3c0>)
    760c:	a811      	add	r0, sp, #68	; 0x44
    760e:	f002 f8eb 	bl	97e8 <__match>
    7612:	2800      	cmp	r0, #0
    7614:	f43f af38 	beq.w	7488 <_strtod_l+0x1d0>
    7618:	9b11      	ldr	r3, [sp, #68]	; 0x44
    761a:	781b      	ldrb	r3, [r3, #0]
    761c:	2b28      	cmp	r3, #40	; 0x28
    761e:	f000 84f2 	beq.w	8006 <_strtod_l+0xd4e>
    7622:	4816      	ldr	r0, [pc, #88]	; (767c <_strtod_l+0x3c4>)
    7624:	f001 fc60 	bl	8ee8 <nan>
    7628:	eeb0 8b40 	vmov.f64	d8, d0
    762c:	e001      	b.n	7632 <_strtod_l+0x37a>
    762e:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 7668 <_strtod_l+0x3b0>
    7632:	9a07      	ldr	r2, [sp, #28]
    7634:	b10a      	cbz	r2, 763a <_strtod_l+0x382>
    7636:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7638:	6013      	str	r3, [r2, #0]
    763a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    763c:	2b00      	cmp	r3, #0
    763e:	f43f af2a 	beq.w	7496 <_strtod_l+0x1de>
    7642:	eeb1 8b48 	vneg.f64	d8, d8
    7646:	eeb0 0b48 	vmov.f64	d0, d8
    764a:	b017      	add	sp, #92	; 0x5c
    764c:	ecbd 8b10 	vpop	{d8-d15}
    7650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7654:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7656:	900b      	str	r0, [sp, #44]	; 0x2c
    7658:	1c5a      	adds	r2, r3, #1
    765a:	9211      	str	r2, [sp, #68]	; 0x44
    765c:	785c      	ldrb	r4, [r3, #1]
    765e:	46ae      	mov	lr, r5
    7660:	e6f8      	b.n	7454 <_strtod_l+0x19c>
    7662:	bf00      	nop
    7664:	f3af 8000 	nop.w
	...
    7670:	20000510 	.word	0x20000510
    7674:	200002a8 	.word	0x200002a8
    7678:	20000aec 	.word	0x20000aec
    767c:	2000056c 	.word	0x2000056c
    7680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7682:	1aeb      	subs	r3, r5, r3
    7684:	4413      	add	r3, r2
    7686:	2b00      	cmp	r3, #0
    7688:	f340 82b0 	ble.w	7bec <_strtod_l+0x934>
    768c:	f013 010f 	ands.w	r1, r3, #15
    7690:	d00a      	beq.n	76a8 <_strtod_l+0x3f0>
    7692:	4ac3      	ldr	r2, [pc, #780]	; (79a0 <_strtod_l+0x6e8>)
    7694:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    7698:	ed9d 6b04 	vldr	d6, [sp, #16]
    769c:	ed92 7b00 	vldr	d7, [r2]
    76a0:	ee27 7b06 	vmul.f64	d7, d7, d6
    76a4:	ed8d 7b04 	vstr	d7, [sp, #16]
    76a8:	f033 020f 	bics.w	r2, r3, #15
    76ac:	f040 8238 	bne.w	7b20 <_strtod_l+0x868>
    76b0:	2300      	movs	r3, #0
    76b2:	9308      	str	r3, [sp, #32]
    76b4:	9600      	str	r6, [sp, #0]
    76b6:	462b      	mov	r3, r5
    76b8:	4672      	mov	r2, lr
    76ba:	4639      	mov	r1, r7
    76bc:	4640      	mov	r0, r8
    76be:	f005 fbeb 	bl	ce98 <__s2b>
    76c2:	4681      	mov	r9, r0
    76c4:	2800      	cmp	r0, #0
    76c6:	f000 82e1 	beq.w	7c8c <_strtod_l+0x9d4>
    76ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    76cc:	eba3 0b0b 	sub.w	fp, r3, fp
    76d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    76d2:	ed9f eba9 	vldr	d14, [pc, #676]	; 7978 <_strtod_l+0x6c0>
    76d6:	2b00      	cmp	r3, #0
    76d8:	ed9f cba9 	vldr	d12, [pc, #676]	; 7980 <_strtod_l+0x6c8>
    76dc:	ed9f dbaa 	vldr	d13, [pc, #680]	; 7988 <_strtod_l+0x6d0>
    76e0:	ed9f bbab 	vldr	d11, [pc, #684]	; 7990 <_strtod_l+0x6d8>
    76e4:	bfb4      	ite	lt
    76e6:	465a      	movlt	r2, fp
    76e8:	2200      	movge	r2, #0
    76ea:	f04f 0a00 	mov.w	sl, #0
    76ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    76f2:	920b      	str	r2, [sp, #44]	; 0x2c
    76f4:	930c      	str	r3, [sp, #48]	; 0x30
    76f6:	4654      	mov	r4, sl
    76f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    76fc:	4640      	mov	r0, r8
    76fe:	f005 fb49 	bl	cd94 <_Balloc>
    7702:	4606      	mov	r6, r0
    7704:	2800      	cmp	r0, #0
    7706:	f000 810e 	beq.w	7926 <_strtod_l+0x66e>
    770a:	f8d9 2010 	ldr.w	r2, [r9, #16]
    770e:	ed9d 8b04 	vldr	d8, [sp, #16]
    7712:	3202      	adds	r2, #2
    7714:	0092      	lsls	r2, r2, #2
    7716:	f109 010c 	add.w	r1, r9, #12
    771a:	300c      	adds	r0, #12
    771c:	f7fd fa36 	bl	4b8c <memcpy>
    7720:	eeb0 0b48 	vmov.f64	d0, d8
    7724:	aa14      	add	r2, sp, #80	; 0x50
    7726:	a913      	add	r1, sp, #76	; 0x4c
    7728:	4640      	mov	r0, r8
    772a:	f005 ff71 	bl	d610 <__d2b>
    772e:	9012      	str	r0, [sp, #72]	; 0x48
    7730:	2800      	cmp	r0, #0
    7732:	f000 80e4 	beq.w	78fe <_strtod_l+0x646>
    7736:	2101      	movs	r1, #1
    7738:	4640      	mov	r0, r8
    773a:	f005 fc55 	bl	cfe8 <__i2b>
    773e:	4604      	mov	r4, r0
    7740:	2800      	cmp	r0, #0
    7742:	f000 80f0 	beq.w	7926 <_strtod_l+0x66e>
    7746:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7748:	2a00      	cmp	r2, #0
    774a:	f2c0 80de 	blt.w	790a <_strtod_l+0x652>
    774e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7750:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    7752:	eb02 0b03 	add.w	fp, r2, r3
    7756:	9b08      	ldr	r3, [sp, #32]
    7758:	9d14      	ldr	r5, [sp, #80]	; 0x50
    775a:	1ad2      	subs	r2, r2, r3
    775c:	442a      	add	r2, r5
    775e:	4b91      	ldr	r3, [pc, #580]	; (79a4 <_strtod_l+0x6ec>)
    7760:	3a01      	subs	r2, #1
    7762:	429a      	cmp	r2, r3
    7764:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    7768:	f280 8098 	bge.w	789c <_strtod_l+0x5e4>
    776c:	1a99      	subs	r1, r3, r2
    776e:	291f      	cmp	r1, #31
    7770:	eba5 0501 	sub.w	r5, r5, r1
    7774:	f300 80e3 	bgt.w	793e <_strtod_l+0x686>
    7778:	2201      	movs	r2, #1
    777a:	fa02 f301 	lsl.w	r3, r2, r1
    777e:	930d      	str	r3, [sp, #52]	; 0x34
    7780:	2300      	movs	r3, #0
    7782:	930e      	str	r3, [sp, #56]	; 0x38
    7784:	442f      	add	r7, r5
    7786:	9b08      	ldr	r3, [sp, #32]
    7788:	445d      	add	r5, fp
    778a:	45ab      	cmp	fp, r5
    778c:	465a      	mov	r2, fp
    778e:	441f      	add	r7, r3
    7790:	bfa8      	it	ge
    7792:	462a      	movge	r2, r5
    7794:	42ba      	cmp	r2, r7
    7796:	bfa8      	it	ge
    7798:	463a      	movge	r2, r7
    779a:	2a00      	cmp	r2, #0
    779c:	dd03      	ble.n	77a6 <_strtod_l+0x4ee>
    779e:	1aad      	subs	r5, r5, r2
    77a0:	1abf      	subs	r7, r7, r2
    77a2:	ebab 0b02 	sub.w	fp, fp, r2
    77a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    77a8:	2b00      	cmp	r3, #0
    77aa:	f300 8088 	bgt.w	78be <_strtod_l+0x606>
    77ae:	2d00      	cmp	r5, #0
    77b0:	f300 809c 	bgt.w	78ec <_strtod_l+0x634>
    77b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    77b6:	2b00      	cmp	r3, #0
    77b8:	f300 80b7 	bgt.w	792a <_strtod_l+0x672>
    77bc:	2f00      	cmp	r7, #0
    77be:	f300 80a9 	bgt.w	7914 <_strtod_l+0x65c>
    77c2:	f1bb 0f00 	cmp.w	fp, #0
    77c6:	dd08      	ble.n	77da <_strtod_l+0x522>
    77c8:	4621      	mov	r1, r4
    77ca:	465a      	mov	r2, fp
    77cc:	4640      	mov	r0, r8
    77ce:	f005 fd47 	bl	d260 <__lshift>
    77d2:	4604      	mov	r4, r0
    77d4:	2800      	cmp	r0, #0
    77d6:	f000 80a6 	beq.w	7926 <_strtod_l+0x66e>
    77da:	9912      	ldr	r1, [sp, #72]	; 0x48
    77dc:	4632      	mov	r2, r6
    77de:	4640      	mov	r0, r8
    77e0:	f005 fdd8 	bl	d394 <__mdiff>
    77e4:	4682      	mov	sl, r0
    77e6:	2800      	cmp	r0, #0
    77e8:	f000 809d 	beq.w	7926 <_strtod_l+0x66e>
    77ec:	2300      	movs	r3, #0
    77ee:	68c5      	ldr	r5, [r0, #12]
    77f0:	60c3      	str	r3, [r0, #12]
    77f2:	4621      	mov	r1, r4
    77f4:	f005 fdac 	bl	d350 <__mcmp>
    77f8:	2800      	cmp	r0, #0
    77fa:	f2c0 83c7 	blt.w	7f8c <_strtod_l+0xcd4>
    77fe:	f000 8361 	beq.w	7ec4 <_strtod_l+0xc0c>
    7802:	4621      	mov	r1, r4
    7804:	4650      	mov	r0, sl
    7806:	f005 ff6d 	bl	d6e4 <__ratio>
    780a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    780e:	eeb4 0bc7 	vcmpe.f64	d0, d7
    7812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7816:	d846      	bhi.n	78a6 <_strtod_l+0x5ee>
    7818:	2d00      	cmp	r5, #0
    781a:	f000 80cb 	beq.w	79b4 <_strtod_l+0x6fc>
    781e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    7822:	9805      	ldr	r0, [sp, #20]
    7824:	4b60      	ldr	r3, [pc, #384]	; (79a8 <_strtod_l+0x6f0>)
    7826:	2200      	movs	r2, #0
    7828:	4960      	ldr	r1, [pc, #384]	; (79ac <_strtod_l+0x6f4>)
    782a:	f8df c184 	ldr.w	ip, [pc, #388]	; 79b0 <_strtod_l+0x6f8>
    782e:	ea00 0701 	and.w	r7, r0, r1
    7832:	4567      	cmp	r7, ip
    7834:	f000 80d4 	beq.w	79e0 <_strtod_l+0x728>
    7838:	9908      	ldr	r1, [sp, #32]
    783a:	b159      	cbz	r1, 7854 <_strtod_l+0x59c>
    783c:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    7840:	d808      	bhi.n	7854 <_strtod_l+0x59c>
    7842:	eeb4 9bcb 	vcmpe.f64	d9, d11
    7846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    784a:	f240 8156 	bls.w	7afa <_strtod_l+0x842>
    784e:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    7852:	1bcb      	subs	r3, r1, r7
    7854:	eeb0 0b48 	vmov.f64	d0, d8
    7858:	ec43 2b1a 	vmov	d10, r2, r3
    785c:	f005 fe44 	bl	d4e8 <__ulp>
    7860:	eeaa 8b00 	vfma.f64	d8, d10, d0
    7864:	ed8d 8b04 	vstr	d8, [sp, #16]
    7868:	ee18 3a90 	vmov	r3, s17
    786c:	9a08      	ldr	r2, [sp, #32]
    786e:	b922      	cbnz	r2, 787a <_strtod_l+0x5c2>
    7870:	4a4e      	ldr	r2, [pc, #312]	; (79ac <_strtod_l+0x6f4>)
    7872:	401a      	ands	r2, r3
    7874:	4297      	cmp	r7, r2
    7876:	f000 80e4 	beq.w	7a42 <_strtod_l+0x78a>
    787a:	9912      	ldr	r1, [sp, #72]	; 0x48
    787c:	4640      	mov	r0, r8
    787e:	f005 faaf 	bl	cde0 <_Bfree>
    7882:	4631      	mov	r1, r6
    7884:	4640      	mov	r0, r8
    7886:	f005 faab 	bl	cde0 <_Bfree>
    788a:	4621      	mov	r1, r4
    788c:	4640      	mov	r0, r8
    788e:	f005 faa7 	bl	cde0 <_Bfree>
    7892:	4651      	mov	r1, sl
    7894:	4640      	mov	r0, r8
    7896:	f005 faa3 	bl	cde0 <_Bfree>
    789a:	e72d      	b.n	76f8 <_strtod_l+0x440>
    789c:	2301      	movs	r3, #1
    789e:	2100      	movs	r1, #0
    78a0:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    78a4:	e76e      	b.n	7784 <_strtod_l+0x4cc>
    78a6:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    78aa:	ee20 9b09 	vmul.f64	d9, d0, d9
    78ae:	2d00      	cmp	r5, #0
    78b0:	d15f      	bne.n	7972 <_strtod_l+0x6ba>
    78b2:	eeb1 7b49 	vneg.f64	d7, d9
    78b6:	9805      	ldr	r0, [sp, #20]
    78b8:	ec53 2b17 	vmov	r2, r3, d7
    78bc:	e7b4      	b.n	7828 <_strtod_l+0x570>
    78be:	4621      	mov	r1, r4
    78c0:	461a      	mov	r2, r3
    78c2:	4640      	mov	r0, r8
    78c4:	f005 fc6c 	bl	d1a0 <__pow5mult>
    78c8:	4604      	mov	r4, r0
    78ca:	b360      	cbz	r0, 7926 <_strtod_l+0x66e>
    78cc:	4601      	mov	r1, r0
    78ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
    78d0:	4640      	mov	r0, r8
    78d2:	f005 fbb7 	bl	d044 <__multiply>
    78d6:	b330      	cbz	r0, 7926 <_strtod_l+0x66e>
    78d8:	900f      	str	r0, [sp, #60]	; 0x3c
    78da:	9912      	ldr	r1, [sp, #72]	; 0x48
    78dc:	4640      	mov	r0, r8
    78de:	f005 fa7f 	bl	cde0 <_Bfree>
    78e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    78e4:	9212      	str	r2, [sp, #72]	; 0x48
    78e6:	2d00      	cmp	r5, #0
    78e8:	f77f af64 	ble.w	77b4 <_strtod_l+0x4fc>
    78ec:	9912      	ldr	r1, [sp, #72]	; 0x48
    78ee:	462a      	mov	r2, r5
    78f0:	4640      	mov	r0, r8
    78f2:	f005 fcb5 	bl	d260 <__lshift>
    78f6:	9012      	str	r0, [sp, #72]	; 0x48
    78f8:	2800      	cmp	r0, #0
    78fa:	f47f af5b 	bne.w	77b4 <_strtod_l+0x4fc>
    78fe:	2322      	movs	r3, #34	; 0x22
    7900:	ed9f 8b25 	vldr	d8, [pc, #148]	; 7998 <_strtod_l+0x6e0>
    7904:	f8c8 3000 	str.w	r3, [r8]
    7908:	e0bc      	b.n	7a84 <_strtod_l+0x7cc>
    790a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    790c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    7910:	1a9f      	subs	r7, r3, r2
    7912:	e720      	b.n	7756 <_strtod_l+0x49e>
    7914:	4631      	mov	r1, r6
    7916:	463a      	mov	r2, r7
    7918:	4640      	mov	r0, r8
    791a:	f005 fca1 	bl	d260 <__lshift>
    791e:	4606      	mov	r6, r0
    7920:	2800      	cmp	r0, #0
    7922:	f47f af4e 	bne.w	77c2 <_strtod_l+0x50a>
    7926:	9812      	ldr	r0, [sp, #72]	; 0x48
    7928:	e7e9      	b.n	78fe <_strtod_l+0x646>
    792a:	4631      	mov	r1, r6
    792c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    792e:	4640      	mov	r0, r8
    7930:	f005 fc36 	bl	d1a0 <__pow5mult>
    7934:	4606      	mov	r6, r0
    7936:	2800      	cmp	r0, #0
    7938:	f47f af40 	bne.w	77bc <_strtod_l+0x504>
    793c:	e7f3      	b.n	7926 <_strtod_l+0x66e>
    793e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    7942:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    7946:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    794a:	2101      	movs	r1, #1
    794c:	32e2      	adds	r2, #226	; 0xe2
    794e:	fa01 f302 	lsl.w	r3, r1, r2
    7952:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    7956:	e715      	b.n	7784 <_strtod_l+0x4cc>
    7958:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    795c:	f04f 0b00 	mov.w	fp, #0
    7960:	e5c0      	b.n	74e4 <_strtod_l+0x22c>
    7962:	2301      	movs	r3, #1
    7964:	930a      	str	r3, [sp, #40]	; 0x28
    7966:	f10a 0302 	add.w	r3, sl, #2
    796a:	9311      	str	r3, [sp, #68]	; 0x44
    796c:	f89a 4002 	ldrb.w	r4, [sl, #2]
    7970:	e602      	b.n	7578 <_strtod_l+0x2c0>
    7972:	eeb0 7b49 	vmov.f64	d7, d9
    7976:	e79e      	b.n	78b6 <_strtod_l+0x5fe>
    7978:	94a03595 	.word	0x94a03595
    797c:	3fcfffff 	.word	0x3fcfffff
    7980:	94a03595 	.word	0x94a03595
    7984:	3fdfffff 	.word	0x3fdfffff
    7988:	35afe535 	.word	0x35afe535
    798c:	3fe00000 	.word	0x3fe00000
    7990:	ffc00000 	.word	0xffc00000
    7994:	41dfffff 	.word	0x41dfffff
    7998:	00000000 	.word	0x00000000
    799c:	7ff00000 	.word	0x7ff00000
    79a0:	200002a8 	.word	0x200002a8
    79a4:	fffffc02 	.word	0xfffffc02
    79a8:	3ff00000 	.word	0x3ff00000
    79ac:	7ff00000 	.word	0x7ff00000
    79b0:	7fe00000 	.word	0x7fe00000
    79b4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    79b8:	2900      	cmp	r1, #0
    79ba:	f000 8085 	beq.w	7ac8 <_strtod_l+0x810>
    79be:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    79c2:	2901      	cmp	r1, #1
    79c4:	f000 81d8 	beq.w	7d78 <_strtod_l+0xac0>
    79c8:	4610      	mov	r0, r2
    79ca:	4bb7      	ldr	r3, [pc, #732]	; (7ca8 <_strtod_l+0x9f0>)
    79cc:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    79d0:	2200      	movs	r2, #0
    79d2:	e729      	b.n	7828 <_strtod_l+0x570>
    79d4:	2c65      	cmp	r4, #101	; 0x65
    79d6:	f04f 0c01 	mov.w	ip, #1
    79da:	f43f adbe 	beq.w	755a <_strtod_l+0x2a2>
    79de:	e54c      	b.n	747a <_strtod_l+0x1c2>
    79e0:	ec43 2b1a 	vmov	d10, r2, r3
    79e4:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    79e8:	9305      	str	r3, [sp, #20]
    79ea:	ed9d fb04 	vldr	d15, [sp, #16]
    79ee:	eeb0 0b4f 	vmov.f64	d0, d15
    79f2:	f005 fd79 	bl	d4e8 <__ulp>
    79f6:	49ad      	ldr	r1, [pc, #692]	; (7cac <_strtod_l+0x9f4>)
    79f8:	eeaa fb00 	vfma.f64	d15, d10, d0
    79fc:	ee1f 3a90 	vmov	r3, s31
    7a00:	4aab      	ldr	r2, [pc, #684]	; (7cb0 <_strtod_l+0x9f8>)
    7a02:	4019      	ands	r1, r3
    7a04:	4291      	cmp	r1, r2
    7a06:	ed8d fb04 	vstr	d15, [sp, #16]
    7a0a:	d972      	bls.n	7af2 <_strtod_l+0x83a>
    7a0c:	4ba9      	ldr	r3, [pc, #676]	; (7cb4 <_strtod_l+0x9fc>)
    7a0e:	ee18 2a90 	vmov	r2, s17
    7a12:	429a      	cmp	r2, r3
    7a14:	d103      	bne.n	7a1e <_strtod_l+0x766>
    7a16:	ee18 3a10 	vmov	r3, s16
    7a1a:	3301      	adds	r3, #1
    7a1c:	d083      	beq.n	7926 <_strtod_l+0x66e>
    7a1e:	4aa5      	ldr	r2, [pc, #660]	; (7cb4 <_strtod_l+0x9fc>)
    7a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7a24:	e9cd 3204 	strd	r3, r2, [sp, #16]
    7a28:	e727      	b.n	787a <_strtod_l+0x5c2>
    7a2a:	2300      	movs	r3, #0
    7a2c:	930a      	str	r3, [sp, #40]	; 0x28
    7a2e:	e79a      	b.n	7966 <_strtod_l+0x6ae>
    7a30:	2c65      	cmp	r4, #101	; 0x65
    7a32:	f000 80d0 	beq.w	7bd6 <_strtod_l+0x91e>
    7a36:	2c45      	cmp	r4, #69	; 0x45
    7a38:	f000 80cd 	beq.w	7bd6 <_strtod_l+0x91e>
    7a3c:	f04f 0c01 	mov.w	ip, #1
    7a40:	e5d1      	b.n	75e6 <_strtod_l+0x32e>
    7a42:	ec51 0b19 	vmov	r0, r1, d9
    7a46:	930d      	str	r3, [sp, #52]	; 0x34
    7a48:	f009 fbae 	bl	111a8 <__aeabi_d2lz>
    7a4c:	f009 fb7e 	bl	1114c <__aeabi_l2d>
    7a50:	9b04      	ldr	r3, [sp, #16]
    7a52:	431d      	orrs	r5, r3
    7a54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7a56:	ec41 0b17 	vmov	d7, r0, r1
    7a5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7a5e:	431d      	orrs	r5, r3
    7a60:	ee39 9b47 	vsub.f64	d9, d9, d7
    7a64:	f000 80a0 	beq.w	7ba8 <_strtod_l+0x8f0>
    7a68:	eeb4 9bcc 	vcmpe.f64	d9, d12
    7a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a70:	d405      	bmi.n	7a7e <_strtod_l+0x7c6>
    7a72:	eeb4 9bcd 	vcmpe.f64	d9, d13
    7a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a7a:	f77f aefe 	ble.w	787a <_strtod_l+0x5c2>
    7a7e:	ed9d 8b04 	vldr	d8, [sp, #16]
    7a82:	9812      	ldr	r0, [sp, #72]	; 0x48
    7a84:	4601      	mov	r1, r0
    7a86:	4640      	mov	r0, r8
    7a88:	f005 f9aa 	bl	cde0 <_Bfree>
    7a8c:	4631      	mov	r1, r6
    7a8e:	4640      	mov	r0, r8
    7a90:	f005 f9a6 	bl	cde0 <_Bfree>
    7a94:	4621      	mov	r1, r4
    7a96:	4640      	mov	r0, r8
    7a98:	f005 f9a2 	bl	cde0 <_Bfree>
    7a9c:	4649      	mov	r1, r9
    7a9e:	4640      	mov	r0, r8
    7aa0:	f005 f99e 	bl	cde0 <_Bfree>
    7aa4:	4651      	mov	r1, sl
    7aa6:	4640      	mov	r0, r8
    7aa8:	f005 f99a 	bl	cde0 <_Bfree>
    7aac:	e5c1      	b.n	7632 <_strtod_l+0x37a>
    7aae:	2201      	movs	r2, #1
    7ab0:	9209      	str	r2, [sp, #36]	; 0x24
    7ab2:	1c79      	adds	r1, r7, #1
    7ab4:	9111      	str	r1, [sp, #68]	; 0x44
    7ab6:	787a      	ldrb	r2, [r7, #1]
    7ab8:	2a00      	cmp	r2, #0
    7aba:	f43f ace5 	beq.w	7488 <_strtod_l+0x1d0>
    7abe:	460f      	mov	r7, r1
    7ac0:	e470      	b.n	73a4 <_strtod_l+0xec>
    7ac2:	2200      	movs	r2, #0
    7ac4:	9209      	str	r2, [sp, #36]	; 0x24
    7ac6:	e7f4      	b.n	7ab2 <_strtod_l+0x7fa>
    7ac8:	f3c2 0313 	ubfx	r3, r2, #0, #20
    7acc:	4610      	mov	r0, r2
    7ace:	2b00      	cmp	r3, #0
    7ad0:	f47f af7b 	bne.w	79ca <_strtod_l+0x712>
    7ad4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    7ad8:	eeb4 0bc7 	vcmpe.f64	d0, d7
    7adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7ae0:	f100 81d3 	bmi.w	7e8a <_strtod_l+0xbd2>
    7ae4:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    7ae8:	ee20 9b09 	vmul.f64	d9, d0, d9
    7aec:	eeb1 7b49 	vneg.f64	d7, d9
    7af0:	e6e2      	b.n	78b8 <_strtod_l+0x600>
    7af2:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    7af6:	9305      	str	r3, [sp, #20]
    7af8:	e6b8      	b.n	786c <_strtod_l+0x5b4>
    7afa:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    7afe:	ee19 3a10 	vmov	r3, s18
    7b02:	2b01      	cmp	r3, #1
    7b04:	bf38      	it	cc
    7b06:	2301      	movcc	r3, #1
    7b08:	ee09 3a10 	vmov	s18, r3
    7b0c:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    7b10:	2d00      	cmp	r5, #0
    7b12:	f040 813e 	bne.w	7d92 <_strtod_l+0xada>
    7b16:	eeb1 7b49 	vneg.f64	d7, d9
    7b1a:	ec53 2b17 	vmov	r2, r3, d7
    7b1e:	e696      	b.n	784e <_strtod_l+0x596>
    7b20:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    7b24:	f300 80b2 	bgt.w	7c8c <_strtod_l+0x9d4>
    7b28:	2a10      	cmp	r2, #16
    7b2a:	ea4f 1322 	mov.w	r3, r2, asr #4
    7b2e:	f340 8286 	ble.w	803e <_strtod_l+0xd86>
    7b32:	4c61      	ldr	r4, [pc, #388]	; (7cb8 <_strtod_l+0xa00>)
    7b34:	ed9d 7b04 	vldr	d7, [sp, #16]
    7b38:	2000      	movs	r0, #0
    7b3a:	4622      	mov	r2, r4
    7b3c:	4601      	mov	r1, r0
    7b3e:	f013 0f01 	tst.w	r3, #1
    7b42:	f101 0101 	add.w	r1, r1, #1
    7b46:	ea4f 0363 	mov.w	r3, r3, asr #1
    7b4a:	d004      	beq.n	7b56 <_strtod_l+0x89e>
    7b4c:	ed92 6b00 	vldr	d6, [r2]
    7b50:	2001      	movs	r0, #1
    7b52:	ee27 7b06 	vmul.f64	d7, d7, d6
    7b56:	2b01      	cmp	r3, #1
    7b58:	f102 0208 	add.w	r2, r2, #8
    7b5c:	d1ef      	bne.n	7b3e <_strtod_l+0x886>
    7b5e:	b108      	cbz	r0, 7b64 <_strtod_l+0x8ac>
    7b60:	ed8d 7b04 	vstr	d7, [sp, #16]
    7b64:	9b05      	ldr	r3, [sp, #20]
    7b66:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    7b6a:	9305      	str	r3, [sp, #20]
    7b6c:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    7b70:	ed9d 6b04 	vldr	d6, [sp, #16]
    7b74:	ed94 7b00 	vldr	d7, [r4]
    7b78:	4b4c      	ldr	r3, [pc, #304]	; (7cac <_strtod_l+0x9f4>)
    7b7a:	ee27 7b06 	vmul.f64	d7, d7, d6
    7b7e:	ee17 2a90 	vmov	r2, s15
    7b82:	494e      	ldr	r1, [pc, #312]	; (7cbc <_strtod_l+0xa04>)
    7b84:	4013      	ands	r3, r2
    7b86:	428b      	cmp	r3, r1
    7b88:	ed8d 7b04 	vstr	d7, [sp, #16]
    7b8c:	d87e      	bhi.n	7c8c <_strtod_l+0x9d4>
    7b8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    7b92:	428b      	cmp	r3, r1
    7b94:	f240 81d6 	bls.w	7f44 <_strtod_l+0xc8c>
    7b98:	4c46      	ldr	r4, [pc, #280]	; (7cb4 <_strtod_l+0x9fc>)
    7b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7b9e:	e9cd 3404 	strd	r3, r4, [sp, #16]
    7ba2:	2300      	movs	r3, #0
    7ba4:	9308      	str	r3, [sp, #32]
    7ba6:	e585      	b.n	76b4 <_strtod_l+0x3fc>
    7ba8:	eeb4 9bce 	vcmpe.f64	d9, d14
    7bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7bb0:	f57f ae63 	bpl.w	787a <_strtod_l+0x5c2>
    7bb4:	e763      	b.n	7a7e <_strtod_l+0x7c6>
    7bb6:	3216      	adds	r2, #22
    7bb8:	f6ff ad62 	blt.w	7680 <_strtod_l+0x3c8>
    7bbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7bbe:	eba3 0b0b 	sub.w	fp, r3, fp
    7bc2:	4b3f      	ldr	r3, [pc, #252]	; (7cc0 <_strtod_l+0xa08>)
    7bc4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    7bc8:	ed93 7b00 	vldr	d7, [r3]
    7bcc:	ed9d 6b04 	vldr	d6, [sp, #16]
    7bd0:	ee86 8b07 	vdiv.f64	d8, d6, d7
    7bd4:	e52d      	b.n	7632 <_strtod_l+0x37a>
    7bd6:	f04f 0e00 	mov.w	lr, #0
    7bda:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    7bde:	f04f 0c01 	mov.w	ip, #1
    7be2:	e44e      	b.n	7482 <_strtod_l+0x1ca>
    7be4:	2c6e      	cmp	r4, #110	; 0x6e
    7be6:	f43f ad10 	beq.w	760a <_strtod_l+0x352>
    7bea:	e44d      	b.n	7488 <_strtod_l+0x1d0>
    7bec:	f43f ad60 	beq.w	76b0 <_strtod_l+0x3f8>
    7bf0:	425b      	negs	r3, r3
    7bf2:	f013 010f 	ands.w	r1, r3, #15
    7bf6:	d00a      	beq.n	7c0e <_strtod_l+0x956>
    7bf8:	4a31      	ldr	r2, [pc, #196]	; (7cc0 <_strtod_l+0xa08>)
    7bfa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    7bfe:	ed9d 6b04 	vldr	d6, [sp, #16]
    7c02:	ed92 7b00 	vldr	d7, [r2]
    7c06:	ee86 7b07 	vdiv.f64	d7, d6, d7
    7c0a:	ed8d 7b04 	vstr	d7, [sp, #16]
    7c0e:	111b      	asrs	r3, r3, #4
    7c10:	f43f ad4e 	beq.w	76b0 <_strtod_l+0x3f8>
    7c14:	2b1f      	cmp	r3, #31
    7c16:	dc33      	bgt.n	7c80 <_strtod_l+0x9c8>
    7c18:	f013 0210 	ands.w	r2, r3, #16
    7c1c:	bf18      	it	ne
    7c1e:	226a      	movne	r2, #106	; 0x6a
    7c20:	ed9d 7b04 	vldr	d7, [sp, #16]
    7c24:	9208      	str	r2, [sp, #32]
    7c26:	4a27      	ldr	r2, [pc, #156]	; (7cc4 <_strtod_l+0xa0c>)
    7c28:	2100      	movs	r1, #0
    7c2a:	07d8      	lsls	r0, r3, #31
    7c2c:	d504      	bpl.n	7c38 <_strtod_l+0x980>
    7c2e:	ed92 6b00 	vldr	d6, [r2]
    7c32:	2101      	movs	r1, #1
    7c34:	ee27 7b06 	vmul.f64	d7, d7, d6
    7c38:	105b      	asrs	r3, r3, #1
    7c3a:	f102 0208 	add.w	r2, r2, #8
    7c3e:	d1f4      	bne.n	7c2a <_strtod_l+0x972>
    7c40:	b109      	cbz	r1, 7c46 <_strtod_l+0x98e>
    7c42:	ed8d 7b04 	vstr	d7, [sp, #16]
    7c46:	9b08      	ldr	r3, [sp, #32]
    7c48:	b193      	cbz	r3, 7c70 <_strtod_l+0x9b8>
    7c4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    7c4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
    7c52:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    7c56:	2b00      	cmp	r3, #0
    7c58:	dd0a      	ble.n	7c70 <_strtod_l+0x9b8>
    7c5a:	2b1f      	cmp	r3, #31
    7c5c:	f340 822f 	ble.w	80be <_strtod_l+0xe06>
    7c60:	2000      	movs	r0, #0
    7c62:	2b34      	cmp	r3, #52	; 0x34
    7c64:	9004      	str	r0, [sp, #16]
    7c66:	f340 8240 	ble.w	80ea <_strtod_l+0xe32>
    7c6a:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    7c6e:	9305      	str	r3, [sp, #20]
    7c70:	ed9d 7b04 	vldr	d7, [sp, #16]
    7c74:	eeb5 7b40 	vcmp.f64	d7, #0.0
    7c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c7c:	f47f ad1a 	bne.w	76b4 <_strtod_l+0x3fc>
    7c80:	2322      	movs	r3, #34	; 0x22
    7c82:	ed9f 8b05 	vldr	d8, [pc, #20]	; 7c98 <_strtod_l+0x9e0>
    7c86:	f8c8 3000 	str.w	r3, [r8]
    7c8a:	e4d2      	b.n	7632 <_strtod_l+0x37a>
    7c8c:	2322      	movs	r3, #34	; 0x22
    7c8e:	ed9f 8b04 	vldr	d8, [pc, #16]	; 7ca0 <_strtod_l+0x9e8>
    7c92:	f8c8 3000 	str.w	r3, [r8]
    7c96:	e4cc      	b.n	7632 <_strtod_l+0x37a>
	...
    7ca4:	7ff00000 	.word	0x7ff00000
    7ca8:	bff00000 	.word	0xbff00000
    7cac:	7ff00000 	.word	0x7ff00000
    7cb0:	7c9fffff 	.word	0x7c9fffff
    7cb4:	7fefffff 	.word	0x7fefffff
    7cb8:	20000280 	.word	0x20000280
    7cbc:	7ca00000 	.word	0x7ca00000
    7cc0:	200002a8 	.word	0x200002a8
    7cc4:	20000370 	.word	0x20000370
    7cc8:	9302      	str	r3, [sp, #8]
    7cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7ccc:	9301      	str	r3, [sp, #4]
    7cce:	ab12      	add	r3, sp, #72	; 0x48
    7cd0:	9300      	str	r3, [sp, #0]
    7cd2:	4aa7      	ldr	r2, [pc, #668]	; (7f70 <_strtod_l+0xcb8>)
    7cd4:	ab13      	add	r3, sp, #76	; 0x4c
    7cd6:	a911      	add	r1, sp, #68	; 0x44
    7cd8:	4640      	mov	r0, r8
    7cda:	f001 fabb 	bl	9254 <__gethex>
    7cde:	f010 050f 	ands.w	r5, r0, #15
    7ce2:	4604      	mov	r4, r0
    7ce4:	f43f aca3 	beq.w	762e <_strtod_l+0x376>
    7ce8:	2d06      	cmp	r5, #6
    7cea:	d174      	bne.n	7dd6 <_strtod_l+0xb1e>
    7cec:	9b07      	ldr	r3, [sp, #28]
    7cee:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 7f58 <_strtod_l+0xca0>
    7cf2:	3701      	adds	r7, #1
    7cf4:	2b00      	cmp	r3, #0
    7cf6:	f43f abce 	beq.w	7496 <_strtod_l+0x1de>
    7cfa:	601f      	str	r7, [r3, #0]
    7cfc:	f7ff bbcb 	b.w	7496 <_strtod_l+0x1de>
    7d00:	ed9d 8b04 	vldr	d8, [sp, #16]
    7d04:	e495      	b.n	7632 <_strtod_l+0x37a>
    7d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d08:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    7d0c:	4403      	add	r3, r0
    7d0e:	930b      	str	r3, [sp, #44]	; 0x2c
    7d10:	2801      	cmp	r0, #1
    7d12:	f105 0301 	add.w	r3, r5, #1
    7d16:	461a      	mov	r2, r3
    7d18:	d014      	beq.n	7d44 <_strtod_l+0xa8c>
    7d1a:	4428      	add	r0, r5
    7d1c:	1e44      	subs	r4, r0, #1
    7d1e:	e003      	b.n	7d28 <_strtod_l+0xa70>
    7d20:	0046      	lsls	r6, r0, #1
    7d22:	429c      	cmp	r4, r3
    7d24:	d00d      	beq.n	7d42 <_strtod_l+0xa8a>
    7d26:	3301      	adds	r3, #1
    7d28:	462a      	mov	r2, r5
    7d2a:	2a08      	cmp	r2, #8
    7d2c:	461d      	mov	r5, r3
    7d2e:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    7d32:	d9f5      	bls.n	7d20 <_strtod_l+0xa68>
    7d34:	2b10      	cmp	r3, #16
    7d36:	bfdc      	itt	le
    7d38:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    7d3c:	ea4f 0949 	movle.w	r9, r9, lsl #1
    7d40:	e7ef      	b.n	7d22 <_strtod_l+0xa6a>
    7d42:	3202      	adds	r2, #2
    7d44:	2d08      	cmp	r5, #8
    7d46:	dc3c      	bgt.n	7dc2 <_strtod_l+0xb0a>
    7d48:	4615      	mov	r5, r2
    7d4a:	f7ff bb79 	b.w	7440 <_strtod_l+0x188>
    7d4e:	4989      	ldr	r1, [pc, #548]	; (7f74 <_strtod_l+0xcbc>)
    7d50:	2201      	movs	r2, #1
    7d52:	4638      	mov	r0, r7
    7d54:	f000 fd1a 	bl	878c <strncmp>
    7d58:	2800      	cmp	r0, #0
    7d5a:	f000 8082 	beq.w	7e62 <_strtod_l+0xbaa>
    7d5e:	f04f 0e00 	mov.w	lr, #0
    7d62:	46f1      	mov	r9, lr
    7d64:	4676      	mov	r6, lr
    7d66:	4675      	mov	r5, lr
    7d68:	f7ff bbb5 	b.w	74d6 <_strtod_l+0x21e>
    7d6c:	f644 631f 	movw	r3, #19999	; 0x4e1f
    7d70:	459b      	cmp	fp, r3
    7d72:	bfa8      	it	ge
    7d74:	469b      	movge	fp, r3
    7d76:	e42f      	b.n	75d8 <_strtod_l+0x320>
    7d78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    7d7c:	4618      	mov	r0, r3
    7d7e:	2b00      	cmp	r3, #0
    7d80:	f47f ae23 	bne.w	79ca <_strtod_l+0x712>
    7d84:	2322      	movs	r3, #34	; 0x22
    7d86:	ed9f 8b74 	vldr	d8, [pc, #464]	; 7f58 <_strtod_l+0xca0>
    7d8a:	9812      	ldr	r0, [sp, #72]	; 0x48
    7d8c:	f8c8 3000 	str.w	r3, [r8]
    7d90:	e678      	b.n	7a84 <_strtod_l+0x7cc>
    7d92:	eeb0 7b49 	vmov.f64	d7, d9
    7d96:	e6c0      	b.n	7b1a <_strtod_l+0x862>
    7d98:	4977      	ldr	r1, [pc, #476]	; (7f78 <_strtod_l+0xcc0>)
    7d9a:	a811      	add	r0, sp, #68	; 0x44
    7d9c:	f001 fd24 	bl	97e8 <__match>
    7da0:	2800      	cmp	r0, #0
    7da2:	f43f ab71 	beq.w	7488 <_strtod_l+0x1d0>
    7da6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7da8:	4974      	ldr	r1, [pc, #464]	; (7f7c <_strtod_l+0xcc4>)
    7daa:	3b01      	subs	r3, #1
    7dac:	a811      	add	r0, sp, #68	; 0x44
    7dae:	9311      	str	r3, [sp, #68]	; 0x44
    7db0:	f001 fd1a 	bl	97e8 <__match>
    7db4:	b910      	cbnz	r0, 7dbc <_strtod_l+0xb04>
    7db6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7db8:	3301      	adds	r3, #1
    7dba:	9311      	str	r3, [sp, #68]	; 0x44
    7dbc:	ed9f 8b68 	vldr	d8, [pc, #416]	; 7f60 <_strtod_l+0xca8>
    7dc0:	e437      	b.n	7632 <_strtod_l+0x37a>
    7dc2:	2a10      	cmp	r2, #16
    7dc4:	bfdc      	itt	le
    7dc6:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    7dca:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    7dce:	4615      	mov	r5, r2
    7dd0:	2000      	movs	r0, #0
    7dd2:	f7ff bb3a 	b.w	744a <_strtod_l+0x192>
    7dd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7dd8:	b13a      	cbz	r2, 7dea <_strtod_l+0xb32>
    7dda:	2135      	movs	r1, #53	; 0x35
    7ddc:	a814      	add	r0, sp, #80	; 0x50
    7dde:	f005 fcb3 	bl	d748 <__copybits>
    7de2:	9912      	ldr	r1, [sp, #72]	; 0x48
    7de4:	4640      	mov	r0, r8
    7de6:	f004 fffb 	bl	cde0 <_Bfree>
    7dea:	3d01      	subs	r5, #1
    7dec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7dee:	2d04      	cmp	r5, #4
    7df0:	f200 818f 	bhi.w	8112 <_strtod_l+0xe5a>
    7df4:	e8df f005 	tbb	[pc, r5]
    7df8:	1f2a2d03 	.word	0x1f2a2d03
    7dfc:	03          	.byte	0x03
    7dfd:	00          	.byte	0x00
    7dfe:	9a14      	ldr	r2, [sp, #80]	; 0x50
    7e00:	9204      	str	r2, [sp, #16]
    7e02:	f203 4233 	addw	r2, r3, #1075	; 0x433
    7e06:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7e08:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    7e0c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    7e10:	9305      	str	r3, [sp, #20]
    7e12:	05e5      	lsls	r5, r4, #23
    7e14:	d502      	bpl.n	7e1c <_strtod_l+0xb64>
    7e16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    7e1a:	9305      	str	r3, [sp, #20]
    7e1c:	4a58      	ldr	r2, [pc, #352]	; (7f80 <_strtod_l+0xcc8>)
    7e1e:	401a      	ands	r2, r3
    7e20:	ed9d 8b04 	vldr	d8, [sp, #16]
    7e24:	2a00      	cmp	r2, #0
    7e26:	f47f ac04 	bne.w	7632 <_strtod_l+0x37a>
    7e2a:	f000 fd99 	bl	8960 <__errno>
    7e2e:	2322      	movs	r3, #34	; 0x22
    7e30:	6003      	str	r3, [r0, #0]
    7e32:	f7ff bbfe 	b.w	7632 <_strtod_l+0x37a>
    7e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e3a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    7e3e:	e9cd 3604 	strd	r3, r6, [sp, #16]
    7e42:	05e3      	lsls	r3, r4, #23
    7e44:	f57f af5c 	bpl.w	7d00 <_strtod_l+0xa48>
    7e48:	9b05      	ldr	r3, [sp, #20]
    7e4a:	e7e4      	b.n	7e16 <_strtod_l+0xb5e>
    7e4c:	4b4c      	ldr	r3, [pc, #304]	; (7f80 <_strtod_l+0xcc8>)
    7e4e:	9305      	str	r3, [sp, #20]
    7e50:	e7f7      	b.n	7e42 <_strtod_l+0xb8a>
    7e52:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7e54:	9304      	str	r3, [sp, #16]
    7e56:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7e58:	9305      	str	r3, [sp, #20]
    7e5a:	e7da      	b.n	7e12 <_strtod_l+0xb5a>
    7e5c:	2000      	movs	r0, #0
    7e5e:	f7ff bae1 	b.w	7424 <_strtod_l+0x16c>
    7e62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7e64:	461a      	mov	r2, r3
    7e66:	3301      	adds	r3, #1
    7e68:	9311      	str	r3, [sp, #68]	; 0x44
    7e6a:	7854      	ldrb	r4, [r2, #1]
    7e6c:	4606      	mov	r6, r0
    7e6e:	4681      	mov	r9, r0
    7e70:	f7ff bacd 	b.w	740e <_strtod_l+0x156>
    7e74:	4b43      	ldr	r3, [pc, #268]	; (7f84 <_strtod_l+0xccc>)
    7e76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7e7a:	ed93 8b00 	vldr	d8, [r3]
    7e7e:	ed9d 7b04 	vldr	d7, [sp, #16]
    7e82:	ee28 8b07 	vmul.f64	d8, d8, d7
    7e86:	f7ff bbd4 	b.w	7632 <_strtod_l+0x37a>
    7e8a:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    7e8e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    7e92:	e511      	b.n	78b8 <_strtod_l+0x600>
    7e94:	46ae      	mov	lr, r5
    7e96:	900b      	str	r0, [sp, #44]	; 0x2c
    7e98:	f7ff badc 	b.w	7454 <_strtod_l+0x19c>
    7e9c:	4b39      	ldr	r3, [pc, #228]	; (7f84 <_strtod_l+0xccc>)
    7e9e:	f1c5 050f 	rsb	r5, r5, #15
    7ea2:	1b4a      	subs	r2, r1, r5
    7ea4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    7ea8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7eac:	ed95 8b00 	vldr	d8, [r5]
    7eb0:	ed93 7b00 	vldr	d7, [r3]
    7eb4:	ed9d 6b04 	vldr	d6, [sp, #16]
    7eb8:	ee28 8b06 	vmul.f64	d8, d8, d6
    7ebc:	ee28 8b07 	vmul.f64	d8, d8, d7
    7ec0:	f7ff bbb7 	b.w	7632 <_strtod_l+0x37a>
    7ec4:	2d00      	cmp	r5, #0
    7ec6:	f000 8095 	beq.w	7ff4 <_strtod_l+0xd3c>
    7eca:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    7ece:	4b2e      	ldr	r3, [pc, #184]	; (7f88 <_strtod_l+0xcd0>)
    7ed0:	f3cc 0113 	ubfx	r1, ip, #0, #20
    7ed4:	4299      	cmp	r1, r3
    7ed6:	4662      	mov	r2, ip
    7ed8:	f000 80d2 	beq.w	8080 <_strtod_l+0xdc8>
    7edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7ede:	2b00      	cmp	r3, #0
    7ee0:	f000 80a5 	beq.w	802e <_strtod_l+0xd76>
    7ee4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    7ee8:	4213      	tst	r3, r2
    7eea:	4617      	mov	r7, r2
    7eec:	d01a      	beq.n	7f24 <_strtod_l+0xc6c>
    7eee:	eeb0 0b48 	vmov.f64	d0, d8
    7ef2:	2d00      	cmp	r5, #0
    7ef4:	f000 80a6 	beq.w	8044 <_strtod_l+0xd8c>
    7ef8:	f005 faf6 	bl	d4e8 <__ulp>
    7efc:	9b08      	ldr	r3, [sp, #32]
    7efe:	b17b      	cbz	r3, 7f20 <_strtod_l+0xc68>
    7f00:	f3c7 530a 	ubfx	r3, r7, #20, #11
    7f04:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    7f08:	2b00      	cmp	r3, #0
    7f0a:	dd09      	ble.n	7f20 <_strtod_l+0xc68>
    7f0c:	051b      	lsls	r3, r3, #20
    7f0e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    7f12:	2000      	movs	r0, #0
    7f14:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    7f18:	ec41 0b17 	vmov	d7, r0, r1
    7f1c:	ee20 0b07 	vmul.f64	d0, d0, d7
    7f20:	ee38 8b00 	vadd.f64	d8, d8, d0
    7f24:	9b08      	ldr	r3, [sp, #32]
    7f26:	b15b      	cbz	r3, 7f40 <_strtod_l+0xc88>
    7f28:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 7f68 <_strtod_l+0xcb0>
    7f2c:	4b14      	ldr	r3, [pc, #80]	; (7f80 <_strtod_l+0xcc8>)
    7f2e:	ee28 8b07 	vmul.f64	d8, d8, d7
    7f32:	ee18 2a90 	vmov	r2, s17
    7f36:	4013      	ands	r3, r2
    7f38:	b913      	cbnz	r3, 7f40 <_strtod_l+0xc88>
    7f3a:	2322      	movs	r3, #34	; 0x22
    7f3c:	f8c8 3000 	str.w	r3, [r8]
    7f40:	9812      	ldr	r0, [sp, #72]	; 0x48
    7f42:	e59f      	b.n	7a84 <_strtod_l+0x7cc>
    7f44:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    7f48:	9305      	str	r3, [sp, #20]
    7f4a:	2300      	movs	r3, #0
    7f4c:	9308      	str	r3, [sp, #32]
    7f4e:	f7ff bbb1 	b.w	76b4 <_strtod_l+0x3fc>
    7f52:	bf00      	nop
    7f54:	f3af 8000 	nop.w
	...
    7f64:	7ff00000 	.word	0x7ff00000
    7f68:	00000000 	.word	0x00000000
    7f6c:	39500000 	.word	0x39500000
    7f70:	200077e8 	.word	0x200077e8
    7f74:	20000510 	.word	0x20000510
    7f78:	20000ae0 	.word	0x20000ae0
    7f7c:	20000ae4 	.word	0x20000ae4
    7f80:	7ff00000 	.word	0x7ff00000
    7f84:	200002a8 	.word	0x200002a8
    7f88:	000fffff 	.word	0x000fffff
    7f8c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    7f90:	430d      	orrs	r5, r1
    7f92:	d1c7      	bne.n	7f24 <_strtod_l+0xc6c>
    7f94:	f3c2 0313 	ubfx	r3, r2, #0, #20
    7f98:	4617      	mov	r7, r2
    7f9a:	2b00      	cmp	r3, #0
    7f9c:	d1c2      	bne.n	7f24 <_strtod_l+0xc6c>
    7f9e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    7fa2:	0d1b      	lsrs	r3, r3, #20
    7fa4:	051b      	lsls	r3, r3, #20
    7fa6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    7faa:	d9bb      	bls.n	7f24 <_strtod_l+0xc6c>
    7fac:	f8da 3014 	ldr.w	r3, [sl, #20]
    7fb0:	b91b      	cbnz	r3, 7fba <_strtod_l+0xd02>
    7fb2:	f8da 3010 	ldr.w	r3, [sl, #16]
    7fb6:	2b01      	cmp	r3, #1
    7fb8:	ddb4      	ble.n	7f24 <_strtod_l+0xc6c>
    7fba:	4651      	mov	r1, sl
    7fbc:	2201      	movs	r2, #1
    7fbe:	4640      	mov	r0, r8
    7fc0:	f005 f94e 	bl	d260 <__lshift>
    7fc4:	4621      	mov	r1, r4
    7fc6:	4682      	mov	sl, r0
    7fc8:	f005 f9c2 	bl	d350 <__mcmp>
    7fcc:	2800      	cmp	r0, #0
    7fce:	dda9      	ble.n	7f24 <_strtod_l+0xc6c>
    7fd0:	9b08      	ldr	r3, [sp, #32]
    7fd2:	2b00      	cmp	r3, #0
    7fd4:	d17e      	bne.n	80d4 <_strtod_l+0xe1c>
    7fd6:	4b50      	ldr	r3, [pc, #320]	; (8118 <_strtod_l+0xe60>)
    7fd8:	403b      	ands	r3, r7
    7fda:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    7fde:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    7fe2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    7fe6:	9305      	str	r3, [sp, #20]
    7fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7fec:	9304      	str	r3, [sp, #16]
    7fee:	ed9d 8b04 	vldr	d8, [sp, #16]
    7ff2:	e797      	b.n	7f24 <_strtod_l+0xc6c>
    7ff4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    7ff8:	f3c2 0313 	ubfx	r3, r2, #0, #20
    7ffc:	430b      	orrs	r3, r1
    7ffe:	4617      	mov	r7, r2
    8000:	f47f af6c 	bne.w	7edc <_strtod_l+0xc24>
    8004:	e7e4      	b.n	7fd0 <_strtod_l+0xd18>
    8006:	4945      	ldr	r1, [pc, #276]	; (811c <_strtod_l+0xe64>)
    8008:	a811      	add	r0, sp, #68	; 0x44
    800a:	aa14      	add	r2, sp, #80	; 0x50
    800c:	f001 fc08 	bl	9820 <__hexnan>
    8010:	2805      	cmp	r0, #5
    8012:	f47f ab06 	bne.w	7622 <_strtod_l+0x36a>
    8016:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8018:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    801c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    8020:	9305      	str	r3, [sp, #20]
    8022:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8024:	9304      	str	r3, [sp, #16]
    8026:	ed9d 8b04 	vldr	d8, [sp, #16]
    802a:	f7ff bb02 	b.w	7632 <_strtod_l+0x37a>
    802e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    8032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8034:	4203      	tst	r3, r0
    8036:	f43f af75 	beq.w	7f24 <_strtod_l+0xc6c>
    803a:	460f      	mov	r7, r1
    803c:	e757      	b.n	7eee <_strtod_l+0xc36>
    803e:	4c38      	ldr	r4, [pc, #224]	; (8120 <_strtod_l+0xe68>)
    8040:	2100      	movs	r1, #0
    8042:	e58f      	b.n	7b64 <_strtod_l+0x8ac>
    8044:	f005 fa50 	bl	d4e8 <__ulp>
    8048:	9b08      	ldr	r3, [sp, #32]
    804a:	2b00      	cmp	r3, #0
    804c:	d055      	beq.n	80fa <_strtod_l+0xe42>
    804e:	f3c7 530a 	ubfx	r3, r7, #20, #11
    8052:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    8056:	2b00      	cmp	r3, #0
    8058:	dd09      	ble.n	806e <_strtod_l+0xdb6>
    805a:	051b      	lsls	r3, r3, #20
    805c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    8060:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    8064:	4628      	mov	r0, r5
    8066:	ec41 0b17 	vmov	d7, r0, r1
    806a:	ee20 0b07 	vmul.f64	d0, d0, d7
    806e:	ee38 8b40 	vsub.f64	d8, d8, d0
    8072:	eeb5 8b40 	vcmp.f64	d8, #0.0
    8076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    807a:	f47f af55 	bne.w	7f28 <_strtod_l+0xc70>
    807e:	e681      	b.n	7d84 <_strtod_l+0xacc>
    8080:	9b08      	ldr	r3, [sp, #32]
    8082:	9904      	ldr	r1, [sp, #16]
    8084:	b31b      	cbz	r3, 80ce <_strtod_l+0xe16>
    8086:	4b24      	ldr	r3, [pc, #144]	; (8118 <_strtod_l+0xe60>)
    8088:	4013      	ands	r3, r2
    808a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    808e:	d81e      	bhi.n	80ce <_strtod_l+0xe16>
    8090:	0d1b      	lsrs	r3, r3, #20
    8092:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    8096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    809a:	fa00 f303 	lsl.w	r3, r0, r3
    809e:	4299      	cmp	r1, r3
    80a0:	f47f af1c 	bne.w	7edc <_strtod_l+0xc24>
    80a4:	4b1f      	ldr	r3, [pc, #124]	; (8124 <_strtod_l+0xe6c>)
    80a6:	429a      	cmp	r2, r3
    80a8:	d030      	beq.n	810c <_strtod_l+0xe54>
    80aa:	4b1b      	ldr	r3, [pc, #108]	; (8118 <_strtod_l+0xe60>)
    80ac:	4013      	ands	r3, r2
    80ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    80b2:	9305      	str	r3, [sp, #20]
    80b4:	2300      	movs	r3, #0
    80b6:	9304      	str	r3, [sp, #16]
    80b8:	ed9d 8b04 	vldr	d8, [sp, #16]
    80bc:	e732      	b.n	7f24 <_strtod_l+0xc6c>
    80be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    80c2:	fa02 f303 	lsl.w	r3, r2, r3
    80c6:	9a04      	ldr	r2, [sp, #16]
    80c8:	401a      	ands	r2, r3
    80ca:	9204      	str	r2, [sp, #16]
    80cc:	e5d0      	b.n	7c70 <_strtod_l+0x9b8>
    80ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    80d2:	e7e4      	b.n	809e <_strtod_l+0xde6>
    80d4:	4b10      	ldr	r3, [pc, #64]	; (8118 <_strtod_l+0xe60>)
    80d6:	403b      	ands	r3, r7
    80d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    80dc:	f73f af7d 	bgt.w	7fda <_strtod_l+0xd22>
    80e0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    80e4:	f73f af20 	bgt.w	7f28 <_strtod_l+0xc70>
    80e8:	e64c      	b.n	7d84 <_strtod_l+0xacc>
    80ea:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    80ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    80f2:	4093      	lsls	r3, r2
    80f4:	400b      	ands	r3, r1
    80f6:	9305      	str	r3, [sp, #20]
    80f8:	e5ba      	b.n	7c70 <_strtod_l+0x9b8>
    80fa:	ee38 8b40 	vsub.f64	d8, d8, d0
    80fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
    8102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8106:	f47f af1b 	bne.w	7f40 <_strtod_l+0xc88>
    810a:	e63b      	b.n	7d84 <_strtod_l+0xacc>
    810c:	3101      	adds	r1, #1
    810e:	d1cc      	bne.n	80aa <_strtod_l+0xdf2>
    8110:	e409      	b.n	7926 <_strtod_l+0x66e>
    8112:	2300      	movs	r3, #0
    8114:	e67d      	b.n	7e12 <_strtod_l+0xb5a>
    8116:	bf00      	nop
    8118:	7ff00000 	.word	0x7ff00000
    811c:	200077fc 	.word	0x200077fc
    8120:	20000280 	.word	0x20000280
    8124:	7fefffff 	.word	0x7fefffff

00008128 <_strtod_r>:
    8128:	4b01      	ldr	r3, [pc, #4]	; (8130 <_strtod_r+0x8>)
    812a:	f7ff b8c5 	b.w	72b8 <_strtod_l>
    812e:	bf00      	nop
    8130:	20008638 	.word	0x20008638
    8134:	00000000 	.word	0x00000000

00008138 <strtof>:
    8138:	b510      	push	{r4, lr}
    813a:	4c23      	ldr	r4, [pc, #140]	; (81c8 <strtof+0x90>)
    813c:	4b23      	ldr	r3, [pc, #140]	; (81cc <strtof+0x94>)
    813e:	4684      	mov	ip, r0
    8140:	460a      	mov	r2, r1
    8142:	6820      	ldr	r0, [r4, #0]
    8144:	4661      	mov	r1, ip
    8146:	f7ff f8b7 	bl	72b8 <_strtod_l>
    814a:	eeb4 0b40 	vcmp.f64	d0, d0
    814e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8152:	d627      	bvs.n	81a4 <strtof+0x6c>
    8154:	eef7 7bc0 	vcvt.f32.f64	s15, d0
    8158:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 81d0 <strtof+0x98>
    815c:	eef0 6ae7 	vabs.f32	s13, s15
    8160:	eef4 6a47 	vcmp.f32	s13, s14
    8164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8168:	dd0e      	ble.n	8188 <strtof+0x50>
    816a:	eeb0 5bc0 	vabs.f64	d5, d0
    816e:	ed9f 6b14 	vldr	d6, [pc, #80]	; 81c0 <strtof+0x88>
    8172:	eeb4 5b46 	vcmp.f64	d5, d6
    8176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    817a:	dc05      	bgt.n	8188 <strtof+0x50>
    817c:	6823      	ldr	r3, [r4, #0]
    817e:	2222      	movs	r2, #34	; 0x22
    8180:	601a      	str	r2, [r3, #0]
    8182:	eeb0 0a67 	vmov.f32	s0, s15
    8186:	bd10      	pop	{r4, pc}
    8188:	ee17 3a90 	vmov	r3, s15
    818c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
    8190:	d1f7      	bne.n	8182 <strtof+0x4a>
    8192:	4b10      	ldr	r3, [pc, #64]	; (81d4 <strtof+0x9c>)
    8194:	ee10 2a90 	vmov	r2, s1
    8198:	4013      	ands	r3, r2
    819a:	2b00      	cmp	r3, #0
    819c:	d1ee      	bne.n	817c <strtof+0x44>
    819e:	eeb0 0a67 	vmov.f32	s0, s15
    81a2:	bd10      	pop	{r4, pc}
    81a4:	ee10 3a90 	vmov	r3, s1
    81a8:	2b00      	cmp	r3, #0
    81aa:	480b      	ldr	r0, [pc, #44]	; (81d8 <strtof+0xa0>)
    81ac:	da04      	bge.n	81b8 <strtof+0x80>
    81ae:	f000 fea3 	bl	8ef8 <nanf>
    81b2:	eef1 7a40 	vneg.f32	s15, s0
    81b6:	e7e4      	b.n	8182 <strtof+0x4a>
    81b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    81bc:	f000 be9c 	b.w	8ef8 <nanf>
    81c0:	ffffffff 	.word	0xffffffff
    81c4:	7fefffff 	.word	0x7fefffff
    81c8:	20008bc0 	.word	0x20008bc0
    81cc:	20008638 	.word	0x20008638
    81d0:	7f7fffff 	.word	0x7f7fffff
    81d4:	7ff00000 	.word	0x7ff00000
    81d8:	2000056c 	.word	0x2000056c

000081dc <_strtol_l.constprop.0>:
    81dc:	2b01      	cmp	r3, #1
    81de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    81e2:	d040      	beq.n	8266 <_strtol_l.constprop.0+0x8a>
    81e4:	2b24      	cmp	r3, #36	; 0x24
    81e6:	4698      	mov	r8, r3
    81e8:	d83d      	bhi.n	8266 <_strtol_l.constprop.0+0x8a>
    81ea:	4d4c      	ldr	r5, [pc, #304]	; (831c <_strtol_l.constprop.0+0x140>)
    81ec:	468e      	mov	lr, r1
    81ee:	4676      	mov	r6, lr
    81f0:	f81e bb01 	ldrb.w	fp, [lr], #1
    81f4:	f815 400b 	ldrb.w	r4, [r5, fp]
    81f8:	f014 0408 	ands.w	r4, r4, #8
    81fc:	d1f7      	bne.n	81ee <_strtol_l.constprop.0+0x12>
    81fe:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    8202:	d072      	beq.n	82ea <_strtol_l.constprop.0+0x10e>
    8204:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    8208:	bf08      	it	eq
    820a:	f89e b000 	ldrbeq.w	fp, [lr]
    820e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    8212:	bf08      	it	eq
    8214:	f106 0e02 	addeq.w	lr, r6, #2
    8218:	2b00      	cmp	r3, #0
    821a:	d042      	beq.n	82a2 <_strtol_l.constprop.0+0xc6>
    821c:	2b10      	cmp	r3, #16
    821e:	d057      	beq.n	82d0 <_strtol_l.constprop.0+0xf4>
    8220:	fbb9 f7f8 	udiv	r7, r9, r8
    8224:	2500      	movs	r5, #0
    8226:	462e      	mov	r6, r5
    8228:	fb08 9a17 	mls	sl, r8, r7, r9
    822c:	e005      	b.n	823a <_strtol_l.constprop.0+0x5e>
    822e:	d033      	beq.n	8298 <_strtol_l.constprop.0+0xbc>
    8230:	fb08 c606 	mla	r6, r8, r6, ip
    8234:	2501      	movs	r5, #1
    8236:	f81e bb01 	ldrb.w	fp, [lr], #1
    823a:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    823e:	f1bc 0f09 	cmp.w	ip, #9
    8242:	d906      	bls.n	8252 <_strtol_l.constprop.0+0x76>
    8244:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    8248:	f1bc 0f19 	cmp.w	ip, #25
    824c:	d812      	bhi.n	8274 <_strtol_l.constprop.0+0x98>
    824e:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    8252:	4563      	cmp	r3, ip
    8254:	dd17      	ble.n	8286 <_strtol_l.constprop.0+0xaa>
    8256:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    825a:	d0ec      	beq.n	8236 <_strtol_l.constprop.0+0x5a>
    825c:	42b7      	cmp	r7, r6
    825e:	d2e6      	bcs.n	822e <_strtol_l.constprop.0+0x52>
    8260:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    8264:	e7e7      	b.n	8236 <_strtol_l.constprop.0+0x5a>
    8266:	f000 fb7b 	bl	8960 <__errno>
    826a:	2316      	movs	r3, #22
    826c:	6003      	str	r3, [r0, #0]
    826e:	2000      	movs	r0, #0
    8270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8274:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    8278:	f1bc 0f19 	cmp.w	ip, #25
    827c:	d803      	bhi.n	8286 <_strtol_l.constprop.0+0xaa>
    827e:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    8282:	4563      	cmp	r3, ip
    8284:	dce7      	bgt.n	8256 <_strtol_l.constprop.0+0x7a>
    8286:	1c6b      	adds	r3, r5, #1
    8288:	d027      	beq.n	82da <_strtol_l.constprop.0+0xfe>
    828a:	b98c      	cbnz	r4, 82b0 <_strtol_l.constprop.0+0xd4>
    828c:	b10a      	cbz	r2, 8292 <_strtol_l.constprop.0+0xb6>
    828e:	bba5      	cbnz	r5, 82fa <_strtol_l.constprop.0+0x11e>
    8290:	6011      	str	r1, [r2, #0]
    8292:	4630      	mov	r0, r6
    8294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8298:	45e2      	cmp	sl, ip
    829a:	dac9      	bge.n	8230 <_strtol_l.constprop.0+0x54>
    829c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    82a0:	e7c9      	b.n	8236 <_strtol_l.constprop.0+0x5a>
    82a2:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    82a6:	d005      	beq.n	82b4 <_strtol_l.constprop.0+0xd8>
    82a8:	f04f 080a 	mov.w	r8, #10
    82ac:	4643      	mov	r3, r8
    82ae:	e7b7      	b.n	8220 <_strtol_l.constprop.0+0x44>
    82b0:	4276      	negs	r6, r6
    82b2:	e7eb      	b.n	828c <_strtol_l.constprop.0+0xb0>
    82b4:	f89e 3000 	ldrb.w	r3, [lr]
    82b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    82bc:	2b58      	cmp	r3, #88	; 0x58
    82be:	d121      	bne.n	8304 <_strtol_l.constprop.0+0x128>
    82c0:	f04f 0810 	mov.w	r8, #16
    82c4:	f89e b001 	ldrb.w	fp, [lr, #1]
    82c8:	4643      	mov	r3, r8
    82ca:	f10e 0e02 	add.w	lr, lr, #2
    82ce:	e7a7      	b.n	8220 <_strtol_l.constprop.0+0x44>
    82d0:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    82d4:	d01a      	beq.n	830c <_strtol_l.constprop.0+0x130>
    82d6:	4698      	mov	r8, r3
    82d8:	e7a2      	b.n	8220 <_strtol_l.constprop.0+0x44>
    82da:	2322      	movs	r3, #34	; 0x22
    82dc:	6003      	str	r3, [r0, #0]
    82de:	b172      	cbz	r2, 82fe <_strtol_l.constprop.0+0x122>
    82e0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
    82e4:	464e      	mov	r6, r9
    82e6:	6011      	str	r1, [r2, #0]
    82e8:	e7d3      	b.n	8292 <_strtol_l.constprop.0+0xb6>
    82ea:	f89e b000 	ldrb.w	fp, [lr]
    82ee:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    82f2:	f106 0e02 	add.w	lr, r6, #2
    82f6:	2401      	movs	r4, #1
    82f8:	e78e      	b.n	8218 <_strtol_l.constprop.0+0x3c>
    82fa:	46b1      	mov	r9, r6
    82fc:	e7f0      	b.n	82e0 <_strtol_l.constprop.0+0x104>
    82fe:	464e      	mov	r6, r9
    8300:	4630      	mov	r0, r6
    8302:	e7c7      	b.n	8294 <_strtol_l.constprop.0+0xb8>
    8304:	f04f 0808 	mov.w	r8, #8
    8308:	4643      	mov	r3, r8
    830a:	e789      	b.n	8220 <_strtol_l.constprop.0+0x44>
    830c:	f89e 5000 	ldrb.w	r5, [lr]
    8310:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    8314:	2d58      	cmp	r5, #88	; 0x58
    8316:	d0d3      	beq.n	82c0 <_strtol_l.constprop.0+0xe4>
    8318:	4698      	mov	r8, r3
    831a:	e781      	b.n	8220 <_strtol_l.constprop.0+0x44>
    831c:	20000955 	.word	0x20000955

00008320 <_strtol_r>:
    8320:	f7ff bf5c 	b.w	81dc <_strtol_l.constprop.0>

00008324 <strtol>:
    8324:	b410      	push	{r4}
    8326:	4c05      	ldr	r4, [pc, #20]	; (833c <strtol+0x18>)
    8328:	4684      	mov	ip, r0
    832a:	4613      	mov	r3, r2
    832c:	6820      	ldr	r0, [r4, #0]
    832e:	f85d 4b04 	ldr.w	r4, [sp], #4
    8332:	460a      	mov	r2, r1
    8334:	4661      	mov	r1, ip
    8336:	f7ff bf51 	b.w	81dc <_strtol_l.constprop.0>
    833a:	bf00      	nop
    833c:	20008bc0 	.word	0x20008bc0

00008340 <sscanf>:
    8340:	b40e      	push	{r1, r2, r3}
    8342:	b510      	push	{r4, lr}
    8344:	b09f      	sub	sp, #124	; 0x7c
    8346:	ac21      	add	r4, sp, #132	; 0x84
    8348:	f44f 7101 	mov.w	r1, #516	; 0x204
    834c:	f854 2b04 	ldr.w	r2, [r4], #4
    8350:	9201      	str	r2, [sp, #4]
    8352:	f8ad 101c 	strh.w	r1, [sp, #28]
    8356:	9004      	str	r0, [sp, #16]
    8358:	9008      	str	r0, [sp, #32]
    835a:	f000 fd11 	bl	8d80 <strlen>
    835e:	9005      	str	r0, [sp, #20]
    8360:	9009      	str	r0, [sp, #36]	; 0x24
    8362:	480b      	ldr	r0, [pc, #44]	; (8390 <sscanf+0x50>)
    8364:	490b      	ldr	r1, [pc, #44]	; (8394 <sscanf+0x54>)
    8366:	910c      	str	r1, [sp, #48]	; 0x30
    8368:	2300      	movs	r3, #0
    836a:	f64f 7cff 	movw	ip, #65535	; 0xffff
    836e:	9310      	str	r3, [sp, #64]	; 0x40
    8370:	9315      	str	r3, [sp, #84]	; 0x54
    8372:	9a01      	ldr	r2, [sp, #4]
    8374:	6800      	ldr	r0, [r0, #0]
    8376:	f8ad c01e 	strh.w	ip, [sp, #30]
    837a:	4623      	mov	r3, r4
    837c:	a904      	add	r1, sp, #16
    837e:	9403      	str	r4, [sp, #12]
    8380:	f003 f8e0 	bl	b544 <__ssvfscanf_r>
    8384:	b01f      	add	sp, #124	; 0x7c
    8386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    838a:	b003      	add	sp, #12
    838c:	4770      	bx	lr
    838e:	bf00      	nop
    8390:	20008bc0 	.word	0x20008bc0
    8394:	000083bd 	.word	0x000083bd

00008398 <__sread>:
    8398:	b510      	push	{r4, lr}
    839a:	460c      	mov	r4, r1
    839c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    83a0:	f000 faa0 	bl	88e4 <_read_r>
    83a4:	2800      	cmp	r0, #0
    83a6:	db03      	blt.n	83b0 <__sread+0x18>
    83a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    83aa:	4403      	add	r3, r0
    83ac:	6523      	str	r3, [r4, #80]	; 0x50
    83ae:	bd10      	pop	{r4, pc}
    83b0:	89a3      	ldrh	r3, [r4, #12]
    83b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    83b6:	81a3      	strh	r3, [r4, #12]
    83b8:	bd10      	pop	{r4, pc}
    83ba:	bf00      	nop

000083bc <__seofread>:
    83bc:	2000      	movs	r0, #0
    83be:	4770      	bx	lr

000083c0 <__swrite>:
    83c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83c4:	460c      	mov	r4, r1
    83c6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    83ca:	461f      	mov	r7, r3
    83cc:	05cb      	lsls	r3, r1, #23
    83ce:	4605      	mov	r5, r0
    83d0:	4616      	mov	r6, r2
    83d2:	d40b      	bmi.n	83ec <__swrite+0x2c>
    83d4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    83d8:	81a1      	strh	r1, [r4, #12]
    83da:	463b      	mov	r3, r7
    83dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    83e0:	4632      	mov	r2, r6
    83e2:	4628      	mov	r0, r5
    83e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    83e8:	f000 baa4 	b.w	8934 <_write_r>
    83ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    83f0:	2302      	movs	r3, #2
    83f2:	2200      	movs	r2, #0
    83f4:	f000 fa5a 	bl	88ac <_lseek_r>
    83f8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    83fc:	e7ea      	b.n	83d4 <__swrite+0x14>
    83fe:	bf00      	nop

00008400 <__sseek>:
    8400:	b510      	push	{r4, lr}
    8402:	460c      	mov	r4, r1
    8404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    8408:	f000 fa50 	bl	88ac <_lseek_r>
    840c:	89a3      	ldrh	r3, [r4, #12]
    840e:	1c42      	adds	r2, r0, #1
    8410:	bf0e      	itee	eq
    8412:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    8416:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    841a:	6520      	strne	r0, [r4, #80]	; 0x50
    841c:	81a3      	strh	r3, [r4, #12]
    841e:	bd10      	pop	{r4, pc}

00008420 <__sclose>:
    8420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    8424:	f000 ba30 	b.w	8888 <_close_r>

00008428 <stdio_exit_handler>:
    8428:	4a02      	ldr	r2, [pc, #8]	; (8434 <stdio_exit_handler+0xc>)
    842a:	4903      	ldr	r1, [pc, #12]	; (8438 <stdio_exit_handler+0x10>)
    842c:	4803      	ldr	r0, [pc, #12]	; (843c <stdio_exit_handler+0x14>)
    842e:	f000 b8bb 	b.w	85a8 <_fwalk_sglue>
    8432:	bf00      	nop
    8434:	20008bb4 	.word	0x20008bb4
    8438:	0000d809 	.word	0x0000d809
    843c:	20007bc8 	.word	0x20007bc8

00008440 <cleanup_stdio>:
    8440:	4b0c      	ldr	r3, [pc, #48]	; (8474 <cleanup_stdio+0x34>)
    8442:	6841      	ldr	r1, [r0, #4]
    8444:	4299      	cmp	r1, r3
    8446:	b510      	push	{r4, lr}
    8448:	4604      	mov	r4, r0
    844a:	d001      	beq.n	8450 <cleanup_stdio+0x10>
    844c:	f005 f9dc 	bl	d808 <_fclose_r>
    8450:	68a1      	ldr	r1, [r4, #8]
    8452:	4b09      	ldr	r3, [pc, #36]	; (8478 <cleanup_stdio+0x38>)
    8454:	4299      	cmp	r1, r3
    8456:	d002      	beq.n	845e <cleanup_stdio+0x1e>
    8458:	4620      	mov	r0, r4
    845a:	f005 f9d5 	bl	d808 <_fclose_r>
    845e:	68e1      	ldr	r1, [r4, #12]
    8460:	4b06      	ldr	r3, [pc, #24]	; (847c <cleanup_stdio+0x3c>)
    8462:	4299      	cmp	r1, r3
    8464:	d004      	beq.n	8470 <cleanup_stdio+0x30>
    8466:	4620      	mov	r0, r4
    8468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    846c:	f005 b9cc 	b.w	d808 <_fclose_r>
    8470:	bd10      	pop	{r4, pc}
    8472:	bf00      	nop
    8474:	2000a8b4 	.word	0x2000a8b4
    8478:	2000a91c 	.word	0x2000a91c
    847c:	2000a984 	.word	0x2000a984

00008480 <global_stdio_init.part.0>:
    8480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8484:	4c2a      	ldr	r4, [pc, #168]	; (8530 <global_stdio_init.part.0+0xb0>)
    8486:	4b2b      	ldr	r3, [pc, #172]	; (8534 <global_stdio_init.part.0+0xb4>)
    8488:	482b      	ldr	r0, [pc, #172]	; (8538 <global_stdio_init.part.0+0xb8>)
    848a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 854c <global_stdio_init.part.0+0xcc>
    848e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8550 <global_stdio_init.part.0+0xd0>
    8492:	4f2a      	ldr	r7, [pc, #168]	; (853c <global_stdio_init.part.0+0xbc>)
    8494:	6018      	str	r0, [r3, #0]
    8496:	2500      	movs	r5, #0
    8498:	2304      	movs	r3, #4
    849a:	2208      	movs	r2, #8
    849c:	4629      	mov	r1, r5
    849e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    84a2:	4e27      	ldr	r6, [pc, #156]	; (8540 <global_stdio_init.part.0+0xc0>)
    84a4:	6665      	str	r5, [r4, #100]	; 0x64
    84a6:	e9c4 5302 	strd	r5, r3, [r4, #8]
    84aa:	e9c4 5500 	strd	r5, r5, [r4]
    84ae:	e9c4 5504 	strd	r5, r5, [r4, #16]
    84b2:	61a5      	str	r5, [r4, #24]
    84b4:	f000 f918 	bl	86e8 <memset>
    84b8:	4b22      	ldr	r3, [pc, #136]	; (8544 <global_stdio_init.part.0+0xc4>)
    84ba:	6763      	str	r3, [r4, #116]	; 0x74
    84bc:	2208      	movs	r2, #8
    84be:	4629      	mov	r1, r5
    84c0:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    84c4:	e9c4 4907 	strd	r4, r9, [r4, #28]
    84c8:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    84cc:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    84d0:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    84d4:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    84d8:	6725      	str	r5, [r4, #112]	; 0x70
    84da:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    84de:	62e6      	str	r6, [r4, #44]	; 0x2c
    84e0:	f000 f902 	bl	86e8 <memset>
    84e4:	4b18      	ldr	r3, [pc, #96]	; (8548 <global_stdio_init.part.0+0xc8>)
    84e6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    84ea:	4629      	mov	r1, r5
    84ec:	f104 0368 	add.w	r3, r4, #104	; 0x68
    84f0:	2208      	movs	r2, #8
    84f2:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    84f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    84fa:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    84fe:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    8502:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    8506:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    850a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    850e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    8512:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    8516:	f000 f8e7 	bl	86e8 <memset>
    851a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    851e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    8522:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    8526:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    852a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    852e:	bf00      	nop
    8530:	2000a8b4 	.word	0x2000a8b4
    8534:	2000a9ec 	.word	0x2000a9ec
    8538:	00008429 	.word	0x00008429
    853c:	00008401 	.word	0x00008401
    8540:	00008421 	.word	0x00008421
    8544:	00010009 	.word	0x00010009
    8548:	00020012 	.word	0x00020012
    854c:	00008399 	.word	0x00008399
    8550:	000083c1 	.word	0x000083c1

00008554 <__sinit>:
    8554:	b510      	push	{r4, lr}
    8556:	4604      	mov	r4, r0
    8558:	480a      	ldr	r0, [pc, #40]	; (8584 <__sinit+0x30>)
    855a:	f000 fc05 	bl	8d68 <__retarget_lock_acquire_recursive>
    855e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8560:	b923      	cbnz	r3, 856c <__sinit+0x18>
    8562:	4b09      	ldr	r3, [pc, #36]	; (8588 <__sinit+0x34>)
    8564:	4a09      	ldr	r2, [pc, #36]	; (858c <__sinit+0x38>)
    8566:	681b      	ldr	r3, [r3, #0]
    8568:	6362      	str	r2, [r4, #52]	; 0x34
    856a:	b123      	cbz	r3, 8576 <__sinit+0x22>
    856c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8570:	4804      	ldr	r0, [pc, #16]	; (8584 <__sinit+0x30>)
    8572:	f000 bbfb 	b.w	8d6c <__retarget_lock_release_recursive>
    8576:	f7ff ff83 	bl	8480 <global_stdio_init.part.0>
    857a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    857e:	4801      	ldr	r0, [pc, #4]	; (8584 <__sinit+0x30>)
    8580:	f000 bbf4 	b.w	8d6c <__retarget_lock_release_recursive>
    8584:	2000a87c 	.word	0x2000a87c
    8588:	2000a9ec 	.word	0x2000a9ec
    858c:	00008441 	.word	0x00008441

00008590 <__sfp_lock_acquire>:
    8590:	4801      	ldr	r0, [pc, #4]	; (8598 <__sfp_lock_acquire+0x8>)
    8592:	f000 bbe9 	b.w	8d68 <__retarget_lock_acquire_recursive>
    8596:	bf00      	nop
    8598:	2000a87c 	.word	0x2000a87c

0000859c <__sfp_lock_release>:
    859c:	4801      	ldr	r0, [pc, #4]	; (85a4 <__sfp_lock_release+0x8>)
    859e:	f000 bbe5 	b.w	8d6c <__retarget_lock_release_recursive>
    85a2:	bf00      	nop
    85a4:	2000a87c 	.word	0x2000a87c

000085a8 <_fwalk_sglue>:
    85a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    85ac:	4680      	mov	r8, r0
    85ae:	460f      	mov	r7, r1
    85b0:	4616      	mov	r6, r2
    85b2:	f04f 0900 	mov.w	r9, #0
    85b6:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    85ba:	3d01      	subs	r5, #1
    85bc:	d411      	bmi.n	85e2 <_fwalk_sglue+0x3a>
    85be:	89a3      	ldrh	r3, [r4, #12]
    85c0:	2b01      	cmp	r3, #1
    85c2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    85c6:	d908      	bls.n	85da <_fwalk_sglue+0x32>
    85c8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    85cc:	3301      	adds	r3, #1
    85ce:	4621      	mov	r1, r4
    85d0:	d003      	beq.n	85da <_fwalk_sglue+0x32>
    85d2:	4640      	mov	r0, r8
    85d4:	47b8      	blx	r7
    85d6:	ea49 0900 	orr.w	r9, r9, r0
    85da:	1c6b      	adds	r3, r5, #1
    85dc:	f104 0468 	add.w	r4, r4, #104	; 0x68
    85e0:	d1ed      	bne.n	85be <_fwalk_sglue+0x16>
    85e2:	6836      	ldr	r6, [r6, #0]
    85e4:	2e00      	cmp	r6, #0
    85e6:	d1e6      	bne.n	85b6 <_fwalk_sglue+0xe>
    85e8:	4648      	mov	r0, r9
    85ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    85ee:	bf00      	nop

000085f0 <memmove>:
    85f0:	4288      	cmp	r0, r1
    85f2:	d90d      	bls.n	8610 <memmove+0x20>
    85f4:	188b      	adds	r3, r1, r2
    85f6:	4283      	cmp	r3, r0
    85f8:	d90a      	bls.n	8610 <memmove+0x20>
    85fa:	eb00 0c02 	add.w	ip, r0, r2
    85fe:	b1ba      	cbz	r2, 8630 <memmove+0x40>
    8600:	4662      	mov	r2, ip
    8602:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    8606:	f802 cd01 	strb.w	ip, [r2, #-1]!
    860a:	4299      	cmp	r1, r3
    860c:	d1f9      	bne.n	8602 <memmove+0x12>
    860e:	4770      	bx	lr
    8610:	2a0f      	cmp	r2, #15
    8612:	d80e      	bhi.n	8632 <memmove+0x42>
    8614:	4603      	mov	r3, r0
    8616:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    861a:	b14a      	cbz	r2, 8630 <memmove+0x40>
    861c:	f10c 0c01 	add.w	ip, ip, #1
    8620:	3b01      	subs	r3, #1
    8622:	448c      	add	ip, r1
    8624:	f811 2b01 	ldrb.w	r2, [r1], #1
    8628:	f803 2f01 	strb.w	r2, [r3, #1]!
    862c:	4561      	cmp	r1, ip
    862e:	d1f9      	bne.n	8624 <memmove+0x34>
    8630:	4770      	bx	lr
    8632:	ea40 0301 	orr.w	r3, r0, r1
    8636:	079b      	lsls	r3, r3, #30
    8638:	d150      	bne.n	86dc <memmove+0xec>
    863a:	f1a2 0310 	sub.w	r3, r2, #16
    863e:	b570      	push	{r4, r5, r6, lr}
    8640:	f101 0c20 	add.w	ip, r1, #32
    8644:	f023 050f 	bic.w	r5, r3, #15
    8648:	f101 0e10 	add.w	lr, r1, #16
    864c:	f100 0410 	add.w	r4, r0, #16
    8650:	44ac      	add	ip, r5
    8652:	091b      	lsrs	r3, r3, #4
    8654:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    8658:	f844 5c10 	str.w	r5, [r4, #-16]
    865c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    8660:	f844 5c0c 	str.w	r5, [r4, #-12]
    8664:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    8668:	f844 5c08 	str.w	r5, [r4, #-8]
    866c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    8670:	f844 5c04 	str.w	r5, [r4, #-4]
    8674:	f10e 0e10 	add.w	lr, lr, #16
    8678:	45e6      	cmp	lr, ip
    867a:	f104 0410 	add.w	r4, r4, #16
    867e:	d1e9      	bne.n	8654 <memmove+0x64>
    8680:	3301      	adds	r3, #1
    8682:	f012 0f0c 	tst.w	r2, #12
    8686:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    868a:	f002 040f 	and.w	r4, r2, #15
    868e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    8692:	d027      	beq.n	86e4 <memmove+0xf4>
    8694:	3c04      	subs	r4, #4
    8696:	f024 0603 	bic.w	r6, r4, #3
    869a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    869e:	441e      	add	r6, r3
    86a0:	1f1c      	subs	r4, r3, #4
    86a2:	468e      	mov	lr, r1
    86a4:	f85e 5b04 	ldr.w	r5, [lr], #4
    86a8:	f844 5f04 	str.w	r5, [r4, #4]!
    86ac:	42b4      	cmp	r4, r6
    86ae:	d1f9      	bne.n	86a4 <memmove+0xb4>
    86b0:	f10c 0401 	add.w	r4, ip, #1
    86b4:	f002 0203 	and.w	r2, r2, #3
    86b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    86bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    86c0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    86c4:	b14a      	cbz	r2, 86da <memmove+0xea>
    86c6:	f10c 0c01 	add.w	ip, ip, #1
    86ca:	3b01      	subs	r3, #1
    86cc:	448c      	add	ip, r1
    86ce:	f811 2b01 	ldrb.w	r2, [r1], #1
    86d2:	f803 2f01 	strb.w	r2, [r3, #1]!
    86d6:	4561      	cmp	r1, ip
    86d8:	d1f9      	bne.n	86ce <memmove+0xde>
    86da:	bd70      	pop	{r4, r5, r6, pc}
    86dc:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    86e0:	4603      	mov	r3, r0
    86e2:	e79b      	b.n	861c <memmove+0x2c>
    86e4:	4622      	mov	r2, r4
    86e6:	e7eb      	b.n	86c0 <memmove+0xd0>

000086e8 <memset>:
    86e8:	0783      	lsls	r3, r0, #30
    86ea:	b530      	push	{r4, r5, lr}
    86ec:	d048      	beq.n	8780 <memset+0x98>
    86ee:	1e54      	subs	r4, r2, #1
    86f0:	2a00      	cmp	r2, #0
    86f2:	d03f      	beq.n	8774 <memset+0x8c>
    86f4:	b2ca      	uxtb	r2, r1
    86f6:	4603      	mov	r3, r0
    86f8:	e001      	b.n	86fe <memset+0x16>
    86fa:	3c01      	subs	r4, #1
    86fc:	d33a      	bcc.n	8774 <memset+0x8c>
    86fe:	f803 2b01 	strb.w	r2, [r3], #1
    8702:	079d      	lsls	r5, r3, #30
    8704:	d1f9      	bne.n	86fa <memset+0x12>
    8706:	2c03      	cmp	r4, #3
    8708:	d92d      	bls.n	8766 <memset+0x7e>
    870a:	b2cd      	uxtb	r5, r1
    870c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    8710:	2c0f      	cmp	r4, #15
    8712:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    8716:	d936      	bls.n	8786 <memset+0x9e>
    8718:	f1a4 0210 	sub.w	r2, r4, #16
    871c:	f022 0c0f 	bic.w	ip, r2, #15
    8720:	f103 0e20 	add.w	lr, r3, #32
    8724:	44e6      	add	lr, ip
    8726:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    872a:	f103 0210 	add.w	r2, r3, #16
    872e:	e942 5504 	strd	r5, r5, [r2, #-16]
    8732:	e942 5502 	strd	r5, r5, [r2, #-8]
    8736:	3210      	adds	r2, #16
    8738:	4572      	cmp	r2, lr
    873a:	d1f8      	bne.n	872e <memset+0x46>
    873c:	f10c 0201 	add.w	r2, ip, #1
    8740:	f014 0f0c 	tst.w	r4, #12
    8744:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    8748:	f004 0c0f 	and.w	ip, r4, #15
    874c:	d013      	beq.n	8776 <memset+0x8e>
    874e:	f1ac 0304 	sub.w	r3, ip, #4
    8752:	f023 0303 	bic.w	r3, r3, #3
    8756:	3304      	adds	r3, #4
    8758:	4413      	add	r3, r2
    875a:	f842 5b04 	str.w	r5, [r2], #4
    875e:	4293      	cmp	r3, r2
    8760:	d1fb      	bne.n	875a <memset+0x72>
    8762:	f00c 0403 	and.w	r4, ip, #3
    8766:	b12c      	cbz	r4, 8774 <memset+0x8c>
    8768:	b2c9      	uxtb	r1, r1
    876a:	441c      	add	r4, r3
    876c:	f803 1b01 	strb.w	r1, [r3], #1
    8770:	429c      	cmp	r4, r3
    8772:	d1fb      	bne.n	876c <memset+0x84>
    8774:	bd30      	pop	{r4, r5, pc}
    8776:	4664      	mov	r4, ip
    8778:	4613      	mov	r3, r2
    877a:	2c00      	cmp	r4, #0
    877c:	d1f4      	bne.n	8768 <memset+0x80>
    877e:	e7f9      	b.n	8774 <memset+0x8c>
    8780:	4603      	mov	r3, r0
    8782:	4614      	mov	r4, r2
    8784:	e7bf      	b.n	8706 <memset+0x1e>
    8786:	461a      	mov	r2, r3
    8788:	46a4      	mov	ip, r4
    878a:	e7e0      	b.n	874e <memset+0x66>

0000878c <strncmp>:
    878c:	2a00      	cmp	r2, #0
    878e:	d03e      	beq.n	880e <strncmp+0x82>
    8790:	ea40 0301 	orr.w	r3, r0, r1
    8794:	079b      	lsls	r3, r3, #30
    8796:	b530      	push	{r4, r5, lr}
    8798:	4684      	mov	ip, r0
    879a:	d12f      	bne.n	87fc <strncmp+0x70>
    879c:	2a03      	cmp	r2, #3
    879e:	d92d      	bls.n	87fc <strncmp+0x70>
    87a0:	460b      	mov	r3, r1
    87a2:	e008      	b.n	87b6 <strncmp+0x2a>
    87a4:	3a04      	subs	r2, #4
    87a6:	4684      	mov	ip, r0
    87a8:	4619      	mov	r1, r3
    87aa:	d025      	beq.n	87f8 <strncmp+0x6c>
    87ac:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    87b0:	d122      	bne.n	87f8 <strncmp+0x6c>
    87b2:	2a03      	cmp	r2, #3
    87b4:	d922      	bls.n	87fc <strncmp+0x70>
    87b6:	6804      	ldr	r4, [r0, #0]
    87b8:	4619      	mov	r1, r3
    87ba:	f853 5b04 	ldr.w	r5, [r3], #4
    87be:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    87c2:	42ac      	cmp	r4, r5
    87c4:	4684      	mov	ip, r0
    87c6:	ea2e 0e04 	bic.w	lr, lr, r4
    87ca:	f100 0004 	add.w	r0, r0, #4
    87ce:	d0e9      	beq.n	87a4 <strncmp+0x18>
    87d0:	f89c 0000 	ldrb.w	r0, [ip]
    87d4:	780c      	ldrb	r4, [r1, #0]
    87d6:	42a0      	cmp	r0, r4
    87d8:	d11b      	bne.n	8812 <strncmp+0x86>
    87da:	46e6      	mov	lr, ip
    87dc:	b168      	cbz	r0, 87fa <strncmp+0x6e>
    87de:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    87e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    87e6:	eba2 030e 	sub.w	r3, r2, lr
    87ea:	42a0      	cmp	r0, r4
    87ec:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    87f0:	d10f      	bne.n	8812 <strncmp+0x86>
    87f2:	eb1c 0303 	adds.w	r3, ip, r3
    87f6:	d1f1      	bne.n	87dc <strncmp+0x50>
    87f8:	2000      	movs	r0, #0
    87fa:	bd30      	pop	{r4, r5, pc}
    87fc:	f89c 0000 	ldrb.w	r0, [ip]
    8800:	780c      	ldrb	r4, [r1, #0]
    8802:	4284      	cmp	r4, r0
    8804:	d105      	bne.n	8812 <strncmp+0x86>
    8806:	2a01      	cmp	r2, #1
    8808:	d0f6      	beq.n	87f8 <strncmp+0x6c>
    880a:	46e6      	mov	lr, ip
    880c:	e7e6      	b.n	87dc <strncmp+0x50>
    880e:	4610      	mov	r0, r2
    8810:	4770      	bx	lr
    8812:	1b00      	subs	r0, r0, r4
    8814:	bd30      	pop	{r4, r5, pc}
    8816:	bf00      	nop

00008818 <strncpy>:
    8818:	ea40 0301 	orr.w	r3, r0, r1
    881c:	079b      	lsls	r3, r3, #30
    881e:	b530      	push	{r4, r5, lr}
    8820:	d101      	bne.n	8826 <strncpy+0xe>
    8822:	2a03      	cmp	r2, #3
    8824:	d80f      	bhi.n	8846 <strncpy+0x2e>
    8826:	4684      	mov	ip, r0
    8828:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    882c:	e007      	b.n	883e <strncpy+0x26>
    882e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    8832:	f803 1b01 	strb.w	r1, [r3], #1
    8836:	1e54      	subs	r4, r2, #1
    8838:	b1c1      	cbz	r1, 886c <strncpy+0x54>
    883a:	469c      	mov	ip, r3
    883c:	4622      	mov	r2, r4
    883e:	4663      	mov	r3, ip
    8840:	2a00      	cmp	r2, #0
    8842:	d1f4      	bne.n	882e <strncpy+0x16>
    8844:	bd30      	pop	{r4, r5, pc}
    8846:	460b      	mov	r3, r1
    8848:	4684      	mov	ip, r0
    884a:	4619      	mov	r1, r3
    884c:	f853 5b04 	ldr.w	r5, [r3], #4
    8850:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    8854:	ea24 0405 	bic.w	r4, r4, r5
    8858:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    885c:	d1e4      	bne.n	8828 <strncpy+0x10>
    885e:	3a04      	subs	r2, #4
    8860:	2a03      	cmp	r2, #3
    8862:	f84c 5b04 	str.w	r5, [ip], #4
    8866:	4619      	mov	r1, r3
    8868:	d8ef      	bhi.n	884a <strncpy+0x32>
    886a:	e7dd      	b.n	8828 <strncpy+0x10>
    886c:	4494      	add	ip, r2
    886e:	2c00      	cmp	r4, #0
    8870:	d0e8      	beq.n	8844 <strncpy+0x2c>
    8872:	f803 1b01 	strb.w	r1, [r3], #1
    8876:	4563      	cmp	r3, ip
    8878:	d1fb      	bne.n	8872 <strncpy+0x5a>
    887a:	bd30      	pop	{r4, r5, pc}

0000887c <__locale_mb_cur_max>:
    887c:	4b01      	ldr	r3, [pc, #4]	; (8884 <__locale_mb_cur_max+0x8>)
    887e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    8882:	4770      	bx	lr
    8884:	20008638 	.word	0x20008638

00008888 <_close_r>:
    8888:	b538      	push	{r3, r4, r5, lr}
    888a:	4d07      	ldr	r5, [pc, #28]	; (88a8 <_close_r+0x20>)
    888c:	2200      	movs	r2, #0
    888e:	4604      	mov	r4, r0
    8890:	4608      	mov	r0, r1
    8892:	602a      	str	r2, [r5, #0]
    8894:	f7fc fd9a 	bl	53cc <_close>
    8898:	1c43      	adds	r3, r0, #1
    889a:	d000      	beq.n	889e <_close_r+0x16>
    889c:	bd38      	pop	{r3, r4, r5, pc}
    889e:	682b      	ldr	r3, [r5, #0]
    88a0:	2b00      	cmp	r3, #0
    88a2:	d0fb      	beq.n	889c <_close_r+0x14>
    88a4:	6023      	str	r3, [r4, #0]
    88a6:	bd38      	pop	{r3, r4, r5, pc}
    88a8:	2000aa74 	.word	0x2000aa74

000088ac <_lseek_r>:
    88ac:	b538      	push	{r3, r4, r5, lr}
    88ae:	460c      	mov	r4, r1
    88b0:	4d08      	ldr	r5, [pc, #32]	; (88d4 <_lseek_r+0x28>)
    88b2:	4684      	mov	ip, r0
    88b4:	4611      	mov	r1, r2
    88b6:	4620      	mov	r0, r4
    88b8:	461a      	mov	r2, r3
    88ba:	2300      	movs	r3, #0
    88bc:	602b      	str	r3, [r5, #0]
    88be:	4664      	mov	r4, ip
    88c0:	f7fc fd90 	bl	53e4 <_lseek>
    88c4:	1c43      	adds	r3, r0, #1
    88c6:	d000      	beq.n	88ca <_lseek_r+0x1e>
    88c8:	bd38      	pop	{r3, r4, r5, pc}
    88ca:	682b      	ldr	r3, [r5, #0]
    88cc:	2b00      	cmp	r3, #0
    88ce:	d0fb      	beq.n	88c8 <_lseek_r+0x1c>
    88d0:	6023      	str	r3, [r4, #0]
    88d2:	bd38      	pop	{r3, r4, r5, pc}
    88d4:	2000aa74 	.word	0x2000aa74

000088d8 <__cxa_atexit>:
    88d8:	4613      	mov	r3, r2
    88da:	460a      	mov	r2, r1
    88dc:	4601      	mov	r1, r0
    88de:	2002      	movs	r0, #2
    88e0:	f000 babc 	b.w	8e5c <__register_exitproc>

000088e4 <_read_r>:
    88e4:	b538      	push	{r3, r4, r5, lr}
    88e6:	460c      	mov	r4, r1
    88e8:	4d08      	ldr	r5, [pc, #32]	; (890c <_read_r+0x28>)
    88ea:	4684      	mov	ip, r0
    88ec:	4611      	mov	r1, r2
    88ee:	4620      	mov	r0, r4
    88f0:	461a      	mov	r2, r3
    88f2:	2300      	movs	r3, #0
    88f4:	602b      	str	r3, [r5, #0]
    88f6:	4664      	mov	r4, ip
    88f8:	f7fc fd66 	bl	53c8 <_read>
    88fc:	1c43      	adds	r3, r0, #1
    88fe:	d000      	beq.n	8902 <_read_r+0x1e>
    8900:	bd38      	pop	{r3, r4, r5, pc}
    8902:	682b      	ldr	r3, [r5, #0]
    8904:	2b00      	cmp	r3, #0
    8906:	d0fb      	beq.n	8900 <_read_r+0x1c>
    8908:	6023      	str	r3, [r4, #0]
    890a:	bd38      	pop	{r3, r4, r5, pc}
    890c:	2000aa74 	.word	0x2000aa74

00008910 <_sbrk_r>:
    8910:	b538      	push	{r3, r4, r5, lr}
    8912:	4d07      	ldr	r5, [pc, #28]	; (8930 <_sbrk_r+0x20>)
    8914:	2200      	movs	r2, #0
    8916:	4604      	mov	r4, r0
    8918:	4608      	mov	r0, r1
    891a:	602a      	str	r2, [r5, #0]
    891c:	f7fc fd3a 	bl	5394 <_sbrk>
    8920:	1c43      	adds	r3, r0, #1
    8922:	d000      	beq.n	8926 <_sbrk_r+0x16>
    8924:	bd38      	pop	{r3, r4, r5, pc}
    8926:	682b      	ldr	r3, [r5, #0]
    8928:	2b00      	cmp	r3, #0
    892a:	d0fb      	beq.n	8924 <_sbrk_r+0x14>
    892c:	6023      	str	r3, [r4, #0]
    892e:	bd38      	pop	{r3, r4, r5, pc}
    8930:	2000aa74 	.word	0x2000aa74

00008934 <_write_r>:
    8934:	b538      	push	{r3, r4, r5, lr}
    8936:	460c      	mov	r4, r1
    8938:	4d08      	ldr	r5, [pc, #32]	; (895c <_write_r+0x28>)
    893a:	4684      	mov	ip, r0
    893c:	4611      	mov	r1, r2
    893e:	4620      	mov	r0, r4
    8940:	461a      	mov	r2, r3
    8942:	2300      	movs	r3, #0
    8944:	602b      	str	r3, [r5, #0]
    8946:	4664      	mov	r4, ip
    8948:	f7fb fa3c 	bl	3dc4 <_write>
    894c:	1c43      	adds	r3, r0, #1
    894e:	d000      	beq.n	8952 <_write_r+0x1e>
    8950:	bd38      	pop	{r3, r4, r5, pc}
    8952:	682b      	ldr	r3, [r5, #0]
    8954:	2b00      	cmp	r3, #0
    8956:	d0fb      	beq.n	8950 <_write_r+0x1c>
    8958:	6023      	str	r3, [r4, #0]
    895a:	bd38      	pop	{r3, r4, r5, pc}
    895c:	2000aa74 	.word	0x2000aa74

00008960 <__errno>:
    8960:	4b01      	ldr	r3, [pc, #4]	; (8968 <__errno+0x8>)
    8962:	6818      	ldr	r0, [r3, #0]
    8964:	4770      	bx	lr
    8966:	bf00      	nop
    8968:	20008bc0 	.word	0x20008bc0
	...
    8980:	eba2 0003 	sub.w	r0, r2, r3
    8984:	4770      	bx	lr
    8986:	bf00      	nop

00008988 <strcmp>:
    8988:	7802      	ldrb	r2, [r0, #0]
    898a:	780b      	ldrb	r3, [r1, #0]
    898c:	2a01      	cmp	r2, #1
    898e:	bf28      	it	cs
    8990:	429a      	cmpcs	r2, r3
    8992:	d1f5      	bne.n	8980 <__errno+0x20>
    8994:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    8998:	ea40 0401 	orr.w	r4, r0, r1
    899c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    89a0:	f06f 0c00 	mvn.w	ip, #0
    89a4:	ea4f 7244 	mov.w	r2, r4, lsl #29
    89a8:	b312      	cbz	r2, 89f0 <strcmp+0x68>
    89aa:	ea80 0401 	eor.w	r4, r0, r1
    89ae:	f014 0f07 	tst.w	r4, #7
    89b2:	d16a      	bne.n	8a8a <strcmp+0x102>
    89b4:	f000 0407 	and.w	r4, r0, #7
    89b8:	f020 0007 	bic.w	r0, r0, #7
    89bc:	f004 0503 	and.w	r5, r4, #3
    89c0:	f021 0107 	bic.w	r1, r1, #7
    89c4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    89c8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    89cc:	f014 0f04 	tst.w	r4, #4
    89d0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    89d4:	fa0c f405 	lsl.w	r4, ip, r5
    89d8:	ea62 0204 	orn	r2, r2, r4
    89dc:	ea66 0604 	orn	r6, r6, r4
    89e0:	d00a      	beq.n	89f8 <strcmp+0x70>
    89e2:	ea63 0304 	orn	r3, r3, r4
    89e6:	4662      	mov	r2, ip
    89e8:	ea67 0704 	orn	r7, r7, r4
    89ec:	4666      	mov	r6, ip
    89ee:	e003      	b.n	89f8 <strcmp+0x70>
    89f0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    89f4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    89f8:	fa82 f54c 	uadd8	r5, r2, ip
    89fc:	ea82 0406 	eor.w	r4, r2, r6
    8a00:	faa4 f48c 	sel	r4, r4, ip
    8a04:	bb6c      	cbnz	r4, 8a62 <strcmp+0xda>
    8a06:	fa83 f54c 	uadd8	r5, r3, ip
    8a0a:	ea83 0507 	eor.w	r5, r3, r7
    8a0e:	faa5 f58c 	sel	r5, r5, ip
    8a12:	b995      	cbnz	r5, 8a3a <strcmp+0xb2>
    8a14:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    8a18:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    8a1c:	fa82 f54c 	uadd8	r5, r2, ip
    8a20:	ea82 0406 	eor.w	r4, r2, r6
    8a24:	faa4 f48c 	sel	r4, r4, ip
    8a28:	fa83 f54c 	uadd8	r5, r3, ip
    8a2c:	ea83 0507 	eor.w	r5, r3, r7
    8a30:	faa5 f58c 	sel	r5, r5, ip
    8a34:	4325      	orrs	r5, r4
    8a36:	d0db      	beq.n	89f0 <strcmp+0x68>
    8a38:	b99c      	cbnz	r4, 8a62 <strcmp+0xda>
    8a3a:	ba2d      	rev	r5, r5
    8a3c:	fab5 f485 	clz	r4, r5
    8a40:	f024 0407 	bic.w	r4, r4, #7
    8a44:	fa27 f104 	lsr.w	r1, r7, r4
    8a48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    8a4c:	fa23 f304 	lsr.w	r3, r3, r4
    8a50:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    8a54:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    8a58:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    8a5c:	eba0 0001 	sub.w	r0, r0, r1
    8a60:	4770      	bx	lr
    8a62:	ba24      	rev	r4, r4
    8a64:	fab4 f484 	clz	r4, r4
    8a68:	f024 0407 	bic.w	r4, r4, #7
    8a6c:	fa26 f104 	lsr.w	r1, r6, r4
    8a70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    8a74:	fa22 f204 	lsr.w	r2, r2, r4
    8a78:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    8a7c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    8a80:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    8a84:	eba0 0001 	sub.w	r0, r0, r1
    8a88:	4770      	bx	lr
    8a8a:	f014 0f03 	tst.w	r4, #3
    8a8e:	d13c      	bne.n	8b0a <strcmp+0x182>
    8a90:	f010 0403 	ands.w	r4, r0, #3
    8a94:	d128      	bne.n	8ae8 <strcmp+0x160>
    8a96:	f850 2b08 	ldr.w	r2, [r0], #8
    8a9a:	f851 3b08 	ldr.w	r3, [r1], #8
    8a9e:	fa82 f54c 	uadd8	r5, r2, ip
    8aa2:	ea82 0503 	eor.w	r5, r2, r3
    8aa6:	faa5 f58c 	sel	r5, r5, ip
    8aaa:	b95d      	cbnz	r5, 8ac4 <strcmp+0x13c>
    8aac:	f850 2c04 	ldr.w	r2, [r0, #-4]
    8ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    8ab4:	fa82 f54c 	uadd8	r5, r2, ip
    8ab8:	ea82 0503 	eor.w	r5, r2, r3
    8abc:	faa5 f58c 	sel	r5, r5, ip
    8ac0:	2d00      	cmp	r5, #0
    8ac2:	d0e8      	beq.n	8a96 <strcmp+0x10e>
    8ac4:	ba2d      	rev	r5, r5
    8ac6:	fab5 f485 	clz	r4, r5
    8aca:	f024 0407 	bic.w	r4, r4, #7
    8ace:	fa23 f104 	lsr.w	r1, r3, r4
    8ad2:	fa22 f204 	lsr.w	r2, r2, r4
    8ad6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    8ada:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    8ade:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    8ae2:	eba0 0001 	sub.w	r0, r0, r1
    8ae6:	4770      	bx	lr
    8ae8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    8aec:	f020 0003 	bic.w	r0, r0, #3
    8af0:	f850 2b08 	ldr.w	r2, [r0], #8
    8af4:	f021 0103 	bic.w	r1, r1, #3
    8af8:	f851 3b08 	ldr.w	r3, [r1], #8
    8afc:	fa0c f404 	lsl.w	r4, ip, r4
    8b00:	ea62 0204 	orn	r2, r2, r4
    8b04:	ea63 0304 	orn	r3, r3, r4
    8b08:	e7c9      	b.n	8a9e <strcmp+0x116>
    8b0a:	f010 0403 	ands.w	r4, r0, #3
    8b0e:	d01a      	beq.n	8b46 <strcmp+0x1be>
    8b10:	eba1 0104 	sub.w	r1, r1, r4
    8b14:	f020 0003 	bic.w	r0, r0, #3
    8b18:	07e4      	lsls	r4, r4, #31
    8b1a:	f850 2b04 	ldr.w	r2, [r0], #4
    8b1e:	d006      	beq.n	8b2e <strcmp+0x1a6>
    8b20:	d20f      	bcs.n	8b42 <strcmp+0x1ba>
    8b22:	788b      	ldrb	r3, [r1, #2]
    8b24:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    8b28:	1ae4      	subs	r4, r4, r3
    8b2a:	d106      	bne.n	8b3a <strcmp+0x1b2>
    8b2c:	b12b      	cbz	r3, 8b3a <strcmp+0x1b2>
    8b2e:	78cb      	ldrb	r3, [r1, #3]
    8b30:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    8b34:	1ae4      	subs	r4, r4, r3
    8b36:	d100      	bne.n	8b3a <strcmp+0x1b2>
    8b38:	b91b      	cbnz	r3, 8b42 <strcmp+0x1ba>
    8b3a:	4620      	mov	r0, r4
    8b3c:	f85d 4b10 	ldr.w	r4, [sp], #16
    8b40:	4770      	bx	lr
    8b42:	f101 0104 	add.w	r1, r1, #4
    8b46:	f850 2b04 	ldr.w	r2, [r0], #4
    8b4a:	07cc      	lsls	r4, r1, #31
    8b4c:	f021 0103 	bic.w	r1, r1, #3
    8b50:	f851 3b04 	ldr.w	r3, [r1], #4
    8b54:	d848      	bhi.n	8be8 <strcmp+0x260>
    8b56:	d224      	bcs.n	8ba2 <strcmp+0x21a>
    8b58:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    8b5c:	fa82 f54c 	uadd8	r5, r2, ip
    8b60:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    8b64:	faa5 f58c 	sel	r5, r5, ip
    8b68:	d10a      	bne.n	8b80 <strcmp+0x1f8>
    8b6a:	b965      	cbnz	r5, 8b86 <strcmp+0x1fe>
    8b6c:	f851 3b04 	ldr.w	r3, [r1], #4
    8b70:	ea84 0402 	eor.w	r4, r4, r2
    8b74:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    8b78:	d10e      	bne.n	8b98 <strcmp+0x210>
    8b7a:	f850 2b04 	ldr.w	r2, [r0], #4
    8b7e:	e7eb      	b.n	8b58 <strcmp+0x1d0>
    8b80:	ea4f 2313 	mov.w	r3, r3, lsr #8
    8b84:	e055      	b.n	8c32 <strcmp+0x2aa>
    8b86:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    8b8a:	d14d      	bne.n	8c28 <strcmp+0x2a0>
    8b8c:	7808      	ldrb	r0, [r1, #0]
    8b8e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    8b92:	f1c0 0000 	rsb	r0, r0, #0
    8b96:	4770      	bx	lr
    8b98:	ea4f 6212 	mov.w	r2, r2, lsr #24
    8b9c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    8ba0:	e047      	b.n	8c32 <strcmp+0x2aa>
    8ba2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    8ba6:	fa82 f54c 	uadd8	r5, r2, ip
    8baa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    8bae:	faa5 f58c 	sel	r5, r5, ip
    8bb2:	d10a      	bne.n	8bca <strcmp+0x242>
    8bb4:	b965      	cbnz	r5, 8bd0 <strcmp+0x248>
    8bb6:	f851 3b04 	ldr.w	r3, [r1], #4
    8bba:	ea84 0402 	eor.w	r4, r4, r2
    8bbe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    8bc2:	d10c      	bne.n	8bde <strcmp+0x256>
    8bc4:	f850 2b04 	ldr.w	r2, [r0], #4
    8bc8:	e7eb      	b.n	8ba2 <strcmp+0x21a>
    8bca:	ea4f 4313 	mov.w	r3, r3, lsr #16
    8bce:	e030      	b.n	8c32 <strcmp+0x2aa>
    8bd0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    8bd4:	d128      	bne.n	8c28 <strcmp+0x2a0>
    8bd6:	880b      	ldrh	r3, [r1, #0]
    8bd8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    8bdc:	e029      	b.n	8c32 <strcmp+0x2aa>
    8bde:	ea4f 4212 	mov.w	r2, r2, lsr #16
    8be2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    8be6:	e024      	b.n	8c32 <strcmp+0x2aa>
    8be8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    8bec:	fa82 f54c 	uadd8	r5, r2, ip
    8bf0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    8bf4:	faa5 f58c 	sel	r5, r5, ip
    8bf8:	d10a      	bne.n	8c10 <strcmp+0x288>
    8bfa:	b965      	cbnz	r5, 8c16 <strcmp+0x28e>
    8bfc:	f851 3b04 	ldr.w	r3, [r1], #4
    8c00:	ea84 0402 	eor.w	r4, r4, r2
    8c04:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    8c08:	d109      	bne.n	8c1e <strcmp+0x296>
    8c0a:	f850 2b04 	ldr.w	r2, [r0], #4
    8c0e:	e7eb      	b.n	8be8 <strcmp+0x260>
    8c10:	ea4f 6313 	mov.w	r3, r3, lsr #24
    8c14:	e00d      	b.n	8c32 <strcmp+0x2aa>
    8c16:	f015 0fff 	tst.w	r5, #255	; 0xff
    8c1a:	d105      	bne.n	8c28 <strcmp+0x2a0>
    8c1c:	680b      	ldr	r3, [r1, #0]
    8c1e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    8c22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8c26:	e004      	b.n	8c32 <strcmp+0x2aa>
    8c28:	f04f 0000 	mov.w	r0, #0
    8c2c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    8c30:	4770      	bx	lr
    8c32:	ba12      	rev	r2, r2
    8c34:	ba1b      	rev	r3, r3
    8c36:	fa82 f44c 	uadd8	r4, r2, ip
    8c3a:	ea82 0403 	eor.w	r4, r2, r3
    8c3e:	faa4 f58c 	sel	r5, r4, ip
    8c42:	fab5 f485 	clz	r4, r5
    8c46:	fa02 f204 	lsl.w	r2, r2, r4
    8c4a:	fa03 f304 	lsl.w	r3, r3, r4
    8c4e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    8c52:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    8c56:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    8c5a:	4770      	bx	lr

00008c5c <strcpy>:
    8c5c:	ea80 0201 	eor.w	r2, r0, r1
    8c60:	4684      	mov	ip, r0
    8c62:	f012 0f03 	tst.w	r2, #3
    8c66:	d14f      	bne.n	8d08 <strcpy+0xac>
    8c68:	f011 0f03 	tst.w	r1, #3
    8c6c:	d132      	bne.n	8cd4 <strcpy+0x78>
    8c6e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    8c72:	f011 0f04 	tst.w	r1, #4
    8c76:	f851 3b04 	ldr.w	r3, [r1], #4
    8c7a:	d00b      	beq.n	8c94 <strcpy+0x38>
    8c7c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    8c80:	439a      	bics	r2, r3
    8c82:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    8c86:	bf04      	itt	eq
    8c88:	f84c 3b04 	streq.w	r3, [ip], #4
    8c8c:	f851 3b04 	ldreq.w	r3, [r1], #4
    8c90:	d116      	bne.n	8cc0 <strcpy+0x64>
    8c92:	bf00      	nop
    8c94:	f851 4b04 	ldr.w	r4, [r1], #4
    8c98:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    8c9c:	439a      	bics	r2, r3
    8c9e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    8ca2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    8ca6:	d10b      	bne.n	8cc0 <strcpy+0x64>
    8ca8:	f84c 3b04 	str.w	r3, [ip], #4
    8cac:	43a2      	bics	r2, r4
    8cae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    8cb2:	bf04      	itt	eq
    8cb4:	f851 3b04 	ldreq.w	r3, [r1], #4
    8cb8:	f84c 4b04 	streq.w	r4, [ip], #4
    8cbc:	d0ea      	beq.n	8c94 <strcpy+0x38>
    8cbe:	4623      	mov	r3, r4
    8cc0:	f80c 3b01 	strb.w	r3, [ip], #1
    8cc4:	f013 0fff 	tst.w	r3, #255	; 0xff
    8cc8:	ea4f 2333 	mov.w	r3, r3, ror #8
    8ccc:	d1f8      	bne.n	8cc0 <strcpy+0x64>
    8cce:	f85d 4b04 	ldr.w	r4, [sp], #4
    8cd2:	4770      	bx	lr
    8cd4:	f011 0f01 	tst.w	r1, #1
    8cd8:	d006      	beq.n	8ce8 <strcpy+0x8c>
    8cda:	f811 2b01 	ldrb.w	r2, [r1], #1
    8cde:	f80c 2b01 	strb.w	r2, [ip], #1
    8ce2:	2a00      	cmp	r2, #0
    8ce4:	bf08      	it	eq
    8ce6:	4770      	bxeq	lr
    8ce8:	f011 0f02 	tst.w	r1, #2
    8cec:	d0bf      	beq.n	8c6e <strcpy+0x12>
    8cee:	f831 2b02 	ldrh.w	r2, [r1], #2
    8cf2:	f012 0fff 	tst.w	r2, #255	; 0xff
    8cf6:	bf16      	itet	ne
    8cf8:	f82c 2b02 	strhne.w	r2, [ip], #2
    8cfc:	f88c 2000 	strbeq.w	r2, [ip]
    8d00:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    8d04:	d1b3      	bne.n	8c6e <strcpy+0x12>
    8d06:	4770      	bx	lr
    8d08:	f811 2b01 	ldrb.w	r2, [r1], #1
    8d0c:	f80c 2b01 	strb.w	r2, [ip], #1
    8d10:	2a00      	cmp	r2, #0
    8d12:	d1f9      	bne.n	8d08 <strcpy+0xac>
    8d14:	4770      	bx	lr
    8d16:	bf00      	nop

00008d18 <__libc_init_array>:
    8d18:	b570      	push	{r4, r5, r6, lr}
    8d1a:	4e0d      	ldr	r6, [pc, #52]	; (8d50 <__libc_init_array+0x38>)
    8d1c:	4d0d      	ldr	r5, [pc, #52]	; (8d54 <__libc_init_array+0x3c>)
    8d1e:	1b76      	subs	r6, r6, r5
    8d20:	10b6      	asrs	r6, r6, #2
    8d22:	d006      	beq.n	8d32 <__libc_init_array+0x1a>
    8d24:	2400      	movs	r4, #0
    8d26:	f855 3b04 	ldr.w	r3, [r5], #4
    8d2a:	3401      	adds	r4, #1
    8d2c:	4798      	blx	r3
    8d2e:	42a6      	cmp	r6, r4
    8d30:	d1f9      	bne.n	8d26 <__libc_init_array+0xe>
    8d32:	4e09      	ldr	r6, [pc, #36]	; (8d58 <__libc_init_array+0x40>)
    8d34:	4d09      	ldr	r5, [pc, #36]	; (8d5c <__libc_init_array+0x44>)
    8d36:	1b76      	subs	r6, r6, r5
    8d38:	f008 fa6e 	bl	11218 <___init_veneer>
    8d3c:	10b6      	asrs	r6, r6, #2
    8d3e:	d006      	beq.n	8d4e <__libc_init_array+0x36>
    8d40:	2400      	movs	r4, #0
    8d42:	f855 3b04 	ldr.w	r3, [r5], #4
    8d46:	3401      	adds	r4, #1
    8d48:	4798      	blx	r3
    8d4a:	42a6      	cmp	r6, r4
    8d4c:	d1f9      	bne.n	8d42 <__libc_init_array+0x2a>
    8d4e:	bd70      	pop	{r4, r5, r6, pc}
    8d50:	60001c70 	.word	0x60001c70
    8d54:	60001c70 	.word	0x60001c70
    8d58:	60001c7c 	.word	0x60001c7c
    8d5c:	60001c70 	.word	0x60001c70

00008d60 <__retarget_lock_init_recursive>:
    8d60:	4770      	bx	lr
    8d62:	bf00      	nop

00008d64 <__retarget_lock_close_recursive>:
    8d64:	4770      	bx	lr
    8d66:	bf00      	nop

00008d68 <__retarget_lock_acquire_recursive>:
    8d68:	4770      	bx	lr
    8d6a:	bf00      	nop

00008d6c <__retarget_lock_release_recursive>:
    8d6c:	4770      	bx	lr
    8d6e:	bf00      	nop
	...

00008d80 <strlen>:
    8d80:	f890 f000 	pld	[r0]
    8d84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    8d88:	f020 0107 	bic.w	r1, r0, #7
    8d8c:	f06f 0c00 	mvn.w	ip, #0
    8d90:	f010 0407 	ands.w	r4, r0, #7
    8d94:	f891 f020 	pld	[r1, #32]
    8d98:	f040 8049 	bne.w	8e2e <strlen+0xae>
    8d9c:	f04f 0400 	mov.w	r4, #0
    8da0:	f06f 0007 	mvn.w	r0, #7
    8da4:	e9d1 2300 	ldrd	r2, r3, [r1]
    8da8:	f891 f040 	pld	[r1, #64]	; 0x40
    8dac:	f100 0008 	add.w	r0, r0, #8
    8db0:	fa82 f24c 	uadd8	r2, r2, ip
    8db4:	faa4 f28c 	sel	r2, r4, ip
    8db8:	fa83 f34c 	uadd8	r3, r3, ip
    8dbc:	faa2 f38c 	sel	r3, r2, ip
    8dc0:	bb4b      	cbnz	r3, 8e16 <strlen+0x96>
    8dc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    8dc6:	fa82 f24c 	uadd8	r2, r2, ip
    8dca:	f100 0008 	add.w	r0, r0, #8
    8dce:	faa4 f28c 	sel	r2, r4, ip
    8dd2:	fa83 f34c 	uadd8	r3, r3, ip
    8dd6:	faa2 f38c 	sel	r3, r2, ip
    8dda:	b9e3      	cbnz	r3, 8e16 <strlen+0x96>
    8ddc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    8de0:	fa82 f24c 	uadd8	r2, r2, ip
    8de4:	f100 0008 	add.w	r0, r0, #8
    8de8:	faa4 f28c 	sel	r2, r4, ip
    8dec:	fa83 f34c 	uadd8	r3, r3, ip
    8df0:	faa2 f38c 	sel	r3, r2, ip
    8df4:	b97b      	cbnz	r3, 8e16 <strlen+0x96>
    8df6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    8dfa:	f101 0120 	add.w	r1, r1, #32
    8dfe:	fa82 f24c 	uadd8	r2, r2, ip
    8e02:	f100 0008 	add.w	r0, r0, #8
    8e06:	faa4 f28c 	sel	r2, r4, ip
    8e0a:	fa83 f34c 	uadd8	r3, r3, ip
    8e0e:	faa2 f38c 	sel	r3, r2, ip
    8e12:	2b00      	cmp	r3, #0
    8e14:	d0c6      	beq.n	8da4 <strlen+0x24>
    8e16:	2a00      	cmp	r2, #0
    8e18:	bf04      	itt	eq
    8e1a:	3004      	addeq	r0, #4
    8e1c:	461a      	moveq	r2, r3
    8e1e:	ba12      	rev	r2, r2
    8e20:	fab2 f282 	clz	r2, r2
    8e24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    8e28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    8e2c:	4770      	bx	lr
    8e2e:	e9d1 2300 	ldrd	r2, r3, [r1]
    8e32:	f004 0503 	and.w	r5, r4, #3
    8e36:	f1c4 0000 	rsb	r0, r4, #0
    8e3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    8e3e:	f014 0f04 	tst.w	r4, #4
    8e42:	f891 f040 	pld	[r1, #64]	; 0x40
    8e46:	fa0c f505 	lsl.w	r5, ip, r5
    8e4a:	ea62 0205 	orn	r2, r2, r5
    8e4e:	bf1c      	itt	ne
    8e50:	ea63 0305 	ornne	r3, r3, r5
    8e54:	4662      	movne	r2, ip
    8e56:	f04f 0400 	mov.w	r4, #0
    8e5a:	e7a9      	b.n	8db0 <strlen+0x30>

00008e5c <__register_exitproc>:
    8e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e60:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8ee0 <__register_exitproc+0x84>
    8e64:	4606      	mov	r6, r0
    8e66:	f8da 0000 	ldr.w	r0, [sl]
    8e6a:	4698      	mov	r8, r3
    8e6c:	460f      	mov	r7, r1
    8e6e:	4691      	mov	r9, r2
    8e70:	f7ff ff7a 	bl	8d68 <__retarget_lock_acquire_recursive>
    8e74:	4b18      	ldr	r3, [pc, #96]	; (8ed8 <__register_exitproc+0x7c>)
    8e76:	681c      	ldr	r4, [r3, #0]
    8e78:	b324      	cbz	r4, 8ec4 <__register_exitproc+0x68>
    8e7a:	6865      	ldr	r5, [r4, #4]
    8e7c:	2d1f      	cmp	r5, #31
    8e7e:	dc24      	bgt.n	8eca <__register_exitproc+0x6e>
    8e80:	b95e      	cbnz	r6, 8e9a <__register_exitproc+0x3e>
    8e82:	1c6b      	adds	r3, r5, #1
    8e84:	3502      	adds	r5, #2
    8e86:	f8da 0000 	ldr.w	r0, [sl]
    8e8a:	6063      	str	r3, [r4, #4]
    8e8c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    8e90:	f7ff ff6c 	bl	8d6c <__retarget_lock_release_recursive>
    8e94:	2000      	movs	r0, #0
    8e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8e9a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    8e9e:	2301      	movs	r3, #1
    8ea0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    8ea4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    8ea8:	40ab      	lsls	r3, r5
    8eaa:	431a      	orrs	r2, r3
    8eac:	2e02      	cmp	r6, #2
    8eae:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    8eb2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    8eb6:	d1e4      	bne.n	8e82 <__register_exitproc+0x26>
    8eb8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    8ebc:	431a      	orrs	r2, r3
    8ebe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    8ec2:	e7de      	b.n	8e82 <__register_exitproc+0x26>
    8ec4:	4c05      	ldr	r4, [pc, #20]	; (8edc <__register_exitproc+0x80>)
    8ec6:	601c      	str	r4, [r3, #0]
    8ec8:	e7d7      	b.n	8e7a <__register_exitproc+0x1e>
    8eca:	f8da 0000 	ldr.w	r0, [sl]
    8ece:	f7ff ff4d 	bl	8d6c <__retarget_lock_release_recursive>
    8ed2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8ed6:	e7de      	b.n	8e96 <__register_exitproc+0x3a>
    8ed8:	2000a6e0 	.word	0x2000a6e0
    8edc:	2000a6e4 	.word	0x2000a6e4
    8ee0:	2000862c 	.word	0x2000862c
    8ee4:	00000000 	.word	0x00000000

00008ee8 <nan>:
    8ee8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8ef0 <nan+0x8>
    8eec:	4770      	bx	lr
    8eee:	bf00      	nop
    8ef0:	00000000 	.word	0x00000000
    8ef4:	7ff80000 	.word	0x7ff80000

00008ef8 <nanf>:
    8ef8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8f00 <nanf+0x8>
    8efc:	4770      	bx	lr
    8efe:	bf00      	nop
    8f00:	7fc00000 	.word	0x7fc00000

00008f04 <_malloc_trim_r>:
    8f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f06:	4f24      	ldr	r7, [pc, #144]	; (8f98 <_malloc_trim_r+0x94>)
    8f08:	460c      	mov	r4, r1
    8f0a:	4606      	mov	r6, r0
    8f0c:	f7fd ffd0 	bl	6eb0 <__malloc_lock>
    8f10:	68bb      	ldr	r3, [r7, #8]
    8f12:	685d      	ldr	r5, [r3, #4]
    8f14:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    8f18:	310f      	adds	r1, #15
    8f1a:	f025 0503 	bic.w	r5, r5, #3
    8f1e:	194b      	adds	r3, r1, r5
    8f20:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    8f24:	f023 030f 	bic.w	r3, r3, #15
    8f28:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    8f2c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    8f30:	db07      	blt.n	8f42 <_malloc_trim_r+0x3e>
    8f32:	2100      	movs	r1, #0
    8f34:	4630      	mov	r0, r6
    8f36:	f7ff fceb 	bl	8910 <_sbrk_r>
    8f3a:	68bb      	ldr	r3, [r7, #8]
    8f3c:	442b      	add	r3, r5
    8f3e:	4298      	cmp	r0, r3
    8f40:	d004      	beq.n	8f4c <_malloc_trim_r+0x48>
    8f42:	4630      	mov	r0, r6
    8f44:	f7fd ffba 	bl	6ebc <__malloc_unlock>
    8f48:	2000      	movs	r0, #0
    8f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f4c:	4261      	negs	r1, r4
    8f4e:	4630      	mov	r0, r6
    8f50:	f7ff fcde 	bl	8910 <_sbrk_r>
    8f54:	3001      	adds	r0, #1
    8f56:	d00d      	beq.n	8f74 <_malloc_trim_r+0x70>
    8f58:	4a10      	ldr	r2, [pc, #64]	; (8f9c <_malloc_trim_r+0x98>)
    8f5a:	68bb      	ldr	r3, [r7, #8]
    8f5c:	1b2d      	subs	r5, r5, r4
    8f5e:	f045 0501 	orr.w	r5, r5, #1
    8f62:	605d      	str	r5, [r3, #4]
    8f64:	6813      	ldr	r3, [r2, #0]
    8f66:	4630      	mov	r0, r6
    8f68:	1b1b      	subs	r3, r3, r4
    8f6a:	6013      	str	r3, [r2, #0]
    8f6c:	f7fd ffa6 	bl	6ebc <__malloc_unlock>
    8f70:	2001      	movs	r0, #1
    8f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f74:	2100      	movs	r1, #0
    8f76:	4630      	mov	r0, r6
    8f78:	f7ff fcca 	bl	8910 <_sbrk_r>
    8f7c:	68ba      	ldr	r2, [r7, #8]
    8f7e:	1a83      	subs	r3, r0, r2
    8f80:	2b0f      	cmp	r3, #15
    8f82:	ddde      	ble.n	8f42 <_malloc_trim_r+0x3e>
    8f84:	f043 0301 	orr.w	r3, r3, #1
    8f88:	6053      	str	r3, [r2, #4]
    8f8a:	4b05      	ldr	r3, [pc, #20]	; (8fa0 <_malloc_trim_r+0x9c>)
    8f8c:	4903      	ldr	r1, [pc, #12]	; (8f9c <_malloc_trim_r+0x98>)
    8f8e:	681b      	ldr	r3, [r3, #0]
    8f90:	1ac0      	subs	r0, r0, r3
    8f92:	6008      	str	r0, [r1, #0]
    8f94:	e7d5      	b.n	8f42 <_malloc_trim_r+0x3e>
    8f96:	bf00      	nop
    8f98:	200087a4 	.word	0x200087a4
    8f9c:	2000a880 	.word	0x2000a880
    8fa0:	20008bac 	.word	0x20008bac

00008fa4 <_free_r>:
    8fa4:	2900      	cmp	r1, #0
    8fa6:	d061      	beq.n	906c <_free_r+0xc8>
    8fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8faa:	460c      	mov	r4, r1
    8fac:	4606      	mov	r6, r0
    8fae:	f7fd ff7f 	bl	6eb0 <__malloc_lock>
    8fb2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    8fb6:	4f7b      	ldr	r7, [pc, #492]	; (91a4 <_free_r+0x200>)
    8fb8:	f1a4 0508 	sub.w	r5, r4, #8
    8fbc:	f022 0101 	bic.w	r1, r2, #1
    8fc0:	eb05 0c01 	add.w	ip, r5, r1
    8fc4:	68b8      	ldr	r0, [r7, #8]
    8fc6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    8fca:	4560      	cmp	r0, ip
    8fcc:	f023 0303 	bic.w	r3, r3, #3
    8fd0:	f000 808b 	beq.w	90ea <_free_r+0x146>
    8fd4:	07d2      	lsls	r2, r2, #31
    8fd6:	f8cc 3004 	str.w	r3, [ip, #4]
    8fda:	d432      	bmi.n	9042 <_free_r+0x9e>
    8fdc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    8fe0:	1aad      	subs	r5, r5, r2
    8fe2:	4411      	add	r1, r2
    8fe4:	68aa      	ldr	r2, [r5, #8]
    8fe6:	f107 0008 	add.w	r0, r7, #8
    8fea:	4282      	cmp	r2, r0
    8fec:	d06a      	beq.n	90c4 <_free_r+0x120>
    8fee:	eb0c 0403 	add.w	r4, ip, r3
    8ff2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    8ff6:	68ec      	ldr	r4, [r5, #12]
    8ff8:	60d4      	str	r4, [r2, #12]
    8ffa:	f01e 0f01 	tst.w	lr, #1
    8ffe:	60a2      	str	r2, [r4, #8]
    9000:	f000 8097 	beq.w	9132 <_free_r+0x18e>
    9004:	f041 0301 	orr.w	r3, r1, #1
    9008:	606b      	str	r3, [r5, #4]
    900a:	f8cc 1000 	str.w	r1, [ip]
    900e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    9012:	d235      	bcs.n	9080 <_free_r+0xdc>
    9014:	6878      	ldr	r0, [r7, #4]
    9016:	08cb      	lsrs	r3, r1, #3
    9018:	2201      	movs	r2, #1
    901a:	0949      	lsrs	r1, r1, #5
    901c:	3301      	adds	r3, #1
    901e:	408a      	lsls	r2, r1
    9020:	4302      	orrs	r2, r0
    9022:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    9026:	607a      	str	r2, [r7, #4]
    9028:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    902c:	3a08      	subs	r2, #8
    902e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    9032:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    9036:	60cd      	str	r5, [r1, #12]
    9038:	4630      	mov	r0, r6
    903a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    903e:	f7fd bf3d 	b.w	6ebc <__malloc_unlock>
    9042:	eb0c 0203 	add.w	r2, ip, r3
    9046:	6852      	ldr	r2, [r2, #4]
    9048:	07d0      	lsls	r0, r2, #31
    904a:	d410      	bmi.n	906e <_free_r+0xca>
    904c:	4419      	add	r1, r3
    904e:	f107 0008 	add.w	r0, r7, #8
    9052:	f8dc 3008 	ldr.w	r3, [ip, #8]
    9056:	4283      	cmp	r3, r0
    9058:	d073      	beq.n	9142 <_free_r+0x19e>
    905a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    905e:	60da      	str	r2, [r3, #12]
    9060:	6093      	str	r3, [r2, #8]
    9062:	f041 0301 	orr.w	r3, r1, #1
    9066:	606b      	str	r3, [r5, #4]
    9068:	5069      	str	r1, [r5, r1]
    906a:	e7d0      	b.n	900e <_free_r+0x6a>
    906c:	4770      	bx	lr
    906e:	f041 0301 	orr.w	r3, r1, #1
    9072:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    9076:	f844 3c04 	str.w	r3, [r4, #-4]
    907a:	f8cc 1000 	str.w	r1, [ip]
    907e:	d3c9      	bcc.n	9014 <_free_r+0x70>
    9080:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    9084:	ea4f 2351 	mov.w	r3, r1, lsr #9
    9088:	d248      	bcs.n	911c <_free_r+0x178>
    908a:	098b      	lsrs	r3, r1, #6
    908c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    9090:	f103 0238 	add.w	r2, r3, #56	; 0x38
    9094:	00c3      	lsls	r3, r0, #3
    9096:	18f8      	adds	r0, r7, r3
    9098:	58fb      	ldr	r3, [r7, r3]
    909a:	3808      	subs	r0, #8
    909c:	4298      	cmp	r0, r3
    909e:	d059      	beq.n	9154 <_free_r+0x1b0>
    90a0:	685a      	ldr	r2, [r3, #4]
    90a2:	f022 0203 	bic.w	r2, r2, #3
    90a6:	428a      	cmp	r2, r1
    90a8:	d902      	bls.n	90b0 <_free_r+0x10c>
    90aa:	689b      	ldr	r3, [r3, #8]
    90ac:	4298      	cmp	r0, r3
    90ae:	d1f7      	bne.n	90a0 <_free_r+0xfc>
    90b0:	68d8      	ldr	r0, [r3, #12]
    90b2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    90b6:	6085      	str	r5, [r0, #8]
    90b8:	60dd      	str	r5, [r3, #12]
    90ba:	4630      	mov	r0, r6
    90bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    90c0:	f7fd befc 	b.w	6ebc <__malloc_unlock>
    90c4:	eb0c 0203 	add.w	r2, ip, r3
    90c8:	6852      	ldr	r2, [r2, #4]
    90ca:	07d2      	lsls	r2, r2, #31
    90cc:	d463      	bmi.n	9196 <_free_r+0x1f2>
    90ce:	440b      	add	r3, r1
    90d0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    90d4:	60ca      	str	r2, [r1, #12]
    90d6:	6091      	str	r1, [r2, #8]
    90d8:	f043 0201 	orr.w	r2, r3, #1
    90dc:	606a      	str	r2, [r5, #4]
    90de:	4630      	mov	r0, r6
    90e0:	50eb      	str	r3, [r5, r3]
    90e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    90e6:	f7fd bee9 	b.w	6ebc <__malloc_unlock>
    90ea:	440b      	add	r3, r1
    90ec:	07d1      	lsls	r1, r2, #31
    90ee:	d407      	bmi.n	9100 <_free_r+0x15c>
    90f0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    90f4:	1aad      	subs	r5, r5, r2
    90f6:	4413      	add	r3, r2
    90f8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    90fc:	60ca      	str	r2, [r1, #12]
    90fe:	6091      	str	r1, [r2, #8]
    9100:	f043 0201 	orr.w	r2, r3, #1
    9104:	606a      	str	r2, [r5, #4]
    9106:	4a28      	ldr	r2, [pc, #160]	; (91a8 <_free_r+0x204>)
    9108:	60bd      	str	r5, [r7, #8]
    910a:	6812      	ldr	r2, [r2, #0]
    910c:	429a      	cmp	r2, r3
    910e:	d893      	bhi.n	9038 <_free_r+0x94>
    9110:	4b26      	ldr	r3, [pc, #152]	; (91ac <_free_r+0x208>)
    9112:	4630      	mov	r0, r6
    9114:	6819      	ldr	r1, [r3, #0]
    9116:	f7ff fef5 	bl	8f04 <_malloc_trim_r>
    911a:	e78d      	b.n	9038 <_free_r+0x94>
    911c:	2b14      	cmp	r3, #20
    911e:	d90a      	bls.n	9136 <_free_r+0x192>
    9120:	2b54      	cmp	r3, #84	; 0x54
    9122:	d81f      	bhi.n	9164 <_free_r+0x1c0>
    9124:	0b0b      	lsrs	r3, r1, #12
    9126:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    912a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    912e:	00c3      	lsls	r3, r0, #3
    9130:	e7b1      	b.n	9096 <_free_r+0xf2>
    9132:	4419      	add	r1, r3
    9134:	e78d      	b.n	9052 <_free_r+0xae>
    9136:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    913a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    913e:	00c3      	lsls	r3, r0, #3
    9140:	e7a9      	b.n	9096 <_free_r+0xf2>
    9142:	f041 0301 	orr.w	r3, r1, #1
    9146:	e9c7 5504 	strd	r5, r5, [r7, #16]
    914a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    914e:	606b      	str	r3, [r5, #4]
    9150:	5069      	str	r1, [r5, r1]
    9152:	e771      	b.n	9038 <_free_r+0x94>
    9154:	6879      	ldr	r1, [r7, #4]
    9156:	1092      	asrs	r2, r2, #2
    9158:	2401      	movs	r4, #1
    915a:	fa04 f202 	lsl.w	r2, r4, r2
    915e:	430a      	orrs	r2, r1
    9160:	607a      	str	r2, [r7, #4]
    9162:	e7a6      	b.n	90b2 <_free_r+0x10e>
    9164:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    9168:	d806      	bhi.n	9178 <_free_r+0x1d4>
    916a:	0bcb      	lsrs	r3, r1, #15
    916c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    9170:	f103 0277 	add.w	r2, r3, #119	; 0x77
    9174:	00c3      	lsls	r3, r0, #3
    9176:	e78e      	b.n	9096 <_free_r+0xf2>
    9178:	f240 5254 	movw	r2, #1364	; 0x554
    917c:	4293      	cmp	r3, r2
    917e:	d806      	bhi.n	918e <_free_r+0x1ea>
    9180:	0c8b      	lsrs	r3, r1, #18
    9182:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    9186:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    918a:	00c3      	lsls	r3, r0, #3
    918c:	e783      	b.n	9096 <_free_r+0xf2>
    918e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    9192:	227e      	movs	r2, #126	; 0x7e
    9194:	e77f      	b.n	9096 <_free_r+0xf2>
    9196:	f041 0301 	orr.w	r3, r1, #1
    919a:	606b      	str	r3, [r5, #4]
    919c:	f8cc 1000 	str.w	r1, [ip]
    91a0:	e74a      	b.n	9038 <_free_r+0x94>
    91a2:	bf00      	nop
    91a4:	200087a4 	.word	0x200087a4
    91a8:	20008bb0 	.word	0x20008bb0
    91ac:	2000a8b0 	.word	0x2000a8b0

000091b0 <rshift>:
    91b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    91b4:	6904      	ldr	r4, [r0, #16]
    91b6:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    91ba:	dd2f      	ble.n	921c <rshift+0x6c>
    91bc:	f100 0e14 	add.w	lr, r0, #20
    91c0:	114e      	asrs	r6, r1, #5
    91c2:	f011 0c1f 	ands.w	ip, r1, #31
    91c6:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    91ca:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    91ce:	d02b      	beq.n	9228 <rshift+0x78>
    91d0:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    91d4:	3304      	adds	r3, #4
    91d6:	429d      	cmp	r5, r3
    91d8:	fa21 f10c 	lsr.w	r1, r1, ip
    91dc:	f1cc 0820 	rsb	r8, ip, #32
    91e0:	d918      	bls.n	9214 <rshift+0x64>
    91e2:	4677      	mov	r7, lr
    91e4:	681a      	ldr	r2, [r3, #0]
    91e6:	fa02 f208 	lsl.w	r2, r2, r8
    91ea:	430a      	orrs	r2, r1
    91ec:	f847 2b04 	str.w	r2, [r7], #4
    91f0:	f853 1b04 	ldr.w	r1, [r3], #4
    91f4:	429d      	cmp	r5, r3
    91f6:	fa21 f10c 	lsr.w	r1, r1, ip
    91fa:	d8f3      	bhi.n	91e4 <rshift+0x34>
    91fc:	1ba3      	subs	r3, r4, r6
    91fe:	009b      	lsls	r3, r3, #2
    9200:	3b05      	subs	r3, #5
    9202:	089b      	lsrs	r3, r3, #2
    9204:	3301      	adds	r3, #1
    9206:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    920a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    920e:	b1c9      	cbz	r1, 9244 <rshift+0x94>
    9210:	3404      	adds	r4, #4
    9212:	e017      	b.n	9244 <rshift+0x94>
    9214:	6141      	str	r1, [r0, #20]
    9216:	4674      	mov	r4, lr
    9218:	2900      	cmp	r1, #0
    921a:	d1f9      	bne.n	9210 <rshift+0x60>
    921c:	2300      	movs	r3, #0
    921e:	6103      	str	r3, [r0, #16]
    9220:	2300      	movs	r3, #0
    9222:	6143      	str	r3, [r0, #20]
    9224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9228:	429d      	cmp	r5, r3
    922a:	bf88      	it	hi
    922c:	f100 0210 	addhi.w	r2, r0, #16
    9230:	d9f4      	bls.n	921c <rshift+0x6c>
    9232:	f853 1b04 	ldr.w	r1, [r3], #4
    9236:	f842 1f04 	str.w	r1, [r2, #4]!
    923a:	429d      	cmp	r5, r3
    923c:	d8f9      	bhi.n	9232 <rshift+0x82>
    923e:	1ba4      	subs	r4, r4, r6
    9240:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    9244:	eba4 030e 	sub.w	r3, r4, lr
    9248:	109b      	asrs	r3, r3, #2
    924a:	4574      	cmp	r4, lr
    924c:	6103      	str	r3, [r0, #16]
    924e:	d0e7      	beq.n	9220 <rshift+0x70>
    9250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009254 <__gethex>:
    9254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9258:	ed2d 8b02 	vpush	{d8}
    925c:	680c      	ldr	r4, [r1, #0]
    925e:	468b      	mov	fp, r1
    9260:	78a1      	ldrb	r1, [r4, #2]
    9262:	b085      	sub	sp, #20
    9264:	2930      	cmp	r1, #48	; 0x30
    9266:	ee08 0a10 	vmov	s16, r0
    926a:	4692      	mov	sl, r2
    926c:	9302      	str	r3, [sp, #8]
    926e:	f040 81ce 	bne.w	960e <__gethex+0x3ba>
    9272:	f06f 0001 	mvn.w	r0, #1
    9276:	1b00      	subs	r0, r0, r4
    9278:	1ce2      	adds	r2, r4, #3
    927a:	1883      	adds	r3, r0, r2
    927c:	4614      	mov	r4, r2
    927e:	f812 1b01 	ldrb.w	r1, [r2], #1
    9282:	2930      	cmp	r1, #48	; 0x30
    9284:	d0f9      	beq.n	927a <__gethex+0x26>
    9286:	f8df 8300 	ldr.w	r8, [pc, #768]	; 9588 <__gethex+0x334>
    928a:	f818 2001 	ldrb.w	r2, [r8, r1]
    928e:	2a00      	cmp	r2, #0
    9290:	f000 80e5 	beq.w	945e <__gethex+0x20a>
    9294:	7822      	ldrb	r2, [r4, #0]
    9296:	2700      	movs	r7, #0
    9298:	f818 2002 	ldrb.w	r2, [r8, r2]
    929c:	463d      	mov	r5, r7
    929e:	4626      	mov	r6, r4
    92a0:	b12a      	cbz	r2, 92ae <__gethex+0x5a>
    92a2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    92a6:	f818 2002 	ldrb.w	r2, [r8, r2]
    92aa:	2a00      	cmp	r2, #0
    92ac:	d1f9      	bne.n	92a2 <__gethex+0x4e>
    92ae:	49b5      	ldr	r1, [pc, #724]	; (9584 <__gethex+0x330>)
    92b0:	9301      	str	r3, [sp, #4]
    92b2:	2201      	movs	r2, #1
    92b4:	4630      	mov	r0, r6
    92b6:	f7ff fa69 	bl	878c <strncmp>
    92ba:	9b01      	ldr	r3, [sp, #4]
    92bc:	4681      	mov	r9, r0
    92be:	2800      	cmp	r0, #0
    92c0:	d04d      	beq.n	935e <__gethex+0x10a>
    92c2:	2d00      	cmp	r5, #0
    92c4:	d14e      	bne.n	9364 <__gethex+0x110>
    92c6:	7832      	ldrb	r2, [r6, #0]
    92c8:	46a9      	mov	r9, r5
    92ca:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    92ce:	2a50      	cmp	r2, #80	; 0x50
    92d0:	4635      	mov	r5, r6
    92d2:	d050      	beq.n	9376 <__gethex+0x122>
    92d4:	f8cb 6000 	str.w	r6, [fp]
    92d8:	2f00      	cmp	r7, #0
    92da:	d169      	bne.n	93b0 <__gethex+0x15c>
    92dc:	1b2b      	subs	r3, r5, r4
    92de:	3b01      	subs	r3, #1
    92e0:	2b07      	cmp	r3, #7
    92e2:	4639      	mov	r1, r7
    92e4:	dd04      	ble.n	92f0 <__gethex+0x9c>
    92e6:	105b      	asrs	r3, r3, #1
    92e8:	2b07      	cmp	r3, #7
    92ea:	f101 0101 	add.w	r1, r1, #1
    92ee:	dcfa      	bgt.n	92e6 <__gethex+0x92>
    92f0:	ee18 0a10 	vmov	r0, s16
    92f4:	f003 fd4e 	bl	cd94 <_Balloc>
    92f8:	4683      	mov	fp, r0
    92fa:	2800      	cmp	r0, #0
    92fc:	f000 8266 	beq.w	97cc <__gethex+0x578>
    9300:	f100 0614 	add.w	r6, r0, #20
    9304:	42ac      	cmp	r4, r5
    9306:	9601      	str	r6, [sp, #4]
    9308:	f080 81d2 	bcs.w	96b0 <__gethex+0x45c>
    930c:	2700      	movs	r7, #0
    930e:	f8cd 900c 	str.w	r9, [sp, #12]
    9312:	499c      	ldr	r1, [pc, #624]	; (9584 <__gethex+0x330>)
    9314:	46a1      	mov	r9, r4
    9316:	463c      	mov	r4, r7
    9318:	e00c      	b.n	9334 <__gethex+0xe0>
    931a:	2f20      	cmp	r7, #32
    931c:	d019      	beq.n	9352 <__gethex+0xfe>
    931e:	4638      	mov	r0, r7
    9320:	3704      	adds	r7, #4
    9322:	782a      	ldrb	r2, [r5, #0]
    9324:	f818 2002 	ldrb.w	r2, [r8, r2]
    9328:	f002 020f 	and.w	r2, r2, #15
    932c:	4082      	lsls	r2, r0
    932e:	4314      	orrs	r4, r2
    9330:	454d      	cmp	r5, r9
    9332:	d047      	beq.n	93c4 <__gethex+0x170>
    9334:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    9338:	2a2e      	cmp	r2, #46	; 0x2e
    933a:	d1ee      	bne.n	931a <__gethex+0xc6>
    933c:	454d      	cmp	r5, r9
    933e:	d3ec      	bcc.n	931a <__gethex+0xc6>
    9340:	2201      	movs	r2, #1
    9342:	4628      	mov	r0, r5
    9344:	f7ff fa22 	bl	878c <strncmp>
    9348:	498e      	ldr	r1, [pc, #568]	; (9584 <__gethex+0x330>)
    934a:	2800      	cmp	r0, #0
    934c:	d0f0      	beq.n	9330 <__gethex+0xdc>
    934e:	2f20      	cmp	r7, #32
    9350:	d1e5      	bne.n	931e <__gethex+0xca>
    9352:	2000      	movs	r0, #0
    9354:	f846 4b04 	str.w	r4, [r6], #4
    9358:	2704      	movs	r7, #4
    935a:	4604      	mov	r4, r0
    935c:	e7e1      	b.n	9322 <__gethex+0xce>
    935e:	2d00      	cmp	r5, #0
    9360:	f000 8142 	beq.w	95e8 <__gethex+0x394>
    9364:	7832      	ldrb	r2, [r6, #0]
    9366:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    936a:	1bad      	subs	r5, r5, r6
    936c:	2a50      	cmp	r2, #80	; 0x50
    936e:	ea4f 0985 	mov.w	r9, r5, lsl #2
    9372:	4635      	mov	r5, r6
    9374:	d1ae      	bne.n	92d4 <__gethex+0x80>
    9376:	786a      	ldrb	r2, [r5, #1]
    9378:	2a2b      	cmp	r2, #43	; 0x2b
    937a:	f000 8125 	beq.w	95c8 <__gethex+0x374>
    937e:	2a2d      	cmp	r2, #45	; 0x2d
    9380:	f000 80a5 	beq.w	94ce <__gethex+0x27a>
    9384:	1c6e      	adds	r6, r5, #1
    9386:	2000      	movs	r0, #0
    9388:	f818 1002 	ldrb.w	r1, [r8, r2]
    938c:	1e4a      	subs	r2, r1, #1
    938e:	2a18      	cmp	r2, #24
    9390:	f200 809b 	bhi.w	94ca <__gethex+0x276>
    9394:	7872      	ldrb	r2, [r6, #1]
    9396:	f818 2002 	ldrb.w	r2, [r8, r2]
    939a:	3910      	subs	r1, #16
    939c:	3601      	adds	r6, #1
    939e:	2a00      	cmp	r2, #0
    93a0:	d15a      	bne.n	9458 <__gethex+0x204>
    93a2:	b100      	cbz	r0, 93a6 <__gethex+0x152>
    93a4:	4249      	negs	r1, r1
    93a6:	4489      	add	r9, r1
    93a8:	f8cb 6000 	str.w	r6, [fp]
    93ac:	2f00      	cmp	r7, #0
    93ae:	d095      	beq.n	92dc <__gethex+0x88>
    93b0:	2b00      	cmp	r3, #0
    93b2:	bf14      	ite	ne
    93b4:	2500      	movne	r5, #0
    93b6:	2506      	moveq	r5, #6
    93b8:	4628      	mov	r0, r5
    93ba:	b005      	add	sp, #20
    93bc:	ecbd 8b02 	vpop	{d8}
    93c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
    93c8:	4623      	mov	r3, r4
    93ca:	f846 3b04 	str.w	r3, [r6], #4
    93ce:	4618      	mov	r0, r3
    93d0:	9b01      	ldr	r3, [sp, #4]
    93d2:	1af6      	subs	r6, r6, r3
    93d4:	10b6      	asrs	r6, r6, #2
    93d6:	f8cb 6010 	str.w	r6, [fp, #16]
    93da:	f003 fdb5 	bl	cf48 <__hi0bits>
    93de:	0176      	lsls	r6, r6, #5
    93e0:	f8da 4000 	ldr.w	r4, [sl]
    93e4:	1a30      	subs	r0, r6, r0
    93e6:	42a0      	cmp	r0, r4
    93e8:	dc75      	bgt.n	94d6 <__gethex+0x282>
    93ea:	f2c0 80ef 	blt.w	95cc <__gethex+0x378>
    93ee:	2700      	movs	r7, #0
    93f0:	f8da 3008 	ldr.w	r3, [sl, #8]
    93f4:	454b      	cmp	r3, r9
    93f6:	f2c0 8151 	blt.w	969c <__gethex+0x448>
    93fa:	f8da 3004 	ldr.w	r3, [sl, #4]
    93fe:	454b      	cmp	r3, r9
    9400:	dd4a      	ble.n	9498 <__gethex+0x244>
    9402:	eba3 0909 	sub.w	r9, r3, r9
    9406:	454c      	cmp	r4, r9
    9408:	f300 8082 	bgt.w	9510 <__gethex+0x2bc>
    940c:	f8da 200c 	ldr.w	r2, [sl, #12]
    9410:	2a02      	cmp	r2, #2
    9412:	f000 8165 	beq.w	96e0 <__gethex+0x48c>
    9416:	2a03      	cmp	r2, #3
    9418:	f000 8181 	beq.w	971e <__gethex+0x4ca>
    941c:	2a01      	cmp	r2, #1
    941e:	f000 816f 	beq.w	9700 <__gethex+0x4ac>
    9422:	ee18 0a10 	vmov	r0, s16
    9426:	4659      	mov	r1, fp
    9428:	f003 fcda 	bl	cde0 <_Bfree>
    942c:	2550      	movs	r5, #80	; 0x50
    942e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9430:	2300      	movs	r3, #0
    9432:	4628      	mov	r0, r5
    9434:	6013      	str	r3, [r2, #0]
    9436:	b005      	add	sp, #20
    9438:	ecbd 8b02 	vpop	{d8}
    943c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9440:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    9444:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    9448:	f1a2 0110 	sub.w	r1, r2, #16
    944c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    9450:	f818 2002 	ldrb.w	r2, [r8, r2]
    9454:	2a00      	cmp	r2, #0
    9456:	d0a4      	beq.n	93a2 <__gethex+0x14e>
    9458:	2a19      	cmp	r2, #25
    945a:	ddf1      	ble.n	9440 <__gethex+0x1ec>
    945c:	e7a1      	b.n	93a2 <__gethex+0x14e>
    945e:	4949      	ldr	r1, [pc, #292]	; (9584 <__gethex+0x330>)
    9460:	9301      	str	r3, [sp, #4]
    9462:	2201      	movs	r2, #1
    9464:	4620      	mov	r0, r4
    9466:	f7ff f991 	bl	878c <strncmp>
    946a:	9b01      	ldr	r3, [sp, #4]
    946c:	2800      	cmp	r0, #0
    946e:	d16d      	bne.n	954c <__gethex+0x2f8>
    9470:	7861      	ldrb	r1, [r4, #1]
    9472:	f818 2001 	ldrb.w	r2, [r8, r1]
    9476:	1c65      	adds	r5, r4, #1
    9478:	2a00      	cmp	r2, #0
    947a:	d069      	beq.n	9550 <__gethex+0x2fc>
    947c:	2930      	cmp	r1, #48	; 0x30
    947e:	462c      	mov	r4, r5
    9480:	d105      	bne.n	948e <__gethex+0x23a>
    9482:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    9486:	2b30      	cmp	r3, #48	; 0x30
    9488:	d0fb      	beq.n	9482 <__gethex+0x22e>
    948a:	f818 2003 	ldrb.w	r2, [r8, r3]
    948e:	fab2 f782 	clz	r7, r2
    9492:	097f      	lsrs	r7, r7, #5
    9494:	2301      	movs	r3, #1
    9496:	e702      	b.n	929e <__gethex+0x4a>
    9498:	2501      	movs	r5, #1
    949a:	b157      	cbz	r7, 94b2 <__gethex+0x25e>
    949c:	f8da 300c 	ldr.w	r3, [sl, #12]
    94a0:	2b02      	cmp	r3, #2
    94a2:	d05d      	beq.n	9560 <__gethex+0x30c>
    94a4:	2b03      	cmp	r3, #3
    94a6:	d05f      	beq.n	9568 <__gethex+0x314>
    94a8:	2b01      	cmp	r3, #1
    94aa:	f000 8084 	beq.w	95b6 <__gethex+0x362>
    94ae:	f045 0510 	orr.w	r5, r5, #16
    94b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    94b4:	f8c3 b000 	str.w	fp, [r3]
    94b8:	9b02      	ldr	r3, [sp, #8]
    94ba:	4628      	mov	r0, r5
    94bc:	f8c3 9000 	str.w	r9, [r3]
    94c0:	b005      	add	sp, #20
    94c2:	ecbd 8b02 	vpop	{d8}
    94c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    94ca:	462e      	mov	r6, r5
    94cc:	e702      	b.n	92d4 <__gethex+0x80>
    94ce:	2001      	movs	r0, #1
    94d0:	78aa      	ldrb	r2, [r5, #2]
    94d2:	1cae      	adds	r6, r5, #2
    94d4:	e758      	b.n	9388 <__gethex+0x134>
    94d6:	1b06      	subs	r6, r0, r4
    94d8:	4631      	mov	r1, r6
    94da:	4658      	mov	r0, fp
    94dc:	f004 f962 	bl	d7a4 <__any_on>
    94e0:	4607      	mov	r7, r0
    94e2:	b178      	cbz	r0, 9504 <__gethex+0x2b0>
    94e4:	1e72      	subs	r2, r6, #1
    94e6:	1153      	asrs	r3, r2, #5
    94e8:	9901      	ldr	r1, [sp, #4]
    94ea:	2701      	movs	r7, #1
    94ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    94f0:	f002 031f 	and.w	r3, r2, #31
    94f4:	fa07 f303 	lsl.w	r3, r7, r3
    94f8:	420b      	tst	r3, r1
    94fa:	d003      	beq.n	9504 <__gethex+0x2b0>
    94fc:	42ba      	cmp	r2, r7
    94fe:	f300 80e2 	bgt.w	96c6 <__gethex+0x472>
    9502:	2702      	movs	r7, #2
    9504:	4631      	mov	r1, r6
    9506:	4658      	mov	r0, fp
    9508:	44b1      	add	r9, r6
    950a:	f7ff fe51 	bl	91b0 <rshift>
    950e:	e76f      	b.n	93f0 <__gethex+0x19c>
    9510:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
    9514:	2f00      	cmp	r7, #0
    9516:	f040 80ce 	bne.w	96b6 <__gethex+0x462>
    951a:	2d00      	cmp	r5, #0
    951c:	f040 80cd 	bne.w	96ba <__gethex+0x466>
    9520:	116b      	asrs	r3, r5, #5
    9522:	9a01      	ldr	r2, [sp, #4]
    9524:	f005 051f 	and.w	r5, r5, #31
    9528:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    952c:	2301      	movs	r3, #1
    952e:	40ab      	lsls	r3, r5
    9530:	4213      	tst	r3, r2
    9532:	4649      	mov	r1, r9
    9534:	4658      	mov	r0, fp
    9536:	bf18      	it	ne
    9538:	f047 0702 	orrne.w	r7, r7, #2
    953c:	eba4 0409 	sub.w	r4, r4, r9
    9540:	f7ff fe36 	bl	91b0 <rshift>
    9544:	2502      	movs	r5, #2
    9546:	f8da 9004 	ldr.w	r9, [sl, #4]
    954a:	e7a6      	b.n	949a <__gethex+0x246>
    954c:	7821      	ldrb	r1, [r4, #0]
    954e:	4625      	mov	r5, r4
    9550:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    9554:	2950      	cmp	r1, #80	; 0x50
    9556:	f000 80bf 	beq.w	96d8 <__gethex+0x484>
    955a:	f8cb 5000 	str.w	r5, [fp]
    955e:	e727      	b.n	93b0 <__gethex+0x15c>
    9560:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9562:	f1c3 0301 	rsb	r3, r3, #1
    9566:	9311      	str	r3, [sp, #68]	; 0x44
    9568:	9b11      	ldr	r3, [sp, #68]	; 0x44
    956a:	2b00      	cmp	r3, #0
    956c:	d09f      	beq.n	94ae <__gethex+0x25a>
    956e:	f8db 7010 	ldr.w	r7, [fp, #16]
    9572:	f8dd 8004 	ldr.w	r8, [sp, #4]
    9576:	00ba      	lsls	r2, r7, #2
    9578:	4643      	mov	r3, r8
    957a:	9201      	str	r2, [sp, #4]
    957c:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    9580:	2100      	movs	r1, #0
    9582:	e007      	b.n	9594 <__gethex+0x340>
    9584:	20000510 	.word	0x20000510
    9588:	200007e8 	.word	0x200007e8
    958c:	4298      	cmp	r0, r3
    958e:	f843 1c04 	str.w	r1, [r3, #-4]
    9592:	d93f      	bls.n	9614 <__gethex+0x3c0>
    9594:	461e      	mov	r6, r3
    9596:	f853 2b04 	ldr.w	r2, [r3], #4
    959a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    959e:	d0f5      	beq.n	958c <__gethex+0x338>
    95a0:	3201      	adds	r2, #1
    95a2:	2d02      	cmp	r5, #2
    95a4:	6032      	str	r2, [r6, #0]
    95a6:	f000 80bf 	beq.w	9728 <__gethex+0x4d4>
    95aa:	f014 041f 	ands.w	r4, r4, #31
    95ae:	f040 80e7 	bne.w	9780 <__gethex+0x52c>
    95b2:	2521      	movs	r5, #33	; 0x21
    95b4:	e77d      	b.n	94b2 <__gethex+0x25e>
    95b6:	07ba      	lsls	r2, r7, #30
    95b8:	f57f af79 	bpl.w	94ae <__gethex+0x25a>
    95bc:	9b01      	ldr	r3, [sp, #4]
    95be:	681b      	ldr	r3, [r3, #0]
    95c0:	431f      	orrs	r7, r3
    95c2:	07fb      	lsls	r3, r7, #31
    95c4:	d4d3      	bmi.n	956e <__gethex+0x31a>
    95c6:	e772      	b.n	94ae <__gethex+0x25a>
    95c8:	2000      	movs	r0, #0
    95ca:	e781      	b.n	94d0 <__gethex+0x27c>
    95cc:	1a22      	subs	r2, r4, r0
    95ce:	4659      	mov	r1, fp
    95d0:	ee18 0a10 	vmov	r0, s16
    95d4:	eba9 0902 	sub.w	r9, r9, r2
    95d8:	f003 fe42 	bl	d260 <__lshift>
    95dc:	f100 0314 	add.w	r3, r0, #20
    95e0:	4683      	mov	fp, r0
    95e2:	9301      	str	r3, [sp, #4]
    95e4:	2700      	movs	r7, #0
    95e6:	e703      	b.n	93f0 <__gethex+0x19c>
    95e8:	7872      	ldrb	r2, [r6, #1]
    95ea:	f818 0002 	ldrb.w	r0, [r8, r2]
    95ee:	1c71      	adds	r1, r6, #1
    95f0:	2800      	cmp	r0, #0
    95f2:	f000 80a0 	beq.w	9736 <__gethex+0x4e2>
    95f6:	460d      	mov	r5, r1
    95f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    95fc:	f818 0002 	ldrb.w	r0, [r8, r2]
    9600:	2800      	cmp	r0, #0
    9602:	d1f8      	bne.n	95f6 <__gethex+0x3a2>
    9604:	1b75      	subs	r5, r6, r5
    9606:	ea4f 0985 	mov.w	r9, r5, lsl #2
    960a:	460e      	mov	r6, r1
    960c:	e65d      	b.n	92ca <__gethex+0x76>
    960e:	3402      	adds	r4, #2
    9610:	2300      	movs	r3, #0
    9612:	e638      	b.n	9286 <__gethex+0x32>
    9614:	f8db 3008 	ldr.w	r3, [fp, #8]
    9618:	429f      	cmp	r7, r3
    961a:	f280 808e 	bge.w	973a <__gethex+0x4e6>
    961e:	463b      	mov	r3, r7
    9620:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    9624:	2101      	movs	r1, #1
    9626:	3301      	adds	r3, #1
    9628:	2d02      	cmp	r5, #2
    962a:	f8cb 3010 	str.w	r3, [fp, #16]
    962e:	6151      	str	r1, [r2, #20]
    9630:	d07a      	beq.n	9728 <__gethex+0x4d4>
    9632:	429f      	cmp	r7, r3
    9634:	dab9      	bge.n	95aa <__gethex+0x356>
    9636:	2b00      	cmp	r3, #0
    9638:	f340 809b 	ble.w	9772 <__gethex+0x51e>
    963c:	f8db 2014 	ldr.w	r2, [fp, #20]
    9640:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    9644:	f10b 0018 	add.w	r0, fp, #24
    9648:	4283      	cmp	r3, r0
    964a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    964e:	f240 80b1 	bls.w	97b4 <__gethex+0x560>
    9652:	4644      	mov	r4, r8
    9654:	6801      	ldr	r1, [r0, #0]
    9656:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    965a:	f844 2b04 	str.w	r2, [r4], #4
    965e:	f850 2b04 	ldr.w	r2, [r0], #4
    9662:	4283      	cmp	r3, r0
    9664:	ea4f 0252 	mov.w	r2, r2, lsr #1
    9668:	d8f4      	bhi.n	9654 <__gethex+0x400>
    966a:	eba3 030b 	sub.w	r3, r3, fp
    966e:	3b19      	subs	r3, #25
    9670:	089b      	lsrs	r3, r3, #2
    9672:	3301      	adds	r3, #1
    9674:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    9678:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    967c:	2a00      	cmp	r2, #0
    967e:	f040 809d 	bne.w	97bc <__gethex+0x568>
    9682:	eba3 0208 	sub.w	r2, r3, r8
    9686:	1092      	asrs	r2, r2, #2
    9688:	4543      	cmp	r3, r8
    968a:	f8cb 2010 	str.w	r2, [fp, #16]
    968e:	d073      	beq.n	9778 <__gethex+0x524>
    9690:	f8da 3008 	ldr.w	r3, [sl, #8]
    9694:	f109 0901 	add.w	r9, r9, #1
    9698:	454b      	cmp	r3, r9
    969a:	da8a      	bge.n	95b2 <__gethex+0x35e>
    969c:	ee18 0a10 	vmov	r0, s16
    96a0:	4659      	mov	r1, fp
    96a2:	f003 fb9d 	bl	cde0 <_Bfree>
    96a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    96a8:	2300      	movs	r3, #0
    96aa:	6013      	str	r3, [r2, #0]
    96ac:	25a3      	movs	r5, #163	; 0xa3
    96ae:	e683      	b.n	93b8 <__gethex+0x164>
    96b0:	9e01      	ldr	r6, [sp, #4]
    96b2:	2300      	movs	r3, #0
    96b4:	e689      	b.n	93ca <__gethex+0x176>
    96b6:	2701      	movs	r7, #1
    96b8:	e732      	b.n	9520 <__gethex+0x2cc>
    96ba:	4629      	mov	r1, r5
    96bc:	4658      	mov	r0, fp
    96be:	f004 f871 	bl	d7a4 <__any_on>
    96c2:	4607      	mov	r7, r0
    96c4:	e72c      	b.n	9520 <__gethex+0x2cc>
    96c6:	1eb1      	subs	r1, r6, #2
    96c8:	4658      	mov	r0, fp
    96ca:	f004 f86b 	bl	d7a4 <__any_on>
    96ce:	2800      	cmp	r0, #0
    96d0:	f43f af17 	beq.w	9502 <__gethex+0x2ae>
    96d4:	2703      	movs	r7, #3
    96d6:	e715      	b.n	9504 <__gethex+0x2b0>
    96d8:	f04f 0900 	mov.w	r9, #0
    96dc:	2701      	movs	r7, #1
    96de:	e64a      	b.n	9376 <__gethex+0x122>
    96e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    96e2:	2a00      	cmp	r2, #0
    96e4:	f47f ae9d 	bne.w	9422 <__gethex+0x1ce>
    96e8:	9902      	ldr	r1, [sp, #8]
    96ea:	600b      	str	r3, [r1, #0]
    96ec:	9b01      	ldr	r3, [sp, #4]
    96ee:	2201      	movs	r2, #1
    96f0:	f8cb 2010 	str.w	r2, [fp, #16]
    96f4:	601a      	str	r2, [r3, #0]
    96f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    96f8:	2562      	movs	r5, #98	; 0x62
    96fa:	f8c3 b000 	str.w	fp, [r3]
    96fe:	e65b      	b.n	93b8 <__gethex+0x164>
    9700:	454c      	cmp	r4, r9
    9702:	f47f ae8e 	bne.w	9422 <__gethex+0x1ce>
    9706:	2c01      	cmp	r4, #1
    9708:	d0ee      	beq.n	96e8 <__gethex+0x494>
    970a:	1e61      	subs	r1, r4, #1
    970c:	4658      	mov	r0, fp
    970e:	f004 f849 	bl	d7a4 <__any_on>
    9712:	2800      	cmp	r0, #0
    9714:	f43f ae85 	beq.w	9422 <__gethex+0x1ce>
    9718:	f8da 3004 	ldr.w	r3, [sl, #4]
    971c:	e7e4      	b.n	96e8 <__gethex+0x494>
    971e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9720:	2a00      	cmp	r2, #0
    9722:	f43f ae7e 	beq.w	9422 <__gethex+0x1ce>
    9726:	e7df      	b.n	96e8 <__gethex+0x494>
    9728:	f8da 3000 	ldr.w	r3, [sl]
    972c:	3b01      	subs	r3, #1
    972e:	42a3      	cmp	r3, r4
    9730:	d034      	beq.n	979c <__gethex+0x548>
    9732:	2522      	movs	r5, #34	; 0x22
    9734:	e6bd      	b.n	94b2 <__gethex+0x25e>
    9736:	460e      	mov	r6, r1
    9738:	e5c7      	b.n	92ca <__gethex+0x76>
    973a:	f8db 1004 	ldr.w	r1, [fp, #4]
    973e:	ee18 0a10 	vmov	r0, s16
    9742:	3101      	adds	r1, #1
    9744:	f003 fb26 	bl	cd94 <_Balloc>
    9748:	4606      	mov	r6, r0
    974a:	b3c8      	cbz	r0, 97c0 <__gethex+0x56c>
    974c:	f8db 3010 	ldr.w	r3, [fp, #16]
    9750:	3302      	adds	r3, #2
    9752:	009a      	lsls	r2, r3, #2
    9754:	f10b 010c 	add.w	r1, fp, #12
    9758:	300c      	adds	r0, #12
    975a:	f7fb fa17 	bl	4b8c <memcpy>
    975e:	4659      	mov	r1, fp
    9760:	ee18 0a10 	vmov	r0, s16
    9764:	f003 fb3c 	bl	cde0 <_Bfree>
    9768:	f106 0814 	add.w	r8, r6, #20
    976c:	6933      	ldr	r3, [r6, #16]
    976e:	46b3      	mov	fp, r6
    9770:	e756      	b.n	9620 <__gethex+0x3cc>
    9772:	2300      	movs	r3, #0
    9774:	f8cb 3010 	str.w	r3, [fp, #16]
    9778:	2300      	movs	r3, #0
    977a:	f8cb 3014 	str.w	r3, [fp, #20]
    977e:	e787      	b.n	9690 <__gethex+0x43c>
    9780:	9b01      	ldr	r3, [sp, #4]
    9782:	4443      	add	r3, r8
    9784:	f1c4 0420 	rsb	r4, r4, #32
    9788:	f853 0c04 	ldr.w	r0, [r3, #-4]
    978c:	f003 fbdc 	bl	cf48 <__hi0bits>
    9790:	42a0      	cmp	r0, r4
    9792:	f6bf af0e 	bge.w	95b2 <__gethex+0x35e>
    9796:	f8db 3010 	ldr.w	r3, [fp, #16]
    979a:	e74c      	b.n	9636 <__gethex+0x3e2>
    979c:	1163      	asrs	r3, r4, #5
    979e:	f004 041f 	and.w	r4, r4, #31
    97a2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    97a6:	2301      	movs	r3, #1
    97a8:	40a3      	lsls	r3, r4
    97aa:	4213      	tst	r3, r2
    97ac:	bf0c      	ite	eq
    97ae:	2522      	moveq	r5, #34	; 0x22
    97b0:	2521      	movne	r5, #33	; 0x21
    97b2:	e67e      	b.n	94b2 <__gethex+0x25e>
    97b4:	f8c8 2000 	str.w	r2, [r8]
    97b8:	4643      	mov	r3, r8
    97ba:	b16a      	cbz	r2, 97d8 <__gethex+0x584>
    97bc:	3304      	adds	r3, #4
    97be:	e760      	b.n	9682 <__gethex+0x42e>
    97c0:	4b07      	ldr	r3, [pc, #28]	; (97e0 <__gethex+0x58c>)
    97c2:	4808      	ldr	r0, [pc, #32]	; (97e4 <__gethex+0x590>)
    97c4:	4632      	mov	r2, r6
    97c6:	2184      	movs	r1, #132	; 0x84
    97c8:	f004 fd1a 	bl	e200 <__assert_func>
    97cc:	4b04      	ldr	r3, [pc, #16]	; (97e0 <__gethex+0x58c>)
    97ce:	4805      	ldr	r0, [pc, #20]	; (97e4 <__gethex+0x590>)
    97d0:	465a      	mov	r2, fp
    97d2:	21e4      	movs	r1, #228	; 0xe4
    97d4:	f004 fd14 	bl	e200 <__assert_func>
    97d8:	f8cb 2010 	str.w	r2, [fp, #16]
    97dc:	e7cc      	b.n	9778 <__gethex+0x524>
    97de:	bf00      	nop
    97e0:	20000768 	.word	0x20000768
    97e4:	2000077c 	.word	0x2000077c

000097e8 <__match>:
    97e8:	b410      	push	{r4}
    97ea:	6804      	ldr	r4, [r0, #0]
    97ec:	e009      	b.n	9802 <__match+0x1a>
    97ee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    97f2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    97f6:	f1bc 0f19 	cmp.w	ip, #25
    97fa:	bf98      	it	ls
    97fc:	3320      	addls	r3, #32
    97fe:	4293      	cmp	r3, r2
    9800:	d109      	bne.n	9816 <__match+0x2e>
    9802:	f811 2b01 	ldrb.w	r2, [r1], #1
    9806:	2a00      	cmp	r2, #0
    9808:	d1f1      	bne.n	97ee <__match+0x6>
    980a:	3401      	adds	r4, #1
    980c:	6004      	str	r4, [r0, #0]
    980e:	2001      	movs	r0, #1
    9810:	f85d 4b04 	ldr.w	r4, [sp], #4
    9814:	4770      	bx	lr
    9816:	2000      	movs	r0, #0
    9818:	f85d 4b04 	ldr.w	r4, [sp], #4
    981c:	4770      	bx	lr
    981e:	bf00      	nop

00009820 <__hexnan>:
    9820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9824:	6809      	ldr	r1, [r1, #0]
    9826:	b085      	sub	sp, #20
    9828:	114b      	asrs	r3, r1, #5
    982a:	f011 011f 	ands.w	r1, r1, #31
    982e:	9002      	str	r0, [sp, #8]
    9830:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9834:	9103      	str	r1, [sp, #12]
    9836:	f040 808f 	bne.w	9958 <__hexnan+0x138>
    983a:	1f1d      	subs	r5, r3, #4
    983c:	9301      	str	r3, [sp, #4]
    983e:	9b02      	ldr	r3, [sp, #8]
    9840:	9901      	ldr	r1, [sp, #4]
    9842:	681c      	ldr	r4, [r3, #0]
    9844:	2300      	movs	r3, #0
    9846:	f841 3c04 	str.w	r3, [r1, #-4]
    984a:	7861      	ldrb	r1, [r4, #1]
    984c:	3401      	adds	r4, #1
    984e:	2900      	cmp	r1, #0
    9850:	f000 8098 	beq.w	9984 <__hexnan+0x164>
    9854:	f8df 9174 	ldr.w	r9, [pc, #372]	; 99cc <__hexnan+0x1ac>
    9858:	46a8      	mov	r8, r5
    985a:	46ac      	mov	ip, r5
    985c:	469a      	mov	sl, r3
    985e:	461e      	mov	r6, r3
    9860:	e00e      	b.n	9880 <__hexnan+0x60>
    9862:	2920      	cmp	r1, #32
    9864:	f200 808c 	bhi.w	9980 <__hexnan+0x160>
    9868:	4556      	cmp	r6, sl
    986a:	dd06      	ble.n	987a <__hexnan+0x5a>
    986c:	45c4      	cmp	ip, r8
    986e:	d201      	bcs.n	9874 <__hexnan+0x54>
    9870:	2b07      	cmp	r3, #7
    9872:	dd5b      	ble.n	992c <__hexnan+0x10c>
    9874:	4562      	cmp	r2, ip
    9876:	d351      	bcc.n	991c <__hexnan+0xfc>
    9878:	2308      	movs	r3, #8
    987a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    987e:	b1a1      	cbz	r1, 98aa <__hexnan+0x8a>
    9880:	f819 0001 	ldrb.w	r0, [r9, r1]
    9884:	2800      	cmp	r0, #0
    9886:	d0ec      	beq.n	9862 <__hexnan+0x42>
    9888:	3301      	adds	r3, #1
    988a:	2b08      	cmp	r3, #8
    988c:	f106 0601 	add.w	r6, r6, #1
    9890:	dc3a      	bgt.n	9908 <__hexnan+0xe8>
    9892:	f8dc 1000 	ldr.w	r1, [ip]
    9896:	0109      	lsls	r1, r1, #4
    9898:	f000 000f 	and.w	r0, r0, #15
    989c:	4308      	orrs	r0, r1
    989e:	f8cc 0000 	str.w	r0, [ip]
    98a2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    98a6:	2900      	cmp	r1, #0
    98a8:	d1ea      	bne.n	9880 <__hexnan+0x60>
    98aa:	2e00      	cmp	r6, #0
    98ac:	d06a      	beq.n	9984 <__hexnan+0x164>
    98ae:	45c4      	cmp	ip, r8
    98b0:	d201      	bcs.n	98b6 <__hexnan+0x96>
    98b2:	2b07      	cmp	r3, #7
    98b4:	dd74      	ble.n	99a0 <__hexnan+0x180>
    98b6:	4562      	cmp	r2, ip
    98b8:	d252      	bcs.n	9960 <__hexnan+0x140>
    98ba:	1f11      	subs	r1, r2, #4
    98bc:	4663      	mov	r3, ip
    98be:	f853 0b04 	ldr.w	r0, [r3], #4
    98c2:	f841 0f04 	str.w	r0, [r1, #4]!
    98c6:	42ab      	cmp	r3, r5
    98c8:	d9f9      	bls.n	98be <__hexnan+0x9e>
    98ca:	eba5 030c 	sub.w	r3, r5, ip
    98ce:	f023 0303 	bic.w	r3, r3, #3
    98d2:	1c69      	adds	r1, r5, #1
    98d4:	3304      	adds	r3, #4
    98d6:	f10c 0c01 	add.w	ip, ip, #1
    98da:	4561      	cmp	r1, ip
    98dc:	bf38      	it	cc
    98de:	2304      	movcc	r3, #4
    98e0:	4413      	add	r3, r2
    98e2:	2100      	movs	r1, #0
    98e4:	f843 1b04 	str.w	r1, [r3], #4
    98e8:	42ab      	cmp	r3, r5
    98ea:	d9fb      	bls.n	98e4 <__hexnan+0xc4>
    98ec:	9b01      	ldr	r3, [sp, #4]
    98ee:	f853 3c04 	ldr.w	r3, [r3, #-4]
    98f2:	b92b      	cbnz	r3, 9900 <__hexnan+0xe0>
    98f4:	42aa      	cmp	r2, r5
    98f6:	d049      	beq.n	998c <__hexnan+0x16c>
    98f8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    98fc:	2b00      	cmp	r3, #0
    98fe:	d0f9      	beq.n	98f4 <__hexnan+0xd4>
    9900:	2005      	movs	r0, #5
    9902:	b005      	add	sp, #20
    9904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9908:	4562      	cmp	r2, ip
    990a:	d2b6      	bcs.n	987a <__hexnan+0x5a>
    990c:	2300      	movs	r3, #0
    990e:	f84c 3c04 	str.w	r3, [ip, #-4]
    9912:	4619      	mov	r1, r3
    9914:	f1ac 0c04 	sub.w	ip, ip, #4
    9918:	2301      	movs	r3, #1
    991a:	e7bd      	b.n	9898 <__hexnan+0x78>
    991c:	2300      	movs	r3, #0
    991e:	f1ac 0804 	sub.w	r8, ip, #4
    9922:	f84c 3c04 	str.w	r3, [ip, #-4]
    9926:	46b2      	mov	sl, r6
    9928:	46c4      	mov	ip, r8
    992a:	e7a6      	b.n	987a <__hexnan+0x5a>
    992c:	f1c3 0108 	rsb	r1, r3, #8
    9930:	f8dc 3000 	ldr.w	r3, [ip]
    9934:	0089      	lsls	r1, r1, #2
    9936:	f1c1 0e20 	rsb	lr, r1, #32
    993a:	4660      	mov	r0, ip
    993c:	469b      	mov	fp, r3
    993e:	6847      	ldr	r7, [r0, #4]
    9940:	fa07 f30e 	lsl.w	r3, r7, lr
    9944:	ea43 030b 	orr.w	r3, r3, fp
    9948:	fa27 fb01 	lsr.w	fp, r7, r1
    994c:	6003      	str	r3, [r0, #0]
    994e:	f840 bf04 	str.w	fp, [r0, #4]!
    9952:	4540      	cmp	r0, r8
    9954:	d3f3      	bcc.n	993e <__hexnan+0x11e>
    9956:	e78d      	b.n	9874 <__hexnan+0x54>
    9958:	1d19      	adds	r1, r3, #4
    995a:	9101      	str	r1, [sp, #4]
    995c:	461d      	mov	r5, r3
    995e:	e76e      	b.n	983e <__hexnan+0x1e>
    9960:	9b03      	ldr	r3, [sp, #12]
    9962:	2b00      	cmp	r3, #0
    9964:	d0c2      	beq.n	98ec <__hexnan+0xcc>
    9966:	9b03      	ldr	r3, [sp, #12]
    9968:	9801      	ldr	r0, [sp, #4]
    996a:	f1c3 0120 	rsb	r1, r3, #32
    996e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9972:	40cb      	lsrs	r3, r1
    9974:	f850 1c04 	ldr.w	r1, [r0, #-4]
    9978:	400b      	ands	r3, r1
    997a:	f840 3c04 	str.w	r3, [r0, #-4]
    997e:	e7b8      	b.n	98f2 <__hexnan+0xd2>
    9980:	2929      	cmp	r1, #41	; 0x29
    9982:	d009      	beq.n	9998 <__hexnan+0x178>
    9984:	2004      	movs	r0, #4
    9986:	b005      	add	sp, #20
    9988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    998c:	2301      	movs	r3, #1
    998e:	2005      	movs	r0, #5
    9990:	602b      	str	r3, [r5, #0]
    9992:	b005      	add	sp, #20
    9994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9998:	9902      	ldr	r1, [sp, #8]
    999a:	3401      	adds	r4, #1
    999c:	600c      	str	r4, [r1, #0]
    999e:	e784      	b.n	98aa <__hexnan+0x8a>
    99a0:	f8dc 1000 	ldr.w	r1, [ip]
    99a4:	f1c3 0308 	rsb	r3, r3, #8
    99a8:	009b      	lsls	r3, r3, #2
    99aa:	f1c3 0720 	rsb	r7, r3, #32
    99ae:	4664      	mov	r4, ip
    99b0:	4608      	mov	r0, r1
    99b2:	6866      	ldr	r6, [r4, #4]
    99b4:	fa06 f107 	lsl.w	r1, r6, r7
    99b8:	4301      	orrs	r1, r0
    99ba:	fa26 f003 	lsr.w	r0, r6, r3
    99be:	6021      	str	r1, [r4, #0]
    99c0:	f844 0f04 	str.w	r0, [r4, #4]!
    99c4:	4544      	cmp	r4, r8
    99c6:	d3f4      	bcc.n	99b2 <__hexnan+0x192>
    99c8:	e775      	b.n	98b6 <__hexnan+0x96>
    99ca:	bf00      	nop
    99cc:	200007e8 	.word	0x200007e8

000099d0 <__ascii_mbtowc>:
    99d0:	b082      	sub	sp, #8
    99d2:	b149      	cbz	r1, 99e8 <__ascii_mbtowc+0x18>
    99d4:	b15a      	cbz	r2, 99ee <__ascii_mbtowc+0x1e>
    99d6:	b16b      	cbz	r3, 99f4 <__ascii_mbtowc+0x24>
    99d8:	7813      	ldrb	r3, [r2, #0]
    99da:	600b      	str	r3, [r1, #0]
    99dc:	7812      	ldrb	r2, [r2, #0]
    99de:	1e10      	subs	r0, r2, #0
    99e0:	bf18      	it	ne
    99e2:	2001      	movne	r0, #1
    99e4:	b002      	add	sp, #8
    99e6:	4770      	bx	lr
    99e8:	a901      	add	r1, sp, #4
    99ea:	2a00      	cmp	r2, #0
    99ec:	d1f3      	bne.n	99d6 <__ascii_mbtowc+0x6>
    99ee:	4610      	mov	r0, r2
    99f0:	b002      	add	sp, #8
    99f2:	4770      	bx	lr
    99f4:	f06f 0001 	mvn.w	r0, #1
    99f8:	e7f4      	b.n	99e4 <__ascii_mbtowc+0x14>
    99fa:	bf00      	nop
    99fc:	0000      	movs	r0, r0
	...

00009a00 <_svfprintf_r>:
    9a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a04:	ed2d 8b08 	vpush	{d8-d11}
    9a08:	b0d1      	sub	sp, #324	; 0x144
    9a0a:	460c      	mov	r4, r1
    9a0c:	ee0b 1a10 	vmov	s22, r1
    9a10:	4690      	mov	r8, r2
    9a12:	9308      	str	r3, [sp, #32]
    9a14:	4683      	mov	fp, r0
    9a16:	f004 f963 	bl	dce0 <_localeconv_r>
    9a1a:	6803      	ldr	r3, [r0, #0]
    9a1c:	9312      	str	r3, [sp, #72]	; 0x48
    9a1e:	4618      	mov	r0, r3
    9a20:	f7ff f9ae 	bl	8d80 <strlen>
    9a24:	af20      	add	r7, sp, #128	; 0x80
    9a26:	9010      	str	r0, [sp, #64]	; 0x40
    9a28:	2208      	movs	r2, #8
    9a2a:	2100      	movs	r1, #0
    9a2c:	4638      	mov	r0, r7
    9a2e:	f7fe fe5b 	bl	86e8 <memset>
    9a32:	89a3      	ldrh	r3, [r4, #12]
    9a34:	061b      	lsls	r3, r3, #24
    9a36:	d503      	bpl.n	9a40 <_svfprintf_r+0x40>
    9a38:	6923      	ldr	r3, [r4, #16]
    9a3a:	2b00      	cmp	r3, #0
    9a3c:	f000 8755 	beq.w	a8ea <_svfprintf_r+0xeea>
    9a40:	2300      	movs	r3, #0
    9a42:	ed9f 8b83 	vldr	d8, [pc, #524]	; 9c50 <_svfprintf_r+0x250>
    9a46:	ed9f 9b84 	vldr	d9, [pc, #528]	; 9c58 <_svfprintf_r+0x258>
    9a4a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    9a4e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    9a52:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    9a56:	aa27      	add	r2, sp, #156	; 0x9c
    9a58:	930e      	str	r3, [sp, #56]	; 0x38
    9a5a:	9224      	str	r2, [sp, #144]	; 0x90
    9a5c:	4692      	mov	sl, r2
    9a5e:	9311      	str	r3, [sp, #68]	; 0x44
    9a60:	9304      	str	r3, [sp, #16]
    9a62:	4644      	mov	r4, r8
    9a64:	46a1      	mov	r9, r4
    9a66:	4b7e      	ldr	r3, [pc, #504]	; (9c60 <_svfprintf_r+0x260>)
    9a68:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    9a6c:	f7fe ff06 	bl	887c <__locale_mb_cur_max>
    9a70:	464a      	mov	r2, r9
    9a72:	4603      	mov	r3, r0
    9a74:	a91c      	add	r1, sp, #112	; 0x70
    9a76:	9700      	str	r7, [sp, #0]
    9a78:	4658      	mov	r0, fp
    9a7a:	47a8      	blx	r5
    9a7c:	2800      	cmp	r0, #0
    9a7e:	f000 80b0 	beq.w	9be2 <_svfprintf_r+0x1e2>
    9a82:	f2c0 80a6 	blt.w	9bd2 <_svfprintf_r+0x1d2>
    9a86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9a88:	2a25      	cmp	r2, #37	; 0x25
    9a8a:	4603      	mov	r3, r0
    9a8c:	d001      	beq.n	9a92 <_svfprintf_r+0x92>
    9a8e:	4499      	add	r9, r3
    9a90:	e7e9      	b.n	9a66 <_svfprintf_r+0x66>
    9a92:	ebb9 0504 	subs.w	r5, r9, r4
    9a96:	4606      	mov	r6, r0
    9a98:	f040 80a7 	bne.w	9bea <_svfprintf_r+0x1ea>
    9a9c:	2300      	movs	r3, #0
    9a9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9aa2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    9aa6:	4698      	mov	r8, r3
    9aa8:	9306      	str	r3, [sp, #24]
    9aaa:	f109 0901 	add.w	r9, r9, #1
    9aae:	f899 3000 	ldrb.w	r3, [r9]
    9ab2:	9203      	str	r2, [sp, #12]
    9ab4:	252b      	movs	r5, #43	; 0x2b
    9ab6:	2620      	movs	r6, #32
    9ab8:	f109 0901 	add.w	r9, r9, #1
    9abc:	f1a3 0220 	sub.w	r2, r3, #32
    9ac0:	2a5a      	cmp	r2, #90	; 0x5a
    9ac2:	f200 80cf 	bhi.w	9c64 <_svfprintf_r+0x264>
    9ac6:	e8df f012 	tbh	[pc, r2, lsl #1]
    9aca:	02e8      	.short	0x02e8
    9acc:	00cd00cd 	.word	0x00cd00cd
    9ad0:	00cd02e3 	.word	0x00cd02e3
    9ad4:	00cd00cd 	.word	0x00cd00cd
    9ad8:	00cd006a 	.word	0x00cd006a
    9adc:	020500cd 	.word	0x020500cd
    9ae0:	00cd0284 	.word	0x00cd0284
    9ae4:	02c90210 	.word	0x02c90210
    9ae8:	02bd00cd 	.word	0x02bd00cd
    9aec:	005b005b 	.word	0x005b005b
    9af0:	005b005b 	.word	0x005b005b
    9af4:	005b005b 	.word	0x005b005b
    9af8:	005b005b 	.word	0x005b005b
    9afc:	00cd005b 	.word	0x00cd005b
    9b00:	00cd00cd 	.word	0x00cd00cd
    9b04:	00cd00cd 	.word	0x00cd00cd
    9b08:	00cd00cd 	.word	0x00cd00cd
    9b0c:	00cd0153 	.word	0x00cd0153
    9b10:	021a0183 	.word	0x021a0183
    9b14:	01530153 	.word	0x01530153
    9b18:	00cd0153 	.word	0x00cd0153
    9b1c:	00cd00cd 	.word	0x00cd00cd
    9b20:	021500cd 	.word	0x021500cd
    9b24:	00cd00cd 	.word	0x00cd00cd
    9b28:	00cd0296 	.word	0x00cd0296
    9b2c:	00cd00cd 	.word	0x00cd00cd
    9b30:	00cd01ab 	.word	0x00cd01ab
    9b34:	00cd02aa 	.word	0x00cd02aa
    9b38:	06e300cd 	.word	0x06e300cd
    9b3c:	00cd00cd 	.word	0x00cd00cd
    9b40:	00cd00cd 	.word	0x00cd00cd
    9b44:	00cd00cd 	.word	0x00cd00cd
    9b48:	00cd00cd 	.word	0x00cd00cd
    9b4c:	00cd0153 	.word	0x00cd0153
    9b50:	01de0183 	.word	0x01de0183
    9b54:	01530153 	.word	0x01530153
    9b58:	02770153 	.word	0x02770153
    9b5c:	007f01de 	.word	0x007f01de
    9b60:	028900cd 	.word	0x028900cd
    9b64:	025f00cd 	.word	0x025f00cd
    9b68:	022f06e0 	.word	0x022f06e0
    9b6c:	00cd007f 	.word	0x00cd007f
    9b70:	007c01ab 	.word	0x007c01ab
    9b74:	00cd06b8 	.word	0x00cd06b8
    9b78:	06bd00cd 	.word	0x06bd00cd
    9b7c:	007c00cd 	.word	0x007c00cd
    9b80:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    9b84:	2100      	movs	r1, #0
    9b86:	f819 3b01 	ldrb.w	r3, [r9], #1
    9b8a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    9b8e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    9b92:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    9b96:	2a09      	cmp	r2, #9
    9b98:	d9f5      	bls.n	9b86 <_svfprintf_r+0x186>
    9b9a:	9106      	str	r1, [sp, #24]
    9b9c:	e78e      	b.n	9abc <_svfprintf_r+0xbc>
    9b9e:	4658      	mov	r0, fp
    9ba0:	f004 f89e 	bl	dce0 <_localeconv_r>
    9ba4:	6843      	ldr	r3, [r0, #4]
    9ba6:	9315      	str	r3, [sp, #84]	; 0x54
    9ba8:	4618      	mov	r0, r3
    9baa:	f7ff f8e9 	bl	8d80 <strlen>
    9bae:	9016      	str	r0, [sp, #88]	; 0x58
    9bb0:	4658      	mov	r0, fp
    9bb2:	f004 f895 	bl	dce0 <_localeconv_r>
    9bb6:	6883      	ldr	r3, [r0, #8]
    9bb8:	9313      	str	r3, [sp, #76]	; 0x4c
    9bba:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9bbc:	2b00      	cmp	r3, #0
    9bbe:	f040 862d 	bne.w	a81c <_svfprintf_r+0xe1c>
    9bc2:	f899 3000 	ldrb.w	r3, [r9]
    9bc6:	e777      	b.n	9ab8 <_svfprintf_r+0xb8>
    9bc8:	f899 3000 	ldrb.w	r3, [r9]
    9bcc:	f048 0820 	orr.w	r8, r8, #32
    9bd0:	e772      	b.n	9ab8 <_svfprintf_r+0xb8>
    9bd2:	2208      	movs	r2, #8
    9bd4:	2100      	movs	r1, #0
    9bd6:	4638      	mov	r0, r7
    9bd8:	f7fe fd86 	bl	86e8 <memset>
    9bdc:	2301      	movs	r3, #1
    9bde:	4499      	add	r9, r3
    9be0:	e741      	b.n	9a66 <_svfprintf_r+0x66>
    9be2:	ebb9 0504 	subs.w	r5, r9, r4
    9be6:	4606      	mov	r6, r0
    9be8:	d011      	beq.n	9c0e <_svfprintf_r+0x20e>
    9bea:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9bec:	442b      	add	r3, r5
    9bee:	9326      	str	r3, [sp, #152]	; 0x98
    9bf0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9bf2:	3301      	adds	r3, #1
    9bf4:	2b07      	cmp	r3, #7
    9bf6:	e9ca 4500 	strd	r4, r5, [sl]
    9bfa:	9325      	str	r3, [sp, #148]	; 0x94
    9bfc:	dc1c      	bgt.n	9c38 <_svfprintf_r+0x238>
    9bfe:	f10a 0a08 	add.w	sl, sl, #8
    9c02:	9b04      	ldr	r3, [sp, #16]
    9c04:	442b      	add	r3, r5
    9c06:	9304      	str	r3, [sp, #16]
    9c08:	2e00      	cmp	r6, #0
    9c0a:	f47f af47 	bne.w	9a9c <_svfprintf_r+0x9c>
    9c0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9c10:	2b00      	cmp	r3, #0
    9c12:	f041 820b 	bne.w	b02c <_svfprintf_r+0x162c>
    9c16:	ee1b 3a10 	vmov	r3, s22
    9c1a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    9c1e:	f013 0f40 	tst.w	r3, #64	; 0x40
    9c22:	9b04      	ldr	r3, [sp, #16]
    9c24:	bf18      	it	ne
    9c26:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    9c2a:	9304      	str	r3, [sp, #16]
    9c2c:	9804      	ldr	r0, [sp, #16]
    9c2e:	b051      	add	sp, #324	; 0x144
    9c30:	ecbd 8b08 	vpop	{d8-d11}
    9c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c38:	ee1b 1a10 	vmov	r1, s22
    9c3c:	aa24      	add	r2, sp, #144	; 0x90
    9c3e:	4658      	mov	r0, fp
    9c40:	f005 fb54 	bl	f2ec <__ssprint_r>
    9c44:	2800      	cmp	r0, #0
    9c46:	d1e6      	bne.n	9c16 <_svfprintf_r+0x216>
    9c48:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9c4c:	e7d9      	b.n	9c02 <_svfprintf_r+0x202>
    9c4e:	bf00      	nop
	...
    9c58:	ffffffff 	.word	0xffffffff
    9c5c:	7fefffff 	.word	0x7fefffff
    9c60:	20008638 	.word	0x20008638
    9c64:	930b      	str	r3, [sp, #44]	; 0x2c
    9c66:	2b00      	cmp	r3, #0
    9c68:	d0d1      	beq.n	9c0e <_svfprintf_r+0x20e>
    9c6a:	2100      	movs	r1, #0
    9c6c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    9c70:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    9c74:	2301      	movs	r3, #1
    9c76:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    9c7a:	9302      	str	r3, [sp, #8]
    9c7c:	9107      	str	r1, [sp, #28]
    9c7e:	9305      	str	r3, [sp, #20]
    9c80:	9103      	str	r1, [sp, #12]
    9c82:	910f      	str	r1, [sp, #60]	; 0x3c
    9c84:	ac37      	add	r4, sp, #220	; 0xdc
    9c86:	f018 0302 	ands.w	r3, r8, #2
    9c8a:	9309      	str	r3, [sp, #36]	; 0x24
    9c8c:	d002      	beq.n	9c94 <_svfprintf_r+0x294>
    9c8e:	9b02      	ldr	r3, [sp, #8]
    9c90:	3302      	adds	r3, #2
    9c92:	9302      	str	r3, [sp, #8]
    9c94:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    9c98:	930a      	str	r3, [sp, #40]	; 0x28
    9c9a:	d105      	bne.n	9ca8 <_svfprintf_r+0x2a8>
    9c9c:	9b06      	ldr	r3, [sp, #24]
    9c9e:	9a02      	ldr	r2, [sp, #8]
    9ca0:	1a9d      	subs	r5, r3, r2
    9ca2:	2d00      	cmp	r5, #0
    9ca4:	f300 8369 	bgt.w	a37a <_svfprintf_r+0x97a>
    9ca8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9caa:	b189      	cbz	r1, 9cd0 <_svfprintf_r+0x2d0>
    9cac:	9925      	ldr	r1, [sp, #148]	; 0x94
    9cae:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    9cb2:	3101      	adds	r1, #1
    9cb4:	3201      	adds	r2, #1
    9cb6:	f8ca 0000 	str.w	r0, [sl]
    9cba:	2907      	cmp	r1, #7
    9cbc:	f04f 0001 	mov.w	r0, #1
    9cc0:	9226      	str	r2, [sp, #152]	; 0x98
    9cc2:	9125      	str	r1, [sp, #148]	; 0x94
    9cc4:	f8ca 0004 	str.w	r0, [sl, #4]
    9cc8:	f300 83a2 	bgt.w	a410 <_svfprintf_r+0xa10>
    9ccc:	f10a 0a08 	add.w	sl, sl, #8
    9cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9cd2:	b183      	cbz	r3, 9cf6 <_svfprintf_r+0x2f6>
    9cd4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9cd6:	a91a      	add	r1, sp, #104	; 0x68
    9cd8:	3301      	adds	r3, #1
    9cda:	3202      	adds	r2, #2
    9cdc:	f8ca 1000 	str.w	r1, [sl]
    9ce0:	2b07      	cmp	r3, #7
    9ce2:	f04f 0102 	mov.w	r1, #2
    9ce6:	9226      	str	r2, [sp, #152]	; 0x98
    9ce8:	9325      	str	r3, [sp, #148]	; 0x94
    9cea:	f8ca 1004 	str.w	r1, [sl, #4]
    9cee:	f300 83a3 	bgt.w	a438 <_svfprintf_r+0xa38>
    9cf2:	f10a 0a08 	add.w	sl, sl, #8
    9cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9cf8:	2b80      	cmp	r3, #128	; 0x80
    9cfa:	f000 826c 	beq.w	a1d6 <_svfprintf_r+0x7d6>
    9cfe:	9b03      	ldr	r3, [sp, #12]
    9d00:	9905      	ldr	r1, [sp, #20]
    9d02:	1a5d      	subs	r5, r3, r1
    9d04:	2d00      	cmp	r5, #0
    9d06:	f300 82a5 	bgt.w	a254 <_svfprintf_r+0x854>
    9d0a:	f418 7f80 	tst.w	r8, #256	; 0x100
    9d0e:	f040 820d 	bne.w	a12c <_svfprintf_r+0x72c>
    9d12:	9b05      	ldr	r3, [sp, #20]
    9d14:	f8ca 3004 	str.w	r3, [sl, #4]
    9d18:	441a      	add	r2, r3
    9d1a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9d1c:	f8ca 4000 	str.w	r4, [sl]
    9d20:	3301      	adds	r3, #1
    9d22:	2b07      	cmp	r3, #7
    9d24:	9226      	str	r2, [sp, #152]	; 0x98
    9d26:	9325      	str	r3, [sp, #148]	; 0x94
    9d28:	f300 831b 	bgt.w	a362 <_svfprintf_r+0x962>
    9d2c:	f10a 0a08 	add.w	sl, sl, #8
    9d30:	f018 0f04 	tst.w	r8, #4
    9d34:	d005      	beq.n	9d42 <_svfprintf_r+0x342>
    9d36:	9b06      	ldr	r3, [sp, #24]
    9d38:	9902      	ldr	r1, [sp, #8]
    9d3a:	1a5c      	subs	r4, r3, r1
    9d3c:	2c00      	cmp	r4, #0
    9d3e:	f300 8388 	bgt.w	a452 <_svfprintf_r+0xa52>
    9d42:	9b04      	ldr	r3, [sp, #16]
    9d44:	9906      	ldr	r1, [sp, #24]
    9d46:	9802      	ldr	r0, [sp, #8]
    9d48:	4281      	cmp	r1, r0
    9d4a:	bfac      	ite	ge
    9d4c:	185b      	addge	r3, r3, r1
    9d4e:	181b      	addlt	r3, r3, r0
    9d50:	9304      	str	r3, [sp, #16]
    9d52:	2a00      	cmp	r2, #0
    9d54:	f040 82b0 	bne.w	a2b8 <_svfprintf_r+0x8b8>
    9d58:	2300      	movs	r3, #0
    9d5a:	9325      	str	r3, [sp, #148]	; 0x94
    9d5c:	9b07      	ldr	r3, [sp, #28]
    9d5e:	b11b      	cbz	r3, 9d68 <_svfprintf_r+0x368>
    9d60:	9907      	ldr	r1, [sp, #28]
    9d62:	4658      	mov	r0, fp
    9d64:	f7ff f91e 	bl	8fa4 <_free_r>
    9d68:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9d6c:	464c      	mov	r4, r9
    9d6e:	e679      	b.n	9a64 <_svfprintf_r+0x64>
    9d70:	930b      	str	r3, [sp, #44]	; 0x2c
    9d72:	9b08      	ldr	r3, [sp, #32]
    9d74:	3307      	adds	r3, #7
    9d76:	f023 0307 	bic.w	r3, r3, #7
    9d7a:	ecb3 8b02 	vldmia	r3!, {d8}
    9d7e:	eeb0 7bc8 	vabs.f64	d7, d8
    9d82:	eeb4 7b49 	vcmp.f64	d7, d9
    9d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9d8a:	9308      	str	r3, [sp, #32]
    9d8c:	f340 84e9 	ble.w	a762 <_svfprintf_r+0xd62>
    9d90:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    9d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9d98:	f101 8059 	bmi.w	ae4e <_svfprintf_r+0x144e>
    9d9c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    9da0:	4cab      	ldr	r4, [pc, #684]	; (a050 <_svfprintf_r+0x650>)
    9da2:	4bac      	ldr	r3, [pc, #688]	; (a054 <_svfprintf_r+0x654>)
    9da4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    9da8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9daa:	2a47      	cmp	r2, #71	; 0x47
    9dac:	bfc8      	it	gt
    9dae:	461c      	movgt	r4, r3
    9db0:	2300      	movs	r3, #0
    9db2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    9db6:	2203      	movs	r2, #3
    9db8:	9307      	str	r3, [sp, #28]
    9dba:	9202      	str	r2, [sp, #8]
    9dbc:	9205      	str	r2, [sp, #20]
    9dbe:	9303      	str	r3, [sp, #12]
    9dc0:	930f      	str	r3, [sp, #60]	; 0x3c
    9dc2:	2900      	cmp	r1, #0
    9dc4:	f43f af5f 	beq.w	9c86 <_svfprintf_r+0x286>
    9dc8:	9b02      	ldr	r3, [sp, #8]
    9dca:	3301      	adds	r3, #1
    9dcc:	9302      	str	r3, [sp, #8]
    9dce:	e75a      	b.n	9c86 <_svfprintf_r+0x286>
    9dd0:	2b43      	cmp	r3, #67	; 0x43
    9dd2:	930b      	str	r3, [sp, #44]	; 0x2c
    9dd4:	d003      	beq.n	9dde <_svfprintf_r+0x3de>
    9dd6:	f018 0f10 	tst.w	r8, #16
    9dda:	f000 855d 	beq.w	a898 <_svfprintf_r+0xe98>
    9dde:	9d08      	ldr	r5, [sp, #32]
    9de0:	2208      	movs	r2, #8
    9de2:	2100      	movs	r1, #0
    9de4:	a822      	add	r0, sp, #136	; 0x88
    9de6:	ac37      	add	r4, sp, #220	; 0xdc
    9de8:	f7fe fc7e 	bl	86e8 <memset>
    9dec:	ab22      	add	r3, sp, #136	; 0x88
    9dee:	f855 2b04 	ldr.w	r2, [r5], #4
    9df2:	4621      	mov	r1, r4
    9df4:	4658      	mov	r0, fp
    9df6:	f004 f97d 	bl	e0f4 <_wcrtomb_r>
    9dfa:	4603      	mov	r3, r0
    9dfc:	3301      	adds	r3, #1
    9dfe:	9005      	str	r0, [sp, #20]
    9e00:	f001 82ee 	beq.w	b3e0 <_svfprintf_r+0x19e0>
    9e04:	9b05      	ldr	r3, [sp, #20]
    9e06:	9508      	str	r5, [sp, #32]
    9e08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9e0c:	9302      	str	r3, [sp, #8]
    9e0e:	2100      	movs	r1, #0
    9e10:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    9e14:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    9e18:	9107      	str	r1, [sp, #28]
    9e1a:	9103      	str	r1, [sp, #12]
    9e1c:	910f      	str	r1, [sp, #60]	; 0x3c
    9e1e:	e732      	b.n	9c86 <_svfprintf_r+0x286>
    9e20:	930b      	str	r3, [sp, #44]	; 0x2c
    9e22:	9b08      	ldr	r3, [sp, #32]
    9e24:	461a      	mov	r2, r3
    9e26:	2300      	movs	r3, #0
    9e28:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    9e2c:	4613      	mov	r3, r2
    9e2e:	f853 4b04 	ldr.w	r4, [r3], #4
    9e32:	9308      	str	r3, [sp, #32]
    9e34:	2c00      	cmp	r4, #0
    9e36:	f000 8548 	beq.w	a8ca <_svfprintf_r+0xeca>
    9e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9e3c:	2b53      	cmp	r3, #83	; 0x53
    9e3e:	f000 86ec 	beq.w	ac1a <_svfprintf_r+0x121a>
    9e42:	f018 0310 	ands.w	r3, r8, #16
    9e46:	930c      	str	r3, [sp, #48]	; 0x30
    9e48:	f040 86e7 	bne.w	ac1a <_svfprintf_r+0x121a>
    9e4c:	9b03      	ldr	r3, [sp, #12]
    9e4e:	1c5d      	adds	r5, r3, #1
    9e50:	f001 80e5 	beq.w	b01e <_svfprintf_r+0x161e>
    9e54:	990c      	ldr	r1, [sp, #48]	; 0x30
    9e56:	461a      	mov	r2, r3
    9e58:	4620      	mov	r0, r4
    9e5a:	f004 f8d1 	bl	e000 <memchr>
    9e5e:	9007      	str	r0, [sp, #28]
    9e60:	2800      	cmp	r0, #0
    9e62:	f001 8328 	beq.w	b4b6 <_svfprintf_r+0x1ab6>
    9e66:	9b07      	ldr	r3, [sp, #28]
    9e68:	1b1a      	subs	r2, r3, r4
    9e6a:	9205      	str	r2, [sp, #20]
    9e6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9e6e:	9303      	str	r3, [sp, #12]
    9e70:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    9e74:	930f      	str	r3, [sp, #60]	; 0x3c
    9e76:	930d      	str	r3, [sp, #52]	; 0x34
    9e78:	9307      	str	r3, [sp, #28]
    9e7a:	2373      	movs	r3, #115	; 0x73
    9e7c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    9e80:	9202      	str	r2, [sp, #8]
    9e82:	930b      	str	r3, [sp, #44]	; 0x2c
    9e84:	e79d      	b.n	9dc2 <_svfprintf_r+0x3c2>
    9e86:	f018 0f20 	tst.w	r8, #32
    9e8a:	930b      	str	r3, [sp, #44]	; 0x2c
    9e8c:	9b08      	ldr	r3, [sp, #32]
    9e8e:	d03d      	beq.n	9f0c <_svfprintf_r+0x50c>
    9e90:	3307      	adds	r3, #7
    9e92:	f023 0307 	bic.w	r3, r3, #7
    9e96:	461a      	mov	r2, r3
    9e98:	4611      	mov	r1, r2
    9e9a:	685b      	ldr	r3, [r3, #4]
    9e9c:	f851 2b08 	ldr.w	r2, [r1], #8
    9ea0:	9108      	str	r1, [sp, #32]
    9ea2:	4619      	mov	r1, r3
    9ea4:	2b00      	cmp	r3, #0
    9ea6:	f2c0 840c 	blt.w	a6c2 <_svfprintf_r+0xcc2>
    9eaa:	9b03      	ldr	r3, [sp, #12]
    9eac:	3301      	adds	r3, #1
    9eae:	f000 829e 	beq.w	a3ee <_svfprintf_r+0x9ee>
    9eb2:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    9eb6:	ea52 0301 	orrs.w	r3, r2, r1
    9eba:	9002      	str	r0, [sp, #8]
    9ebc:	f040 8299 	bne.w	a3f2 <_svfprintf_r+0x9f2>
    9ec0:	9b03      	ldr	r3, [sp, #12]
    9ec2:	2b00      	cmp	r3, #0
    9ec4:	f040 829a 	bne.w	a3fc <_svfprintf_r+0x9fc>
    9ec8:	4680      	mov	r8, r0
    9eca:	2300      	movs	r3, #0
    9ecc:	9303      	str	r3, [sp, #12]
    9ece:	9305      	str	r3, [sp, #20]
    9ed0:	ac50      	add	r4, sp, #320	; 0x140
    9ed2:	e106      	b.n	a0e2 <_svfprintf_r+0x6e2>
    9ed4:	9b08      	ldr	r3, [sp, #32]
    9ed6:	f853 2b04 	ldr.w	r2, [r3], #4
    9eda:	9206      	str	r2, [sp, #24]
    9edc:	2a00      	cmp	r2, #0
    9ede:	f280 8419 	bge.w	a714 <_svfprintf_r+0xd14>
    9ee2:	9a06      	ldr	r2, [sp, #24]
    9ee4:	9308      	str	r3, [sp, #32]
    9ee6:	4252      	negs	r2, r2
    9ee8:	9206      	str	r2, [sp, #24]
    9eea:	f899 3000 	ldrb.w	r3, [r9]
    9eee:	f048 0804 	orr.w	r8, r8, #4
    9ef2:	e5e1      	b.n	9ab8 <_svfprintf_r+0xb8>
    9ef4:	f899 3000 	ldrb.w	r3, [r9]
    9ef8:	f048 0808 	orr.w	r8, r8, #8
    9efc:	e5dc      	b.n	9ab8 <_svfprintf_r+0xb8>
    9efe:	f048 0810 	orr.w	r8, r8, #16
    9f02:	f018 0f20 	tst.w	r8, #32
    9f06:	930b      	str	r3, [sp, #44]	; 0x2c
    9f08:	9b08      	ldr	r3, [sp, #32]
    9f0a:	d1c1      	bne.n	9e90 <_svfprintf_r+0x490>
    9f0c:	f018 0f10 	tst.w	r8, #16
    9f10:	f040 840b 	bne.w	a72a <_svfprintf_r+0xd2a>
    9f14:	f018 0f40 	tst.w	r8, #64	; 0x40
    9f18:	f000 8403 	beq.w	a722 <_svfprintf_r+0xd22>
    9f1c:	f933 2b04 	ldrsh.w	r2, [r3], #4
    9f20:	9308      	str	r3, [sp, #32]
    9f22:	17d1      	asrs	r1, r2, #31
    9f24:	460b      	mov	r3, r1
    9f26:	e7bd      	b.n	9ea4 <_svfprintf_r+0x4a4>
    9f28:	9b08      	ldr	r3, [sp, #32]
    9f2a:	f048 0202 	orr.w	r2, r8, #2
    9f2e:	9202      	str	r2, [sp, #8]
    9f30:	f853 2b04 	ldr.w	r2, [r3], #4
    9f34:	9308      	str	r3, [sp, #32]
    9f36:	f647 0330 	movw	r3, #30768	; 0x7830
    9f3a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    9f3e:	2078      	movs	r0, #120	; 0x78
    9f40:	4b45      	ldr	r3, [pc, #276]	; (a058 <_svfprintf_r+0x658>)
    9f42:	9311      	str	r3, [sp, #68]	; 0x44
    9f44:	2100      	movs	r1, #0
    9f46:	2302      	movs	r3, #2
    9f48:	900b      	str	r0, [sp, #44]	; 0x2c
    9f4a:	2000      	movs	r0, #0
    9f4c:	9c03      	ldr	r4, [sp, #12]
    9f4e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    9f52:	1c60      	adds	r0, r4, #1
    9f54:	f000 80ad 	beq.w	a0b2 <_svfprintf_r+0x6b2>
    9f58:	9802      	ldr	r0, [sp, #8]
    9f5a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    9f5e:	ea52 0001 	orrs.w	r0, r2, r1
    9f62:	f040 80a4 	bne.w	a0ae <_svfprintf_r+0x6ae>
    9f66:	2c00      	cmp	r4, #0
    9f68:	f040 86ae 	bne.w	acc8 <_svfprintf_r+0x12c8>
    9f6c:	2b00      	cmp	r3, #0
    9f6e:	d1ac      	bne.n	9eca <_svfprintf_r+0x4ca>
    9f70:	9b02      	ldr	r3, [sp, #8]
    9f72:	f013 0301 	ands.w	r3, r3, #1
    9f76:	9305      	str	r3, [sp, #20]
    9f78:	f000 83d1 	beq.w	a71e <_svfprintf_r+0xd1e>
    9f7c:	2330      	movs	r3, #48	; 0x30
    9f7e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    9f82:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    9f86:	e0ac      	b.n	a0e2 <_svfprintf_r+0x6e2>
    9f88:	f018 0f20 	tst.w	r8, #32
    9f8c:	f040 83d4 	bne.w	a738 <_svfprintf_r+0xd38>
    9f90:	f018 0f10 	tst.w	r8, #16
    9f94:	f040 869f 	bne.w	acd6 <_svfprintf_r+0x12d6>
    9f98:	f018 0f40 	tst.w	r8, #64	; 0x40
    9f9c:	f040 8797 	bne.w	aece <_svfprintf_r+0x14ce>
    9fa0:	f418 7f00 	tst.w	r8, #512	; 0x200
    9fa4:	f000 8697 	beq.w	acd6 <_svfprintf_r+0x12d6>
    9fa8:	9b08      	ldr	r3, [sp, #32]
    9faa:	9904      	ldr	r1, [sp, #16]
    9fac:	f853 2b04 	ldr.w	r2, [r3], #4
    9fb0:	9308      	str	r3, [sp, #32]
    9fb2:	7011      	strb	r1, [r2, #0]
    9fb4:	464c      	mov	r4, r9
    9fb6:	e555      	b.n	9a64 <_svfprintf_r+0x64>
    9fb8:	f899 3000 	ldrb.w	r3, [r9]
    9fbc:	2b68      	cmp	r3, #104	; 0x68
    9fbe:	bf03      	ittte	eq
    9fc0:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    9fc4:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    9fc8:	f109 0901 	addeq.w	r9, r9, #1
    9fcc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    9fd0:	e572      	b.n	9ab8 <_svfprintf_r+0xb8>
    9fd2:	f899 3000 	ldrb.w	r3, [r9]
    9fd6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    9fda:	e56d      	b.n	9ab8 <_svfprintf_r+0xb8>
    9fdc:	f899 3000 	ldrb.w	r3, [r9]
    9fe0:	2b6c      	cmp	r3, #108	; 0x6c
    9fe2:	bf03      	ittte	eq
    9fe4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    9fe8:	f048 0820 	orreq.w	r8, r8, #32
    9fec:	f109 0901 	addeq.w	r9, r9, #1
    9ff0:	f048 0810 	orrne.w	r8, r8, #16
    9ff4:	e560      	b.n	9ab8 <_svfprintf_r+0xb8>
    9ff6:	930b      	str	r3, [sp, #44]	; 0x2c
    9ff8:	f048 0810 	orr.w	r8, r8, #16
    9ffc:	f018 0120 	ands.w	r1, r8, #32
    a000:	f000 8351 	beq.w	a6a6 <_svfprintf_r+0xca6>
    a004:	9b08      	ldr	r3, [sp, #32]
    a006:	3307      	adds	r3, #7
    a008:	f023 0307 	bic.w	r3, r3, #7
    a00c:	6859      	ldr	r1, [r3, #4]
    a00e:	f853 2b08 	ldr.w	r2, [r3], #8
    a012:	9308      	str	r3, [sp, #32]
    a014:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    a018:	9302      	str	r3, [sp, #8]
    a01a:	2300      	movs	r3, #0
    a01c:	e795      	b.n	9f4a <_svfprintf_r+0x54a>
    a01e:	930b      	str	r3, [sp, #44]	; 0x2c
    a020:	f048 0310 	orr.w	r3, r8, #16
    a024:	9302      	str	r3, [sp, #8]
    a026:	9b02      	ldr	r3, [sp, #8]
    a028:	f013 0120 	ands.w	r1, r3, #32
    a02c:	f000 8329 	beq.w	a682 <_svfprintf_r+0xc82>
    a030:	9b08      	ldr	r3, [sp, #32]
    a032:	3307      	adds	r3, #7
    a034:	f023 0307 	bic.w	r3, r3, #7
    a038:	6859      	ldr	r1, [r3, #4]
    a03a:	f853 2b08 	ldr.w	r2, [r3], #8
    a03e:	9308      	str	r3, [sp, #32]
    a040:	2301      	movs	r3, #1
    a042:	e782      	b.n	9f4a <_svfprintf_r+0x54a>
    a044:	f899 3000 	ldrb.w	r3, [r9]
    a048:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    a04c:	e534      	b.n	9ab8 <_svfprintf_r+0xb8>
    a04e:	bf00      	nop
    a050:	20000af0 	.word	0x20000af0
    a054:	2000064c 	.word	0x2000064c
    a058:	20000af8 	.word	0x20000af8
    a05c:	4649      	mov	r1, r9
    a05e:	f811 3b01 	ldrb.w	r3, [r1], #1
    a062:	2b2a      	cmp	r3, #42	; 0x2a
    a064:	f001 8249 	beq.w	b4fa <_svfprintf_r+0x1afa>
    a068:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    a06c:	2a09      	cmp	r2, #9
    a06e:	4689      	mov	r9, r1
    a070:	bf98      	it	ls
    a072:	2100      	movls	r1, #0
    a074:	f201 8144 	bhi.w	b300 <_svfprintf_r+0x1900>
    a078:	f819 3b01 	ldrb.w	r3, [r9], #1
    a07c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    a080:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    a084:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    a088:	2a09      	cmp	r2, #9
    a08a:	d9f5      	bls.n	a078 <_svfprintf_r+0x678>
    a08c:	9103      	str	r1, [sp, #12]
    a08e:	e515      	b.n	9abc <_svfprintf_r+0xbc>
    a090:	f899 3000 	ldrb.w	r3, [r9]
    a094:	f048 0801 	orr.w	r8, r8, #1
    a098:	e50e      	b.n	9ab8 <_svfprintf_r+0xb8>
    a09a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    a09e:	2b00      	cmp	r3, #0
    a0a0:	f47f ad8f 	bne.w	9bc2 <_svfprintf_r+0x1c2>
    a0a4:	f899 3000 	ldrb.w	r3, [r9]
    a0a8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    a0ac:	e504      	b.n	9ab8 <_svfprintf_r+0xb8>
    a0ae:	f8cd 8008 	str.w	r8, [sp, #8]
    a0b2:	2b01      	cmp	r3, #1
    a0b4:	f000 819d 	beq.w	a3f2 <_svfprintf_r+0x9f2>
    a0b8:	2b02      	cmp	r3, #2
    a0ba:	ac50      	add	r4, sp, #320	; 0x140
    a0bc:	d120      	bne.n	a100 <_svfprintf_r+0x700>
    a0be:	9811      	ldr	r0, [sp, #68]	; 0x44
    a0c0:	f002 030f 	and.w	r3, r2, #15
    a0c4:	0912      	lsrs	r2, r2, #4
    a0c6:	5cc3      	ldrb	r3, [r0, r3]
    a0c8:	f804 3d01 	strb.w	r3, [r4, #-1]!
    a0cc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    a0d0:	0909      	lsrs	r1, r1, #4
    a0d2:	ea52 0301 	orrs.w	r3, r2, r1
    a0d6:	d1f3      	bne.n	a0c0 <_svfprintf_r+0x6c0>
    a0d8:	ab50      	add	r3, sp, #320	; 0x140
    a0da:	1b1b      	subs	r3, r3, r4
    a0dc:	f8dd 8008 	ldr.w	r8, [sp, #8]
    a0e0:	9305      	str	r3, [sp, #20]
    a0e2:	9a05      	ldr	r2, [sp, #20]
    a0e4:	9803      	ldr	r0, [sp, #12]
    a0e6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    a0ea:	4282      	cmp	r2, r0
    a0ec:	f04f 0300 	mov.w	r3, #0
    a0f0:	bfb8      	it	lt
    a0f2:	4602      	movlt	r2, r0
    a0f4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    a0f8:	9307      	str	r3, [sp, #28]
    a0fa:	9202      	str	r2, [sp, #8]
    a0fc:	930f      	str	r3, [sp, #60]	; 0x3c
    a0fe:	e660      	b.n	9dc2 <_svfprintf_r+0x3c2>
    a100:	f002 0307 	and.w	r3, r2, #7
    a104:	08d2      	lsrs	r2, r2, #3
    a106:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    a10a:	08c9      	lsrs	r1, r1, #3
    a10c:	3330      	adds	r3, #48	; 0x30
    a10e:	ea52 0501 	orrs.w	r5, r2, r1
    a112:	4620      	mov	r0, r4
    a114:	f804 3d01 	strb.w	r3, [r4, #-1]!
    a118:	d1f2      	bne.n	a100 <_svfprintf_r+0x700>
    a11a:	9a02      	ldr	r2, [sp, #8]
    a11c:	07d1      	lsls	r1, r2, #31
    a11e:	f100 824d 	bmi.w	a5bc <_svfprintf_r+0xbbc>
    a122:	ab50      	add	r3, sp, #320	; 0x140
    a124:	1b1b      	subs	r3, r3, r4
    a126:	4690      	mov	r8, r2
    a128:	9305      	str	r3, [sp, #20]
    a12a:	e7da      	b.n	a0e2 <_svfprintf_r+0x6e2>
    a12c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a12e:	2b65      	cmp	r3, #101	; 0x65
    a130:	f340 80d4 	ble.w	a2dc <_svfprintf_r+0x8dc>
    a134:	eeb5 8b40 	vcmp.f64	d8, #0.0
    a138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a13c:	f040 81c1 	bne.w	a4c2 <_svfprintf_r+0xac2>
    a140:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a142:	49ba      	ldr	r1, [pc, #744]	; (a42c <_svfprintf_r+0xa2c>)
    a144:	f8ca 1000 	str.w	r1, [sl]
    a148:	3301      	adds	r3, #1
    a14a:	3201      	adds	r2, #1
    a14c:	2101      	movs	r1, #1
    a14e:	2b07      	cmp	r3, #7
    a150:	9226      	str	r2, [sp, #152]	; 0x98
    a152:	9325      	str	r3, [sp, #148]	; 0x94
    a154:	f8ca 1004 	str.w	r1, [sl, #4]
    a158:	f300 8551 	bgt.w	abfe <_svfprintf_r+0x11fe>
    a15c:	f10a 0a08 	add.w	sl, sl, #8
    a160:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a162:	990e      	ldr	r1, [sp, #56]	; 0x38
    a164:	428b      	cmp	r3, r1
    a166:	f280 82d0 	bge.w	a70a <_svfprintf_r+0xd0a>
    a16a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a16c:	9912      	ldr	r1, [sp, #72]	; 0x48
    a16e:	441a      	add	r2, r3
    a170:	e9ca 1300 	strd	r1, r3, [sl]
    a174:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a176:	9226      	str	r2, [sp, #152]	; 0x98
    a178:	3301      	adds	r3, #1
    a17a:	2b07      	cmp	r3, #7
    a17c:	9325      	str	r3, [sp, #148]	; 0x94
    a17e:	f300 8397 	bgt.w	a8b0 <_svfprintf_r+0xeb0>
    a182:	f10a 0a08 	add.w	sl, sl, #8
    a186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a188:	1e5c      	subs	r4, r3, #1
    a18a:	2c00      	cmp	r4, #0
    a18c:	f77f add0 	ble.w	9d30 <_svfprintf_r+0x330>
    a190:	2c10      	cmp	r4, #16
    a192:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a194:	f340 856e 	ble.w	ac74 <_svfprintf_r+0x1274>
    a198:	ee1b 6a10 	vmov	r6, s22
    a19c:	2510      	movs	r5, #16
    a19e:	e005      	b.n	a1ac <_svfprintf_r+0x7ac>
    a1a0:	f10a 0a08 	add.w	sl, sl, #8
    a1a4:	3c10      	subs	r4, #16
    a1a6:	2c10      	cmp	r4, #16
    a1a8:	f340 8564 	ble.w	ac74 <_svfprintf_r+0x1274>
    a1ac:	3301      	adds	r3, #1
    a1ae:	49a0      	ldr	r1, [pc, #640]	; (a430 <_svfprintf_r+0xa30>)
    a1b0:	3210      	adds	r2, #16
    a1b2:	2b07      	cmp	r3, #7
    a1b4:	e9ca 1500 	strd	r1, r5, [sl]
    a1b8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a1bc:	ddf0      	ble.n	a1a0 <_svfprintf_r+0x7a0>
    a1be:	aa24      	add	r2, sp, #144	; 0x90
    a1c0:	4631      	mov	r1, r6
    a1c2:	4658      	mov	r0, fp
    a1c4:	f005 f892 	bl	f2ec <__ssprint_r>
    a1c8:	2800      	cmp	r0, #0
    a1ca:	d17e      	bne.n	a2ca <_svfprintf_r+0x8ca>
    a1cc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a1d0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a1d4:	e7e6      	b.n	a1a4 <_svfprintf_r+0x7a4>
    a1d6:	9b06      	ldr	r3, [sp, #24]
    a1d8:	9902      	ldr	r1, [sp, #8]
    a1da:	1a5d      	subs	r5, r3, r1
    a1dc:	2d00      	cmp	r5, #0
    a1de:	f77f ad8e 	ble.w	9cfe <_svfprintf_r+0x2fe>
    a1e2:	2d10      	cmp	r5, #16
    a1e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a1e6:	dd21      	ble.n	a22c <_svfprintf_r+0x82c>
    a1e8:	9409      	str	r4, [sp, #36]	; 0x24
    a1ea:	2610      	movs	r6, #16
    a1ec:	ee1b 4a10 	vmov	r4, s22
    a1f0:	e004      	b.n	a1fc <_svfprintf_r+0x7fc>
    a1f2:	3d10      	subs	r5, #16
    a1f4:	2d10      	cmp	r5, #16
    a1f6:	f10a 0a08 	add.w	sl, sl, #8
    a1fa:	dd16      	ble.n	a22a <_svfprintf_r+0x82a>
    a1fc:	3301      	adds	r3, #1
    a1fe:	498c      	ldr	r1, [pc, #560]	; (a430 <_svfprintf_r+0xa30>)
    a200:	3210      	adds	r2, #16
    a202:	2b07      	cmp	r3, #7
    a204:	e9ca 1600 	strd	r1, r6, [sl]
    a208:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a20c:	ddf1      	ble.n	a1f2 <_svfprintf_r+0x7f2>
    a20e:	aa24      	add	r2, sp, #144	; 0x90
    a210:	4621      	mov	r1, r4
    a212:	4658      	mov	r0, fp
    a214:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a218:	f005 f868 	bl	f2ec <__ssprint_r>
    a21c:	2800      	cmp	r0, #0
    a21e:	d154      	bne.n	a2ca <_svfprintf_r+0x8ca>
    a220:	3d10      	subs	r5, #16
    a222:	2d10      	cmp	r5, #16
    a224:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a228:	dce8      	bgt.n	a1fc <_svfprintf_r+0x7fc>
    a22a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a22c:	4980      	ldr	r1, [pc, #512]	; (a430 <_svfprintf_r+0xa30>)
    a22e:	f8ca 5004 	str.w	r5, [sl, #4]
    a232:	3301      	adds	r3, #1
    a234:	442a      	add	r2, r5
    a236:	2b07      	cmp	r3, #7
    a238:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a23c:	f8ca 1000 	str.w	r1, [sl]
    a240:	f300 8526 	bgt.w	ac90 <_svfprintf_r+0x1290>
    a244:	9b03      	ldr	r3, [sp, #12]
    a246:	9905      	ldr	r1, [sp, #20]
    a248:	1a5d      	subs	r5, r3, r1
    a24a:	2d00      	cmp	r5, #0
    a24c:	f10a 0a08 	add.w	sl, sl, #8
    a250:	f77f ad5b 	ble.w	9d0a <_svfprintf_r+0x30a>
    a254:	2d10      	cmp	r5, #16
    a256:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a258:	dd1f      	ble.n	a29a <_svfprintf_r+0x89a>
    a25a:	4651      	mov	r1, sl
    a25c:	2610      	movs	r6, #16
    a25e:	ee1b aa10 	vmov	sl, s22
    a262:	e004      	b.n	a26e <_svfprintf_r+0x86e>
    a264:	3d10      	subs	r5, #16
    a266:	2d10      	cmp	r5, #16
    a268:	f101 0108 	add.w	r1, r1, #8
    a26c:	dd14      	ble.n	a298 <_svfprintf_r+0x898>
    a26e:	3301      	adds	r3, #1
    a270:	486f      	ldr	r0, [pc, #444]	; (a430 <_svfprintf_r+0xa30>)
    a272:	3210      	adds	r2, #16
    a274:	2b07      	cmp	r3, #7
    a276:	e9c1 0600 	strd	r0, r6, [r1]
    a27a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a27e:	ddf1      	ble.n	a264 <_svfprintf_r+0x864>
    a280:	aa24      	add	r2, sp, #144	; 0x90
    a282:	4651      	mov	r1, sl
    a284:	4658      	mov	r0, fp
    a286:	f005 f831 	bl	f2ec <__ssprint_r>
    a28a:	b9f0      	cbnz	r0, a2ca <_svfprintf_r+0x8ca>
    a28c:	3d10      	subs	r5, #16
    a28e:	2d10      	cmp	r5, #16
    a290:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a294:	a927      	add	r1, sp, #156	; 0x9c
    a296:	dcea      	bgt.n	a26e <_svfprintf_r+0x86e>
    a298:	468a      	mov	sl, r1
    a29a:	3301      	adds	r3, #1
    a29c:	4964      	ldr	r1, [pc, #400]	; (a430 <_svfprintf_r+0xa30>)
    a29e:	f8ca 5004 	str.w	r5, [sl, #4]
    a2a2:	442a      	add	r2, r5
    a2a4:	2b07      	cmp	r3, #7
    a2a6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a2aa:	f8ca 1000 	str.w	r1, [sl]
    a2ae:	f300 81da 	bgt.w	a666 <_svfprintf_r+0xc66>
    a2b2:	f10a 0a08 	add.w	sl, sl, #8
    a2b6:	e528      	b.n	9d0a <_svfprintf_r+0x30a>
    a2b8:	ee1b 1a10 	vmov	r1, s22
    a2bc:	aa24      	add	r2, sp, #144	; 0x90
    a2be:	4658      	mov	r0, fp
    a2c0:	f005 f814 	bl	f2ec <__ssprint_r>
    a2c4:	2800      	cmp	r0, #0
    a2c6:	f43f ad47 	beq.w	9d58 <_svfprintf_r+0x358>
    a2ca:	9b07      	ldr	r3, [sp, #28]
    a2cc:	2b00      	cmp	r3, #0
    a2ce:	f43f aca2 	beq.w	9c16 <_svfprintf_r+0x216>
    a2d2:	9907      	ldr	r1, [sp, #28]
    a2d4:	4658      	mov	r0, fp
    a2d6:	f7fe fe65 	bl	8fa4 <_free_r>
    a2da:	e49c      	b.n	9c16 <_svfprintf_r+0x216>
    a2dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a2de:	2b01      	cmp	r3, #1
    a2e0:	f340 817a 	ble.w	a5d8 <_svfprintf_r+0xbd8>
    a2e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a2e6:	f8ca 4000 	str.w	r4, [sl]
    a2ea:	3301      	adds	r3, #1
    a2ec:	3201      	adds	r2, #1
    a2ee:	2101      	movs	r1, #1
    a2f0:	2b07      	cmp	r3, #7
    a2f2:	9226      	str	r2, [sp, #152]	; 0x98
    a2f4:	9325      	str	r3, [sp, #148]	; 0x94
    a2f6:	f8ca 1004 	str.w	r1, [sl, #4]
    a2fa:	f300 81f8 	bgt.w	a6ee <_svfprintf_r+0xcee>
    a2fe:	f10a 0a08 	add.w	sl, sl, #8
    a302:	9910      	ldr	r1, [sp, #64]	; 0x40
    a304:	9812      	ldr	r0, [sp, #72]	; 0x48
    a306:	3301      	adds	r3, #1
    a308:	440a      	add	r2, r1
    a30a:	2b07      	cmp	r3, #7
    a30c:	e9ca 0100 	strd	r0, r1, [sl]
    a310:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a314:	f300 81dd 	bgt.w	a6d2 <_svfprintf_r+0xcd2>
    a318:	f10a 0a08 	add.w	sl, sl, #8
    a31c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    a320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a324:	f000 8177 	beq.w	a616 <_svfprintf_r+0xc16>
    a328:	990e      	ldr	r1, [sp, #56]	; 0x38
    a32a:	3301      	adds	r3, #1
    a32c:	3901      	subs	r1, #1
    a32e:	3401      	adds	r4, #1
    a330:	440a      	add	r2, r1
    a332:	2b07      	cmp	r3, #7
    a334:	f8ca 4000 	str.w	r4, [sl]
    a338:	9325      	str	r3, [sp, #148]	; 0x94
    a33a:	f8ca 1004 	str.w	r1, [sl, #4]
    a33e:	9226      	str	r2, [sp, #152]	; 0x98
    a340:	f300 815b 	bgt.w	a5fa <_svfprintf_r+0xbfa>
    a344:	f10a 0a08 	add.w	sl, sl, #8
    a348:	9914      	ldr	r1, [sp, #80]	; 0x50
    a34a:	f8ca 1004 	str.w	r1, [sl, #4]
    a34e:	3301      	adds	r3, #1
    a350:	440a      	add	r2, r1
    a352:	2b07      	cmp	r3, #7
    a354:	a91e      	add	r1, sp, #120	; 0x78
    a356:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a35a:	f8ca 1000 	str.w	r1, [sl]
    a35e:	f77f ace5 	ble.w	9d2c <_svfprintf_r+0x32c>
    a362:	ee1b 1a10 	vmov	r1, s22
    a366:	aa24      	add	r2, sp, #144	; 0x90
    a368:	4658      	mov	r0, fp
    a36a:	f004 ffbf 	bl	f2ec <__ssprint_r>
    a36e:	2800      	cmp	r0, #0
    a370:	d1ab      	bne.n	a2ca <_svfprintf_r+0x8ca>
    a372:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a374:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a378:	e4da      	b.n	9d30 <_svfprintf_r+0x330>
    a37a:	2d10      	cmp	r5, #16
    a37c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    a380:	4e2c      	ldr	r6, [pc, #176]	; (a434 <_svfprintf_r+0xa34>)
    a382:	dd24      	ble.n	a3ce <_svfprintf_r+0x9ce>
    a384:	9417      	str	r4, [sp, #92]	; 0x5c
    a386:	2310      	movs	r3, #16
    a388:	ee1b 4a10 	vmov	r4, s22
    a38c:	4608      	mov	r0, r1
    a38e:	e004      	b.n	a39a <_svfprintf_r+0x99a>
    a390:	3d10      	subs	r5, #16
    a392:	2d10      	cmp	r5, #16
    a394:	f10a 0a08 	add.w	sl, sl, #8
    a398:	dd17      	ble.n	a3ca <_svfprintf_r+0x9ca>
    a39a:	3001      	adds	r0, #1
    a39c:	3210      	adds	r2, #16
    a39e:	2807      	cmp	r0, #7
    a3a0:	e9ca 6300 	strd	r6, r3, [sl]
    a3a4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    a3a8:	ddf2      	ble.n	a390 <_svfprintf_r+0x990>
    a3aa:	aa24      	add	r2, sp, #144	; 0x90
    a3ac:	4621      	mov	r1, r4
    a3ae:	4658      	mov	r0, fp
    a3b0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a3b4:	f004 ff9a 	bl	f2ec <__ssprint_r>
    a3b8:	2800      	cmp	r0, #0
    a3ba:	d186      	bne.n	a2ca <_svfprintf_r+0x8ca>
    a3bc:	3d10      	subs	r5, #16
    a3be:	2d10      	cmp	r5, #16
    a3c0:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    a3c4:	f04f 0310 	mov.w	r3, #16
    a3c8:	dce7      	bgt.n	a39a <_svfprintf_r+0x99a>
    a3ca:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    a3cc:	4601      	mov	r1, r0
    a3ce:	3101      	adds	r1, #1
    a3d0:	442a      	add	r2, r5
    a3d2:	2907      	cmp	r1, #7
    a3d4:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    a3d8:	f8ca 6000 	str.w	r6, [sl]
    a3dc:	f8ca 5004 	str.w	r5, [sl, #4]
    a3e0:	f300 83bd 	bgt.w	ab5e <_svfprintf_r+0x115e>
    a3e4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    a3e8:	f10a 0a08 	add.w	sl, sl, #8
    a3ec:	e45d      	b.n	9caa <_svfprintf_r+0x2aa>
    a3ee:	f8cd 8008 	str.w	r8, [sp, #8]
    a3f2:	2a0a      	cmp	r2, #10
    a3f4:	f171 0300 	sbcs.w	r3, r1, #0
    a3f8:	f080 8345 	bcs.w	aa86 <_svfprintf_r+0x1086>
    a3fc:	3230      	adds	r2, #48	; 0x30
    a3fe:	2301      	movs	r3, #1
    a400:	f8dd 8008 	ldr.w	r8, [sp, #8]
    a404:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    a408:	9305      	str	r3, [sp, #20]
    a40a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    a40e:	e668      	b.n	a0e2 <_svfprintf_r+0x6e2>
    a410:	ee1b 1a10 	vmov	r1, s22
    a414:	aa24      	add	r2, sp, #144	; 0x90
    a416:	4658      	mov	r0, fp
    a418:	f004 ff68 	bl	f2ec <__ssprint_r>
    a41c:	2800      	cmp	r0, #0
    a41e:	f47f af54 	bne.w	a2ca <_svfprintf_r+0x8ca>
    a422:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a424:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a428:	e452      	b.n	9cd0 <_svfprintf_r+0x2d0>
    a42a:	bf00      	nop
    a42c:	20000b28 	.word	0x20000b28
    a430:	20007ba4 	.word	0x20007ba4
    a434:	200025a4 	.word	0x200025a4
    a438:	ee1b 1a10 	vmov	r1, s22
    a43c:	aa24      	add	r2, sp, #144	; 0x90
    a43e:	4658      	mov	r0, fp
    a440:	f004 ff54 	bl	f2ec <__ssprint_r>
    a444:	2800      	cmp	r0, #0
    a446:	f47f af40 	bne.w	a2ca <_svfprintf_r+0x8ca>
    a44a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a44c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a450:	e451      	b.n	9cf6 <_svfprintf_r+0x2f6>
    a452:	2c10      	cmp	r4, #16
    a454:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a456:	4ebe      	ldr	r6, [pc, #760]	; (a750 <_svfprintf_r+0xd50>)
    a458:	dd1f      	ble.n	a49a <_svfprintf_r+0xa9a>
    a45a:	ee1b 8a10 	vmov	r8, s22
    a45e:	2510      	movs	r5, #16
    a460:	e004      	b.n	a46c <_svfprintf_r+0xa6c>
    a462:	3c10      	subs	r4, #16
    a464:	2c10      	cmp	r4, #16
    a466:	f10a 0a08 	add.w	sl, sl, #8
    a46a:	dd16      	ble.n	a49a <_svfprintf_r+0xa9a>
    a46c:	3301      	adds	r3, #1
    a46e:	3210      	adds	r2, #16
    a470:	2b07      	cmp	r3, #7
    a472:	e9ca 6500 	strd	r6, r5, [sl]
    a476:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a47a:	ddf2      	ble.n	a462 <_svfprintf_r+0xa62>
    a47c:	aa24      	add	r2, sp, #144	; 0x90
    a47e:	4641      	mov	r1, r8
    a480:	4658      	mov	r0, fp
    a482:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a486:	f004 ff31 	bl	f2ec <__ssprint_r>
    a48a:	2800      	cmp	r0, #0
    a48c:	f47f af1d 	bne.w	a2ca <_svfprintf_r+0x8ca>
    a490:	3c10      	subs	r4, #16
    a492:	2c10      	cmp	r4, #16
    a494:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a498:	dce8      	bgt.n	a46c <_svfprintf_r+0xa6c>
    a49a:	3301      	adds	r3, #1
    a49c:	4422      	add	r2, r4
    a49e:	2b07      	cmp	r3, #7
    a4a0:	e9ca 6400 	strd	r6, r4, [sl]
    a4a4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a4a8:	f77f ac4b 	ble.w	9d42 <_svfprintf_r+0x342>
    a4ac:	ee1b 1a10 	vmov	r1, s22
    a4b0:	aa24      	add	r2, sp, #144	; 0x90
    a4b2:	4658      	mov	r0, fp
    a4b4:	f004 ff1a 	bl	f2ec <__ssprint_r>
    a4b8:	2800      	cmp	r0, #0
    a4ba:	f47f af06 	bne.w	a2ca <_svfprintf_r+0x8ca>
    a4be:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a4c0:	e43f      	b.n	9d42 <_svfprintf_r+0x342>
    a4c2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    a4c4:	2900      	cmp	r1, #0
    a4c6:	f340 835a 	ble.w	ab7e <_svfprintf_r+0x117e>
    a4ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    a4cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a4ce:	429e      	cmp	r6, r3
    a4d0:	bfa8      	it	ge
    a4d2:	461e      	movge	r6, r3
    a4d4:	2e00      	cmp	r6, #0
    a4d6:	dd0b      	ble.n	a4f0 <_svfprintf_r+0xaf0>
    a4d8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a4da:	3301      	adds	r3, #1
    a4dc:	4432      	add	r2, r6
    a4de:	2b07      	cmp	r3, #7
    a4e0:	e9ca 4600 	strd	r4, r6, [sl]
    a4e4:	9226      	str	r2, [sp, #152]	; 0x98
    a4e6:	9325      	str	r3, [sp, #148]	; 0x94
    a4e8:	f300 8689 	bgt.w	b1fe <_svfprintf_r+0x17fe>
    a4ec:	f10a 0a08 	add.w	sl, sl, #8
    a4f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    a4f2:	2e00      	cmp	r6, #0
    a4f4:	bfa8      	it	ge
    a4f6:	1bad      	subge	r5, r5, r6
    a4f8:	2d00      	cmp	r5, #0
    a4fa:	f300 8203 	bgt.w	a904 <_svfprintf_r+0xf04>
    a4fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a500:	f418 6f80 	tst.w	r8, #1024	; 0x400
    a504:	4423      	add	r3, r4
    a506:	9305      	str	r3, [sp, #20]
    a508:	f040 821f 	bne.w	a94a <_svfprintf_r+0xf4a>
    a50c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a50e:	990e      	ldr	r1, [sp, #56]	; 0x38
    a510:	428b      	cmp	r3, r1
    a512:	db03      	blt.n	a51c <_svfprintf_r+0xb1c>
    a514:	f018 0f01 	tst.w	r8, #1
    a518:	f000 84cf 	beq.w	aeba <_svfprintf_r+0x14ba>
    a51c:	9910      	ldr	r1, [sp, #64]	; 0x40
    a51e:	9812      	ldr	r0, [sp, #72]	; 0x48
    a520:	440a      	add	r2, r1
    a522:	e9ca 0100 	strd	r0, r1, [sl]
    a526:	9925      	ldr	r1, [sp, #148]	; 0x94
    a528:	9226      	str	r2, [sp, #152]	; 0x98
    a52a:	3101      	adds	r1, #1
    a52c:	2907      	cmp	r1, #7
    a52e:	9125      	str	r1, [sp, #148]	; 0x94
    a530:	f300 86a5 	bgt.w	b27e <_svfprintf_r+0x187e>
    a534:	f10a 0a08 	add.w	sl, sl, #8
    a538:	990e      	ldr	r1, [sp, #56]	; 0x38
    a53a:	1865      	adds	r5, r4, r1
    a53c:	1acc      	subs	r4, r1, r3
    a53e:	9b05      	ldr	r3, [sp, #20]
    a540:	1aed      	subs	r5, r5, r3
    a542:	42a5      	cmp	r5, r4
    a544:	bfa8      	it	ge
    a546:	4625      	movge	r5, r4
    a548:	2d00      	cmp	r5, #0
    a54a:	dd0d      	ble.n	a568 <_svfprintf_r+0xb68>
    a54c:	f8ca 3000 	str.w	r3, [sl]
    a550:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a552:	f8ca 5004 	str.w	r5, [sl, #4]
    a556:	3301      	adds	r3, #1
    a558:	442a      	add	r2, r5
    a55a:	2b07      	cmp	r3, #7
    a55c:	9226      	str	r2, [sp, #152]	; 0x98
    a55e:	9325      	str	r3, [sp, #148]	; 0x94
    a560:	f300 86bb 	bgt.w	b2da <_svfprintf_r+0x18da>
    a564:	f10a 0a08 	add.w	sl, sl, #8
    a568:	2d00      	cmp	r5, #0
    a56a:	bfa8      	it	ge
    a56c:	1b64      	subge	r4, r4, r5
    a56e:	2c00      	cmp	r4, #0
    a570:	f77f abde 	ble.w	9d30 <_svfprintf_r+0x330>
    a574:	2c10      	cmp	r4, #16
    a576:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a578:	f340 837c 	ble.w	ac74 <_svfprintf_r+0x1274>
    a57c:	ee1b 6a10 	vmov	r6, s22
    a580:	2510      	movs	r5, #16
    a582:	e005      	b.n	a590 <_svfprintf_r+0xb90>
    a584:	f10a 0a08 	add.w	sl, sl, #8
    a588:	3c10      	subs	r4, #16
    a58a:	2c10      	cmp	r4, #16
    a58c:	f340 8372 	ble.w	ac74 <_svfprintf_r+0x1274>
    a590:	3301      	adds	r3, #1
    a592:	4970      	ldr	r1, [pc, #448]	; (a754 <_svfprintf_r+0xd54>)
    a594:	3210      	adds	r2, #16
    a596:	2b07      	cmp	r3, #7
    a598:	e9ca 1500 	strd	r1, r5, [sl]
    a59c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a5a0:	ddf0      	ble.n	a584 <_svfprintf_r+0xb84>
    a5a2:	aa24      	add	r2, sp, #144	; 0x90
    a5a4:	4631      	mov	r1, r6
    a5a6:	4658      	mov	r0, fp
    a5a8:	f004 fea0 	bl	f2ec <__ssprint_r>
    a5ac:	2800      	cmp	r0, #0
    a5ae:	f47f ae8c 	bne.w	a2ca <_svfprintf_r+0x8ca>
    a5b2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a5b6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a5ba:	e7e5      	b.n	a588 <_svfprintf_r+0xb88>
    a5bc:	2b30      	cmp	r3, #48	; 0x30
    a5be:	f43f ad8b 	beq.w	a0d8 <_svfprintf_r+0x6d8>
    a5c2:	2330      	movs	r3, #48	; 0x30
    a5c4:	3802      	subs	r0, #2
    a5c6:	f804 3c01 	strb.w	r3, [r4, #-1]
    a5ca:	ab50      	add	r3, sp, #320	; 0x140
    a5cc:	1a1b      	subs	r3, r3, r0
    a5ce:	f8dd 8008 	ldr.w	r8, [sp, #8]
    a5d2:	9305      	str	r3, [sp, #20]
    a5d4:	4604      	mov	r4, r0
    a5d6:	e584      	b.n	a0e2 <_svfprintf_r+0x6e2>
    a5d8:	f018 0f01 	tst.w	r8, #1
    a5dc:	f47f ae82 	bne.w	a2e4 <_svfprintf_r+0x8e4>
    a5e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a5e2:	f8ca 4000 	str.w	r4, [sl]
    a5e6:	3301      	adds	r3, #1
    a5e8:	3201      	adds	r2, #1
    a5ea:	2101      	movs	r1, #1
    a5ec:	2b07      	cmp	r3, #7
    a5ee:	9226      	str	r2, [sp, #152]	; 0x98
    a5f0:	9325      	str	r3, [sp, #148]	; 0x94
    a5f2:	f8ca 1004 	str.w	r1, [sl, #4]
    a5f6:	f77f aea5 	ble.w	a344 <_svfprintf_r+0x944>
    a5fa:	ee1b 1a10 	vmov	r1, s22
    a5fe:	aa24      	add	r2, sp, #144	; 0x90
    a600:	4658      	mov	r0, fp
    a602:	f004 fe73 	bl	f2ec <__ssprint_r>
    a606:	2800      	cmp	r0, #0
    a608:	f47f ae5f 	bne.w	a2ca <_svfprintf_r+0x8ca>
    a60c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a610:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a614:	e698      	b.n	a348 <_svfprintf_r+0x948>
    a616:	990e      	ldr	r1, [sp, #56]	; 0x38
    a618:	1e4c      	subs	r4, r1, #1
    a61a:	2c00      	cmp	r4, #0
    a61c:	f77f ae94 	ble.w	a348 <_svfprintf_r+0x948>
    a620:	2c10      	cmp	r4, #16
    a622:	f340 8361 	ble.w	ace8 <_svfprintf_r+0x12e8>
    a626:	ee1b 6a10 	vmov	r6, s22
    a62a:	2510      	movs	r5, #16
    a62c:	e005      	b.n	a63a <_svfprintf_r+0xc3a>
    a62e:	f10a 0a08 	add.w	sl, sl, #8
    a632:	3c10      	subs	r4, #16
    a634:	2c10      	cmp	r4, #16
    a636:	f340 8357 	ble.w	ace8 <_svfprintf_r+0x12e8>
    a63a:	3301      	adds	r3, #1
    a63c:	4945      	ldr	r1, [pc, #276]	; (a754 <_svfprintf_r+0xd54>)
    a63e:	3210      	adds	r2, #16
    a640:	2b07      	cmp	r3, #7
    a642:	e9ca 1500 	strd	r1, r5, [sl]
    a646:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a64a:	ddf0      	ble.n	a62e <_svfprintf_r+0xc2e>
    a64c:	aa24      	add	r2, sp, #144	; 0x90
    a64e:	4631      	mov	r1, r6
    a650:	4658      	mov	r0, fp
    a652:	f004 fe4b 	bl	f2ec <__ssprint_r>
    a656:	2800      	cmp	r0, #0
    a658:	f47f ae37 	bne.w	a2ca <_svfprintf_r+0x8ca>
    a65c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a660:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a664:	e7e5      	b.n	a632 <_svfprintf_r+0xc32>
    a666:	ee1b 1a10 	vmov	r1, s22
    a66a:	aa24      	add	r2, sp, #144	; 0x90
    a66c:	4658      	mov	r0, fp
    a66e:	f004 fe3d 	bl	f2ec <__ssprint_r>
    a672:	2800      	cmp	r0, #0
    a674:	f47f ae29 	bne.w	a2ca <_svfprintf_r+0x8ca>
    a678:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a67a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a67e:	f7ff bb44 	b.w	9d0a <_svfprintf_r+0x30a>
    a682:	9b02      	ldr	r3, [sp, #8]
    a684:	f013 0310 	ands.w	r3, r3, #16
    a688:	f040 80c1 	bne.w	a80e <_svfprintf_r+0xe0e>
    a68c:	9a02      	ldr	r2, [sp, #8]
    a68e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    a692:	f000 837a 	beq.w	ad8a <_svfprintf_r+0x138a>
    a696:	9808      	ldr	r0, [sp, #32]
    a698:	f850 2b04 	ldr.w	r2, [r0], #4
    a69c:	9008      	str	r0, [sp, #32]
    a69e:	4619      	mov	r1, r3
    a6a0:	b292      	uxth	r2, r2
    a6a2:	2301      	movs	r3, #1
    a6a4:	e451      	b.n	9f4a <_svfprintf_r+0x54a>
    a6a6:	f018 0310 	ands.w	r3, r8, #16
    a6aa:	d155      	bne.n	a758 <_svfprintf_r+0xd58>
    a6ac:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    a6b0:	f000 835d 	beq.w	ad6e <_svfprintf_r+0x136e>
    a6b4:	9808      	ldr	r0, [sp, #32]
    a6b6:	f850 2b04 	ldr.w	r2, [r0], #4
    a6ba:	9008      	str	r0, [sp, #32]
    a6bc:	4619      	mov	r1, r3
    a6be:	b292      	uxth	r2, r2
    a6c0:	e4a8      	b.n	a014 <_svfprintf_r+0x614>
    a6c2:	4252      	negs	r2, r2
    a6c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    a6c8:	f8cd 8008 	str.w	r8, [sp, #8]
    a6cc:	202d      	movs	r0, #45	; 0x2d
    a6ce:	2301      	movs	r3, #1
    a6d0:	e43c      	b.n	9f4c <_svfprintf_r+0x54c>
    a6d2:	ee1b 1a10 	vmov	r1, s22
    a6d6:	aa24      	add	r2, sp, #144	; 0x90
    a6d8:	4658      	mov	r0, fp
    a6da:	f004 fe07 	bl	f2ec <__ssprint_r>
    a6de:	2800      	cmp	r0, #0
    a6e0:	f47f adf3 	bne.w	a2ca <_svfprintf_r+0x8ca>
    a6e4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a6e8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a6ec:	e616      	b.n	a31c <_svfprintf_r+0x91c>
    a6ee:	ee1b 1a10 	vmov	r1, s22
    a6f2:	aa24      	add	r2, sp, #144	; 0x90
    a6f4:	4658      	mov	r0, fp
    a6f6:	f004 fdf9 	bl	f2ec <__ssprint_r>
    a6fa:	2800      	cmp	r0, #0
    a6fc:	f47f ade5 	bne.w	a2ca <_svfprintf_r+0x8ca>
    a700:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a704:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a708:	e5fb      	b.n	a302 <_svfprintf_r+0x902>
    a70a:	f018 0f01 	tst.w	r8, #1
    a70e:	f43f ab0f 	beq.w	9d30 <_svfprintf_r+0x330>
    a712:	e52a      	b.n	a16a <_svfprintf_r+0x76a>
    a714:	9308      	str	r3, [sp, #32]
    a716:	f899 3000 	ldrb.w	r3, [r9]
    a71a:	f7ff b9cd 	b.w	9ab8 <_svfprintf_r+0xb8>
    a71e:	ac50      	add	r4, sp, #320	; 0x140
    a720:	e4df      	b.n	a0e2 <_svfprintf_r+0x6e2>
    a722:	f418 7f00 	tst.w	r8, #512	; 0x200
    a726:	f040 83db 	bne.w	aee0 <_svfprintf_r+0x14e0>
    a72a:	f853 2b04 	ldr.w	r2, [r3], #4
    a72e:	9308      	str	r3, [sp, #32]
    a730:	17d1      	asrs	r1, r2, #31
    a732:	460b      	mov	r3, r1
    a734:	f7ff bbb6 	b.w	9ea4 <_svfprintf_r+0x4a4>
    a738:	9b08      	ldr	r3, [sp, #32]
    a73a:	9804      	ldr	r0, [sp, #16]
    a73c:	f853 1b04 	ldr.w	r1, [r3], #4
    a740:	9308      	str	r3, [sp, #32]
    a742:	17c2      	asrs	r2, r0, #31
    a744:	e9c1 0200 	strd	r0, r2, [r1]
    a748:	464c      	mov	r4, r9
    a74a:	f7ff b98b 	b.w	9a64 <_svfprintf_r+0x64>
    a74e:	bf00      	nop
    a750:	200025a4 	.word	0x200025a4
    a754:	20007ba4 	.word	0x20007ba4
    a758:	9b08      	ldr	r3, [sp, #32]
    a75a:	f853 2b04 	ldr.w	r2, [r3], #4
    a75e:	9308      	str	r3, [sp, #32]
    a760:	e458      	b.n	a014 <_svfprintf_r+0x614>
    a762:	eeb4 8b48 	vcmp.f64	d8, d8
    a766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a76a:	f180 8694 	bvs.w	b496 <_svfprintf_r+0x1a96>
    a76e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a770:	2b61      	cmp	r3, #97	; 0x61
    a772:	f000 8552 	beq.w	b21a <_svfprintf_r+0x181a>
    a776:	2b41      	cmp	r3, #65	; 0x41
    a778:	f000 85c0 	beq.w	b2fc <_svfprintf_r+0x18fc>
    a77c:	9b03      	ldr	r3, [sp, #12]
    a77e:	3301      	adds	r3, #1
    a780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a782:	f023 0520 	bic.w	r5, r3, #32
    a786:	f000 8480 	beq.w	b08a <_svfprintf_r+0x168a>
    a78a:	2d47      	cmp	r5, #71	; 0x47
    a78c:	d104      	bne.n	a798 <_svfprintf_r+0xd98>
    a78e:	9b03      	ldr	r3, [sp, #12]
    a790:	2b00      	cmp	r3, #0
    a792:	bf08      	it	eq
    a794:	2301      	moveq	r3, #1
    a796:	9303      	str	r3, [sp, #12]
    a798:	ee18 3a90 	vmov	r3, s17
    a79c:	2b00      	cmp	r3, #0
    a79e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    a7a2:	4646      	mov	r6, r8
    a7a4:	f2c0 8618 	blt.w	b3d8 <_svfprintf_r+0x19d8>
    a7a8:	eeb0 ab48 	vmov.f64	d10, d8
    a7ac:	2300      	movs	r3, #0
    a7ae:	4690      	mov	r8, r2
    a7b0:	9309      	str	r3, [sp, #36]	; 0x24
    a7b2:	9307      	str	r3, [sp, #28]
    a7b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7b6:	3b41      	subs	r3, #65	; 0x41
    a7b8:	2b25      	cmp	r3, #37	; 0x25
    a7ba:	f200 8398 	bhi.w	aeee <_svfprintf_r+0x14ee>
    a7be:	e8df f013 	tbh	[pc, r3, lsl #1]
    a7c2:	046f      	.short	0x046f
    a7c4:	03960396 	.word	0x03960396
    a7c8:	04680396 	.word	0x04680396
    a7cc:	0396046c 	.word	0x0396046c
    a7d0:	03960396 	.word	0x03960396
    a7d4:	03960396 	.word	0x03960396
    a7d8:	03960396 	.word	0x03960396
    a7dc:	03960396 	.word	0x03960396
    a7e0:	03960396 	.word	0x03960396
    a7e4:	03960396 	.word	0x03960396
    a7e8:	03960396 	.word	0x03960396
    a7ec:	03960396 	.word	0x03960396
    a7f0:	03960396 	.word	0x03960396
    a7f4:	03960396 	.word	0x03960396
    a7f8:	03960396 	.word	0x03960396
    a7fc:	03960396 	.word	0x03960396
    a800:	03960396 	.word	0x03960396
    a804:	03960396 	.word	0x03960396
    a808:	04680396 	.word	0x04680396
    a80c:	046c      	.short	0x046c
    a80e:	9b08      	ldr	r3, [sp, #32]
    a810:	f853 2b04 	ldr.w	r2, [r3], #4
    a814:	9308      	str	r3, [sp, #32]
    a816:	2301      	movs	r3, #1
    a818:	f7ff bb97 	b.w	9f4a <_svfprintf_r+0x54a>
    a81c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a81e:	2b00      	cmp	r3, #0
    a820:	f43f a9cf 	beq.w	9bc2 <_svfprintf_r+0x1c2>
    a824:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a826:	781b      	ldrb	r3, [r3, #0]
    a828:	2b00      	cmp	r3, #0
    a82a:	f43f a9ca 	beq.w	9bc2 <_svfprintf_r+0x1c2>
    a82e:	f899 3000 	ldrb.w	r3, [r9]
    a832:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    a836:	f7ff b93f 	b.w	9ab8 <_svfprintf_r+0xb8>
    a83a:	930b      	str	r3, [sp, #44]	; 0x2c
    a83c:	f8cd 8008 	str.w	r8, [sp, #8]
    a840:	f7ff bbf1 	b.w	a026 <_svfprintf_r+0x626>
    a844:	930b      	str	r3, [sp, #44]	; 0x2c
    a846:	4b9a      	ldr	r3, [pc, #616]	; (aab0 <_svfprintf_r+0x10b0>)
    a848:	9311      	str	r3, [sp, #68]	; 0x44
    a84a:	f018 0120 	ands.w	r1, r8, #32
    a84e:	f000 8105 	beq.w	aa5c <_svfprintf_r+0x105c>
    a852:	9b08      	ldr	r3, [sp, #32]
    a854:	3307      	adds	r3, #7
    a856:	f023 0307 	bic.w	r3, r3, #7
    a85a:	6859      	ldr	r1, [r3, #4]
    a85c:	f853 2b08 	ldr.w	r2, [r3], #8
    a860:	9308      	str	r3, [sp, #32]
    a862:	f018 0f01 	tst.w	r8, #1
    a866:	d00a      	beq.n	a87e <_svfprintf_r+0xe7e>
    a868:	ea52 0301 	orrs.w	r3, r2, r1
    a86c:	d007      	beq.n	a87e <_svfprintf_r+0xe7e>
    a86e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a870:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    a874:	2330      	movs	r3, #48	; 0x30
    a876:	f048 0802 	orr.w	r8, r8, #2
    a87a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    a87e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    a882:	9302      	str	r3, [sp, #8]
    a884:	2302      	movs	r3, #2
    a886:	f7ff bb60 	b.w	9f4a <_svfprintf_r+0x54a>
    a88a:	930b      	str	r3, [sp, #44]	; 0x2c
    a88c:	f7ff bbb6 	b.w	9ffc <_svfprintf_r+0x5fc>
    a890:	930b      	str	r3, [sp, #44]	; 0x2c
    a892:	4b88      	ldr	r3, [pc, #544]	; (aab4 <_svfprintf_r+0x10b4>)
    a894:	9311      	str	r3, [sp, #68]	; 0x44
    a896:	e7d8      	b.n	a84a <_svfprintf_r+0xe4a>
    a898:	9b08      	ldr	r3, [sp, #32]
    a89a:	2101      	movs	r1, #1
    a89c:	f853 2b04 	ldr.w	r2, [r3], #4
    a8a0:	9102      	str	r1, [sp, #8]
    a8a2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    a8a6:	9308      	str	r3, [sp, #32]
    a8a8:	9105      	str	r1, [sp, #20]
    a8aa:	ac37      	add	r4, sp, #220	; 0xdc
    a8ac:	f7ff baaf 	b.w	9e0e <_svfprintf_r+0x40e>
    a8b0:	ee1b 1a10 	vmov	r1, s22
    a8b4:	aa24      	add	r2, sp, #144	; 0x90
    a8b6:	4658      	mov	r0, fp
    a8b8:	f004 fd18 	bl	f2ec <__ssprint_r>
    a8bc:	2800      	cmp	r0, #0
    a8be:	f47f ad04 	bne.w	a2ca <_svfprintf_r+0x8ca>
    a8c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a8c4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    a8c8:	e45d      	b.n	a186 <_svfprintf_r+0x786>
    a8ca:	9b03      	ldr	r3, [sp, #12]
    a8cc:	9407      	str	r4, [sp, #28]
    a8ce:	2b06      	cmp	r3, #6
    a8d0:	4622      	mov	r2, r4
    a8d2:	bf28      	it	cs
    a8d4:	2306      	movcs	r3, #6
    a8d6:	9403      	str	r4, [sp, #12]
    a8d8:	4621      	mov	r1, r4
    a8da:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    a8de:	4c76      	ldr	r4, [pc, #472]	; (aab8 <_svfprintf_r+0x10b8>)
    a8e0:	9302      	str	r3, [sp, #8]
    a8e2:	9305      	str	r3, [sp, #20]
    a8e4:	920f      	str	r2, [sp, #60]	; 0x3c
    a8e6:	f7ff ba6c 	b.w	9dc2 <_svfprintf_r+0x3c2>
    a8ea:	2140      	movs	r1, #64	; 0x40
    a8ec:	4658      	mov	r0, fp
    a8ee:	f7fc f82f 	bl	6950 <_malloc_r>
    a8f2:	6020      	str	r0, [r4, #0]
    a8f4:	6120      	str	r0, [r4, #16]
    a8f6:	2800      	cmp	r0, #0
    a8f8:	f000 860f 	beq.w	b51a <_svfprintf_r+0x1b1a>
    a8fc:	2340      	movs	r3, #64	; 0x40
    a8fe:	6163      	str	r3, [r4, #20]
    a900:	f7ff b89e 	b.w	9a40 <_svfprintf_r+0x40>
    a904:	2d10      	cmp	r5, #16
    a906:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a908:	f340 825d 	ble.w	adc6 <_svfprintf_r+0x13c6>
    a90c:	4651      	mov	r1, sl
    a90e:	2610      	movs	r6, #16
    a910:	ee1b aa10 	vmov	sl, s22
    a914:	e004      	b.n	a920 <_svfprintf_r+0xf20>
    a916:	3108      	adds	r1, #8
    a918:	3d10      	subs	r5, #16
    a91a:	2d10      	cmp	r5, #16
    a91c:	f340 8252 	ble.w	adc4 <_svfprintf_r+0x13c4>
    a920:	3301      	adds	r3, #1
    a922:	4866      	ldr	r0, [pc, #408]	; (aabc <_svfprintf_r+0x10bc>)
    a924:	3210      	adds	r2, #16
    a926:	2b07      	cmp	r3, #7
    a928:	e9c1 0600 	strd	r0, r6, [r1]
    a92c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    a930:	ddf1      	ble.n	a916 <_svfprintf_r+0xf16>
    a932:	aa24      	add	r2, sp, #144	; 0x90
    a934:	4651      	mov	r1, sl
    a936:	4658      	mov	r0, fp
    a938:	f004 fcd8 	bl	f2ec <__ssprint_r>
    a93c:	2800      	cmp	r0, #0
    a93e:	f47f acc4 	bne.w	a2ca <_svfprintf_r+0x8ca>
    a942:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    a946:	a927      	add	r1, sp, #156	; 0x9c
    a948:	e7e6      	b.n	a918 <_svfprintf_r+0xf18>
    a94a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a94c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a950:	18e3      	adds	r3, r4, r3
    a952:	9303      	str	r3, [sp, #12]
    a954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a956:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    a95a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    a95c:	9d05      	ldr	r5, [sp, #20]
    a95e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    a962:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    a966:	940b      	str	r4, [sp, #44]	; 0x2c
    a968:	ee1b 1a10 	vmov	r1, s22
    a96c:	4650      	mov	r0, sl
    a96e:	2b00      	cmp	r3, #0
    a970:	d034      	beq.n	a9dc <_svfprintf_r+0xfdc>
    a972:	f1b8 0f00 	cmp.w	r8, #0
    a976:	d135      	bne.n	a9e4 <_svfprintf_r+0xfe4>
    a978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a97a:	3b01      	subs	r3, #1
    a97c:	3e01      	subs	r6, #1
    a97e:	930d      	str	r3, [sp, #52]	; 0x34
    a980:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a982:	e9c0 3900 	strd	r3, r9, [r0]
    a986:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a988:	3301      	adds	r3, #1
    a98a:	444a      	add	r2, r9
    a98c:	2b07      	cmp	r3, #7
    a98e:	9226      	str	r2, [sp, #152]	; 0x98
    a990:	9325      	str	r3, [sp, #148]	; 0x94
    a992:	dc6c      	bgt.n	aa6e <_svfprintf_r+0x106e>
    a994:	3008      	adds	r0, #8
    a996:	9b03      	ldr	r3, [sp, #12]
    a998:	f896 c000 	ldrb.w	ip, [r6]
    a99c:	1b5b      	subs	r3, r3, r5
    a99e:	4563      	cmp	r3, ip
    a9a0:	bfa8      	it	ge
    a9a2:	4663      	movge	r3, ip
    a9a4:	2b00      	cmp	r3, #0
    a9a6:	469a      	mov	sl, r3
    a9a8:	dd0c      	ble.n	a9c4 <_svfprintf_r+0xfc4>
    a9aa:	9c25      	ldr	r4, [sp, #148]	; 0x94
    a9ac:	3401      	adds	r4, #1
    a9ae:	441a      	add	r2, r3
    a9b0:	2c07      	cmp	r4, #7
    a9b2:	e9c0 5300 	strd	r5, r3, [r0]
    a9b6:	9226      	str	r2, [sp, #152]	; 0x98
    a9b8:	9425      	str	r4, [sp, #148]	; 0x94
    a9ba:	f300 8177 	bgt.w	acac <_svfprintf_r+0x12ac>
    a9be:	f896 c000 	ldrb.w	ip, [r6]
    a9c2:	3008      	adds	r0, #8
    a9c4:	f1ba 0f00 	cmp.w	sl, #0
    a9c8:	bfac      	ite	ge
    a9ca:	ebac 040a 	subge.w	r4, ip, sl
    a9ce:	4664      	movlt	r4, ip
    a9d0:	2c00      	cmp	r4, #0
    a9d2:	dc0a      	bgt.n	a9ea <_svfprintf_r+0xfea>
    a9d4:	4465      	add	r5, ip
    a9d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a9d8:	2b00      	cmp	r3, #0
    a9da:	d1ca      	bne.n	a972 <_svfprintf_r+0xf72>
    a9dc:	f1b8 0f00 	cmp.w	r8, #0
    a9e0:	f000 83ac 	beq.w	b13c <_svfprintf_r+0x173c>
    a9e4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    a9e8:	e7ca      	b.n	a980 <_svfprintf_r+0xf80>
    a9ea:	2c10      	cmp	r4, #16
    a9ec:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    a9f0:	dd24      	ble.n	aa3c <_svfprintf_r+0x103c>
    a9f2:	9505      	str	r5, [sp, #20]
    a9f4:	f04f 0a10 	mov.w	sl, #16
    a9f8:	4663      	mov	r3, ip
    a9fa:	460d      	mov	r5, r1
    a9fc:	e004      	b.n	aa08 <_svfprintf_r+0x1008>
    a9fe:	3c10      	subs	r4, #16
    aa00:	2c10      	cmp	r4, #16
    aa02:	f100 0008 	add.w	r0, r0, #8
    aa06:	dd16      	ble.n	aa36 <_svfprintf_r+0x1036>
    aa08:	3301      	adds	r3, #1
    aa0a:	492c      	ldr	r1, [pc, #176]	; (aabc <_svfprintf_r+0x10bc>)
    aa0c:	3210      	adds	r2, #16
    aa0e:	2b07      	cmp	r3, #7
    aa10:	e9c0 1a00 	strd	r1, sl, [r0]
    aa14:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    aa18:	ddf1      	ble.n	a9fe <_svfprintf_r+0xffe>
    aa1a:	aa24      	add	r2, sp, #144	; 0x90
    aa1c:	4629      	mov	r1, r5
    aa1e:	4658      	mov	r0, fp
    aa20:	f004 fc64 	bl	f2ec <__ssprint_r>
    aa24:	2800      	cmp	r0, #0
    aa26:	f47f ac50 	bne.w	a2ca <_svfprintf_r+0x8ca>
    aa2a:	3c10      	subs	r4, #16
    aa2c:	2c10      	cmp	r4, #16
    aa2e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    aa32:	a827      	add	r0, sp, #156	; 0x9c
    aa34:	dce8      	bgt.n	aa08 <_svfprintf_r+0x1008>
    aa36:	4629      	mov	r1, r5
    aa38:	9d05      	ldr	r5, [sp, #20]
    aa3a:	469c      	mov	ip, r3
    aa3c:	f10c 0301 	add.w	r3, ip, #1
    aa40:	4422      	add	r2, r4
    aa42:	6044      	str	r4, [r0, #4]
    aa44:	2b07      	cmp	r3, #7
    aa46:	4c1d      	ldr	r4, [pc, #116]	; (aabc <_svfprintf_r+0x10bc>)
    aa48:	6004      	str	r4, [r0, #0]
    aa4a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    aa4e:	f300 83c6 	bgt.w	b1de <_svfprintf_r+0x17de>
    aa52:	f896 c000 	ldrb.w	ip, [r6]
    aa56:	3008      	adds	r0, #8
    aa58:	4465      	add	r5, ip
    aa5a:	e7bc      	b.n	a9d6 <_svfprintf_r+0xfd6>
    aa5c:	f018 0310 	ands.w	r3, r8, #16
    aa60:	f000 80c2 	beq.w	abe8 <_svfprintf_r+0x11e8>
    aa64:	9b08      	ldr	r3, [sp, #32]
    aa66:	f853 2b04 	ldr.w	r2, [r3], #4
    aa6a:	9308      	str	r3, [sp, #32]
    aa6c:	e6f9      	b.n	a862 <_svfprintf_r+0xe62>
    aa6e:	aa24      	add	r2, sp, #144	; 0x90
    aa70:	4658      	mov	r0, fp
    aa72:	9105      	str	r1, [sp, #20]
    aa74:	f004 fc3a 	bl	f2ec <__ssprint_r>
    aa78:	2800      	cmp	r0, #0
    aa7a:	f47f ac26 	bne.w	a2ca <_svfprintf_r+0x8ca>
    aa7e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    aa80:	9905      	ldr	r1, [sp, #20]
    aa82:	a827      	add	r0, sp, #156	; 0x9c
    aa84:	e787      	b.n	a996 <_svfprintf_r+0xf96>
    aa86:	9802      	ldr	r0, [sp, #8]
    aa88:	f8cd a01c 	str.w	sl, [sp, #28]
    aa8c:	ac50      	add	r4, sp, #320	; 0x140
    aa8e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    aa92:	2500      	movs	r5, #0
    aa94:	ee0a ba10 	vmov	s20, fp
    aa98:	4b09      	ldr	r3, [pc, #36]	; (aac0 <_svfprintf_r+0x10c0>)
    aa9a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    aa9e:	f8cd 9014 	str.w	r9, [sp, #20]
    aaa2:	46a3      	mov	fp, r4
    aaa4:	f04f 0805 	mov.w	r8, #5
    aaa8:	46ac      	mov	ip, r5
    aaaa:	4604      	mov	r4, r0
    aaac:	e010      	b.n	aad0 <_svfprintf_r+0x10d0>
    aaae:	bf00      	nop
    aab0:	20000af8 	.word	0x20000af8
    aab4:	20000b0c 	.word	0x20000b0c
    aab8:	20000b20 	.word	0x20000b20
    aabc:	20007ba4 	.word	0x20007ba4
    aac0:	cccccccd 	.word	0xcccccccd
    aac4:	2a0a      	cmp	r2, #10
    aac6:	f171 0100 	sbcs.w	r1, r1, #0
    aaca:	d336      	bcc.n	ab3a <_svfprintf_r+0x113a>
    aacc:	464a      	mov	r2, r9
    aace:	4631      	mov	r1, r6
    aad0:	1850      	adds	r0, r2, r1
    aad2:	f140 0000 	adc.w	r0, r0, #0
    aad6:	fba3 5600 	umull	r5, r6, r3, r0
    aada:	f026 0503 	bic.w	r5, r6, #3
    aade:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    aae2:	1b40      	subs	r0, r0, r5
    aae4:	1a15      	subs	r5, r2, r0
    aae6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    aaea:	f161 0e00 	sbc.w	lr, r1, #0
    aaee:	fb06 f605 	mul.w	r6, r6, r5
    aaf2:	fba5 9503 	umull	r9, r5, r5, r3
    aaf6:	fb03 660e 	mla	r6, r3, lr, r6
    aafa:	f009 0e01 	and.w	lr, r9, #1
    aafe:	442e      	add	r6, r5
    ab00:	fbae 5e08 	umull	r5, lr, lr, r8
    ab04:	182d      	adds	r5, r5, r0
    ab06:	ea4f 0959 	mov.w	r9, r9, lsr #1
    ab0a:	3530      	adds	r5, #48	; 0x30
    ab0c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    ab10:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    ab14:	f10c 0c01 	add.w	ip, ip, #1
    ab18:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    ab1c:	0876      	lsrs	r6, r6, #1
    ab1e:	2c00      	cmp	r4, #0
    ab20:	d0d0      	beq.n	aac4 <_svfprintf_r+0x10c4>
    ab22:	f89a 0000 	ldrb.w	r0, [sl]
    ab26:	4584      	cmp	ip, r0
    ab28:	d1cc      	bne.n	aac4 <_svfprintf_r+0x10c4>
    ab2a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    ab2e:	d0c9      	beq.n	aac4 <_svfprintf_r+0x10c4>
    ab30:	2a0a      	cmp	r2, #10
    ab32:	f171 0100 	sbcs.w	r1, r1, #0
    ab36:	f080 818f 	bcs.w	ae58 <_svfprintf_r+0x1458>
    ab3a:	465c      	mov	r4, fp
    ab3c:	ab50      	add	r3, sp, #320	; 0x140
    ab3e:	1b1b      	subs	r3, r3, r4
    ab40:	f8dd 9014 	ldr.w	r9, [sp, #20]
    ab44:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    ab48:	ee1a ba10 	vmov	fp, s20
    ab4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    ab50:	f8dd 8008 	ldr.w	r8, [sp, #8]
    ab54:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    ab58:	9305      	str	r3, [sp, #20]
    ab5a:	f7ff bac2 	b.w	a0e2 <_svfprintf_r+0x6e2>
    ab5e:	ee1b 1a10 	vmov	r1, s22
    ab62:	aa24      	add	r2, sp, #144	; 0x90
    ab64:	4658      	mov	r0, fp
    ab66:	f004 fbc1 	bl	f2ec <__ssprint_r>
    ab6a:	2800      	cmp	r0, #0
    ab6c:	f47f abad 	bne.w	a2ca <_svfprintf_r+0x8ca>
    ab70:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ab74:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ab76:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ab7a:	f7ff b896 	b.w	9caa <_svfprintf_r+0x2aa>
    ab7e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ab80:	48be      	ldr	r0, [pc, #760]	; (ae7c <_svfprintf_r+0x147c>)
    ab82:	f8ca 0000 	str.w	r0, [sl]
    ab86:	3301      	adds	r3, #1
    ab88:	3201      	adds	r2, #1
    ab8a:	2001      	movs	r0, #1
    ab8c:	2b07      	cmp	r3, #7
    ab8e:	9226      	str	r2, [sp, #152]	; 0x98
    ab90:	9325      	str	r3, [sp, #148]	; 0x94
    ab92:	f8ca 0004 	str.w	r0, [sl, #4]
    ab96:	f300 8177 	bgt.w	ae88 <_svfprintf_r+0x1488>
    ab9a:	f10a 0a08 	add.w	sl, sl, #8
    ab9e:	2900      	cmp	r1, #0
    aba0:	f040 80af 	bne.w	ad02 <_svfprintf_r+0x1302>
    aba4:	990e      	ldr	r1, [sp, #56]	; 0x38
    aba6:	f008 0301 	and.w	r3, r8, #1
    abaa:	430b      	orrs	r3, r1
    abac:	f43f a8c0 	beq.w	9d30 <_svfprintf_r+0x330>
    abb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    abb2:	9912      	ldr	r1, [sp, #72]	; 0x48
    abb4:	441a      	add	r2, r3
    abb6:	e9ca 1300 	strd	r1, r3, [sl]
    abba:	9b25      	ldr	r3, [sp, #148]	; 0x94
    abbc:	9226      	str	r2, [sp, #152]	; 0x98
    abbe:	3301      	adds	r3, #1
    abc0:	2b07      	cmp	r3, #7
    abc2:	9325      	str	r3, [sp, #148]	; 0x94
    abc4:	f300 8252 	bgt.w	b06c <_svfprintf_r+0x166c>
    abc8:	f10a 0a08 	add.w	sl, sl, #8
    abcc:	990e      	ldr	r1, [sp, #56]	; 0x38
    abce:	f8ca 4000 	str.w	r4, [sl]
    abd2:	3301      	adds	r3, #1
    abd4:	440a      	add	r2, r1
    abd6:	2b07      	cmp	r3, #7
    abd8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    abdc:	f8ca 1004 	str.w	r1, [sl, #4]
    abe0:	f77f a8a4 	ble.w	9d2c <_svfprintf_r+0x32c>
    abe4:	f7ff bbbd 	b.w	a362 <_svfprintf_r+0x962>
    abe8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    abec:	f000 80dd 	beq.w	adaa <_svfprintf_r+0x13aa>
    abf0:	9808      	ldr	r0, [sp, #32]
    abf2:	f850 2b04 	ldr.w	r2, [r0], #4
    abf6:	9008      	str	r0, [sp, #32]
    abf8:	4619      	mov	r1, r3
    abfa:	b292      	uxth	r2, r2
    abfc:	e631      	b.n	a862 <_svfprintf_r+0xe62>
    abfe:	ee1b 1a10 	vmov	r1, s22
    ac02:	aa24      	add	r2, sp, #144	; 0x90
    ac04:	4658      	mov	r0, fp
    ac06:	f004 fb71 	bl	f2ec <__ssprint_r>
    ac0a:	2800      	cmp	r0, #0
    ac0c:	f47f ab5d 	bne.w	a2ca <_svfprintf_r+0x8ca>
    ac10:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ac12:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ac16:	f7ff baa3 	b.w	a160 <_svfprintf_r+0x760>
    ac1a:	ae22      	add	r6, sp, #136	; 0x88
    ac1c:	2208      	movs	r2, #8
    ac1e:	2100      	movs	r1, #0
    ac20:	4630      	mov	r0, r6
    ac22:	941d      	str	r4, [sp, #116]	; 0x74
    ac24:	f7fd fd60 	bl	86e8 <memset>
    ac28:	9b03      	ldr	r3, [sp, #12]
    ac2a:	1c5a      	adds	r2, r3, #1
    ac2c:	f000 80db 	beq.w	ade6 <_svfprintf_r+0x13e6>
    ac30:	2500      	movs	r5, #0
    ac32:	f8cd 9008 	str.w	r9, [sp, #8]
    ac36:	f8cd 801c 	str.w	r8, [sp, #28]
    ac3a:	4699      	mov	r9, r3
    ac3c:	46a8      	mov	r8, r5
    ac3e:	e00c      	b.n	ac5a <_svfprintf_r+0x125a>
    ac40:	a937      	add	r1, sp, #220	; 0xdc
    ac42:	4658      	mov	r0, fp
    ac44:	f003 fa56 	bl	e0f4 <_wcrtomb_r>
    ac48:	1c43      	adds	r3, r0, #1
    ac4a:	4440      	add	r0, r8
    ac4c:	f000 83c8 	beq.w	b3e0 <_svfprintf_r+0x19e0>
    ac50:	4548      	cmp	r0, r9
    ac52:	dc08      	bgt.n	ac66 <_svfprintf_r+0x1266>
    ac54:	f000 8418 	beq.w	b488 <_svfprintf_r+0x1a88>
    ac58:	4680      	mov	r8, r0
    ac5a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    ac5c:	5952      	ldr	r2, [r2, r5]
    ac5e:	4633      	mov	r3, r6
    ac60:	3504      	adds	r5, #4
    ac62:	2a00      	cmp	r2, #0
    ac64:	d1ec      	bne.n	ac40 <_svfprintf_r+0x1240>
    ac66:	f8cd 8014 	str.w	r8, [sp, #20]
    ac6a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    ac6e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    ac72:	e0c5      	b.n	ae00 <_svfprintf_r+0x1400>
    ac74:	3301      	adds	r3, #1
    ac76:	4982      	ldr	r1, [pc, #520]	; (ae80 <_svfprintf_r+0x1480>)
    ac78:	f8ca 4004 	str.w	r4, [sl, #4]
    ac7c:	4422      	add	r2, r4
    ac7e:	2b07      	cmp	r3, #7
    ac80:	f8ca 1000 	str.w	r1, [sl]
    ac84:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ac88:	f77f a850 	ble.w	9d2c <_svfprintf_r+0x32c>
    ac8c:	f7ff bb69 	b.w	a362 <_svfprintf_r+0x962>
    ac90:	ee1b 1a10 	vmov	r1, s22
    ac94:	aa24      	add	r2, sp, #144	; 0x90
    ac96:	4658      	mov	r0, fp
    ac98:	f004 fb28 	bl	f2ec <__ssprint_r>
    ac9c:	2800      	cmp	r0, #0
    ac9e:	f47f ab14 	bne.w	a2ca <_svfprintf_r+0x8ca>
    aca2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    aca4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    aca8:	f7ff b829 	b.w	9cfe <_svfprintf_r+0x2fe>
    acac:	aa24      	add	r2, sp, #144	; 0x90
    acae:	4658      	mov	r0, fp
    acb0:	9105      	str	r1, [sp, #20]
    acb2:	f004 fb1b 	bl	f2ec <__ssprint_r>
    acb6:	2800      	cmp	r0, #0
    acb8:	f47f ab07 	bne.w	a2ca <_svfprintf_r+0x8ca>
    acbc:	f896 c000 	ldrb.w	ip, [r6]
    acc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    acc2:	9905      	ldr	r1, [sp, #20]
    acc4:	a827      	add	r0, sp, #156	; 0x9c
    acc6:	e67d      	b.n	a9c4 <_svfprintf_r+0xfc4>
    acc8:	2b01      	cmp	r3, #1
    acca:	f8cd 8008 	str.w	r8, [sp, #8]
    acce:	f47f a9f3 	bne.w	a0b8 <_svfprintf_r+0x6b8>
    acd2:	f7ff bb93 	b.w	a3fc <_svfprintf_r+0x9fc>
    acd6:	9b08      	ldr	r3, [sp, #32]
    acd8:	9904      	ldr	r1, [sp, #16]
    acda:	f853 2b04 	ldr.w	r2, [r3], #4
    acde:	464c      	mov	r4, r9
    ace0:	6011      	str	r1, [r2, #0]
    ace2:	9308      	str	r3, [sp, #32]
    ace4:	f7fe bebe 	b.w	9a64 <_svfprintf_r+0x64>
    ace8:	3301      	adds	r3, #1
    acea:	4965      	ldr	r1, [pc, #404]	; (ae80 <_svfprintf_r+0x1480>)
    acec:	f8ca 4004 	str.w	r4, [sl, #4]
    acf0:	4422      	add	r2, r4
    acf2:	2b07      	cmp	r3, #7
    acf4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    acf8:	f8ca 1000 	str.w	r1, [sl]
    acfc:	f77f ab22 	ble.w	a344 <_svfprintf_r+0x944>
    ad00:	e47b      	b.n	a5fa <_svfprintf_r+0xbfa>
    ad02:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ad04:	9812      	ldr	r0, [sp, #72]	; 0x48
    ad06:	441a      	add	r2, r3
    ad08:	e9ca 0300 	strd	r0, r3, [sl]
    ad0c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ad0e:	9226      	str	r2, [sp, #152]	; 0x98
    ad10:	3301      	adds	r3, #1
    ad12:	2b07      	cmp	r3, #7
    ad14:	9325      	str	r3, [sp, #148]	; 0x94
    ad16:	f300 81a9 	bgt.w	b06c <_svfprintf_r+0x166c>
    ad1a:	f10a 0a08 	add.w	sl, sl, #8
    ad1e:	2900      	cmp	r1, #0
    ad20:	f6bf af54 	bge.w	abcc <_svfprintf_r+0x11cc>
    ad24:	424d      	negs	r5, r1
    ad26:	3110      	adds	r1, #16
    ad28:	f280 830f 	bge.w	b34a <_svfprintf_r+0x194a>
    ad2c:	ee1b 1a10 	vmov	r1, s22
    ad30:	2610      	movs	r6, #16
    ad32:	e005      	b.n	ad40 <_svfprintf_r+0x1340>
    ad34:	f10a 0a08 	add.w	sl, sl, #8
    ad38:	3d10      	subs	r5, #16
    ad3a:	2d10      	cmp	r5, #16
    ad3c:	f340 8305 	ble.w	b34a <_svfprintf_r+0x194a>
    ad40:	3301      	adds	r3, #1
    ad42:	484f      	ldr	r0, [pc, #316]	; (ae80 <_svfprintf_r+0x1480>)
    ad44:	3210      	adds	r2, #16
    ad46:	2b07      	cmp	r3, #7
    ad48:	e9ca 0600 	strd	r0, r6, [sl]
    ad4c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ad50:	ddf0      	ble.n	ad34 <_svfprintf_r+0x1334>
    ad52:	aa24      	add	r2, sp, #144	; 0x90
    ad54:	4658      	mov	r0, fp
    ad56:	9103      	str	r1, [sp, #12]
    ad58:	f004 fac8 	bl	f2ec <__ssprint_r>
    ad5c:	2800      	cmp	r0, #0
    ad5e:	f47f aab4 	bne.w	a2ca <_svfprintf_r+0x8ca>
    ad62:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ad66:	9903      	ldr	r1, [sp, #12]
    ad68:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ad6c:	e7e4      	b.n	ad38 <_svfprintf_r+0x1338>
    ad6e:	9b08      	ldr	r3, [sp, #32]
    ad70:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    ad74:	bf1a      	itte	ne
    ad76:	4611      	movne	r1, r2
    ad78:	f853 2b04 	ldrne.w	r2, [r3], #4
    ad7c:	f853 2b04 	ldreq.w	r2, [r3], #4
    ad80:	9308      	str	r3, [sp, #32]
    ad82:	bf18      	it	ne
    ad84:	b2d2      	uxtbne	r2, r2
    ad86:	f7ff b945 	b.w	a014 <_svfprintf_r+0x614>
    ad8a:	9b02      	ldr	r3, [sp, #8]
    ad8c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    ad90:	9b08      	ldr	r3, [sp, #32]
    ad92:	bf1a      	itte	ne
    ad94:	4611      	movne	r1, r2
    ad96:	f853 2b04 	ldrne.w	r2, [r3], #4
    ad9a:	f853 2b04 	ldreq.w	r2, [r3], #4
    ad9e:	9308      	str	r3, [sp, #32]
    ada0:	bf18      	it	ne
    ada2:	b2d2      	uxtbne	r2, r2
    ada4:	2301      	movs	r3, #1
    ada6:	f7ff b8d0 	b.w	9f4a <_svfprintf_r+0x54a>
    adaa:	9b08      	ldr	r3, [sp, #32]
    adac:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    adb0:	bf1a      	itte	ne
    adb2:	4611      	movne	r1, r2
    adb4:	f853 2b04 	ldrne.w	r2, [r3], #4
    adb8:	f853 2b04 	ldreq.w	r2, [r3], #4
    adbc:	9308      	str	r3, [sp, #32]
    adbe:	bf18      	it	ne
    adc0:	b2d2      	uxtbne	r2, r2
    adc2:	e54e      	b.n	a862 <_svfprintf_r+0xe62>
    adc4:	468a      	mov	sl, r1
    adc6:	3301      	adds	r3, #1
    adc8:	492d      	ldr	r1, [pc, #180]	; (ae80 <_svfprintf_r+0x1480>)
    adca:	f8ca 5004 	str.w	r5, [sl, #4]
    adce:	442a      	add	r2, r5
    add0:	2b07      	cmp	r3, #7
    add2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    add6:	f8ca 1000 	str.w	r1, [sl]
    adda:	f300 8139 	bgt.w	b050 <_svfprintf_r+0x1650>
    adde:	f10a 0a08 	add.w	sl, sl, #8
    ade2:	f7ff bb8c 	b.w	a4fe <_svfprintf_r+0xafe>
    ade6:	2300      	movs	r3, #0
    ade8:	4619      	mov	r1, r3
    adea:	9600      	str	r6, [sp, #0]
    adec:	aa1d      	add	r2, sp, #116	; 0x74
    adee:	4658      	mov	r0, fp
    adf0:	f003 f9a6 	bl	e140 <_wcsrtombs_r>
    adf4:	4603      	mov	r3, r0
    adf6:	3301      	adds	r3, #1
    adf8:	9005      	str	r0, [sp, #20]
    adfa:	f000 82f1 	beq.w	b3e0 <_svfprintf_r+0x19e0>
    adfe:	941d      	str	r4, [sp, #116]	; 0x74
    ae00:	9b05      	ldr	r3, [sp, #20]
    ae02:	2b00      	cmp	r3, #0
    ae04:	d04e      	beq.n	aea4 <_svfprintf_r+0x14a4>
    ae06:	2b63      	cmp	r3, #99	; 0x63
    ae08:	f300 8118 	bgt.w	b03c <_svfprintf_r+0x163c>
    ae0c:	2300      	movs	r3, #0
    ae0e:	9307      	str	r3, [sp, #28]
    ae10:	ac37      	add	r4, sp, #220	; 0xdc
    ae12:	2208      	movs	r2, #8
    ae14:	2100      	movs	r1, #0
    ae16:	4630      	mov	r0, r6
    ae18:	f7fd fc66 	bl	86e8 <memset>
    ae1c:	9d05      	ldr	r5, [sp, #20]
    ae1e:	9600      	str	r6, [sp, #0]
    ae20:	462b      	mov	r3, r5
    ae22:	aa1d      	add	r2, sp, #116	; 0x74
    ae24:	4621      	mov	r1, r4
    ae26:	4658      	mov	r0, fp
    ae28:	f003 f98a 	bl	e140 <_wcsrtombs_r>
    ae2c:	4285      	cmp	r5, r0
    ae2e:	f040 837c 	bne.w	b52a <_svfprintf_r+0x1b2a>
    ae32:	9a05      	ldr	r2, [sp, #20]
    ae34:	2300      	movs	r3, #0
    ae36:	54a3      	strb	r3, [r4, r2]
    ae38:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    ae3c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ae40:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ae44:	9303      	str	r3, [sp, #12]
    ae46:	9202      	str	r2, [sp, #8]
    ae48:	930f      	str	r3, [sp, #60]	; 0x3c
    ae4a:	f7fe bfba 	b.w	9dc2 <_svfprintf_r+0x3c2>
    ae4e:	212d      	movs	r1, #45	; 0x2d
    ae50:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ae54:	f7fe bfa4 	b.w	9da0 <_svfprintf_r+0x3a0>
    ae58:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ae5a:	9915      	ldr	r1, [sp, #84]	; 0x54
    ae5c:	ebab 0b03 	sub.w	fp, fp, r3
    ae60:	461a      	mov	r2, r3
    ae62:	4658      	mov	r0, fp
    ae64:	f7fd fcd8 	bl	8818 <strncpy>
    ae68:	f89a 2001 	ldrb.w	r2, [sl, #1]
    ae6c:	4b05      	ldr	r3, [pc, #20]	; (ae84 <_svfprintf_r+0x1484>)
    ae6e:	b10a      	cbz	r2, ae74 <_svfprintf_r+0x1474>
    ae70:	f10a 0a01 	add.w	sl, sl, #1
    ae74:	f04f 0c00 	mov.w	ip, #0
    ae78:	e628      	b.n	aacc <_svfprintf_r+0x10cc>
    ae7a:	bf00      	nop
    ae7c:	20000b28 	.word	0x20000b28
    ae80:	20007ba4 	.word	0x20007ba4
    ae84:	cccccccd 	.word	0xcccccccd
    ae88:	ee1b 1a10 	vmov	r1, s22
    ae8c:	aa24      	add	r2, sp, #144	; 0x90
    ae8e:	4658      	mov	r0, fp
    ae90:	f004 fa2c 	bl	f2ec <__ssprint_r>
    ae94:	2800      	cmp	r0, #0
    ae96:	f47f aa18 	bne.w	a2ca <_svfprintf_r+0x8ca>
    ae9a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ae9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ae9e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    aea2:	e67c      	b.n	ab9e <_svfprintf_r+0x119e>
    aea4:	9b05      	ldr	r3, [sp, #20]
    aea6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    aeaa:	930f      	str	r3, [sp, #60]	; 0x3c
    aeac:	e9cd 3302 	strd	r3, r3, [sp, #8]
    aeb0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    aeb4:	9307      	str	r3, [sp, #28]
    aeb6:	f7fe bf84 	b.w	9dc2 <_svfprintf_r+0x3c2>
    aeba:	990e      	ldr	r1, [sp, #56]	; 0x38
    aebc:	9805      	ldr	r0, [sp, #20]
    aebe:	1865      	adds	r5, r4, r1
    aec0:	1a2d      	subs	r5, r5, r0
    aec2:	1acc      	subs	r4, r1, r3
    aec4:	42a5      	cmp	r5, r4
    aec6:	bfa8      	it	ge
    aec8:	4625      	movge	r5, r4
    aeca:	f7ff bb4d 	b.w	a568 <_svfprintf_r+0xb68>
    aece:	9b08      	ldr	r3, [sp, #32]
    aed0:	9904      	ldr	r1, [sp, #16]
    aed2:	f853 2b04 	ldr.w	r2, [r3], #4
    aed6:	9308      	str	r3, [sp, #32]
    aed8:	8011      	strh	r1, [r2, #0]
    aeda:	464c      	mov	r4, r9
    aedc:	f7fe bdc2 	b.w	9a64 <_svfprintf_r+0x64>
    aee0:	f913 2b04 	ldrsb.w	r2, [r3], #4
    aee4:	9308      	str	r3, [sp, #32]
    aee6:	17d1      	asrs	r1, r2, #31
    aee8:	460b      	mov	r3, r1
    aeea:	f7fe bfdb 	b.w	9ea4 <_svfprintf_r+0x4a4>
    aeee:	9a03      	ldr	r2, [sp, #12]
    aef0:	2102      	movs	r1, #2
    aef2:	ab22      	add	r3, sp, #136	; 0x88
    aef4:	9301      	str	r3, [sp, #4]
    aef6:	ab1d      	add	r3, sp, #116	; 0x74
    aef8:	9300      	str	r3, [sp, #0]
    aefa:	4658      	mov	r0, fp
    aefc:	ab1b      	add	r3, sp, #108	; 0x6c
    aefe:	eeb0 0b4a 	vmov.f64	d0, d10
    af02:	9202      	str	r2, [sp, #8]
    af04:	f003 fb38 	bl	e578 <_dtoa_r>
    af08:	2d47      	cmp	r5, #71	; 0x47
    af0a:	9a02      	ldr	r2, [sp, #8]
    af0c:	4604      	mov	r4, r0
    af0e:	f000 8161 	beq.w	b1d4 <_svfprintf_r+0x17d4>
    af12:	2d46      	cmp	r5, #70	; 0x46
    af14:	4410      	add	r0, r2
    af16:	d105      	bne.n	af24 <_svfprintf_r+0x1524>
    af18:	7823      	ldrb	r3, [r4, #0]
    af1a:	2b30      	cmp	r3, #48	; 0x30
    af1c:	f000 826f 	beq.w	b3fe <_svfprintf_r+0x19fe>
    af20:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    af22:	4410      	add	r0, r2
    af24:	eeb5 ab40 	vcmp.f64	d10, #0.0
    af28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    af2c:	f040 8146 	bne.w	b1bc <_svfprintf_r+0x17bc>
    af30:	4603      	mov	r3, r0
    af32:	1b1b      	subs	r3, r3, r4
    af34:	930e      	str	r3, [sp, #56]	; 0x38
    af36:	2d47      	cmp	r5, #71	; 0x47
    af38:	f000 8110 	beq.w	b15c <_svfprintf_r+0x175c>
    af3c:	2d46      	cmp	r5, #70	; 0x46
    af3e:	f000 81b5 	beq.w	b2ac <_svfprintf_r+0x18ac>
    af42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    af44:	930c      	str	r3, [sp, #48]	; 0x30
    af46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af48:	2d41      	cmp	r5, #65	; 0x41
    af4a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    af4e:	931b      	str	r3, [sp, #108]	; 0x6c
    af50:	f000 81e5 	beq.w	b31e <_svfprintf_r+0x191e>
    af54:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    af58:	2100      	movs	r1, #0
    af5a:	2b00      	cmp	r3, #0
    af5c:	bfb8      	it	lt
    af5e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    af60:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    af64:	bfba      	itte	lt
    af66:	f1c3 0301 	rsblt	r3, r3, #1
    af6a:	222d      	movlt	r2, #45	; 0x2d
    af6c:	222b      	movge	r2, #43	; 0x2b
    af6e:	2b09      	cmp	r3, #9
    af70:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    af74:	f340 81da 	ble.w	b32c <_svfprintf_r+0x192c>
    af78:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    af7c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; b39c <_svfprintf_r+0x199c>
    af80:	462a      	mov	r2, r5
    af82:	4610      	mov	r0, r2
    af84:	fb8c 2103 	smull	r2, r1, ip, r3
    af88:	17da      	asrs	r2, r3, #31
    af8a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    af8e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    af92:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    af96:	3130      	adds	r1, #48	; 0x30
    af98:	f800 1c01 	strb.w	r1, [r0, #-1]
    af9c:	4619      	mov	r1, r3
    af9e:	2963      	cmp	r1, #99	; 0x63
    afa0:	4613      	mov	r3, r2
    afa2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    afa6:	dcec      	bgt.n	af82 <_svfprintf_r+0x1582>
    afa8:	3330      	adds	r3, #48	; 0x30
    afaa:	b2d9      	uxtb	r1, r3
    afac:	1e83      	subs	r3, r0, #2
    afae:	429d      	cmp	r5, r3
    afb0:	f802 1c01 	strb.w	r1, [r2, #-1]
    afb4:	f240 828b 	bls.w	b4ce <_svfprintf_r+0x1ace>
    afb8:	4613      	mov	r3, r2
    afba:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    afbe:	e001      	b.n	afc4 <_svfprintf_r+0x15c4>
    afc0:	f813 1b01 	ldrb.w	r1, [r3], #1
    afc4:	f802 1b01 	strb.w	r1, [r2], #1
    afc8:	429d      	cmp	r5, r3
    afca:	d1f9      	bne.n	afc0 <_svfprintf_r+0x15c0>
    afcc:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    afd0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    afd4:	1a1b      	subs	r3, r3, r0
    afd6:	4413      	add	r3, r2
    afd8:	aa1e      	add	r2, sp, #120	; 0x78
    afda:	1a9b      	subs	r3, r3, r2
    afdc:	9314      	str	r3, [sp, #80]	; 0x50
    afde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    afe0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    afe2:	2b01      	cmp	r3, #1
    afe4:	441a      	add	r2, r3
    afe6:	9205      	str	r2, [sp, #20]
    afe8:	f340 8203 	ble.w	b3f2 <_svfprintf_r+0x19f2>
    afec:	9b05      	ldr	r3, [sp, #20]
    afee:	9a10      	ldr	r2, [sp, #64]	; 0x40
    aff0:	4413      	add	r3, r2
    aff2:	9305      	str	r3, [sp, #20]
    aff4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    aff8:	9a05      	ldr	r2, [sp, #20]
    affa:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    affe:	2300      	movs	r3, #0
    b000:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    b004:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    b008:	930f      	str	r3, [sp, #60]	; 0x3c
    b00a:	9202      	str	r2, [sp, #8]
    b00c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b00e:	2b00      	cmp	r3, #0
    b010:	f040 80b1 	bne.w	b176 <_svfprintf_r+0x1776>
    b014:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    b018:	9303      	str	r3, [sp, #12]
    b01a:	f7fe bed2 	b.w	9dc2 <_svfprintf_r+0x3c2>
    b01e:	4620      	mov	r0, r4
    b020:	f7fd feae 	bl	8d80 <strlen>
    b024:	4602      	mov	r2, r0
    b026:	9005      	str	r0, [sp, #20]
    b028:	f7fe bf20 	b.w	9e6c <_svfprintf_r+0x46c>
    b02c:	ee1b 1a10 	vmov	r1, s22
    b030:	aa24      	add	r2, sp, #144	; 0x90
    b032:	4658      	mov	r0, fp
    b034:	f004 f95a 	bl	f2ec <__ssprint_r>
    b038:	f7fe bded 	b.w	9c16 <_svfprintf_r+0x216>
    b03c:	1c59      	adds	r1, r3, #1
    b03e:	4658      	mov	r0, fp
    b040:	f7fb fc86 	bl	6950 <_malloc_r>
    b044:	4604      	mov	r4, r0
    b046:	2800      	cmp	r0, #0
    b048:	f000 81ca 	beq.w	b3e0 <_svfprintf_r+0x19e0>
    b04c:	9007      	str	r0, [sp, #28]
    b04e:	e6e0      	b.n	ae12 <_svfprintf_r+0x1412>
    b050:	ee1b 1a10 	vmov	r1, s22
    b054:	aa24      	add	r2, sp, #144	; 0x90
    b056:	4658      	mov	r0, fp
    b058:	f004 f948 	bl	f2ec <__ssprint_r>
    b05c:	2800      	cmp	r0, #0
    b05e:	f47f a934 	bne.w	a2ca <_svfprintf_r+0x8ca>
    b062:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b064:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b068:	f7ff ba49 	b.w	a4fe <_svfprintf_r+0xafe>
    b06c:	ee1b 1a10 	vmov	r1, s22
    b070:	aa24      	add	r2, sp, #144	; 0x90
    b072:	4658      	mov	r0, fp
    b074:	f004 f93a 	bl	f2ec <__ssprint_r>
    b078:	2800      	cmp	r0, #0
    b07a:	f47f a926 	bne.w	a2ca <_svfprintf_r+0x8ca>
    b07e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    b082:	991b      	ldr	r1, [sp, #108]	; 0x6c
    b084:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b088:	e649      	b.n	ad1e <_svfprintf_r+0x131e>
    b08a:	2306      	movs	r3, #6
    b08c:	9303      	str	r3, [sp, #12]
    b08e:	f7ff bb83 	b.w	a798 <_svfprintf_r+0xd98>
    b092:	9b03      	ldr	r3, [sp, #12]
    b094:	2102      	movs	r1, #2
    b096:	1c5a      	adds	r2, r3, #1
    b098:	e72b      	b.n	aef2 <_svfprintf_r+0x14f2>
    b09a:	9a03      	ldr	r2, [sp, #12]
    b09c:	2103      	movs	r1, #3
    b09e:	e728      	b.n	aef2 <_svfprintf_r+0x14f2>
    b0a0:	a81b      	add	r0, sp, #108	; 0x6c
    b0a2:	eeb0 0b4a 	vmov.f64	d0, d10
    b0a6:	f003 f86f 	bl	e188 <frexp>
    b0aa:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    b0ae:	ee20 0b07 	vmul.f64	d0, d0, d7
    b0b2:	eeb5 0b40 	vcmp.f64	d0, #0.0
    b0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b0ba:	d101      	bne.n	b0c0 <_svfprintf_r+0x16c0>
    b0bc:	2301      	movs	r3, #1
    b0be:	931b      	str	r3, [sp, #108]	; 0x6c
    b0c0:	48b3      	ldr	r0, [pc, #716]	; (b390 <_svfprintf_r+0x1990>)
    b0c2:	9b03      	ldr	r3, [sp, #12]
    b0c4:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    b0c8:	3b01      	subs	r3, #1
    b0ca:	4622      	mov	r2, r4
    b0cc:	e004      	b.n	b0d8 <_svfprintf_r+0x16d8>
    b0ce:	eeb5 0b40 	vcmp.f64	d0, #0.0
    b0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b0d6:	d013      	beq.n	b100 <_svfprintf_r+0x1700>
    b0d8:	ee20 0b05 	vmul.f64	d0, d0, d5
    b0dc:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    b0e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b0e4:	ee17 1a90 	vmov	r1, s15
    b0e8:	5c41      	ldrb	r1, [r0, r1]
    b0ea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    b0ee:	4694      	mov	ip, r2
    b0f0:	ee30 0b46 	vsub.f64	d0, d0, d6
    b0f4:	f802 1b01 	strb.w	r1, [r2], #1
    b0f8:	4619      	mov	r1, r3
    b0fa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    b0fe:	d1e6      	bne.n	b0ce <_svfprintf_r+0x16ce>
    b100:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    b104:	eeb4 0bc6 	vcmpe.f64	d0, d6
    b108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b10c:	f300 8148 	bgt.w	b3a0 <_svfprintf_r+0x19a0>
    b110:	eeb4 0b46 	vcmp.f64	d0, d6
    b114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b118:	d104      	bne.n	b124 <_svfprintf_r+0x1724>
    b11a:	ee17 3a90 	vmov	r3, s15
    b11e:	07db      	lsls	r3, r3, #31
    b120:	f100 813e 	bmi.w	b3a0 <_svfprintf_r+0x19a0>
    b124:	2900      	cmp	r1, #0
    b126:	db06      	blt.n	b136 <_svfprintf_r+0x1736>
    b128:	1c4b      	adds	r3, r1, #1
    b12a:	4413      	add	r3, r2
    b12c:	2130      	movs	r1, #48	; 0x30
    b12e:	f802 1b01 	strb.w	r1, [r2], #1
    b132:	4293      	cmp	r3, r2
    b134:	d1fb      	bne.n	b12e <_svfprintf_r+0x172e>
    b136:	1b13      	subs	r3, r2, r4
    b138:	930e      	str	r3, [sp, #56]	; 0x38
    b13a:	e6fc      	b.n	af36 <_svfprintf_r+0x1536>
    b13c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    b13e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b140:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    b144:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    b148:	9613      	str	r6, [sp, #76]	; 0x4c
    b14a:	18e3      	adds	r3, r4, r3
    b14c:	429d      	cmp	r5, r3
    b14e:	4629      	mov	r1, r5
    b150:	bf28      	it	cs
    b152:	4619      	movcs	r1, r3
    b154:	4682      	mov	sl, r0
    b156:	9105      	str	r1, [sp, #20]
    b158:	f7ff b9d8 	b.w	a50c <_svfprintf_r+0xb0c>
    b15c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    b15e:	930c      	str	r3, [sp, #48]	; 0x30
    b160:	1cda      	adds	r2, r3, #3
    b162:	db02      	blt.n	b16a <_svfprintf_r+0x176a>
    b164:	9a03      	ldr	r2, [sp, #12]
    b166:	4293      	cmp	r3, r2
    b168:	dd0c      	ble.n	b184 <_svfprintf_r+0x1784>
    b16a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b16c:	3b02      	subs	r3, #2
    b16e:	930b      	str	r3, [sp, #44]	; 0x2c
    b170:	f023 0520 	bic.w	r5, r3, #32
    b174:	e6e7      	b.n	af46 <_svfprintf_r+0x1546>
    b176:	212d      	movs	r1, #45	; 0x2d
    b178:	2300      	movs	r3, #0
    b17a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    b17e:	9303      	str	r3, [sp, #12]
    b180:	f7fe be22 	b.w	9dc8 <_svfprintf_r+0x3c8>
    b184:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b188:	4293      	cmp	r3, r2
    b18a:	f2c0 80bd 	blt.w	b308 <_svfprintf_r+0x1908>
    b18e:	07f0      	lsls	r0, r6, #31
    b190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b192:	f140 8132 	bpl.w	b3fa <_svfprintf_r+0x19fa>
    b196:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b198:	4413      	add	r3, r2
    b19a:	9305      	str	r3, [sp, #20]
    b19c:	0571      	lsls	r1, r6, #21
    b19e:	d503      	bpl.n	b1a8 <_svfprintf_r+0x17a8>
    b1a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b1a2:	2b00      	cmp	r3, #0
    b1a4:	f300 8135 	bgt.w	b412 <_svfprintf_r+0x1a12>
    b1a8:	9b05      	ldr	r3, [sp, #20]
    b1aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b1ae:	9302      	str	r3, [sp, #8]
    b1b0:	2367      	movs	r3, #103	; 0x67
    b1b2:	930b      	str	r3, [sp, #44]	; 0x2c
    b1b4:	2300      	movs	r3, #0
    b1b6:	930f      	str	r3, [sp, #60]	; 0x3c
    b1b8:	930d      	str	r3, [sp, #52]	; 0x34
    b1ba:	e727      	b.n	b00c <_svfprintf_r+0x160c>
    b1bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b1be:	4283      	cmp	r3, r0
    b1c0:	f4bf aeb7 	bcs.w	af32 <_svfprintf_r+0x1532>
    b1c4:	2130      	movs	r1, #48	; 0x30
    b1c6:	1c5a      	adds	r2, r3, #1
    b1c8:	9222      	str	r2, [sp, #136]	; 0x88
    b1ca:	7019      	strb	r1, [r3, #0]
    b1cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b1ce:	4298      	cmp	r0, r3
    b1d0:	d8f9      	bhi.n	b1c6 <_svfprintf_r+0x17c6>
    b1d2:	e6ae      	b.n	af32 <_svfprintf_r+0x1532>
    b1d4:	07f3      	lsls	r3, r6, #31
    b1d6:	f100 80a7 	bmi.w	b328 <_svfprintf_r+0x1928>
    b1da:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b1dc:	e6a9      	b.n	af32 <_svfprintf_r+0x1532>
    b1de:	aa24      	add	r2, sp, #144	; 0x90
    b1e0:	4658      	mov	r0, fp
    b1e2:	9105      	str	r1, [sp, #20]
    b1e4:	f004 f882 	bl	f2ec <__ssprint_r>
    b1e8:	2800      	cmp	r0, #0
    b1ea:	f47f a86e 	bne.w	a2ca <_svfprintf_r+0x8ca>
    b1ee:	f896 c000 	ldrb.w	ip, [r6]
    b1f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b1f4:	9905      	ldr	r1, [sp, #20]
    b1f6:	a827      	add	r0, sp, #156	; 0x9c
    b1f8:	4465      	add	r5, ip
    b1fa:	f7ff bbec 	b.w	a9d6 <_svfprintf_r+0xfd6>
    b1fe:	ee1b 1a10 	vmov	r1, s22
    b202:	aa24      	add	r2, sp, #144	; 0x90
    b204:	4658      	mov	r0, fp
    b206:	f004 f871 	bl	f2ec <__ssprint_r>
    b20a:	2800      	cmp	r0, #0
    b20c:	f47f a85d 	bne.w	a2ca <_svfprintf_r+0x8ca>
    b210:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b212:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b216:	f7ff b96b 	b.w	a4f0 <_svfprintf_r+0xaf0>
    b21a:	2378      	movs	r3, #120	; 0x78
    b21c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    b220:	2330      	movs	r3, #48	; 0x30
    b222:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    b226:	9b03      	ldr	r3, [sp, #12]
    b228:	2b63      	cmp	r3, #99	; 0x63
    b22a:	f048 0602 	orr.w	r6, r8, #2
    b22e:	f300 80a6 	bgt.w	b37e <_svfprintf_r+0x197e>
    b232:	2300      	movs	r3, #0
    b234:	9307      	str	r3, [sp, #28]
    b236:	ac37      	add	r4, sp, #220	; 0xdc
    b238:	ee18 3a90 	vmov	r3, s17
    b23c:	2b00      	cmp	r3, #0
    b23e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    b242:	db2b      	blt.n	b29c <_svfprintf_r+0x189c>
    b244:	eeb0 ab48 	vmov.f64	d10, d8
    b248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b24a:	f023 0520 	bic.w	r5, r3, #32
    b24e:	2300      	movs	r3, #0
    b250:	9309      	str	r3, [sp, #36]	; 0x24
    b252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b254:	2b61      	cmp	r3, #97	; 0x61
    b256:	f47f aaad 	bne.w	a7b4 <_svfprintf_r+0xdb4>
    b25a:	eeb0 0b4a 	vmov.f64	d0, d10
    b25e:	a81b      	add	r0, sp, #108	; 0x6c
    b260:	f002 ff92 	bl	e188 <frexp>
    b264:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    b268:	ee20 0b07 	vmul.f64	d0, d0, d7
    b26c:	eeb5 0b40 	vcmp.f64	d0, #0.0
    b270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b274:	d101      	bne.n	b27a <_svfprintf_r+0x187a>
    b276:	2301      	movs	r3, #1
    b278:	931b      	str	r3, [sp, #108]	; 0x6c
    b27a:	4846      	ldr	r0, [pc, #280]	; (b394 <_svfprintf_r+0x1994>)
    b27c:	e721      	b.n	b0c2 <_svfprintf_r+0x16c2>
    b27e:	ee1b 1a10 	vmov	r1, s22
    b282:	aa24      	add	r2, sp, #144	; 0x90
    b284:	4658      	mov	r0, fp
    b286:	f004 f831 	bl	f2ec <__ssprint_r>
    b28a:	2800      	cmp	r0, #0
    b28c:	f47f a81d 	bne.w	a2ca <_svfprintf_r+0x8ca>
    b290:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    b292:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b294:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b298:	f7ff b94e 	b.w	a538 <_svfprintf_r+0xb38>
    b29c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b29e:	f023 0520 	bic.w	r5, r3, #32
    b2a2:	232d      	movs	r3, #45	; 0x2d
    b2a4:	9309      	str	r3, [sp, #36]	; 0x24
    b2a6:	eeb1 ab48 	vneg.f64	d10, d8
    b2aa:	e7d2      	b.n	b252 <_svfprintf_r+0x1852>
    b2ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    b2ae:	920c      	str	r2, [sp, #48]	; 0x30
    b2b0:	2a00      	cmp	r2, #0
    b2b2:	f006 0301 	and.w	r3, r6, #1
    b2b6:	f340 810d 	ble.w	b4d4 <_svfprintf_r+0x1ad4>
    b2ba:	9903      	ldr	r1, [sp, #12]
    b2bc:	430b      	orrs	r3, r1
    b2be:	f040 80cf 	bne.w	b460 <_svfprintf_r+0x1a60>
    b2c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b2c4:	9305      	str	r3, [sp, #20]
    b2c6:	2366      	movs	r3, #102	; 0x66
    b2c8:	930b      	str	r3, [sp, #44]	; 0x2c
    b2ca:	0572      	lsls	r2, r6, #21
    b2cc:	f100 80a3 	bmi.w	b416 <_svfprintf_r+0x1a16>
    b2d0:	9b05      	ldr	r3, [sp, #20]
    b2d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b2d6:	9302      	str	r3, [sp, #8]
    b2d8:	e76c      	b.n	b1b4 <_svfprintf_r+0x17b4>
    b2da:	ee1b 1a10 	vmov	r1, s22
    b2de:	aa24      	add	r2, sp, #144	; 0x90
    b2e0:	4658      	mov	r0, fp
    b2e2:	f004 f803 	bl	f2ec <__ssprint_r>
    b2e6:	2800      	cmp	r0, #0
    b2e8:	f47e afef 	bne.w	a2ca <_svfprintf_r+0x8ca>
    b2ec:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    b2ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b2f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b2f2:	1b1c      	subs	r4, r3, r4
    b2f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b2f8:	f7ff b936 	b.w	a568 <_svfprintf_r+0xb68>
    b2fc:	2358      	movs	r3, #88	; 0x58
    b2fe:	e78d      	b.n	b21c <_svfprintf_r+0x181c>
    b300:	2200      	movs	r2, #0
    b302:	9203      	str	r2, [sp, #12]
    b304:	f7fe bbda 	b.w	9abc <_svfprintf_r+0xbc>
    b308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b30a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b30c:	189a      	adds	r2, r3, r2
    b30e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b310:	9205      	str	r2, [sp, #20]
    b312:	2b00      	cmp	r3, #0
    b314:	f340 80ab 	ble.w	b46e <_svfprintf_r+0x1a6e>
    b318:	2367      	movs	r3, #103	; 0x67
    b31a:	930b      	str	r3, [sp, #44]	; 0x2c
    b31c:	e7d5      	b.n	b2ca <_svfprintf_r+0x18ca>
    b31e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b320:	320f      	adds	r2, #15
    b322:	b2d2      	uxtb	r2, r2
    b324:	2101      	movs	r1, #1
    b326:	e618      	b.n	af5a <_svfprintf_r+0x155a>
    b328:	18a0      	adds	r0, r4, r2
    b32a:	e5fb      	b.n	af24 <_svfprintf_r+0x1524>
    b32c:	2900      	cmp	r1, #0
    b32e:	f040 80a8 	bne.w	b482 <_svfprintf_r+0x1a82>
    b332:	2230      	movs	r2, #48	; 0x30
    b334:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    b338:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    b33c:	3330      	adds	r3, #48	; 0x30
    b33e:	f802 3b01 	strb.w	r3, [r2], #1
    b342:	ab1e      	add	r3, sp, #120	; 0x78
    b344:	1ad3      	subs	r3, r2, r3
    b346:	9314      	str	r3, [sp, #80]	; 0x50
    b348:	e649      	b.n	afde <_svfprintf_r+0x15de>
    b34a:	3301      	adds	r3, #1
    b34c:	4912      	ldr	r1, [pc, #72]	; (b398 <_svfprintf_r+0x1998>)
    b34e:	f8ca 5004 	str.w	r5, [sl, #4]
    b352:	442a      	add	r2, r5
    b354:	2b07      	cmp	r3, #7
    b356:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    b35a:	f8ca 1000 	str.w	r1, [sl]
    b35e:	f77f ac33 	ble.w	abc8 <_svfprintf_r+0x11c8>
    b362:	ee1b 1a10 	vmov	r1, s22
    b366:	aa24      	add	r2, sp, #144	; 0x90
    b368:	4658      	mov	r0, fp
    b36a:	f003 ffbf 	bl	f2ec <__ssprint_r>
    b36e:	2800      	cmp	r0, #0
    b370:	f47e afab 	bne.w	a2ca <_svfprintf_r+0x8ca>
    b374:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    b378:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b37c:	e426      	b.n	abcc <_svfprintf_r+0x11cc>
    b37e:	1c59      	adds	r1, r3, #1
    b380:	4658      	mov	r0, fp
    b382:	f7fb fae5 	bl	6950 <_malloc_r>
    b386:	4604      	mov	r4, r0
    b388:	b350      	cbz	r0, b3e0 <_svfprintf_r+0x19e0>
    b38a:	9007      	str	r0, [sp, #28]
    b38c:	e754      	b.n	b238 <_svfprintf_r+0x1838>
    b38e:	bf00      	nop
    b390:	20000b0c 	.word	0x20000b0c
    b394:	20000af8 	.word	0x20000af8
    b398:	20007ba4 	.word	0x20007ba4
    b39c:	66666667 	.word	0x66666667
    b3a0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    b3a4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    b3a8:	f890 c00f 	ldrb.w	ip, [r0, #15]
    b3ac:	4561      	cmp	r1, ip
    b3ae:	4613      	mov	r3, r2
    b3b0:	d10a      	bne.n	b3c8 <_svfprintf_r+0x19c8>
    b3b2:	f04f 0e30 	mov.w	lr, #48	; 0x30
    b3b6:	f803 ec01 	strb.w	lr, [r3, #-1]
    b3ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b3bc:	1e59      	subs	r1, r3, #1
    b3be:	9122      	str	r1, [sp, #136]	; 0x88
    b3c0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    b3c4:	458c      	cmp	ip, r1
    b3c6:	d0f6      	beq.n	b3b6 <_svfprintf_r+0x19b6>
    b3c8:	2939      	cmp	r1, #57	; 0x39
    b3ca:	bf16      	itet	ne
    b3cc:	3101      	addne	r1, #1
    b3ce:	7a81      	ldrbeq	r1, [r0, #10]
    b3d0:	b2c9      	uxtbne	r1, r1
    b3d2:	f803 1c01 	strb.w	r1, [r3, #-1]
    b3d6:	e6ae      	b.n	b136 <_svfprintf_r+0x1736>
    b3d8:	2300      	movs	r3, #0
    b3da:	4690      	mov	r8, r2
    b3dc:	9307      	str	r3, [sp, #28]
    b3de:	e760      	b.n	b2a2 <_svfprintf_r+0x18a2>
    b3e0:	ee1b 2a10 	vmov	r2, s22
    b3e4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    b3e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b3ec:	8193      	strh	r3, [r2, #12]
    b3ee:	f7fe bc16 	b.w	9c1e <_svfprintf_r+0x21e>
    b3f2:	07f5      	lsls	r5, r6, #31
    b3f4:	f57f adfe 	bpl.w	aff4 <_svfprintf_r+0x15f4>
    b3f8:	e5f8      	b.n	afec <_svfprintf_r+0x15ec>
    b3fa:	9305      	str	r3, [sp, #20]
    b3fc:	e6ce      	b.n	b19c <_svfprintf_r+0x179c>
    b3fe:	eeb5 ab40 	vcmp.f64	d10, #0.0
    b402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b406:	f43f ad8b 	beq.w	af20 <_svfprintf_r+0x1520>
    b40a:	f1c2 0201 	rsb	r2, r2, #1
    b40e:	921b      	str	r2, [sp, #108]	; 0x6c
    b410:	e587      	b.n	af22 <_svfprintf_r+0x1522>
    b412:	2367      	movs	r3, #103	; 0x67
    b414:	930b      	str	r3, [sp, #44]	; 0x2c
    b416:	9913      	ldr	r1, [sp, #76]	; 0x4c
    b418:	780b      	ldrb	r3, [r1, #0]
    b41a:	2bff      	cmp	r3, #255	; 0xff
    b41c:	d079      	beq.n	b512 <_svfprintf_r+0x1b12>
    b41e:	2500      	movs	r5, #0
    b420:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b422:	4628      	mov	r0, r5
    b424:	e003      	b.n	b42e <_svfprintf_r+0x1a2e>
    b426:	3001      	adds	r0, #1
    b428:	3101      	adds	r1, #1
    b42a:	2bff      	cmp	r3, #255	; 0xff
    b42c:	d008      	beq.n	b440 <_svfprintf_r+0x1a40>
    b42e:	4293      	cmp	r3, r2
    b430:	da06      	bge.n	b440 <_svfprintf_r+0x1a40>
    b432:	1ad2      	subs	r2, r2, r3
    b434:	784b      	ldrb	r3, [r1, #1]
    b436:	2b00      	cmp	r3, #0
    b438:	d1f5      	bne.n	b426 <_svfprintf_r+0x1a26>
    b43a:	780b      	ldrb	r3, [r1, #0]
    b43c:	3501      	adds	r5, #1
    b43e:	e7f4      	b.n	b42a <_svfprintf_r+0x1a2a>
    b440:	920c      	str	r2, [sp, #48]	; 0x30
    b442:	9113      	str	r1, [sp, #76]	; 0x4c
    b444:	900d      	str	r0, [sp, #52]	; 0x34
    b446:	950f      	str	r5, [sp, #60]	; 0x3c
    b448:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b44a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b44c:	9916      	ldr	r1, [sp, #88]	; 0x58
    b44e:	4413      	add	r3, r2
    b450:	9a05      	ldr	r2, [sp, #20]
    b452:	fb01 2303 	mla	r3, r1, r3, r2
    b456:	9305      	str	r3, [sp, #20]
    b458:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b45c:	9302      	str	r3, [sp, #8]
    b45e:	e5d5      	b.n	b00c <_svfprintf_r+0x160c>
    b460:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b462:	18d3      	adds	r3, r2, r3
    b464:	4419      	add	r1, r3
    b466:	2366      	movs	r3, #102	; 0x66
    b468:	9105      	str	r1, [sp, #20]
    b46a:	930b      	str	r3, [sp, #44]	; 0x2c
    b46c:	e72d      	b.n	b2ca <_svfprintf_r+0x18ca>
    b46e:	f1c3 0301 	rsb	r3, r3, #1
    b472:	441a      	add	r2, r3
    b474:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    b478:	9302      	str	r3, [sp, #8]
    b47a:	2367      	movs	r3, #103	; 0x67
    b47c:	9205      	str	r2, [sp, #20]
    b47e:	930b      	str	r3, [sp, #44]	; 0x2c
    b480:	e698      	b.n	b1b4 <_svfprintf_r+0x17b4>
    b482:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    b486:	e759      	b.n	b33c <_svfprintf_r+0x193c>
    b488:	9b03      	ldr	r3, [sp, #12]
    b48a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    b48e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    b492:	9305      	str	r3, [sp, #20]
    b494:	e4b4      	b.n	ae00 <_svfprintf_r+0x1400>
    b496:	ee18 3a90 	vmov	r3, s17
    b49a:	2b00      	cmp	r3, #0
    b49c:	bfb4      	ite	lt
    b49e:	212d      	movlt	r1, #45	; 0x2d
    b4a0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    b4a4:	4c25      	ldr	r4, [pc, #148]	; (b53c <_svfprintf_r+0x1b3c>)
    b4a6:	4b26      	ldr	r3, [pc, #152]	; (b540 <_svfprintf_r+0x1b40>)
    b4a8:	bfb8      	it	lt
    b4aa:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    b4ae:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    b4b2:	f7fe bc79 	b.w	9da8 <_svfprintf_r+0x3a8>
    b4b6:	9b03      	ldr	r3, [sp, #12]
    b4b8:	9302      	str	r3, [sp, #8]
    b4ba:	9305      	str	r3, [sp, #20]
    b4bc:	2373      	movs	r3, #115	; 0x73
    b4be:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    b4c2:	9003      	str	r0, [sp, #12]
    b4c4:	900f      	str	r0, [sp, #60]	; 0x3c
    b4c6:	900d      	str	r0, [sp, #52]	; 0x34
    b4c8:	930b      	str	r3, [sp, #44]	; 0x2c
    b4ca:	f7fe bc7a 	b.w	9dc2 <_svfprintf_r+0x3c2>
    b4ce:	2302      	movs	r3, #2
    b4d0:	9314      	str	r3, [sp, #80]	; 0x50
    b4d2:	e584      	b.n	afde <_svfprintf_r+0x15de>
    b4d4:	9a03      	ldr	r2, [sp, #12]
    b4d6:	4313      	orrs	r3, r2
    b4d8:	d105      	bne.n	b4e6 <_svfprintf_r+0x1ae6>
    b4da:	2301      	movs	r3, #1
    b4dc:	2266      	movs	r2, #102	; 0x66
    b4de:	9302      	str	r3, [sp, #8]
    b4e0:	920b      	str	r2, [sp, #44]	; 0x2c
    b4e2:	9305      	str	r3, [sp, #20]
    b4e4:	e666      	b.n	b1b4 <_svfprintf_r+0x17b4>
    b4e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b4e8:	3301      	adds	r3, #1
    b4ea:	441a      	add	r2, r3
    b4ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    b4f0:	9302      	str	r3, [sp, #8]
    b4f2:	2366      	movs	r3, #102	; 0x66
    b4f4:	9205      	str	r2, [sp, #20]
    b4f6:	930b      	str	r3, [sp, #44]	; 0x2c
    b4f8:	e65c      	b.n	b1b4 <_svfprintf_r+0x17b4>
    b4fa:	9a08      	ldr	r2, [sp, #32]
    b4fc:	f899 3001 	ldrb.w	r3, [r9, #1]
    b500:	4689      	mov	r9, r1
    b502:	f852 1b04 	ldr.w	r1, [r2], #4
    b506:	9208      	str	r2, [sp, #32]
    b508:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    b50c:	9103      	str	r1, [sp, #12]
    b50e:	f7fe bad3 	b.w	9ab8 <_svfprintf_r+0xb8>
    b512:	2300      	movs	r3, #0
    b514:	930f      	str	r3, [sp, #60]	; 0x3c
    b516:	930d      	str	r3, [sp, #52]	; 0x34
    b518:	e796      	b.n	b448 <_svfprintf_r+0x1a48>
    b51a:	230c      	movs	r3, #12
    b51c:	f8cb 3000 	str.w	r3, [fp]
    b520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b524:	9304      	str	r3, [sp, #16]
    b526:	f7fe bb81 	b.w	9c2c <_svfprintf_r+0x22c>
    b52a:	ee1b 2a10 	vmov	r2, s22
    b52e:	8993      	ldrh	r3, [r2, #12]
    b530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b534:	8193      	strh	r3, [r2, #12]
    b536:	f7fe bec8 	b.w	a2ca <_svfprintf_r+0x8ca>
    b53a:	bf00      	nop
    b53c:	20000af4 	.word	0x20000af4
    b540:	20000648 	.word	0x20000648

0000b544 <__ssvfscanf_r>:
    b544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b548:	ed2d 8b02 	vpush	{d8}
    b54c:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
    b550:	468b      	mov	fp, r1
    b552:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    b556:	af02      	add	r7, sp, #8
    b558:	048c      	lsls	r4, r1, #18
    b55a:	4681      	mov	r9, r0
    b55c:	64fa      	str	r2, [r7, #76]	; 0x4c
    b55e:	633b      	str	r3, [r7, #48]	; 0x30
    b560:	d409      	bmi.n	b576 <__ssvfscanf_r+0x32>
    b562:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    b566:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    b56a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    b56e:	f8ab 100c 	strh.w	r1, [fp, #12]
    b572:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
    b576:	2300      	movs	r3, #0
    b578:	461c      	mov	r4, r3
    b57a:	2208      	movs	r2, #8
    b57c:	4619      	mov	r1, r3
    b57e:	f107 0058 	add.w	r0, r7, #88	; 0x58
    b582:	62fb      	str	r3, [r7, #44]	; 0x2c
    b584:	46a2      	mov	sl, r4
    b586:	f7fd f8af 	bl	86e8 <memset>
    b58a:	643c      	str	r4, [r7, #64]	; 0x40
    b58c:	627c      	str	r4, [r7, #36]	; 0x24
    b58e:	63bc      	str	r4, [r7, #56]	; 0x38
    b590:	647c      	str	r4, [r7, #68]	; 0x44
    b592:	4b83      	ldr	r3, [pc, #524]	; (b7a0 <__ssvfscanf_r+0x25c>)
    b594:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    b598:	f7fd f970 	bl	887c <__locale_mb_cur_max>
    b59c:	f107 0258 	add.w	r2, r7, #88	; 0x58
    b5a0:	4603      	mov	r3, r0
    b5a2:	9200      	str	r2, [sp, #0]
    b5a4:	f107 0154 	add.w	r1, r7, #84	; 0x54
    b5a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b5aa:	4648      	mov	r0, r9
    b5ac:	47a0      	blx	r4
    b5ae:	1e05      	subs	r5, r0, #0
    b5b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b5b2:	db33      	blt.n	b61c <__ssvfscanf_r+0xd8>
    b5b4:	442b      	add	r3, r5
    b5b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    b5b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b5ba:	462e      	mov	r6, r5
    b5bc:	2b00      	cmp	r3, #0
    b5be:	f000 80b6 	beq.w	b72e <__ssvfscanf_r+0x1ea>
    b5c2:	2d01      	cmp	r5, #1
    b5c4:	d038      	beq.n	b638 <__ssvfscanf_r+0xf4>
    b5c6:	2b25      	cmp	r3, #37	; 0x25
    b5c8:	d040      	beq.n	b64c <__ssvfscanf_r+0x108>
    b5ca:	2d00      	cmp	r5, #0
    b5cc:	d0e1      	beq.n	b592 <__ssvfscanf_r+0x4e>
    b5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b5d0:	1b9e      	subs	r6, r3, r6
    b5d2:	f8db 3004 	ldr.w	r3, [fp, #4]
    b5d6:	1e74      	subs	r4, r6, #1
    b5d8:	2b00      	cmp	r3, #0
    b5da:	f340 8098 	ble.w	b70e <__ssvfscanf_r+0x1ca>
    b5de:	f8db 1000 	ldr.w	r1, [fp]
    b5e2:	f894 c001 	ldrb.w	ip, [r4, #1]
    b5e6:	f891 e000 	ldrb.w	lr, [r1]
    b5ea:	1ca3      	adds	r3, r4, #2
    b5ec:	eb0a 0003 	add.w	r0, sl, r3
    b5f0:	45e6      	cmp	lr, ip
    b5f2:	f101 0101 	add.w	r1, r1, #1
    b5f6:	eba3 0206 	sub.w	r2, r3, r6
    b5fa:	f104 0401 	add.w	r4, r4, #1
    b5fe:	eba0 0006 	sub.w	r0, r0, r6
    b602:	f040 8094 	bne.w	b72e <__ssvfscanf_r+0x1ea>
    b606:	f8db 3004 	ldr.w	r3, [fp, #4]
    b60a:	f8cb 1000 	str.w	r1, [fp]
    b60e:	3b01      	subs	r3, #1
    b610:	42aa      	cmp	r2, r5
    b612:	f8cb 3004 	str.w	r3, [fp, #4]
    b616:	dbdf      	blt.n	b5d8 <__ssvfscanf_r+0x94>
    b618:	4682      	mov	sl, r0
    b61a:	e7ba      	b.n	b592 <__ssvfscanf_r+0x4e>
    b61c:	3301      	adds	r3, #1
    b61e:	64fb      	str	r3, [r7, #76]	; 0x4c
    b620:	2208      	movs	r2, #8
    b622:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    b626:	2100      	movs	r1, #0
    b628:	f107 0058 	add.w	r0, r7, #88	; 0x58
    b62c:	657b      	str	r3, [r7, #84]	; 0x54
    b62e:	f7fd f85b 	bl	86e8 <memset>
    b632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b634:	2b00      	cmp	r3, #0
    b636:	d07a      	beq.n	b72e <__ssvfscanf_r+0x1ea>
    b638:	4e5a      	ldr	r6, [pc, #360]	; (b7a4 <__ssvfscanf_r+0x260>)
    b63a:	5cf2      	ldrb	r2, [r6, r3]
    b63c:	0710      	lsls	r0, r2, #28
    b63e:	f100 851c 	bmi.w	c07a <__ssvfscanf_r+0xb36>
    b642:	2b25      	cmp	r3, #37	; 0x25
    b644:	f040 8086 	bne.w	b754 <__ssvfscanf_r+0x210>
    b648:	2501      	movs	r5, #1
    b64a:	462e      	mov	r6, r5
    b64c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    b64e:	2400      	movs	r4, #0
    b650:	7802      	ldrb	r2, [r0, #0]
    b652:	46a0      	mov	r8, r4
    b654:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
    b658:	1c41      	adds	r1, r0, #1
    b65a:	2b55      	cmp	r3, #85	; 0x55
    b65c:	d867      	bhi.n	b72e <__ssvfscanf_r+0x1ea>
    b65e:	e8df f013 	tbh	[pc, r3, lsl #1]
    b662:	070a      	.short	0x070a
    b664:	00660066 	.word	0x00660066
    b668:	00660066 	.word	0x00660066
    b66c:	00660701 	.word	0x00660701
    b670:	00660066 	.word	0x00660066
    b674:	00660066 	.word	0x00660066
    b678:	060c060c 	.word	0x060c060c
    b67c:	060c060c 	.word	0x060c060c
    b680:	060c060c 	.word	0x060c060c
    b684:	060c060c 	.word	0x060c060c
    b688:	060c060c 	.word	0x060c060c
    b68c:	00660066 	.word	0x00660066
    b690:	00660066 	.word	0x00660066
    b694:	00660066 	.word	0x00660066
    b698:	06180066 	.word	0x06180066
    b69c:	048e0066 	.word	0x048e0066
    b6a0:	061804c9 	.word	0x061804c9
    b6a4:	06180618 	.word	0x06180618
    b6a8:	00660066 	.word	0x00660066
    b6ac:	00660066 	.word	0x00660066
    b6b0:	00660082 	.word	0x00660082
    b6b4:	04bf0066 	.word	0x04bf0066
    b6b8:	00660066 	.word	0x00660066
    b6bc:	00890066 	.word	0x00890066
    b6c0:	00660066 	.word	0x00660066
    b6c4:	00660066 	.word	0x00660066
    b6c8:	0066066b 	.word	0x0066066b
    b6cc:	06dd0066 	.word	0x06dd0066
    b6d0:	00660066 	.word	0x00660066
    b6d4:	00660066 	.word	0x00660066
    b6d8:	06180066 	.word	0x06180066
    b6dc:	04900066 	.word	0x04900066
    b6e0:	061804cb 	.word	0x061804cb
    b6e4:	06180618 	.word	0x06180618
    b6e8:	06d206be 	.word	0x06d206be
    b6ec:	00660082 	.word	0x00660082
    b6f0:	06f306e7 	.word	0x06f306e7
    b6f4:	04c106ac 	.word	0x04c106ac
    b6f8:	006606da 	.word	0x006606da
    b6fc:	008b0066 	.word	0x008b0066
    b700:	06ca007d 	.word	0x06ca007d
    b704:	00660066 	.word	0x00660066
    b708:	0066066b 	.word	0x0066066b
    b70c:	007d      	.short	0x007d
    b70e:	4659      	mov	r1, fp
    b710:	4648      	mov	r0, r9
    b712:	f003 feab 	bl	f46c <__ssrefill_r>
    b716:	2800      	cmp	r0, #0
    b718:	f43f af61 	beq.w	b5de <__ssvfscanf_r+0x9a>
    b71c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b71e:	2b00      	cmp	r3, #0
    b720:	f001 8052 	beq.w	c7c8 <__ssvfscanf_r+0x1284>
    b724:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    b728:	065a      	lsls	r2, r3, #25
    b72a:	f101 804d 	bmi.w	c7c8 <__ssvfscanf_r+0x1284>
    b72e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b730:	b143      	cbz	r3, b744 <__ssvfscanf_r+0x200>
    b732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b734:	f8d3 8000 	ldr.w	r8, [r3]
    b738:	f1b8 0f00 	cmp.w	r8, #0
    b73c:	d002      	beq.n	b744 <__ssvfscanf_r+0x200>
    b73e:	4640      	mov	r0, r8
    b740:	f7fb f8fe 	bl	6940 <free>
    b744:	6c78      	ldr	r0, [r7, #68]	; 0x44
    b746:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
    b74a:	46bd      	mov	sp, r7
    b74c:	ecbd 8b02 	vpop	{d8}
    b750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b756:	2501      	movs	r5, #1
    b758:	1e5e      	subs	r6, r3, #1
    b75a:	e73a      	b.n	b5d2 <__ssvfscanf_r+0x8e>
    b75c:	0723      	lsls	r3, r4, #28
    b75e:	d1e6      	bne.n	b72e <__ssvfscanf_r+0x1ea>
    b760:	7842      	ldrb	r2, [r0, #1]
    b762:	4608      	mov	r0, r1
    b764:	e776      	b.n	b654 <__ssvfscanf_r+0x110>
    b766:	0722      	lsls	r2, r4, #28
    b768:	d1e1      	bne.n	b72e <__ssvfscanf_r+0x1ea>
    b76a:	7842      	ldrb	r2, [r0, #1]
    b76c:	f044 0402 	orr.w	r4, r4, #2
    b770:	4608      	mov	r0, r1
    b772:	e76f      	b.n	b654 <__ssvfscanf_r+0x110>
    b774:	f044 0401 	orr.w	r4, r4, #1
    b778:	64f9      	str	r1, [r7, #76]	; 0x4c
    b77a:	2502      	movs	r5, #2
    b77c:	f8db 3004 	ldr.w	r3, [fp, #4]
    b780:	2b00      	cmp	r3, #0
    b782:	f340 8408 	ble.w	bf96 <__ssvfscanf_r+0xa52>
    b786:	0660      	lsls	r0, r4, #25
    b788:	f140 840f 	bpl.w	bfaa <__ssvfscanf_r+0xa66>
    b78c:	1e6b      	subs	r3, r5, #1
    b78e:	2b03      	cmp	r3, #3
    b790:	f201 80eb 	bhi.w	c96a <__ssvfscanf_r+0x1426>
    b794:	e8df f013 	tbh	[pc, r3, lsl #1]
    b798:	01f1027b 	.word	0x01f1027b
    b79c:	0008014b 	.word	0x0008014b
    b7a0:	20008638 	.word	0x20008638
    b7a4:	20000955 	.word	0x20000955
    b7a8:	4648      	mov	r0, r9
    b7aa:	f002 fa99 	bl	dce0 <_localeconv_r>
    b7ae:	6803      	ldr	r3, [r0, #0]
    b7b0:	623b      	str	r3, [r7, #32]
    b7b2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    b7b6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    b7ba:	f240 855a 	bls.w	c272 <__ssvfscanf_r+0xd2e>
    b7be:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
    b7c2:	eb08 0305 	add.w	r3, r8, r5
    b7c6:	613b      	str	r3, [r7, #16]
    b7c8:	f240 185d 	movw	r8, #349	; 0x15d
    b7cc:	2600      	movs	r6, #0
    b7ce:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    b7d2:	ee08 9a10 	vmov	s16, r9
    b7d6:	e9c7 6605 	strd	r6, r6, [r7, #20]
    b7da:	63fe      	str	r6, [r7, #60]	; 0x3c
    b7dc:	637e      	str	r6, [r7, #52]	; 0x34
    b7de:	61fe      	str	r6, [r7, #28]
    b7e0:	64be      	str	r6, [r7, #72]	; 0x48
    b7e2:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
    b7e6:	62bb      	str	r3, [r7, #40]	; 0x28
    b7e8:	461d      	mov	r5, r3
    b7ea:	4646      	mov	r6, r8
    b7ec:	f8db 1000 	ldr.w	r1, [fp]
    b7f0:	780a      	ldrb	r2, [r1, #0]
    b7f2:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
    b7f6:	2b4e      	cmp	r3, #78	; 0x4e
    b7f8:	d850      	bhi.n	b89c <__ssvfscanf_r+0x358>
    b7fa:	e8df f013 	tbh	[pc, r3, lsl #1]
    b7fe:	037e      	.short	0x037e
    b800:	037e004f 	.word	0x037e004f
    b804:	004f004f 	.word	0x004f004f
    b808:	00a600a3 	.word	0x00a600a3
    b80c:	00a600a6 	.word	0x00a600a6
    b810:	00a600a6 	.word	0x00a600a6
    b814:	00a600a6 	.word	0x00a600a6
    b818:	00a600a6 	.word	0x00a600a6
    b81c:	004f004f 	.word	0x004f004f
    b820:	004f004f 	.word	0x004f004f
    b824:	004f004f 	.word	0x004f004f
    b828:	0374004f 	.word	0x0374004f
    b82c:	030b030b 	.word	0x030b030b
    b830:	039e030b 	.word	0x039e030b
    b834:	004f0394 	.word	0x004f0394
    b838:	0384004f 	.word	0x0384004f
    b83c:	004f004f 	.word	0x004f004f
    b840:	004f004f 	.word	0x004f004f
    b844:	004f035d 	.word	0x004f035d
    b848:	004f033a 	.word	0x004f033a
    b84c:	004f004f 	.word	0x004f004f
    b850:	004f0333 	.word	0x004f0333
    b854:	004f004f 	.word	0x004f004f
    b858:	036d031e 	.word	0x036d031e
    b85c:	004f004f 	.word	0x004f004f
    b860:	004f004f 	.word	0x004f004f
    b864:	004f004f 	.word	0x004f004f
    b868:	0374004f 	.word	0x0374004f
    b86c:	030b030b 	.word	0x030b030b
    b870:	039e030b 	.word	0x039e030b
    b874:	004f0394 	.word	0x004f0394
    b878:	0384004f 	.word	0x0384004f
    b87c:	004f004f 	.word	0x004f004f
    b880:	004f004f 	.word	0x004f004f
    b884:	004f035d 	.word	0x004f035d
    b888:	004f033a 	.word	0x004f033a
    b88c:	004f004f 	.word	0x004f004f
    b890:	004f0333 	.word	0x004f0333
    b894:	004f004f 	.word	0x004f004f
    b898:	036d031e 	.word	0x036d031e
    b89c:	05a0      	lsls	r0, r4, #22
    b89e:	d56f      	bpl.n	b980 <__ssvfscanf_r+0x43c>
    b8a0:	6a38      	ldr	r0, [r7, #32]
    b8a2:	7803      	ldrb	r3, [r0, #0]
    b8a4:	4293      	cmp	r3, r2
    b8a6:	d16b      	bne.n	b980 <__ssvfscanf_r+0x43c>
    b8a8:	e9c7 4502 	strd	r4, r5, [r7, #8]
    b8ac:	607e      	str	r6, [r7, #4]
    b8ae:	4681      	mov	r9, r0
    b8b0:	ee18 6a10 	vmov	r6, s16
    b8b4:	f04f 0800 	mov.w	r8, #0
    b8b8:	465c      	mov	r4, fp
    b8ba:	e007      	b.n	b8cc <__ssvfscanf_r+0x388>
    b8bc:	6021      	str	r1, [r4, #0]
    b8be:	f891 e000 	ldrb.w	lr, [r1]
    b8c2:	f899 0000 	ldrb.w	r0, [r9]
    b8c6:	4586      	cmp	lr, r0
    b8c8:	d11c      	bne.n	b904 <__ssvfscanf_r+0x3c0>
    b8ca:	46da      	mov	sl, fp
    b8cc:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    b8d0:	4645      	mov	r5, r8
    b8d2:	f10a 0b01 	add.w	fp, sl, #1
    b8d6:	3101      	adds	r1, #1
    b8d8:	f108 0801 	add.w	r8, r8, #1
    b8dc:	2800      	cmp	r0, #0
    b8de:	f000 8664 	beq.w	c5aa <__ssvfscanf_r+0x1066>
    b8e2:	6860      	ldr	r0, [r4, #4]
    b8e4:	3801      	subs	r0, #1
    b8e6:	2800      	cmp	r0, #0
    b8e8:	6060      	str	r0, [r4, #4]
    b8ea:	dce7      	bgt.n	b8bc <__ssvfscanf_r+0x378>
    b8ec:	4621      	mov	r1, r4
    b8ee:	4630      	mov	r0, r6
    b8f0:	f003 fdbc 	bl	f46c <__ssrefill_r>
    b8f4:	b930      	cbnz	r0, b904 <__ssvfscanf_r+0x3c0>
    b8f6:	6821      	ldr	r1, [r4, #0]
    b8f8:	f899 0000 	ldrb.w	r0, [r9]
    b8fc:	f891 e000 	ldrb.w	lr, [r1]
    b900:	4586      	cmp	lr, r0
    b902:	d0e2      	beq.n	b8ca <__ssvfscanf_r+0x386>
    b904:	46a3      	mov	fp, r4
    b906:	6a3a      	ldr	r2, [r7, #32]
    b908:	68bc      	ldr	r4, [r7, #8]
    b90a:	613d      	str	r5, [r7, #16]
    b90c:	462b      	mov	r3, r5
    b90e:	46b1      	mov	r9, r6
    b910:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    b912:	68fd      	ldr	r5, [r7, #12]
    b914:	64bd      	str	r5, [r7, #72]	; 0x48
    b916:	3301      	adds	r3, #1
    b918:	465d      	mov	r5, fp
    b91a:	eb02 0803 	add.w	r8, r2, r3
    b91e:	46b3      	mov	fp, r6
    b920:	4626      	mov	r6, r4
    b922:	4614      	mov	r4, r2
    b924:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
    b928:	462a      	mov	r2, r5
    b92a:	4648      	mov	r0, r9
    b92c:	f003 fd5e 	bl	f3ec <_sungetc_r>
    b930:	4544      	cmp	r4, r8
    b932:	d1f7      	bne.n	b924 <__ssvfscanf_r+0x3e0>
    b934:	693b      	ldr	r3, [r7, #16]
    b936:	4634      	mov	r4, r6
    b938:	ebaa 0a03 	sub.w	sl, sl, r3
    b93c:	465e      	mov	r6, fp
    b93e:	46ab      	mov	fp, r5
    b940:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    b942:	e020      	b.n	b986 <__ssvfscanf_r+0x442>
    b944:	05e0      	lsls	r0, r4, #23
    b946:	f100 8501 	bmi.w	c34c <__ssvfscanf_r+0xe08>
    b94a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b94c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    b94e:	42d9      	cmn	r1, r3
    b950:	d116      	bne.n	b980 <__ssvfscanf_r+0x43c>
    b952:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    b956:	f805 2b01 	strb.w	r2, [r5], #1
    b95a:	3e01      	subs	r6, #1
    b95c:	f8db 3004 	ldr.w	r3, [fp, #4]
    b960:	3b01      	subs	r3, #1
    b962:	2b00      	cmp	r3, #0
    b964:	f10a 0a01 	add.w	sl, sl, #1
    b968:	f8cb 3004 	str.w	r3, [fp, #4]
    b96c:	f340 836f 	ble.w	c04e <__ssvfscanf_r+0xb0a>
    b970:	f8db 3000 	ldr.w	r3, [fp]
    b974:	3301      	adds	r3, #1
    b976:	f8cb 3000 	str.w	r3, [fp]
    b97a:	2e00      	cmp	r6, #0
    b97c:	f47f af36 	bne.w	b7ec <__ssvfscanf_r+0x2a8>
    b980:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    b982:	ee18 9a10 	vmov	r9, s16
    b986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b988:	2b00      	cmp	r3, #0
    b98a:	f040 82dc 	bne.w	bf46 <__ssvfscanf_r+0xa02>
    b98e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b990:	3b01      	subs	r3, #1
    b992:	2b01      	cmp	r3, #1
    b994:	f241 8016 	bls.w	c9c4 <__ssvfscanf_r+0x1480>
    b998:	1e73      	subs	r3, r6, #1
    b99a:	2b06      	cmp	r3, #6
    b99c:	f240 8627 	bls.w	c5ee <__ssvfscanf_r+0x10aa>
    b9a0:	05e3      	lsls	r3, r4, #23
    b9a2:	d51b      	bpl.n	b9dc <__ssvfscanf_r+0x498>
    b9a4:	0566      	lsls	r6, r4, #21
    b9a6:	f101 80b5 	bmi.w	cb14 <__ssvfscanf_r+0x15d0>
    b9aa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    b9ae:	2965      	cmp	r1, #101	; 0x65
    b9b0:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
    b9b4:	f10a 36ff 	add.w	r6, sl, #4294967295	; 0xffffffff
    b9b8:	d00a      	beq.n	b9d0 <__ssvfscanf_r+0x48c>
    b9ba:	2945      	cmp	r1, #69	; 0x45
    b9bc:	d008      	beq.n	b9d0 <__ssvfscanf_r+0x48c>
    b9be:	465a      	mov	r2, fp
    b9c0:	4648      	mov	r0, r9
    b9c2:	f003 fd13 	bl	f3ec <_sungetc_r>
    b9c6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
    b9ca:	f1aa 0602 	sub.w	r6, sl, #2
    b9ce:	1eab      	subs	r3, r5, #2
    b9d0:	465a      	mov	r2, fp
    b9d2:	4648      	mov	r0, r9
    b9d4:	46b2      	mov	sl, r6
    b9d6:	461d      	mov	r5, r3
    b9d8:	f003 fd08 	bl	f3ec <_sungetc_r>
    b9dc:	f014 0210 	ands.w	r2, r4, #16
    b9e0:	f47f add7 	bne.w	b592 <__ssvfscanf_r+0x4e>
    b9e4:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    b9e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    b9ec:	702a      	strb	r2, [r5, #0]
    b9ee:	f000 84d2 	beq.w	c396 <__ssvfscanf_r+0xe52>
    b9f2:	69bb      	ldr	r3, [r7, #24]
    b9f4:	2b00      	cmp	r3, #0
    b9f6:	f040 872c 	bne.w	c852 <__ssvfscanf_r+0x130e>
    b9fa:	4648      	mov	r0, r9
    b9fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    b9fe:	2200      	movs	r2, #0
    ba00:	f7fc fb92 	bl	8128 <_strtod_r>
    ba04:	07e0      	lsls	r0, r4, #31
    ba06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ba08:	f100 85c9 	bmi.w	c59e <__ssvfscanf_r+0x105a>
    ba0c:	07a1      	lsls	r1, r4, #30
    ba0e:	f100 85c6 	bmi.w	c59e <__ssvfscanf_r+0x105a>
    ba12:	eeb4 0b40 	vcmp.f64	d0, d0
    ba16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ba1a:	f853 4b04 	ldr.w	r4, [r3], #4
    ba1e:	f180 86f4 	bvs.w	c80a <__ssvfscanf_r+0x12c6>
    ba22:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    ba26:	633b      	str	r3, [r7, #48]	; 0x30
    ba28:	ed84 0a00 	vstr	s0, [r4]
    ba2c:	e3a2      	b.n	c174 <__ssvfscanf_r+0xc30>
    ba2e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    ba32:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    ba36:	f240 83a2 	bls.w	c17e <__ssvfscanf_r+0xc3a>
    ba3a:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
    ba3e:	eb08 0302 	add.w	r3, r8, r2
    ba42:	63fb      	str	r3, [r7, #60]	; 0x3c
    ba44:	f240 185d 	movw	r8, #349	; 0x15d
    ba48:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    ba4c:	2200      	movs	r2, #0
    ba4e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    ba50:	62bb      	str	r3, [r7, #40]	; 0x28
    ba52:	4659      	mov	r1, fp
    ba54:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
    ba58:	46d3      	mov	fp, sl
    ba5a:	461d      	mov	r5, r3
    ba5c:	4692      	mov	sl, r2
    ba5e:	680a      	ldr	r2, [r1, #0]
    ba60:	7810      	ldrb	r0, [r2, #0]
    ba62:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
    ba66:	2b4d      	cmp	r3, #77	; 0x4d
    ba68:	d860      	bhi.n	bb2c <__ssvfscanf_r+0x5e8>
    ba6a:	e8df f013 	tbh	[pc, r3, lsl #1]
    ba6e:	0282      	.short	0x0282
    ba70:	0282005f 	.word	0x0282005f
    ba74:	005f005f 	.word	0x005f005f
    ba78:	01e002cd 	.word	0x01e002cd
    ba7c:	01e001e0 	.word	0x01e001e0
    ba80:	01e001e0 	.word	0x01e001e0
    ba84:	01e001e0 	.word	0x01e001e0
    ba88:	026f026f 	.word	0x026f026f
    ba8c:	005f005f 	.word	0x005f005f
    ba90:	005f005f 	.word	0x005f005f
    ba94:	005f005f 	.word	0x005f005f
    ba98:	004e005f 	.word	0x004e005f
    ba9c:	004e004e 	.word	0x004e004e
    baa0:	004e004e 	.word	0x004e004e
    baa4:	005f004e 	.word	0x005f004e
    baa8:	005f005f 	.word	0x005f005f
    baac:	005f005f 	.word	0x005f005f
    bab0:	005f005f 	.word	0x005f005f
    bab4:	005f005f 	.word	0x005f005f
    bab8:	005f005f 	.word	0x005f005f
    babc:	005f005f 	.word	0x005f005f
    bac0:	005f005f 	.word	0x005f005f
    bac4:	005f005f 	.word	0x005f005f
    bac8:	005f0276 	.word	0x005f0276
    bacc:	005f005f 	.word	0x005f005f
    bad0:	005f005f 	.word	0x005f005f
    bad4:	005f005f 	.word	0x005f005f
    bad8:	004e005f 	.word	0x004e005f
    badc:	004e004e 	.word	0x004e004e
    bae0:	004e004e 	.word	0x004e004e
    bae4:	005f004e 	.word	0x005f004e
    bae8:	005f005f 	.word	0x005f005f
    baec:	005f005f 	.word	0x005f005f
    baf0:	005f005f 	.word	0x005f005f
    baf4:	005f005f 	.word	0x005f005f
    baf8:	005f005f 	.word	0x005f005f
    bafc:	005f005f 	.word	0x005f005f
    bb00:	005f005f 	.word	0x005f005f
    bb04:	005f005f 	.word	0x005f005f
    bb08:	0276      	.short	0x0276
    bb0a:	2e0a      	cmp	r6, #10
    bb0c:	dd0e      	ble.n	bb2c <__ssvfscanf_r+0x5e8>
    bb0e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    bb12:	684b      	ldr	r3, [r1, #4]
    bb14:	f805 0b01 	strb.w	r0, [r5], #1
    bb18:	3b01      	subs	r3, #1
    bb1a:	2b00      	cmp	r3, #0
    bb1c:	604b      	str	r3, [r1, #4]
    bb1e:	f340 828d 	ble.w	c03c <__ssvfscanf_r+0xaf8>
    bb22:	3201      	adds	r2, #1
    bb24:	600a      	str	r2, [r1, #0]
    bb26:	f1b8 0801 	subs.w	r8, r8, #1
    bb2a:	d198      	bne.n	ba5e <__ssvfscanf_r+0x51a>
    bb2c:	05e0      	lsls	r0, r4, #23
    bb2e:	46d0      	mov	r8, sl
    bb30:	63be      	str	r6, [r7, #56]	; 0x38
    bb32:	46da      	mov	sl, fp
    bb34:	468b      	mov	fp, r1
    bb36:	d507      	bpl.n	bb48 <__ssvfscanf_r+0x604>
    bb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb3a:	429d      	cmp	r5, r3
    bb3c:	f200 8422 	bhi.w	c384 <__ssvfscanf_r+0xe40>
    bb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb42:	429d      	cmp	r5, r3
    bb44:	f43f adf3 	beq.w	b72e <__ssvfscanf_r+0x1ea>
    bb48:	f014 0210 	ands.w	r2, r4, #16
    bb4c:	d110      	bne.n	bb70 <__ssvfscanf_r+0x62c>
    bb4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    bb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb52:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    bb54:	702a      	strb	r2, [r5, #0]
    bb56:	4648      	mov	r0, r9
    bb58:	47b0      	blx	r6
    bb5a:	06a1      	lsls	r1, r4, #26
    bb5c:	f140 8408 	bpl.w	c370 <__ssvfscanf_r+0xe2c>
    bb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bb62:	f853 2b04 	ldr.w	r2, [r3], #4
    bb66:	6010      	str	r0, [r2, #0]
    bb68:	633b      	str	r3, [r7, #48]	; 0x30
    bb6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb6c:	3301      	adds	r3, #1
    bb6e:	647b      	str	r3, [r7, #68]	; 0x44
    bb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb72:	1aed      	subs	r5, r5, r3
    bb74:	4445      	add	r5, r8
    bb76:	44aa      	add	sl, r5
    bb78:	e50b      	b.n	b592 <__ssvfscanf_r+0x4e>
    bb7a:	f1b8 0f00 	cmp.w	r8, #0
    bb7e:	bf08      	it	eq
    bb80:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
    bb84:	07e0      	lsls	r0, r4, #31
    bb86:	f140 8295 	bpl.w	c0b4 <__ssvfscanf_r+0xb70>
    bb8a:	f014 0310 	ands.w	r3, r4, #16
    bb8e:	637b      	str	r3, [r7, #52]	; 0x34
    bb90:	f040 8474 	bne.w	c47c <__ssvfscanf_r+0xf38>
    bb94:	0621      	lsls	r1, r4, #24
    bb96:	f140 8666 	bpl.w	c866 <__ssvfscanf_r+0x1322>
    bb9a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    bb9c:	f854 3b04 	ldr.w	r3, [r4], #4
    bba0:	63fb      	str	r3, [r7, #60]	; 0x3c
    bba2:	2b00      	cmp	r3, #0
    bba4:	f43f adc3 	beq.w	b72e <__ssvfscanf_r+0x1ea>
    bba8:	2080      	movs	r0, #128	; 0x80
    bbaa:	f7fa fec1 	bl	6930 <malloc>
    bbae:	64b8      	str	r0, [r7, #72]	; 0x48
    bbb0:	2800      	cmp	r0, #0
    bbb2:	f000 8778 	beq.w	caa6 <__ssvfscanf_r+0x1562>
    bbb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bbb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bbba:	601a      	str	r2, [r3, #0]
    bbbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    bbbe:	88d5      	ldrh	r5, [r2, #6]
    bbc0:	8893      	ldrh	r3, [r2, #4]
    bbc2:	429d      	cmp	r5, r3
    bbc4:	f080 8552 	bcs.w	c66c <__ssvfscanf_r+0x1128>
    bbc8:	6810      	ldr	r0, [r2, #0]
    bbca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bbcc:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    bbd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bbd2:	633c      	str	r4, [r7, #48]	; 0x30
    bbd4:	3501      	adds	r5, #1
    bbd6:	80dd      	strh	r5, [r3, #6]
    bbd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bbda:	62bb      	str	r3, [r7, #40]	; 0x28
    bbdc:	2320      	movs	r3, #32
    bbde:	623b      	str	r3, [r7, #32]
    bbe0:	f8db 3000 	ldr.w	r3, [fp]
    bbe4:	4eb1      	ldr	r6, [pc, #708]	; (beac <__ssvfscanf_r+0x968>)
    bbe6:	781b      	ldrb	r3, [r3, #0]
    bbe8:	5cf3      	ldrb	r3, [r6, r3]
    bbea:	f013 0308 	ands.w	r3, r3, #8
    bbee:	f040 84bb 	bne.w	c568 <__ssvfscanf_r+0x1024>
    bbf2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    bbf4:	627e      	str	r6, [r7, #36]	; 0x24
    bbf6:	461d      	mov	r5, r3
    bbf8:	f7fc fe40 	bl	887c <__locale_mb_cur_max>
    bbfc:	42a8      	cmp	r0, r5
    bbfe:	f43f ad8d 	beq.w	b71c <__ssvfscanf_r+0x1d8>
    bc02:	e9db 3200 	ldrd	r3, r2, [fp]
    bc06:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    bc0a:	f813 1b01 	ldrb.w	r1, [r3], #1
    bc0e:	5541      	strb	r1, [r0, r5]
    bc10:	3a01      	subs	r2, #1
    bc12:	2c03      	cmp	r4, #3
    bc14:	e9cb 3200 	strd	r3, r2, [fp]
    bc18:	f105 0501 	add.w	r5, r5, #1
    bc1c:	f107 0668 	add.w	r6, r7, #104	; 0x68
    bc20:	d102      	bne.n	bc28 <__ssvfscanf_r+0x6e4>
    bc22:	6833      	ldr	r3, [r6, #0]
    bc24:	2b04      	cmp	r3, #4
    bc26:	d004      	beq.n	bc32 <__ssvfscanf_r+0x6ee>
    bc28:	2208      	movs	r2, #8
    bc2a:	2100      	movs	r1, #0
    bc2c:	4630      	mov	r0, r6
    bc2e:	f7fc fd5b 	bl	86e8 <memset>
    bc32:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    bc36:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    bc38:	9600      	str	r6, [sp, #0]
    bc3a:	462b      	mov	r3, r5
    bc3c:	4648      	mov	r0, r9
    bc3e:	f002 fa2f 	bl	e0a0 <_mbrtowc_r>
    bc42:	1c42      	adds	r2, r0, #1
    bc44:	4604      	mov	r4, r0
    bc46:	f43f ad69 	beq.w	b71c <__ssvfscanf_r+0x1d8>
    bc4a:	2800      	cmp	r0, #0
    bc4c:	f040 8478 	bne.w	c540 <__ssvfscanf_r+0xffc>
    bc50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bc52:	6018      	str	r0, [r3, #0]
    bc54:	f002 fa80 	bl	e158 <iswspace>
    bc58:	2800      	cmp	r0, #0
    bc5a:	f040 865c 	bne.w	c916 <__ssvfscanf_r+0x13d2>
    bc5e:	44aa      	add	sl, r5
    bc60:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    bc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bc66:	2b00      	cmp	r3, #0
    bc68:	f040 8633 	bne.w	c8d2 <__ssvfscanf_r+0x138e>
    bc6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bc6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    bc70:	3304      	adds	r3, #4
    bc72:	64bb      	str	r3, [r7, #72]	; 0x48
    bc74:	2a00      	cmp	r2, #0
    bc76:	f000 862c 	beq.w	c8d2 <__ssvfscanf_r+0x138e>
    bc7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bc7c:	1a9d      	subs	r5, r3, r2
    bc7e:	6a3b      	ldr	r3, [r7, #32]
    bc80:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
    bc84:	f240 8756 	bls.w	cb34 <__ssvfscanf_r+0x15f0>
    bc88:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    bc8a:	f000 bc5c 	b.w	c546 <__ssvfscanf_r+0x1002>
    bc8e:	f1b8 0f00 	cmp.w	r8, #0
    bc92:	bf08      	it	eq
    bc94:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
    bc98:	07e0      	lsls	r0, r4, #31
    bc9a:	f140 827b 	bpl.w	c194 <__ssvfscanf_r+0xc50>
    bc9e:	f014 0310 	ands.w	r3, r4, #16
    bca2:	62bb      	str	r3, [r7, #40]	; 0x28
    bca4:	f040 83f3 	bne.w	c48e <__ssvfscanf_r+0xf4a>
    bca8:	0621      	lsls	r1, r4, #24
    bcaa:	f140 85ed 	bpl.w	c888 <__ssvfscanf_r+0x1344>
    bcae:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    bcb0:	f856 3b04 	ldr.w	r3, [r6], #4
    bcb4:	623b      	str	r3, [r7, #32]
    bcb6:	2b00      	cmp	r3, #0
    bcb8:	f43f ad39 	beq.w	b72e <__ssvfscanf_r+0x1ea>
    bcbc:	2080      	movs	r0, #128	; 0x80
    bcbe:	f7fa fe37 	bl	6930 <malloc>
    bcc2:	4604      	mov	r4, r0
    bcc4:	2800      	cmp	r0, #0
    bcc6:	f000 86ee 	beq.w	caa6 <__ssvfscanf_r+0x1562>
    bcca:	6a3b      	ldr	r3, [r7, #32]
    bccc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    bcce:	6018      	str	r0, [r3, #0]
    bcd0:	88d5      	ldrh	r5, [r2, #6]
    bcd2:	8893      	ldrh	r3, [r2, #4]
    bcd4:	429d      	cmp	r5, r3
    bcd6:	f080 84dd 	bcs.w	c694 <__ssvfscanf_r+0x1150>
    bcda:	6810      	ldr	r0, [r2, #0]
    bcdc:	6a3b      	ldr	r3, [r7, #32]
    bcde:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    bce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bce4:	633e      	str	r6, [r7, #48]	; 0x30
    bce6:	3501      	adds	r5, #1
    bce8:	80dd      	strh	r5, [r3, #6]
    bcea:	2320      	movs	r3, #32
    bcec:	61fc      	str	r4, [r7, #28]
    bcee:	61bb      	str	r3, [r7, #24]
    bcf0:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    bcf2:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    bcf6:	2500      	movs	r5, #0
    bcf8:	46c2      	mov	sl, r8
    bcfa:	46a0      	mov	r8, r4
    bcfc:	f7fc fdbe 	bl	887c <__locale_mb_cur_max>
    bd00:	42a8      	cmp	r0, r5
    bd02:	f43f ad0b 	beq.w	b71c <__ssvfscanf_r+0x1d8>
    bd06:	e9db 3200 	ldrd	r3, r2, [fp]
    bd0a:	f813 1b01 	ldrb.w	r1, [r3], #1
    bd0e:	3a01      	subs	r2, #1
    bd10:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    bd14:	e9cb 3200 	strd	r3, r2, [fp]
    bd18:	2e03      	cmp	r6, #3
    bd1a:	f105 0301 	add.w	r3, r5, #1
    bd1e:	5541      	strb	r1, [r0, r5]
    bd20:	64bb      	str	r3, [r7, #72]	; 0x48
    bd22:	f107 0460 	add.w	r4, r7, #96	; 0x60
    bd26:	d102      	bne.n	bd2e <__ssvfscanf_r+0x7ea>
    bd28:	6823      	ldr	r3, [r4, #0]
    bd2a:	2b04      	cmp	r3, #4
    bd2c:	d004      	beq.n	bd38 <__ssvfscanf_r+0x7f4>
    bd2e:	2208      	movs	r2, #8
    bd30:	2100      	movs	r1, #0
    bd32:	4620      	mov	r0, r4
    bd34:	f7fc fcd8 	bl	86e8 <memset>
    bd38:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    bd3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bd3e:	9400      	str	r4, [sp, #0]
    bd40:	4641      	mov	r1, r8
    bd42:	4648      	mov	r0, r9
    bd44:	f002 f9ac 	bl	e0a0 <_mbrtowc_r>
    bd48:	1c42      	adds	r2, r0, #1
    bd4a:	4606      	mov	r6, r0
    bd4c:	f43f ace6 	beq.w	b71c <__ssvfscanf_r+0x1d8>
    bd50:	2800      	cmp	r0, #0
    bd52:	f040 82ca 	bne.w	c2ea <__ssvfscanf_r+0xda6>
    bd56:	f8c8 0000 	str.w	r0, [r8]
    bd5a:	4605      	mov	r5, r0
    bd5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
    bd60:	2208      	movs	r2, #8
    bd62:	2100      	movs	r1, #0
    bd64:	4618      	mov	r0, r3
    bd66:	637b      	str	r3, [r7, #52]	; 0x34
    bd68:	f7fc fcbe 	bl	86e8 <memset>
    bd6c:	4950      	ldr	r1, [pc, #320]	; (beb0 <__ssvfscanf_r+0x96c>)
    bd6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bd70:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    bd74:	462a      	mov	r2, r5
    bd76:	4648      	mov	r0, r9
    bd78:	460d      	mov	r5, r1
    bd7a:	f107 0150 	add.w	r1, r7, #80	; 0x50
    bd7e:	47a8      	blx	r5
    bd80:	2801      	cmp	r0, #1
    bd82:	f000 83d5 	beq.w	c530 <__ssvfscanf_r+0xfec>
    bd86:	2200      	movs	r2, #0
    bd88:	f107 0370 	add.w	r3, r7, #112	; 0x70
    bd8c:	5c9b      	ldrb	r3, [r3, r2]
    bd8e:	2b00      	cmp	r3, #0
    bd90:	f000 85a1 	beq.w	c8d6 <__ssvfscanf_r+0x1392>
    bd94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bd96:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bd98:	2e03      	cmp	r6, #3
    bd9a:	4413      	add	r3, r2
    bd9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    bd9e:	f000 83ca 	beq.w	c536 <__ssvfscanf_r+0xff2>
    bda2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    bda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bda8:	b95b      	cbnz	r3, bdc2 <__ssvfscanf_r+0x87e>
    bdaa:	6a3b      	ldr	r3, [r7, #32]
    bdac:	f108 0804 	add.w	r8, r8, #4
    bdb0:	b13b      	cbz	r3, bdc2 <__ssvfscanf_r+0x87e>
    bdb2:	69fb      	ldr	r3, [r7, #28]
    bdb4:	eba8 0403 	sub.w	r4, r8, r3
    bdb8:	69bb      	ldr	r3, [r7, #24]
    bdba:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
    bdbe:	f240 8405 	bls.w	c5cc <__ssvfscanf_r+0x1088>
    bdc2:	f8db 3004 	ldr.w	r3, [fp, #4]
    bdc6:	2b00      	cmp	r3, #0
    bdc8:	f04f 0500 	mov.w	r5, #0
    bdcc:	f340 8296 	ble.w	c2fc <__ssvfscanf_r+0xdb8>
    bdd0:	f1ba 0f00 	cmp.w	sl, #0
    bdd4:	d192      	bne.n	bcfc <__ssvfscanf_r+0x7b8>
    bdd6:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    bdda:	627e      	str	r6, [r7, #36]	; 0x24
    bddc:	4644      	mov	r4, r8
    bdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bde0:	2b00      	cmp	r3, #0
    bde2:	f47f abd6 	bne.w	b592 <__ssvfscanf_r+0x4e>
    bde6:	6023      	str	r3, [r4, #0]
    bde8:	6a3b      	ldr	r3, [r7, #32]
    bdea:	2b00      	cmp	r3, #0
    bdec:	f000 81c2 	beq.w	c174 <__ssvfscanf_r+0xc30>
    bdf0:	69fb      	ldr	r3, [r7, #28]
    bdf2:	69ba      	ldr	r2, [r7, #24]
    bdf4:	1ae1      	subs	r1, r4, r3
    bdf6:	108b      	asrs	r3, r1, #2
    bdf8:	3301      	adds	r3, #1
    bdfa:	429a      	cmp	r2, r3
    bdfc:	f240 81ba 	bls.w	c174 <__ssvfscanf_r+0xc30>
    be00:	6a3c      	ldr	r4, [r7, #32]
    be02:	3104      	adds	r1, #4
    be04:	6820      	ldr	r0, [r4, #0]
    be06:	f7fb f85f 	bl	6ec8 <realloc>
    be0a:	2800      	cmp	r0, #0
    be0c:	f000 81b2 	beq.w	c174 <__ssvfscanf_r+0xc30>
    be10:	6020      	str	r0, [r4, #0]
    be12:	e1af      	b.n	c174 <__ssvfscanf_r+0xc30>
    be14:	0521      	lsls	r1, r4, #20
    be16:	f57f adb3 	bpl.w	b980 <__ssvfscanf_r+0x43c>
    be1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    be1c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    be1e:	185b      	adds	r3, r3, r1
    be20:	f47f adae 	bne.w	b980 <__ssvfscanf_r+0x43c>
    be24:	64bb      	str	r3, [r7, #72]	; 0x48
    be26:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    be2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    be2c:	e593      	b.n	b956 <__ssvfscanf_r+0x412>
    be2e:	4b21      	ldr	r3, [pc, #132]	; (beb4 <__ssvfscanf_r+0x970>)
    be30:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    be34:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    be38:	e66b      	b.n	bb12 <__ssvfscanf_r+0x5ce>
    be3a:	f404 6318 	and.w	r3, r4, #2432	; 0x980
    be3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    be42:	f47f ad9d 	bne.w	b980 <__ssvfscanf_r+0x43c>
    be46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    be48:	2b01      	cmp	r3, #1
    be4a:	f47f ad99 	bne.w	b980 <__ssvfscanf_r+0x43c>
    be4e:	2330      	movs	r3, #48	; 0x30
    be50:	f805 3b01 	strb.w	r3, [r5], #1
    be54:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    be58:	2300      	movs	r3, #0
    be5a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
    be5e:	3e01      	subs	r6, #1
    be60:	637b      	str	r3, [r7, #52]	; 0x34
    be62:	e578      	b.n	b956 <__ssvfscanf_r+0x412>
    be64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    be66:	2b06      	cmp	r3, #6
    be68:	f040 8574 	bne.w	c954 <__ssvfscanf_r+0x1410>
    be6c:	2307      	movs	r3, #7
    be6e:	64bb      	str	r3, [r7, #72]	; 0x48
    be70:	e571      	b.n	b956 <__ssvfscanf_r+0x412>
    be72:	0523      	lsls	r3, r4, #20
    be74:	f57f ad84 	bpl.w	b980 <__ssvfscanf_r+0x43c>
    be78:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
    be7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    be80:	d005      	beq.n	be8e <__ssvfscanf_r+0x94a>
    be82:	0561      	lsls	r1, r4, #21
    be84:	f57f ad7c 	bpl.w	b980 <__ssvfscanf_r+0x43c>
    be88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    be8a:	2b00      	cmp	r3, #0
    be8c:	d047      	beq.n	bf1e <__ssvfscanf_r+0x9da>
    be8e:	05a3      	lsls	r3, r4, #22
    be90:	d404      	bmi.n	be9c <__ssvfscanf_r+0x958>
    be92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    be94:	69f9      	ldr	r1, [r7, #28]
    be96:	1a5b      	subs	r3, r3, r1
    be98:	e9c7 5305 	strd	r5, r3, [r7, #20]
    be9c:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
    bea0:	2300      	movs	r3, #0
    bea2:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
    bea6:	637b      	str	r3, [r7, #52]	; 0x34
    bea8:	e555      	b.n	b956 <__ssvfscanf_r+0x412>
    beaa:	bf00      	nop
    beac:	20000955 	.word	0x20000955
    beb0:	20008638 	.word	0x20008638
    beb4:	20002580 	.word	0x20002580
    beb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    beba:	2b00      	cmp	r3, #0
    bebc:	f000 81ff 	beq.w	c2be <__ssvfscanf_r+0xd7a>
    bec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bec2:	2b02      	cmp	r3, #2
    bec4:	f000 83b0 	beq.w	c628 <__ssvfscanf_r+0x10e4>
    bec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    beca:	2b01      	cmp	r3, #1
    becc:	f000 81f1 	beq.w	c2b2 <__ssvfscanf_r+0xd6e>
    bed0:	2b04      	cmp	r3, #4
    bed2:	f000 81ee 	beq.w	c2b2 <__ssvfscanf_r+0xd6e>
    bed6:	e553      	b.n	b980 <__ssvfscanf_r+0x43c>
    bed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    beda:	2b07      	cmp	r3, #7
    bedc:	f040 853a 	bne.w	c954 <__ssvfscanf_r+0x1410>
    bee0:	2308      	movs	r3, #8
    bee2:	64bb      	str	r3, [r7, #72]	; 0x48
    bee4:	e537      	b.n	b956 <__ssvfscanf_r+0x412>
    bee6:	0520      	lsls	r0, r4, #20
    bee8:	f100 81f9 	bmi.w	c2de <__ssvfscanf_r+0xd9a>
    beec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    beee:	2b01      	cmp	r3, #1
    bef0:	f47f ad46 	bne.w	b980 <__ssvfscanf_r+0x43c>
    bef4:	2302      	movs	r3, #2
    bef6:	63fb      	str	r3, [r7, #60]	; 0x3c
    bef8:	e52d      	b.n	b956 <__ssvfscanf_r+0x412>
    befa:	0623      	lsls	r3, r4, #24
    befc:	f57f ad40 	bpl.w	b980 <__ssvfscanf_r+0x43c>
    bf00:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    bf04:	e527      	b.n	b956 <__ssvfscanf_r+0x412>
    bf06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bf08:	2b00      	cmp	r3, #0
    bf0a:	f040 81cc 	bne.w	c2a6 <__ssvfscanf_r+0xd62>
    bf0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bf10:	b9b3      	cbnz	r3, bf40 <__ssvfscanf_r+0x9fc>
    bf12:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    bf16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    bf1a:	f000 8520 	beq.w	c95e <__ssvfscanf_r+0x141a>
    bf1e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    bf20:	ee18 9a10 	vmov	r9, s16
    bf24:	e533      	b.n	b98e <__ssvfscanf_r+0x44a>
    bf26:	0521      	lsls	r1, r4, #20
    bf28:	f100 81b7 	bmi.w	c29a <__ssvfscanf_r+0xd56>
    bf2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bf2e:	2b02      	cmp	r3, #2
    bf30:	f040 8510 	bne.w	c954 <__ssvfscanf_r+0x1410>
    bf34:	2303      	movs	r3, #3
    bf36:	64bb      	str	r3, [r7, #72]	; 0x48
    bf38:	e50d      	b.n	b956 <__ssvfscanf_r+0x412>
    bf3a:	0520      	lsls	r0, r4, #20
    bf3c:	d59c      	bpl.n	be78 <__ssvfscanf_r+0x934>
    bf3e:	e76c      	b.n	be1a <__ssvfscanf_r+0x8d6>
    bf40:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    bf42:	ee18 9a10 	vmov	r9, s16
    bf46:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    bf4a:	e520      	b.n	b98e <__ssvfscanf_r+0x44a>
    bf4c:	4b8d      	ldr	r3, [pc, #564]	; (c184 <__ssvfscanf_r+0xc40>)
    bf4e:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    bf52:	2e08      	cmp	r6, #8
    bf54:	f73f addb 	bgt.w	bb0e <__ssvfscanf_r+0x5ca>
    bf58:	e5e8      	b.n	bb2c <__ssvfscanf_r+0x5e8>
    bf5a:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    bf5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    bf62:	f47f ade3 	bne.w	bb2c <__ssvfscanf_r+0x5e8>
    bf66:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    bf6a:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
    bf6e:	2610      	movs	r6, #16
    bf70:	e5cf      	b.n	bb12 <__ssvfscanf_r+0x5ce>
    bf72:	0623      	lsls	r3, r4, #24
    bf74:	f57f adda 	bpl.w	bb2c <__ssvfscanf_r+0x5e8>
    bf78:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    bf7c:	e5c9      	b.n	bb12 <__ssvfscanf_r+0x5ce>
    bf7e:	f044 0401 	orr.w	r4, r4, #1
    bf82:	f8db 3004 	ldr.w	r3, [fp, #4]
    bf86:	64f9      	str	r1, [r7, #76]	; 0x4c
    bf88:	2b00      	cmp	r3, #0
    bf8a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    bf8e:	f04f 0500 	mov.w	r5, #0
    bf92:	f73f abf8 	bgt.w	b786 <__ssvfscanf_r+0x242>
    bf96:	4659      	mov	r1, fp
    bf98:	4648      	mov	r0, r9
    bf9a:	f003 fa67 	bl	f46c <__ssrefill_r>
    bf9e:	2800      	cmp	r0, #0
    bfa0:	f47f abbc 	bne.w	b71c <__ssvfscanf_r+0x1d8>
    bfa4:	0660      	lsls	r0, r4, #25
    bfa6:	f53f abf1 	bmi.w	b78c <__ssvfscanf_r+0x248>
    bfaa:	f8db 2000 	ldr.w	r2, [fp]
    bfae:	4e76      	ldr	r6, [pc, #472]	; (c188 <__ssvfscanf_r+0xc44>)
    bfb0:	7813      	ldrb	r3, [r2, #0]
    bfb2:	5cf3      	ldrb	r3, [r6, r3]
    bfb4:	0719      	lsls	r1, r3, #28
    bfb6:	f57f abe9 	bpl.w	b78c <__ssvfscanf_r+0x248>
    bfba:	f8db 3004 	ldr.w	r3, [fp, #4]
    bfbe:	3b01      	subs	r3, #1
    bfc0:	2b00      	cmp	r3, #0
    bfc2:	f10a 0a01 	add.w	sl, sl, #1
    bfc6:	f8cb 3004 	str.w	r3, [fp, #4]
    bfca:	f102 0201 	add.w	r2, r2, #1
    bfce:	dd4a      	ble.n	c066 <__ssvfscanf_r+0xb22>
    bfd0:	f8cb 2000 	str.w	r2, [fp]
    bfd4:	7813      	ldrb	r3, [r2, #0]
    bfd6:	5cf3      	ldrb	r3, [r6, r3]
    bfd8:	0719      	lsls	r1, r3, #28
    bfda:	f57f abd7 	bpl.w	b78c <__ssvfscanf_r+0x248>
    bfde:	e7ec      	b.n	bfba <__ssvfscanf_r+0xa76>
    bfe0:	f044 0401 	orr.w	r4, r4, #1
    bfe4:	4b69      	ldr	r3, [pc, #420]	; (c18c <__ssvfscanf_r+0xc48>)
    bfe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    bfe8:	2308      	movs	r3, #8
    bfea:	64f9      	str	r1, [r7, #76]	; 0x4c
    bfec:	63bb      	str	r3, [r7, #56]	; 0x38
    bfee:	2503      	movs	r5, #3
    bff0:	f7ff bbc4 	b.w	b77c <__ssvfscanf_r+0x238>
    bff4:	f044 0401 	orr.w	r4, r4, #1
    bff8:	4b65      	ldr	r3, [pc, #404]	; (c190 <__ssvfscanf_r+0xc4c>)
    bffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    bffc:	230a      	movs	r3, #10
    bffe:	64f9      	str	r1, [r7, #76]	; 0x4c
    c000:	63bb      	str	r3, [r7, #56]	; 0x38
    c002:	2503      	movs	r5, #3
    c004:	f7ff bbba 	b.w	b77c <__ssvfscanf_r+0x238>
    c008:	0523      	lsls	r3, r4, #20
    c00a:	f57f ad82 	bpl.w	bb12 <__ssvfscanf_r+0x5ce>
    c00e:	b916      	cbnz	r6, c016 <__ssvfscanf_r+0xad2>
    c010:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    c014:	2608      	movs	r6, #8
    c016:	0563      	lsls	r3, r4, #21
    c018:	f100 81a6 	bmi.w	c368 <__ssvfscanf_r+0xe24>
    c01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c01e:	f424 7460 	bic.w	r4, r4, #896	; 0x380
    c022:	b11b      	cbz	r3, c02c <__ssvfscanf_r+0xae8>
    c024:	3b01      	subs	r3, #1
    c026:	63fb      	str	r3, [r7, #60]	; 0x3c
    c028:	f108 0801 	add.w	r8, r8, #1
    c02c:	684b      	ldr	r3, [r1, #4]
    c02e:	3b01      	subs	r3, #1
    c030:	2b00      	cmp	r3, #0
    c032:	f10a 0a01 	add.w	sl, sl, #1
    c036:	604b      	str	r3, [r1, #4]
    c038:	f73f ad73 	bgt.w	bb22 <__ssvfscanf_r+0x5de>
    c03c:	4648      	mov	r0, r9
    c03e:	64b9      	str	r1, [r7, #72]	; 0x48
    c040:	f003 fa14 	bl	f46c <__ssrefill_r>
    c044:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    c046:	2800      	cmp	r0, #0
    c048:	f43f ad6d 	beq.w	bb26 <__ssvfscanf_r+0x5e2>
    c04c:	e56e      	b.n	bb2c <__ssvfscanf_r+0x5e8>
    c04e:	ee18 0a10 	vmov	r0, s16
    c052:	4659      	mov	r1, fp
    c054:	f003 fa0a 	bl	f46c <__ssrefill_r>
    c058:	2800      	cmp	r0, #0
    c05a:	f47f ac91 	bne.w	b980 <__ssvfscanf_r+0x43c>
    c05e:	2e00      	cmp	r6, #0
    c060:	f47f abc4 	bne.w	b7ec <__ssvfscanf_r+0x2a8>
    c064:	e48c      	b.n	b980 <__ssvfscanf_r+0x43c>
    c066:	4659      	mov	r1, fp
    c068:	4648      	mov	r0, r9
    c06a:	f003 f9ff 	bl	f46c <__ssrefill_r>
    c06e:	2800      	cmp	r0, #0
    c070:	f47f ab54 	bne.w	b71c <__ssvfscanf_r+0x1d8>
    c074:	f8db 2000 	ldr.w	r2, [fp]
    c078:	e79a      	b.n	bfb0 <__ssvfscanf_r+0xa6c>
    c07a:	f8db 2004 	ldr.w	r2, [fp, #4]
    c07e:	e00f      	b.n	c0a0 <__ssvfscanf_r+0xb5c>
    c080:	f8db 3000 	ldr.w	r3, [fp]
    c084:	781a      	ldrb	r2, [r3, #0]
    c086:	5cb2      	ldrb	r2, [r6, r2]
    c088:	0711      	lsls	r1, r2, #28
    c08a:	f103 0301 	add.w	r3, r3, #1
    c08e:	f57f aa80 	bpl.w	b592 <__ssvfscanf_r+0x4e>
    c092:	f8db 2004 	ldr.w	r2, [fp, #4]
    c096:	3a01      	subs	r2, #1
    c098:	e9cb 3200 	strd	r3, r2, [fp]
    c09c:	f10a 0a01 	add.w	sl, sl, #1
    c0a0:	2a00      	cmp	r2, #0
    c0a2:	dced      	bgt.n	c080 <__ssvfscanf_r+0xb3c>
    c0a4:	4659      	mov	r1, fp
    c0a6:	4648      	mov	r0, r9
    c0a8:	f003 f9e0 	bl	f46c <__ssrefill_r>
    c0ac:	2800      	cmp	r0, #0
    c0ae:	d0e7      	beq.n	c080 <__ssvfscanf_r+0xb3c>
    c0b0:	f7ff ba6f 	b.w	b592 <__ssvfscanf_r+0x4e>
    c0b4:	06e1      	lsls	r1, r4, #27
    c0b6:	f100 8349 	bmi.w	c74c <__ssvfscanf_r+0x1208>
    c0ba:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    c0be:	f000 83ab 	beq.w	c818 <__ssvfscanf_r+0x12d4>
    c0c2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    c0c4:	f854 6b04 	ldr.w	r6, [r4], #4
    c0c8:	64be      	str	r6, [r7, #72]	; 0x48
    c0ca:	2e00      	cmp	r6, #0
    c0cc:	f43f ab2f 	beq.w	b72e <__ssvfscanf_r+0x1ea>
    c0d0:	2020      	movs	r0, #32
    c0d2:	f7fa fc2d 	bl	6930 <malloc>
    c0d6:	4605      	mov	r5, r0
    c0d8:	2800      	cmp	r0, #0
    c0da:	f000 8462 	beq.w	c9a2 <__ssvfscanf_r+0x145e>
    c0de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c0e0:	6030      	str	r0, [r6, #0]
    c0e2:	8893      	ldrh	r3, [r2, #4]
    c0e4:	88d6      	ldrh	r6, [r2, #6]
    c0e6:	429e      	cmp	r6, r3
    c0e8:	f080 82a8 	bcs.w	c63c <__ssvfscanf_r+0x10f8>
    c0ec:	6810      	ldr	r0, [r2, #0]
    c0ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c0f0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    c0f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c0f6:	633c      	str	r4, [r7, #48]	; 0x30
    c0f8:	3601      	adds	r6, #1
    c0fa:	80de      	strh	r6, [r3, #6]
    c0fc:	2320      	movs	r3, #32
    c0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    c100:	f8db 2000 	ldr.w	r2, [fp]
    c104:	4e20      	ldr	r6, [pc, #128]	; (c188 <__ssvfscanf_r+0xc44>)
    c106:	7811      	ldrb	r1, [r2, #0]
    c108:	5c71      	ldrb	r1, [r6, r1]
    c10a:	0708      	lsls	r0, r1, #28
    c10c:	f100 82ac 	bmi.w	c668 <__ssvfscanf_r+0x1124>
    c110:	4633      	mov	r3, r6
    c112:	462c      	mov	r4, r5
    c114:	4610      	mov	r0, r2
    c116:	462e      	mov	r6, r5
    c118:	f8db 1004 	ldr.w	r1, [fp, #4]
    c11c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c11e:	3901      	subs	r1, #1
    c120:	f8cb 1004 	str.w	r1, [fp, #4]
    c124:	1c41      	adds	r1, r0, #1
    c126:	f8cb 1000 	str.w	r1, [fp]
    c12a:	4635      	mov	r5, r6
    c12c:	7801      	ldrb	r1, [r0, #0]
    c12e:	f805 1b01 	strb.w	r1, [r5], #1
    c132:	b122      	cbz	r2, c13e <__ssvfscanf_r+0xbfa>
    c134:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c136:	1b2e      	subs	r6, r5, r4
    c138:	4296      	cmp	r6, r2
    c13a:	f080 837a 	bcs.w	c832 <__ssvfscanf_r+0x12ee>
    c13e:	f1b8 0801 	subs.w	r8, r8, #1
    c142:	d00b      	beq.n	c15c <__ssvfscanf_r+0xc18>
    c144:	f8db 1004 	ldr.w	r1, [fp, #4]
    c148:	2900      	cmp	r1, #0
    c14a:	462e      	mov	r6, r5
    c14c:	f340 83ae 	ble.w	c8ac <__ssvfscanf_r+0x1368>
    c150:	f8db 0000 	ldr.w	r0, [fp]
    c154:	7801      	ldrb	r1, [r0, #0]
    c156:	5c59      	ldrb	r1, [r3, r1]
    c158:	0709      	lsls	r1, r1, #28
    c15a:	d5dd      	bpl.n	c118 <__ssvfscanf_r+0xbd4>
    c15c:	1b29      	subs	r1, r5, r4
    c15e:	448a      	add	sl, r1
    c160:	3101      	adds	r1, #1
    c162:	f04f 0300 	mov.w	r3, #0
    c166:	702b      	strb	r3, [r5, #0]
    c168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c16a:	b11b      	cbz	r3, c174 <__ssvfscanf_r+0xc30>
    c16c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c16e:	428b      	cmp	r3, r1
    c170:	f200 8394 	bhi.w	c89c <__ssvfscanf_r+0x1358>
    c174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c176:	3301      	adds	r3, #1
    c178:	647b      	str	r3, [r7, #68]	; 0x44
    c17a:	f7ff ba0a 	b.w	b592 <__ssvfscanf_r+0x4e>
    c17e:	2300      	movs	r3, #0
    c180:	63fb      	str	r3, [r7, #60]	; 0x3c
    c182:	e461      	b.n	ba48 <__ssvfscanf_r+0x504>
    c184:	20002580 	.word	0x20002580
    c188:	20000955 	.word	0x20000955
    c18c:	0000da99 	.word	0x0000da99
    c190:	00008321 	.word	0x00008321
    c194:	06e6      	lsls	r6, r4, #27
    c196:	f100 8181 	bmi.w	c49c <__ssvfscanf_r+0xf58>
    c19a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    c19e:	f000 836d 	beq.w	c87c <__ssvfscanf_r+0x1338>
    c1a2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    c1a4:	f854 6b04 	ldr.w	r6, [r4], #4
    c1a8:	64be      	str	r6, [r7, #72]	; 0x48
    c1aa:	2e00      	cmp	r6, #0
    c1ac:	f43f aabf 	beq.w	b72e <__ssvfscanf_r+0x1ea>
    c1b0:	2020      	movs	r0, #32
    c1b2:	f7fa fbbd 	bl	6930 <malloc>
    c1b6:	4605      	mov	r5, r0
    c1b8:	2800      	cmp	r0, #0
    c1ba:	f000 83f2 	beq.w	c9a2 <__ssvfscanf_r+0x145e>
    c1be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c1c0:	6030      	str	r0, [r6, #0]
    c1c2:	8893      	ldrh	r3, [r2, #4]
    c1c4:	88d6      	ldrh	r6, [r2, #6]
    c1c6:	429e      	cmp	r6, r3
    c1c8:	f080 827a 	bcs.w	c6c0 <__ssvfscanf_r+0x117c>
    c1cc:	6810      	ldr	r0, [r2, #0]
    c1ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c1d0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    c1d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c1d6:	633c      	str	r4, [r7, #48]	; 0x30
    c1d8:	3601      	adds	r6, #1
    c1da:	80de      	strh	r6, [r3, #6]
    c1dc:	2420      	movs	r4, #32
    c1de:	f8db 2000 	ldr.w	r2, [fp]
    c1e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
    c1e6:	4619      	mov	r1, r3
    c1e8:	7813      	ldrb	r3, [r2, #0]
    c1ea:	5ccb      	ldrb	r3, [r1, r3]
    c1ec:	2b00      	cmp	r3, #0
    c1ee:	f43f aa9e 	beq.w	b72e <__ssvfscanf_r+0x1ea>
    c1f2:	ee08 9a10 	vmov	s16, r9
    c1f6:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
    c1fa:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    c1fe:	462e      	mov	r6, r5
    c200:	46a2      	mov	sl, r4
    c202:	4610      	mov	r0, r2
    c204:	460c      	mov	r4, r1
    c206:	f8db 1004 	ldr.w	r1, [fp, #4]
    c20a:	1c43      	adds	r3, r0, #1
    c20c:	3901      	subs	r1, #1
    c20e:	e9cb 3100 	strd	r3, r1, [fp]
    c212:	4629      	mov	r1, r5
    c214:	7800      	ldrb	r0, [r0, #0]
    c216:	f801 0b01 	strb.w	r0, [r1], #1
    c21a:	f1b9 0f00 	cmp.w	r9, #0
    c21e:	d002      	beq.n	c226 <__ssvfscanf_r+0xce2>
    c220:	1b8d      	subs	r5, r1, r6
    c222:	4555      	cmp	r5, sl
    c224:	d27a      	bcs.n	c31c <__ssvfscanf_r+0xdd8>
    c226:	460d      	mov	r5, r1
    c228:	f1b8 0801 	subs.w	r8, r8, #1
    c22c:	d00a      	beq.n	c244 <__ssvfscanf_r+0xd00>
    c22e:	f8db 1004 	ldr.w	r1, [fp, #4]
    c232:	2900      	cmp	r1, #0
    c234:	f340 816a 	ble.w	c50c <__ssvfscanf_r+0xfc8>
    c238:	f8db 0000 	ldr.w	r0, [fp]
    c23c:	7801      	ldrb	r1, [r0, #0]
    c23e:	5c61      	ldrb	r1, [r4, r1]
    c240:	2900      	cmp	r1, #0
    c242:	d1e0      	bne.n	c206 <__ssvfscanf_r+0xcc2>
    c244:	4654      	mov	r4, sl
    c246:	ee18 9a10 	vmov	r9, s16
    c24a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    c24e:	1bae      	subs	r6, r5, r6
    c250:	f43f aa6d 	beq.w	b72e <__ssvfscanf_r+0x1ea>
    c254:	f04f 0300 	mov.w	r3, #0
    c258:	702b      	strb	r3, [r5, #0]
    c25a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c25c:	b11b      	cbz	r3, c266 <__ssvfscanf_r+0xd22>
    c25e:	1c71      	adds	r1, r6, #1
    c260:	428c      	cmp	r4, r1
    c262:	f200 832d 	bhi.w	c8c0 <__ssvfscanf_r+0x137c>
    c266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c268:	3301      	adds	r3, #1
    c26a:	44b2      	add	sl, r6
    c26c:	647b      	str	r3, [r7, #68]	; 0x44
    c26e:	f7ff b990 	b.w	b592 <__ssvfscanf_r+0x4e>
    c272:	2300      	movs	r3, #0
    c274:	613b      	str	r3, [r7, #16]
    c276:	f7ff baa9 	b.w	b7cc <__ssvfscanf_r+0x288>
    c27a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
    c27e:	f47f aa56 	bne.w	b72e <__ssvfscanf_r+0x1ea>
    c282:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    c286:	eb02 0848 	add.w	r8, r2, r8, lsl #1
    c28a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    c28e:	f7ff ba67 	b.w	b760 <__ssvfscanf_r+0x21c>
    c292:	64f9      	str	r1, [r7, #76]	; 0x4c
    c294:	2504      	movs	r5, #4
    c296:	f7ff ba71 	b.w	b77c <__ssvfscanf_r+0x238>
    c29a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c29c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    c29e:	185b      	adds	r3, r3, r1
    c2a0:	f47f ae44 	bne.w	bf2c <__ssvfscanf_r+0x9e8>
    c2a4:	e5be      	b.n	be24 <__ssvfscanf_r+0x8e0>
    c2a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c2a8:	2b03      	cmp	r3, #3
    c2aa:	d002      	beq.n	c2b2 <__ssvfscanf_r+0xd6e>
    c2ac:	2b05      	cmp	r3, #5
    c2ae:	f47f ab67 	bne.w	b980 <__ssvfscanf_r+0x43c>
    c2b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c2b4:	3301      	adds	r3, #1
    c2b6:	b2db      	uxtb	r3, r3
    c2b8:	64bb      	str	r3, [r7, #72]	; 0x48
    c2ba:	f7ff bb4c 	b.w	b956 <__ssvfscanf_r+0x412>
    c2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c2c0:	2b00      	cmp	r3, #0
    c2c2:	f47f ae01 	bne.w	bec8 <__ssvfscanf_r+0x984>
    c2c6:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    c2ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    c2ce:	f47f adfb 	bne.w	bec8 <__ssvfscanf_r+0x984>
    c2d2:	2301      	movs	r3, #1
    c2d4:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
    c2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    c2da:	f7ff bb3c 	b.w	b956 <__ssvfscanf_r+0x412>
    c2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c2e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    c2e2:	185b      	adds	r3, r3, r1
    c2e4:	f47f ae02 	bne.w	beec <__ssvfscanf_r+0x9a8>
    c2e8:	e59c      	b.n	be24 <__ssvfscanf_r+0x8e0>
    c2ea:	1c83      	adds	r3, r0, #2
    c2ec:	f040 845b 	bne.w	cba6 <__ssvfscanf_r+0x1662>
    c2f0:	f8db 3004 	ldr.w	r3, [fp, #4]
    c2f4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    c2f6:	2b00      	cmp	r3, #0
    c2f8:	f73f ad00 	bgt.w	bcfc <__ssvfscanf_r+0x7b8>
    c2fc:	4659      	mov	r1, fp
    c2fe:	4648      	mov	r0, r9
    c300:	f003 f8b4 	bl	f46c <__ssrefill_r>
    c304:	2800      	cmp	r0, #0
    c306:	f43f ad63 	beq.w	bdd0 <__ssvfscanf_r+0x88c>
    c30a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    c30e:	627e      	str	r6, [r7, #36]	; 0x24
    c310:	4644      	mov	r4, r8
    c312:	2d00      	cmp	r5, #0
    c314:	f43f ad63 	beq.w	bdde <__ssvfscanf_r+0x89a>
    c318:	f7ff ba00 	b.w	b71c <__ssvfscanf_r+0x1d8>
    c31c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    c320:	4630      	mov	r0, r6
    c322:	4651      	mov	r1, sl
    c324:	f7fa fdd0 	bl	6ec8 <realloc>
    c328:	4606      	mov	r6, r0
    c32a:	2800      	cmp	r0, #0
    c32c:	f000 8339 	beq.w	c9a2 <__ssvfscanf_r+0x145e>
    c330:	4405      	add	r5, r0
    c332:	f8c9 0000 	str.w	r0, [r9]
    c336:	e777      	b.n	c228 <__ssvfscanf_r+0xce4>
    c338:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    c33c:	4bbc      	ldr	r3, [pc, #752]	; (c630 <__ssvfscanf_r+0x10ec>)
    c33e:	62fb      	str	r3, [r7, #44]	; 0x2c
    c340:	2310      	movs	r3, #16
    c342:	64f9      	str	r1, [r7, #76]	; 0x4c
    c344:	63bb      	str	r3, [r7, #56]	; 0x38
    c346:	2503      	movs	r5, #3
    c348:	f7ff ba18 	b.w	b77c <__ssvfscanf_r+0x238>
    c34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c34e:	3301      	adds	r3, #1
    c350:	637b      	str	r3, [r7, #52]	; 0x34
    c352:	693b      	ldr	r3, [r7, #16]
    c354:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    c358:	2b00      	cmp	r3, #0
    c35a:	f43f aafe 	beq.w	b95a <__ssvfscanf_r+0x416>
    c35e:	693b      	ldr	r3, [r7, #16]
    c360:	3b01      	subs	r3, #1
    c362:	613b      	str	r3, [r7, #16]
    c364:	f7ff bafa 	b.w	b95c <__ssvfscanf_r+0x418>
    c368:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
    c36c:	f7ff bbd1 	b.w	bb12 <__ssvfscanf_r+0x5ce>
    c370:	0722      	lsls	r2, r4, #28
    c372:	f140 81c7 	bpl.w	c704 <__ssvfscanf_r+0x11c0>
    c376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c378:	f853 2b04 	ldr.w	r2, [r3], #4
    c37c:	633b      	str	r3, [r7, #48]	; 0x30
    c37e:	7010      	strb	r0, [r2, #0]
    c380:	f7ff bbf3 	b.w	bb6a <__ssvfscanf_r+0x626>
    c384:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    c388:	465a      	mov	r2, fp
    c38a:	4648      	mov	r0, r9
    c38c:	3d01      	subs	r5, #1
    c38e:	f003 f82d 	bl	f3ec <_sungetc_r>
    c392:	f7ff bbd5 	b.w	bb40 <__ssvfscanf_r+0x5fc>
    c396:	69fb      	ldr	r3, [r7, #28]
    c398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c39a:	4293      	cmp	r3, r2
    c39c:	f43f ab2d 	beq.w	b9fa <__ssvfscanf_r+0x4b6>
    c3a0:	1a9a      	subs	r2, r3, r2
    c3a2:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
    c3a6:	429d      	cmp	r5, r3
    c3a8:	bf28      	it	cs
    c3aa:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
    c3ae:	49a1      	ldr	r1, [pc, #644]	; (c634 <__ssvfscanf_r+0x10f0>)
    c3b0:	4628      	mov	r0, r5
    c3b2:	f001 fc35 	bl	dc20 <sprintf>
    c3b6:	f7ff bb20 	b.w	b9fa <__ssvfscanf_r+0x4b6>
    c3ba:	06e2      	lsls	r2, r4, #27
    c3bc:	f100 8131 	bmi.w	c622 <__ssvfscanf_r+0x10de>
    c3c0:	0723      	lsls	r3, r4, #28
    c3c2:	f100 81ba 	bmi.w	c73a <__ssvfscanf_r+0x11f6>
    c3c6:	0766      	lsls	r6, r4, #29
    c3c8:	f140 82b4 	bpl.w	c934 <__ssvfscanf_r+0x13f0>
    c3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c3ce:	64f9      	str	r1, [r7, #76]	; 0x4c
    c3d0:	f853 2b04 	ldr.w	r2, [r3], #4
    c3d4:	633b      	str	r3, [r7, #48]	; 0x30
    c3d6:	f8a2 a000 	strh.w	sl, [r2]
    c3da:	f7ff b8da 	b.w	b592 <__ssvfscanf_r+0x4e>
    c3de:	0723      	lsls	r3, r4, #28
    c3e0:	f47f a9a5 	bne.w	b72e <__ssvfscanf_r+0x1ea>
    c3e4:	7842      	ldrb	r2, [r0, #1]
    c3e6:	2a68      	cmp	r2, #104	; 0x68
    c3e8:	f000 8186 	beq.w	c6f8 <__ssvfscanf_r+0x11b4>
    c3ec:	f044 0404 	orr.w	r4, r4, #4
    c3f0:	4608      	mov	r0, r1
    c3f2:	f7ff b92f 	b.w	b654 <__ssvfscanf_r+0x110>
    c3f6:	4b8e      	ldr	r3, [pc, #568]	; (c630 <__ssvfscanf_r+0x10ec>)
    c3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    c3fa:	230a      	movs	r3, #10
    c3fc:	64f9      	str	r1, [r7, #76]	; 0x4c
    c3fe:	63bb      	str	r3, [r7, #56]	; 0x38
    c400:	2503      	movs	r5, #3
    c402:	f7ff b9bb 	b.w	b77c <__ssvfscanf_r+0x238>
    c406:	4b8c      	ldr	r3, [pc, #560]	; (c638 <__ssvfscanf_r+0x10f4>)
    c408:	62fb      	str	r3, [r7, #44]	; 0x2c
    c40a:	2300      	movs	r3, #0
    c40c:	64f9      	str	r1, [r7, #76]	; 0x4c
    c40e:	63bb      	str	r3, [r7, #56]	; 0x38
    c410:	2503      	movs	r5, #3
    c412:	f7ff b9b3 	b.w	b77c <__ssvfscanf_r+0x238>
    c416:	f444 7408 	orr.w	r4, r4, #544	; 0x220
    c41a:	e78f      	b.n	c33c <__ssvfscanf_r+0xdf8>
    c41c:	f107 0070 	add.w	r0, r7, #112	; 0x70
    c420:	f001 fa56 	bl	d8d0 <__sccl>
    c424:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    c428:	64f8      	str	r0, [r7, #76]	; 0x4c
    c42a:	2501      	movs	r5, #1
    c42c:	f7ff b9a6 	b.w	b77c <__ssvfscanf_r+0x238>
    c430:	0722      	lsls	r2, r4, #28
    c432:	f47f a97c 	bne.w	b72e <__ssvfscanf_r+0x1ea>
    c436:	7842      	ldrb	r2, [r0, #1]
    c438:	2a6c      	cmp	r2, #108	; 0x6c
    c43a:	f000 8157 	beq.w	c6ec <__ssvfscanf_r+0x11a8>
    c43e:	f044 0401 	orr.w	r4, r4, #1
    c442:	4608      	mov	r0, r1
    c444:	f7ff b906 	b.w	b654 <__ssvfscanf_r+0x110>
    c448:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
    c44c:	f47f a96f 	bne.w	b72e <__ssvfscanf_r+0x1ea>
    c450:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c452:	2a00      	cmp	r2, #0
    c454:	f000 81e7 	beq.w	c826 <__ssvfscanf_r+0x12e2>
    c458:	7842      	ldrb	r2, [r0, #1]
    c45a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    c45e:	4608      	mov	r0, r1
    c460:	f7ff b8f8 	b.w	b654 <__ssvfscanf_r+0x110>
    c464:	ea58 0804 	orrs.w	r8, r8, r4
    c468:	f47f a961 	bne.w	b72e <__ssvfscanf_r+0x1ea>
    c46c:	7842      	ldrb	r2, [r0, #1]
    c46e:	2410      	movs	r4, #16
    c470:	4608      	mov	r0, r1
    c472:	f7ff b8ef 	b.w	b654 <__ssvfscanf_r+0x110>
    c476:	64f9      	str	r1, [r7, #76]	; 0x4c
    c478:	f7ff b8a7 	b.w	b5ca <__ssvfscanf_r+0x86>
    c47c:	2300      	movs	r3, #0
    c47e:	623b      	str	r3, [r7, #32]
    c480:	62bb      	str	r3, [r7, #40]	; 0x28
    c482:	63fb      	str	r3, [r7, #60]	; 0x3c
    c484:	f107 0354 	add.w	r3, r7, #84	; 0x54
    c488:	64bb      	str	r3, [r7, #72]	; 0x48
    c48a:	f7ff bba9 	b.w	bbe0 <__ssvfscanf_r+0x69c>
    c48e:	2300      	movs	r3, #0
    c490:	e9c7 3306 	strd	r3, r3, [r7, #24]
    c494:	623b      	str	r3, [r7, #32]
    c496:	f107 0454 	add.w	r4, r7, #84	; 0x54
    c49a:	e429      	b.n	bcf0 <__ssvfscanf_r+0x7ac>
    c49c:	f8db 3000 	ldr.w	r3, [fp]
    c4a0:	f107 0270 	add.w	r2, r7, #112	; 0x70
    c4a4:	4611      	mov	r1, r2
    c4a6:	781a      	ldrb	r2, [r3, #0]
    c4a8:	5c8a      	ldrb	r2, [r1, r2]
    c4aa:	2a00      	cmp	r2, #0
    c4ac:	f43f a93f 	beq.w	b72e <__ssvfscanf_r+0x1ea>
    c4b0:	3301      	adds	r3, #1
    c4b2:	f8cb 3000 	str.w	r3, [fp]
    c4b6:	f8db 3004 	ldr.w	r3, [fp, #4]
    c4ba:	f1b8 0f01 	cmp.w	r8, #1
    c4be:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    c4c2:	f8cb 3004 	str.w	r3, [fp, #4]
    c4c6:	bf18      	it	ne
    c4c8:	460c      	movne	r4, r1
    c4ca:	d114      	bne.n	c4f6 <__ssvfscanf_r+0xfb2>
    c4cc:	f7ff bb53 	b.w	bb76 <__ssvfscanf_r+0x632>
    c4d0:	f8db 3000 	ldr.w	r3, [fp]
    c4d4:	781a      	ldrb	r2, [r3, #0]
    c4d6:	5ca2      	ldrb	r2, [r4, r2]
    c4d8:	3301      	adds	r3, #1
    c4da:	2a00      	cmp	r2, #0
    c4dc:	f43f ab4b 	beq.w	bb76 <__ssvfscanf_r+0x632>
    c4e0:	f8cb 3000 	str.w	r3, [fp]
    c4e4:	f8db 3004 	ldr.w	r3, [fp, #4]
    c4e8:	3501      	adds	r5, #1
    c4ea:	3b01      	subs	r3, #1
    c4ec:	4545      	cmp	r5, r8
    c4ee:	f8cb 3004 	str.w	r3, [fp, #4]
    c4f2:	f43f ab40 	beq.w	bb76 <__ssvfscanf_r+0x632>
    c4f6:	2b00      	cmp	r3, #0
    c4f8:	dcea      	bgt.n	c4d0 <__ssvfscanf_r+0xf8c>
    c4fa:	4659      	mov	r1, fp
    c4fc:	4648      	mov	r0, r9
    c4fe:	f002 ffb5 	bl	f46c <__ssrefill_r>
    c502:	2800      	cmp	r0, #0
    c504:	d0e4      	beq.n	c4d0 <__ssvfscanf_r+0xf8c>
    c506:	44aa      	add	sl, r5
    c508:	f7ff b843 	b.w	b592 <__ssvfscanf_r+0x4e>
    c50c:	ee18 0a10 	vmov	r0, s16
    c510:	4659      	mov	r1, fp
    c512:	f002 ffab 	bl	f46c <__ssrefill_r>
    c516:	2800      	cmp	r0, #0
    c518:	f43f ae8e 	beq.w	c238 <__ssvfscanf_r+0xcf4>
    c51c:	42b5      	cmp	r5, r6
    c51e:	4654      	mov	r4, sl
    c520:	ee18 9a10 	vmov	r9, s16
    c524:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    c528:	f47f ae91 	bne.w	c24e <__ssvfscanf_r+0xd0a>
    c52c:	f7ff b8f6 	b.w	b71c <__ssvfscanf_r+0x1d8>
    c530:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
    c534:	e428      	b.n	bd88 <__ssvfscanf_r+0x844>
    c536:	6823      	ldr	r3, [r4, #0]
    c538:	2b04      	cmp	r3, #4
    c53a:	f47f ac32 	bne.w	bda2 <__ssvfscanf_r+0x85e>
    c53e:	e432      	b.n	bda6 <__ssvfscanf_r+0x862>
    c540:	1c83      	adds	r3, r0, #2
    c542:	f040 8339 	bne.w	cbb8 <__ssvfscanf_r+0x1674>
    c546:	f8db 3004 	ldr.w	r3, [fp, #4]
    c54a:	2b00      	cmp	r3, #0
    c54c:	f340 81d7 	ble.w	c8fe <__ssvfscanf_r+0x13ba>
    c550:	f8db 3000 	ldr.w	r3, [fp]
    c554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c556:	781b      	ldrb	r3, [r3, #0]
    c558:	5cd3      	ldrb	r3, [r2, r3]
    c55a:	0718      	lsls	r0, r3, #28
    c55c:	d403      	bmi.n	c566 <__ssvfscanf_r+0x1022>
    c55e:	f1b8 0f00 	cmp.w	r8, #0
    c562:	f47f ab49 	bne.w	bbf8 <__ssvfscanf_r+0x6b4>
    c566:	627c      	str	r4, [r7, #36]	; 0x24
    c568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c56a:	2b00      	cmp	r3, #0
    c56c:	f47f a811 	bne.w	b592 <__ssvfscanf_r+0x4e>
    c570:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c572:	6013      	str	r3, [r2, #0]
    c574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c576:	2b00      	cmp	r3, #0
    c578:	f43f adfc 	beq.w	c174 <__ssvfscanf_r+0xc30>
    c57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c57e:	1ad1      	subs	r1, r2, r3
    c580:	108b      	asrs	r3, r1, #2
    c582:	6a3a      	ldr	r2, [r7, #32]
    c584:	3301      	adds	r3, #1
    c586:	429a      	cmp	r2, r3
    c588:	f67f adf4 	bls.w	c174 <__ssvfscanf_r+0xc30>
    c58c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    c58e:	3104      	adds	r1, #4
    c590:	6820      	ldr	r0, [r4, #0]
    c592:	f7fa fc99 	bl	6ec8 <realloc>
    c596:	2800      	cmp	r0, #0
    c598:	f47f ac3a 	bne.w	be10 <__ssvfscanf_r+0x8cc>
    c59c:	e5ea      	b.n	c174 <__ssvfscanf_r+0xc30>
    c59e:	f853 2b04 	ldr.w	r2, [r3], #4
    c5a2:	ed82 0b00 	vstr	d0, [r2]
    c5a6:	633b      	str	r3, [r7, #48]	; 0x30
    c5a8:	e5e4      	b.n	c174 <__ssvfscanf_r+0xc30>
    c5aa:	68fd      	ldr	r5, [r7, #12]
    c5ac:	6a39      	ldr	r1, [r7, #32]
    c5ae:	687e      	ldr	r6, [r7, #4]
    c5b0:	4628      	mov	r0, r5
    c5b2:	4642      	mov	r2, r8
    c5b4:	46a3      	mov	fp, r4
    c5b6:	68bc      	ldr	r4, [r7, #8]
    c5b8:	f001 fb60 	bl	dc7c <stpncpy>
    c5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c5be:	61fb      	str	r3, [r7, #28]
    c5c0:	f424 7420 	bic.w	r4, r4, #640	; 0x280
    c5c4:	3e01      	subs	r6, #1
    c5c6:	4605      	mov	r5, r0
    c5c8:	f7ff b9c8 	b.w	b95c <__ssvfscanf_r+0x418>
    c5cc:	69f8      	ldr	r0, [r7, #28]
    c5ce:	00d9      	lsls	r1, r3, #3
    c5d0:	461d      	mov	r5, r3
    c5d2:	f7fa fc79 	bl	6ec8 <realloc>
    c5d6:	61f8      	str	r0, [r7, #28]
    c5d8:	2800      	cmp	r0, #0
    c5da:	f000 8264 	beq.w	caa6 <__ssvfscanf_r+0x1562>
    c5de:	6a3a      	ldr	r2, [r7, #32]
    c5e0:	006b      	lsls	r3, r5, #1
    c5e2:	eb00 0804 	add.w	r8, r0, r4
    c5e6:	6010      	str	r0, [r2, #0]
    c5e8:	61bb      	str	r3, [r7, #24]
    c5ea:	f7ff bbea 	b.w	bdc2 <__ssvfscanf_r+0x87e>
    c5ee:	2e02      	cmp	r6, #2
    c5f0:	f240 82c4 	bls.w	cb7c <__ssvfscanf_r+0x1638>
    c5f4:	2e03      	cmp	r6, #3
    c5f6:	f43f a9d3 	beq.w	b9a0 <__ssvfscanf_r+0x45c>
    c5fa:	3e04      	subs	r6, #4
    c5fc:	fa5f f886 	uxtb.w	r8, r6
    c600:	ea6f 0308 	mvn.w	r3, r8
    c604:	18ee      	adds	r6, r5, r3
    c606:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    c60a:	465a      	mov	r2, fp
    c60c:	4648      	mov	r0, r9
    c60e:	f002 feed 	bl	f3ec <_sungetc_r>
    c612:	42ae      	cmp	r6, r5
    c614:	d1f7      	bne.n	c606 <__ssvfscanf_r+0x10c2>
    c616:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c61a:	ebaa 0a08 	sub.w	sl, sl, r8
    c61e:	f7ff b9bf 	b.w	b9a0 <__ssvfscanf_r+0x45c>
    c622:	64f9      	str	r1, [r7, #76]	; 0x4c
    c624:	f7fe bfb5 	b.w	b592 <__ssvfscanf_r+0x4e>
    c628:	2303      	movs	r3, #3
    c62a:	63fb      	str	r3, [r7, #60]	; 0x3c
    c62c:	f7ff b993 	b.w	b956 <__ssvfscanf_r+0x412>
    c630:	0000da99 	.word	0x0000da99
    c634:	2000094c 	.word	0x2000094c
    c638:	00008321 	.word	0x00008321
    c63c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    c640:	4293      	cmp	r3, r2
    c642:	f200 8297 	bhi.w	cb74 <__ssvfscanf_r+0x1630>
    c646:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c648:	3308      	adds	r3, #8
    c64a:	b29b      	uxth	r3, r3
    c64c:	6810      	ldr	r0, [r2, #0]
    c64e:	63f8      	str	r0, [r7, #60]	; 0x3c
    c650:	0099      	lsls	r1, r3, #2
    c652:	637b      	str	r3, [r7, #52]	; 0x34
    c654:	f7fa fc38 	bl	6ec8 <realloc>
    c658:	2800      	cmp	r0, #0
    c65a:	f000 827b 	beq.w	cb54 <__ssvfscanf_r+0x1610>
    c65e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c662:	8093      	strh	r3, [r2, #4]
    c664:	6010      	str	r0, [r2, #0]
    c666:	e542      	b.n	c0ee <__ssvfscanf_r+0xbaa>
    c668:	2101      	movs	r1, #1
    c66a:	e57a      	b.n	c162 <__ssvfscanf_r+0xc1e>
    c66c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    c670:	4293      	cmp	r3, r2
    c672:	f200 8293 	bhi.w	cb9c <__ssvfscanf_r+0x1658>
    c676:	3308      	adds	r3, #8
    c678:	b29e      	uxth	r6, r3
    c67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c67c:	00b1      	lsls	r1, r6, #2
    c67e:	6818      	ldr	r0, [r3, #0]
    c680:	f7fa fc22 	bl	6ec8 <realloc>
    c684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c686:	2800      	cmp	r0, #0
    c688:	f000 823e 	beq.w	cb08 <__ssvfscanf_r+0x15c4>
    c68c:	809e      	strh	r6, [r3, #4]
    c68e:	6018      	str	r0, [r3, #0]
    c690:	f7ff ba9b 	b.w	bbca <__ssvfscanf_r+0x686>
    c694:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    c698:	4293      	cmp	r3, r2
    c69a:	f200 827f 	bhi.w	cb9c <__ssvfscanf_r+0x1658>
    c69e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c6a0:	3308      	adds	r3, #8
    c6a2:	b29b      	uxth	r3, r3
    c6a4:	0099      	lsls	r1, r3, #2
    c6a6:	6810      	ldr	r0, [r2, #0]
    c6a8:	64bb      	str	r3, [r7, #72]	; 0x48
    c6aa:	f7fa fc0d 	bl	6ec8 <realloc>
    c6ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c6b0:	2800      	cmp	r0, #0
    c6b2:	f000 8228 	beq.w	cb06 <__ssvfscanf_r+0x15c2>
    c6b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c6b8:	8093      	strh	r3, [r2, #4]
    c6ba:	6010      	str	r0, [r2, #0]
    c6bc:	f7ff bb0e 	b.w	bcdc <__ssvfscanf_r+0x798>
    c6c0:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    c6c4:	4293      	cmp	r3, r2
    c6c6:	f200 8255 	bhi.w	cb74 <__ssvfscanf_r+0x1630>
    c6ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c6cc:	3308      	adds	r3, #8
    c6ce:	b29b      	uxth	r3, r3
    c6d0:	6810      	ldr	r0, [r2, #0]
    c6d2:	63f8      	str	r0, [r7, #60]	; 0x3c
    c6d4:	0099      	lsls	r1, r3, #2
    c6d6:	637b      	str	r3, [r7, #52]	; 0x34
    c6d8:	f7fa fbf6 	bl	6ec8 <realloc>
    c6dc:	2800      	cmp	r0, #0
    c6de:	f000 8239 	beq.w	cb54 <__ssvfscanf_r+0x1610>
    c6e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c6e6:	8093      	strh	r3, [r2, #4]
    c6e8:	6010      	str	r0, [r2, #0]
    c6ea:	e570      	b.n	c1ce <__ssvfscanf_r+0xc8a>
    c6ec:	7882      	ldrb	r2, [r0, #2]
    c6ee:	f044 0402 	orr.w	r4, r4, #2
    c6f2:	3002      	adds	r0, #2
    c6f4:	f7fe bfae 	b.w	b654 <__ssvfscanf_r+0x110>
    c6f8:	7882      	ldrb	r2, [r0, #2]
    c6fa:	f044 0408 	orr.w	r4, r4, #8
    c6fe:	3002      	adds	r0, #2
    c700:	f7fe bfa8 	b.w	b654 <__ssvfscanf_r+0x110>
    c704:	0763      	lsls	r3, r4, #29
    c706:	d458      	bmi.n	c7ba <__ssvfscanf_r+0x1276>
    c708:	f014 0201 	ands.w	r2, r4, #1
    c70c:	f47f aa28 	bne.w	bb60 <__ssvfscanf_r+0x61c>
    c710:	07a6      	lsls	r6, r4, #30
    c712:	f57f aa25 	bpl.w	bb60 <__ssvfscanf_r+0x61c>
    c716:	4bb3      	ldr	r3, [pc, #716]	; (c9e4 <__ssvfscanf_r+0x14a0>)
    c718:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    c71a:	4299      	cmp	r1, r3
    c71c:	4648      	mov	r0, r9
    c71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    c722:	f000 823d 	beq.w	cba0 <__ssvfscanf_r+0x165c>
    c726:	f001 fb95 	bl	de54 <_strtoll_r>
    c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c72c:	f853 2b04 	ldr.w	r2, [r3], #4
    c730:	633b      	str	r3, [r7, #48]	; 0x30
    c732:	e9c2 0100 	strd	r0, r1, [r2]
    c736:	f7ff ba18 	b.w	bb6a <__ssvfscanf_r+0x626>
    c73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c73c:	64f9      	str	r1, [r7, #76]	; 0x4c
    c73e:	f853 2b04 	ldr.w	r2, [r3], #4
    c742:	633b      	str	r3, [r7, #48]	; 0x30
    c744:	f882 a000 	strb.w	sl, [r2]
    c748:	f7fe bf23 	b.w	b592 <__ssvfscanf_r+0x4e>
    c74c:	f8db 3000 	ldr.w	r3, [fp]
    c750:	4ea5      	ldr	r6, [pc, #660]	; (c9e8 <__ssvfscanf_r+0x14a4>)
    c752:	781a      	ldrb	r2, [r3, #0]
    c754:	5cb2      	ldrb	r2, [r6, r2]
    c756:	0712      	lsls	r2, r2, #28
    c758:	f53e af1b 	bmi.w	b592 <__ssvfscanf_r+0x4e>
    c75c:	3301      	adds	r3, #1
    c75e:	f8cb 3000 	str.w	r3, [fp]
    c762:	f8db 3004 	ldr.w	r3, [fp, #4]
    c766:	f1b8 0f01 	cmp.w	r8, #1
    c76a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    c76e:	f8cb 3004 	str.w	r3, [fp, #4]
    c772:	bf08      	it	eq
    c774:	f10a 0a01 	addeq.w	sl, sl, #1
    c778:	f43e af0b 	beq.w	b592 <__ssvfscanf_r+0x4e>
    c77c:	2401      	movs	r4, #1
    c77e:	e011      	b.n	c7a4 <__ssvfscanf_r+0x1260>
    c780:	f8db 3000 	ldr.w	r3, [fp]
    c784:	781a      	ldrb	r2, [r3, #0]
    c786:	5cb2      	ldrb	r2, [r6, r2]
    c788:	0715      	lsls	r5, r2, #28
    c78a:	f103 0301 	add.w	r3, r3, #1
    c78e:	d411      	bmi.n	c7b4 <__ssvfscanf_r+0x1270>
    c790:	f8cb 3000 	str.w	r3, [fp]
    c794:	f8db 3004 	ldr.w	r3, [fp, #4]
    c798:	3401      	adds	r4, #1
    c79a:	3b01      	subs	r3, #1
    c79c:	4544      	cmp	r4, r8
    c79e:	f8cb 3004 	str.w	r3, [fp, #4]
    c7a2:	d007      	beq.n	c7b4 <__ssvfscanf_r+0x1270>
    c7a4:	2b00      	cmp	r3, #0
    c7a6:	dceb      	bgt.n	c780 <__ssvfscanf_r+0x123c>
    c7a8:	4659      	mov	r1, fp
    c7aa:	4648      	mov	r0, r9
    c7ac:	f002 fe5e 	bl	f46c <__ssrefill_r>
    c7b0:	2800      	cmp	r0, #0
    c7b2:	d0e5      	beq.n	c780 <__ssvfscanf_r+0x123c>
    c7b4:	44a2      	add	sl, r4
    c7b6:	f7fe beec 	b.w	b592 <__ssvfscanf_r+0x4e>
    c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c7bc:	f853 2b04 	ldr.w	r2, [r3], #4
    c7c0:	633b      	str	r3, [r7, #48]	; 0x30
    c7c2:	8010      	strh	r0, [r2, #0]
    c7c4:	f7ff b9d1 	b.w	bb6a <__ssvfscanf_r+0x626>
    c7c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c7ca:	2b00      	cmp	r3, #0
    c7cc:	f000 816e 	beq.w	caac <__ssvfscanf_r+0x1568>
    c7d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c7d2:	f8d3 8000 	ldr.w	r8, [r3]
    c7d6:	88de      	ldrh	r6, [r3, #6]
    c7d8:	b176      	cbz	r6, c7f8 <__ssvfscanf_r+0x12b4>
    c7da:	2400      	movs	r4, #0
    c7dc:	f1a8 0504 	sub.w	r5, r8, #4
    c7e0:	46a1      	mov	r9, r4
    c7e2:	f855 3f04 	ldr.w	r3, [r5, #4]!
    c7e6:	6818      	ldr	r0, [r3, #0]
    c7e8:	f7fa f8aa 	bl	6940 <free>
    c7ec:	3401      	adds	r4, #1
    c7ee:	682b      	ldr	r3, [r5, #0]
    c7f0:	42a6      	cmp	r6, r4
    c7f2:	f8c3 9000 	str.w	r9, [r3]
    c7f6:	d1f4      	bne.n	c7e2 <__ssvfscanf_r+0x129e>
    c7f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c7fc:	647b      	str	r3, [r7, #68]	; 0x44
    c7fe:	f1b8 0f00 	cmp.w	r8, #0
    c802:	f47e af9c 	bne.w	b73e <__ssvfscanf_r+0x1fa>
    c806:	f7fe bf9d 	b.w	b744 <__ssvfscanf_r+0x200>
    c80a:	4878      	ldr	r0, [pc, #480]	; (c9ec <__ssvfscanf_r+0x14a8>)
    c80c:	633b      	str	r3, [r7, #48]	; 0x30
    c80e:	f7fc fb73 	bl	8ef8 <nanf>
    c812:	ed84 0a00 	vstr	s0, [r4]
    c816:	e4ad      	b.n	c174 <__ssvfscanf_r+0xc30>
    c818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c81a:	63fc      	str	r4, [r7, #60]	; 0x3c
    c81c:	f852 5b04 	ldr.w	r5, [r2], #4
    c820:	633a      	str	r2, [r7, #48]	; 0x30
    c822:	64bc      	str	r4, [r7, #72]	; 0x48
    c824:	e46c      	b.n	c100 <__ssvfscanf_r+0xbbc>
    c826:	b082      	sub	sp, #8
    c828:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c82c:	ab02      	add	r3, sp, #8
    c82e:	643b      	str	r3, [r7, #64]	; 0x40
    c830:	e612      	b.n	c458 <__ssvfscanf_r+0xf14>
    c832:	637b      	str	r3, [r7, #52]	; 0x34
    c834:	0053      	lsls	r3, r2, #1
    c836:	4620      	mov	r0, r4
    c838:	4619      	mov	r1, r3
    c83a:	63fb      	str	r3, [r7, #60]	; 0x3c
    c83c:	f7fa fb44 	bl	6ec8 <realloc>
    c840:	4604      	mov	r4, r0
    c842:	2800      	cmp	r0, #0
    c844:	f000 80ad 	beq.w	c9a2 <__ssvfscanf_r+0x145e>
    c848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c84a:	1985      	adds	r5, r0, r6
    c84c:	6018      	str	r0, [r3, #0]
    c84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c850:	e475      	b.n	c13e <__ssvfscanf_r+0xbfa>
    c852:	697d      	ldr	r5, [r7, #20]
    c854:	4629      	mov	r1, r5
    c856:	230a      	movs	r3, #10
    c858:	3101      	adds	r1, #1
    c85a:	4648      	mov	r0, r9
    c85c:	f7fb fd60 	bl	8320 <_strtol_r>
    c860:	69bb      	ldr	r3, [r7, #24]
    c862:	1ac2      	subs	r2, r0, r3
    c864:	e59d      	b.n	c3a2 <__ssvfscanf_r+0xe5e>
    c866:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
    c86a:	f853 1b04 	ldr.w	r1, [r3], #4
    c86e:	623a      	str	r2, [r7, #32]
    c870:	64b9      	str	r1, [r7, #72]	; 0x48
    c872:	633b      	str	r3, [r7, #48]	; 0x30
    c874:	62ba      	str	r2, [r7, #40]	; 0x28
    c876:	63fa      	str	r2, [r7, #60]	; 0x3c
    c878:	f7ff b9b2 	b.w	bbe0 <__ssvfscanf_r+0x69c>
    c87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c87e:	64bc      	str	r4, [r7, #72]	; 0x48
    c880:	f853 5b04 	ldr.w	r5, [r3], #4
    c884:	633b      	str	r3, [r7, #48]	; 0x30
    c886:	e4aa      	b.n	c1de <__ssvfscanf_r+0xc9a>
    c888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c88a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c88c:	f853 4b04 	ldr.w	r4, [r3], #4
    c890:	61ba      	str	r2, [r7, #24]
    c892:	e9c7 2207 	strd	r2, r2, [r7, #28]
    c896:	633b      	str	r3, [r7, #48]	; 0x30
    c898:	f7ff ba2a 	b.w	bcf0 <__ssvfscanf_r+0x7ac>
    c89c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
    c89e:	6820      	ldr	r0, [r4, #0]
    c8a0:	f7fa fb12 	bl	6ec8 <realloc>
    c8a4:	2800      	cmp	r0, #0
    c8a6:	f47f aab3 	bne.w	be10 <__ssvfscanf_r+0x8cc>
    c8aa:	e463      	b.n	c174 <__ssvfscanf_r+0xc30>
    c8ac:	4659      	mov	r1, fp
    c8ae:	4648      	mov	r0, r9
    c8b0:	637b      	str	r3, [r7, #52]	; 0x34
    c8b2:	f002 fddb 	bl	f46c <__ssrefill_r>
    c8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c8b8:	2800      	cmp	r0, #0
    c8ba:	f43f ac49 	beq.w	c150 <__ssvfscanf_r+0xc0c>
    c8be:	e44d      	b.n	c15c <__ssvfscanf_r+0xc18>
    c8c0:	6818      	ldr	r0, [r3, #0]
    c8c2:	461c      	mov	r4, r3
    c8c4:	f7fa fb00 	bl	6ec8 <realloc>
    c8c8:	2800      	cmp	r0, #0
    c8ca:	f43f accc 	beq.w	c266 <__ssvfscanf_r+0xd22>
    c8ce:	6020      	str	r0, [r4, #0]
    c8d0:	e4c9      	b.n	c266 <__ssvfscanf_r+0xd22>
    c8d2:	2500      	movs	r5, #0
    c8d4:	e637      	b.n	c546 <__ssvfscanf_r+0x1002>
    c8d6:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    c8d8:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    c8dc:	627e      	str	r6, [r7, #36]	; 0x24
    c8de:	4644      	mov	r4, r8
    c8e0:	2d00      	cmp	r5, #0
    c8e2:	f43f aa7c 	beq.w	bdde <__ssvfscanf_r+0x89a>
    c8e6:	3d01      	subs	r5, #1
    c8e8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    c8ec:	465a      	mov	r2, fp
    c8ee:	5d59      	ldrb	r1, [r3, r5]
    c8f0:	4648      	mov	r0, r9
    c8f2:	f002 fd7b 	bl	f3ec <_sungetc_r>
    c8f6:	2d00      	cmp	r5, #0
    c8f8:	d1f5      	bne.n	c8e6 <__ssvfscanf_r+0x13a2>
    c8fa:	f7ff ba70 	b.w	bdde <__ssvfscanf_r+0x89a>
    c8fe:	4659      	mov	r1, fp
    c900:	4648      	mov	r0, r9
    c902:	f002 fdb3 	bl	f46c <__ssrefill_r>
    c906:	2800      	cmp	r0, #0
    c908:	f43f ae22 	beq.w	c550 <__ssvfscanf_r+0x100c>
    c90c:	627c      	str	r4, [r7, #36]	; 0x24
    c90e:	2d00      	cmp	r5, #0
    c910:	f47e af04 	bne.w	b71c <__ssvfscanf_r+0x1d8>
    c914:	e628      	b.n	c568 <__ssvfscanf_r+0x1024>
    c916:	627c      	str	r4, [r7, #36]	; 0x24
    c918:	2d00      	cmp	r5, #0
    c91a:	f43f ae25 	beq.w	c568 <__ssvfscanf_r+0x1024>
    c91e:	3d01      	subs	r5, #1
    c920:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    c924:	465a      	mov	r2, fp
    c926:	5d59      	ldrb	r1, [r3, r5]
    c928:	4648      	mov	r0, r9
    c92a:	f002 fd5f 	bl	f3ec <_sungetc_r>
    c92e:	2d00      	cmp	r5, #0
    c930:	d1f5      	bne.n	c91e <__ssvfscanf_r+0x13da>
    c932:	e619      	b.n	c568 <__ssvfscanf_r+0x1024>
    c934:	07e5      	lsls	r5, r4, #31
    c936:	d43c      	bmi.n	c9b2 <__ssvfscanf_r+0x146e>
    c938:	07a4      	lsls	r4, r4, #30
    c93a:	d53a      	bpl.n	c9b2 <__ssvfscanf_r+0x146e>
    c93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c93e:	64f9      	str	r1, [r7, #76]	; 0x4c
    c940:	f853 2b04 	ldr.w	r2, [r3], #4
    c944:	633b      	str	r3, [r7, #48]	; 0x30
    c946:	ea4f 73ea 	mov.w	r3, sl, asr #31
    c94a:	f8c2 a000 	str.w	sl, [r2]
    c94e:	6053      	str	r3, [r2, #4]
    c950:	f7fe be1f 	b.w	b592 <__ssvfscanf_r+0x4e>
    c954:	ee18 9a10 	vmov	r9, s16
    c958:	461e      	mov	r6, r3
    c95a:	f7ff b814 	b.w	b986 <__ssvfscanf_r+0x442>
    c95e:	2301      	movs	r3, #1
    c960:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
    c964:	64bb      	str	r3, [r7, #72]	; 0x48
    c966:	f7fe bff6 	b.w	b956 <__ssvfscanf_r+0x412>
    c96a:	f1b8 0f01 	cmp.w	r8, #1
    c96e:	bf38      	it	cc
    c970:	f04f 0801 	movcc.w	r8, #1
    c974:	f014 0301 	ands.w	r3, r4, #1
    c978:	d13a      	bne.n	c9f0 <__ssvfscanf_r+0x14ac>
    c97a:	06e5      	lsls	r5, r4, #27
    c97c:	f100 8136 	bmi.w	cbec <__ssvfscanf_r+0x16a8>
    c980:	0624      	lsls	r4, r4, #24
    c982:	f140 814c 	bpl.w	cc1e <__ssvfscanf_r+0x16da>
    c986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c988:	f853 5b04 	ldr.w	r5, [r3], #4
    c98c:	64bb      	str	r3, [r7, #72]	; 0x48
    c98e:	2d00      	cmp	r5, #0
    c990:	f43e aecd 	beq.w	b72e <__ssvfscanf_r+0x1ea>
    c994:	4640      	mov	r0, r8
    c996:	f7f9 ffcb 	bl	6930 <malloc>
    c99a:	4603      	mov	r3, r0
    c99c:	2800      	cmp	r0, #0
    c99e:	f040 80dc 	bne.w	cb5a <__ssvfscanf_r+0x1616>
    c9a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c9a4:	2b00      	cmp	r3, #0
    c9a6:	f000 8081 	beq.w	caac <__ssvfscanf_r+0x1568>
    c9aa:	f8d3 8000 	ldr.w	r8, [r3]
    c9ae:	88de      	ldrh	r6, [r3, #6]
    c9b0:	e712      	b.n	c7d8 <__ssvfscanf_r+0x1294>
    c9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c9b4:	64f9      	str	r1, [r7, #76]	; 0x4c
    c9b6:	f853 2b04 	ldr.w	r2, [r3], #4
    c9ba:	f8c2 a000 	str.w	sl, [r2]
    c9be:	633b      	str	r3, [r7, #48]	; 0x30
    c9c0:	f7fe bde7 	b.w	b592 <__ssvfscanf_r+0x4e>
    c9c4:	462b      	mov	r3, r5
    c9c6:	6abd      	ldr	r5, [r7, #40]	; 0x28
    c9c8:	42ab      	cmp	r3, r5
    c9ca:	f67e aeb0 	bls.w	b72e <__ssvfscanf_r+0x1ea>
    c9ce:	461c      	mov	r4, r3
    c9d0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    c9d4:	465a      	mov	r2, fp
    c9d6:	4648      	mov	r0, r9
    c9d8:	f002 fd08 	bl	f3ec <_sungetc_r>
    c9dc:	42ac      	cmp	r4, r5
    c9de:	d1f7      	bne.n	c9d0 <__ssvfscanf_r+0x148c>
    c9e0:	f7fe bea5 	b.w	b72e <__ssvfscanf_r+0x1ea>
    c9e4:	0000da99 	.word	0x0000da99
    c9e8:	20000955 	.word	0x20000955
    c9ec:	2000056c 	.word	0x2000056c
    c9f0:	f014 0310 	ands.w	r3, r4, #16
    c9f4:	637b      	str	r3, [r7, #52]	; 0x34
    c9f6:	d05e      	beq.n	cab6 <__ssvfscanf_r+0x1572>
    c9f8:	2500      	movs	r5, #0
    c9fa:	63fd      	str	r5, [r7, #60]	; 0x3c
    c9fc:	64bd      	str	r5, [r7, #72]	; 0x48
    c9fe:	462e      	mov	r6, r5
    ca00:	2400      	movs	r4, #0
    ca02:	464b      	mov	r3, r9
    ca04:	46c1      	mov	r9, r8
    ca06:	46a8      	mov	r8, r5
    ca08:	4625      	mov	r5, r4
    ca0a:	461c      	mov	r4, r3
    ca0c:	f7fb ff36 	bl	887c <__locale_mb_cur_max>
    ca10:	42a8      	cmp	r0, r5
    ca12:	f43e ae83 	beq.w	b71c <__ssvfscanf_r+0x1d8>
    ca16:	e9db 3200 	ldrd	r3, r2, [fp]
    ca1a:	f813 1b01 	ldrb.w	r1, [r3], #1
    ca1e:	3a01      	subs	r2, #1
    ca20:	e9cb 3200 	strd	r3, r2, [fp]
    ca24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ca26:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    ca2a:	2a03      	cmp	r2, #3
    ca2c:	5541      	strb	r1, [r0, r5]
    ca2e:	f105 0301 	add.w	r3, r5, #1
    ca32:	f107 0568 	add.w	r5, r7, #104	; 0x68
    ca36:	d102      	bne.n	ca3e <__ssvfscanf_r+0x14fa>
    ca38:	682a      	ldr	r2, [r5, #0]
    ca3a:	2a04      	cmp	r2, #4
    ca3c:	d006      	beq.n	ca4c <__ssvfscanf_r+0x1508>
    ca3e:	2208      	movs	r2, #8
    ca40:	2100      	movs	r1, #0
    ca42:	4628      	mov	r0, r5
    ca44:	62bb      	str	r3, [r7, #40]	; 0x28
    ca46:	f7fb fe4f 	bl	86e8 <memset>
    ca4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ca4c:	9500      	str	r5, [sp, #0]
    ca4e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    ca52:	4631      	mov	r1, r6
    ca54:	4620      	mov	r0, r4
    ca56:	62bb      	str	r3, [r7, #40]	; 0x28
    ca58:	f001 fb22 	bl	e0a0 <_mbrtowc_r>
    ca5c:	1c43      	adds	r3, r0, #1
    ca5e:	6278      	str	r0, [r7, #36]	; 0x24
    ca60:	f43e ae5c 	beq.w	b71c <__ssvfscanf_r+0x1d8>
    ca64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ca66:	2800      	cmp	r0, #0
    ca68:	f040 8147 	bne.w	ccfa <__ssvfscanf_r+0x17b6>
    ca6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ca6e:	b902      	cbnz	r2, ca72 <__ssvfscanf_r+0x152e>
    ca70:	6032      	str	r2, [r6, #0]
    ca72:	449a      	add	sl, r3
    ca74:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    ca78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca7a:	2b00      	cmp	r3, #0
    ca7c:	f040 8175 	bne.w	cd6a <__ssvfscanf_r+0x1826>
    ca80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ca82:	2b00      	cmp	r3, #0
    ca84:	f000 8170 	beq.w	cd68 <__ssvfscanf_r+0x1824>
    ca88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ca8a:	1af5      	subs	r5, r6, r3
    ca8c:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
    ca90:	f200 816a 	bhi.w	cd68 <__ssvfscanf_r+0x1824>
    ca94:	4618      	mov	r0, r3
    ca96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    ca9a:	f7fa fa15 	bl	6ec8 <realloc>
    ca9e:	63f8      	str	r0, [r7, #60]	; 0x3c
    caa0:	2800      	cmp	r0, #0
    caa2:	f040 815c 	bne.w	cd5e <__ssvfscanf_r+0x181a>
    caa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    caa8:	2b00      	cmp	r3, #0
    caaa:	d12d      	bne.n	cb08 <__ssvfscanf_r+0x15c4>
    caac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cab0:	647b      	str	r3, [r7, #68]	; 0x44
    cab2:	f7fe be47 	b.w	b744 <__ssvfscanf_r+0x200>
    cab6:	0622      	lsls	r2, r4, #24
    cab8:	f140 808f 	bpl.w	cbda <__ssvfscanf_r+0x1696>
    cabc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    cabe:	f854 3b04 	ldr.w	r3, [r4], #4
    cac2:	64bb      	str	r3, [r7, #72]	; 0x48
    cac4:	2b00      	cmp	r3, #0
    cac6:	f43e ae32 	beq.w	b72e <__ssvfscanf_r+0x1ea>
    caca:	2080      	movs	r0, #128	; 0x80
    cacc:	f7f9 ff30 	bl	6930 <malloc>
    cad0:	4606      	mov	r6, r0
    cad2:	2800      	cmp	r0, #0
    cad4:	d0e7      	beq.n	caa6 <__ssvfscanf_r+0x1562>
    cad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    cad8:	6018      	str	r0, [r3, #0]
    cada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cadc:	88dd      	ldrh	r5, [r3, #6]
    cade:	889a      	ldrh	r2, [r3, #4]
    cae0:	4295      	cmp	r5, r2
    cae2:	f0c0 80b3 	bcc.w	cc4c <__ssvfscanf_r+0x1708>
    cae6:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    caea:	428a      	cmp	r2, r1
    caec:	d856      	bhi.n	cb9c <__ssvfscanf_r+0x1658>
    caee:	3208      	adds	r2, #8
    caf0:	b293      	uxth	r3, r2
    caf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    caf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    caf6:	0099      	lsls	r1, r3, #2
    caf8:	6810      	ldr	r0, [r2, #0]
    cafa:	f7fa f9e5 	bl	6ec8 <realloc>
    cafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb00:	2800      	cmp	r0, #0
    cb02:	f040 80ae 	bne.w	cc62 <__ssvfscanf_r+0x171e>
    cb06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cb08:	88db      	ldrh	r3, [r3, #6]
    cb0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cb0c:	461e      	mov	r6, r3
    cb0e:	f8d2 8000 	ldr.w	r8, [r2]
    cb12:	e661      	b.n	c7d8 <__ssvfscanf_r+0x1294>
    cb14:	462b      	mov	r3, r5
    cb16:	6abd      	ldr	r5, [r7, #40]	; 0x28
    cb18:	42ab      	cmp	r3, r5
    cb1a:	f67e ae08 	bls.w	b72e <__ssvfscanf_r+0x1ea>
    cb1e:	461c      	mov	r4, r3
    cb20:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    cb24:	465a      	mov	r2, fp
    cb26:	4648      	mov	r0, r9
    cb28:	f002 fc60 	bl	f3ec <_sungetc_r>
    cb2c:	42ac      	cmp	r4, r5
    cb2e:	d1f7      	bne.n	cb20 <__ssvfscanf_r+0x15dc>
    cb30:	f7fe bdfd 	b.w	b72e <__ssvfscanf_r+0x1ea>
    cb34:	4610      	mov	r0, r2
    cb36:	00d9      	lsls	r1, r3, #3
    cb38:	461e      	mov	r6, r3
    cb3a:	f7fa f9c5 	bl	6ec8 <realloc>
    cb3e:	62b8      	str	r0, [r7, #40]	; 0x28
    cb40:	2800      	cmp	r0, #0
    cb42:	d0b0      	beq.n	caa6 <__ssvfscanf_r+0x1562>
    cb44:	1942      	adds	r2, r0, r5
    cb46:	64ba      	str	r2, [r7, #72]	; 0x48
    cb48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cb4a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    cb4c:	6010      	str	r0, [r2, #0]
    cb4e:	0073      	lsls	r3, r6, #1
    cb50:	623b      	str	r3, [r7, #32]
    cb52:	e4f8      	b.n	c546 <__ssvfscanf_r+0x1002>
    cb54:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
    cb58:	e63e      	b.n	c7d8 <__ssvfscanf_r+0x1294>
    cb5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
    cb5c:	6028      	str	r0, [r5, #0]
    cb5e:	88ce      	ldrh	r6, [r1, #6]
    cb60:	888a      	ldrh	r2, [r1, #4]
    cb62:	4296      	cmp	r6, r2
    cb64:	f0c0 808e 	bcc.w	cc84 <__ssvfscanf_r+0x1740>
    cb68:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    cb6c:	428a      	cmp	r2, r1
    cb6e:	6338      	str	r0, [r7, #48]	; 0x30
    cb70:	f240 80a5 	bls.w	ccbe <__ssvfscanf_r+0x177a>
    cb74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cb76:	f8d3 8000 	ldr.w	r8, [r3]
    cb7a:	e62d      	b.n	c7d8 <__ssvfscanf_r+0x1294>
    cb7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cb7e:	4295      	cmp	r5, r2
    cb80:	f67e add5 	bls.w	b72e <__ssvfscanf_r+0x1ea>
    cb84:	462c      	mov	r4, r5
    cb86:	6abd      	ldr	r5, [r7, #40]	; 0x28
    cb88:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    cb8c:	465a      	mov	r2, fp
    cb8e:	4648      	mov	r0, r9
    cb90:	f002 fc2c 	bl	f3ec <_sungetc_r>
    cb94:	42ac      	cmp	r4, r5
    cb96:	d1f7      	bne.n	cb88 <__ssvfscanf_r+0x1644>
    cb98:	f7fe bdc9 	b.w	b72e <__ssvfscanf_r+0x1ea>
    cb9c:	462b      	mov	r3, r5
    cb9e:	e7b4      	b.n	cb0a <__ssvfscanf_r+0x15c6>
    cba0:	f001 fa28 	bl	dff4 <_strtoull_r>
    cba4:	e5c1      	b.n	c72a <__ssvfscanf_r+0x11e6>
    cba6:	f8d8 3000 	ldr.w	r3, [r8]
    cbaa:	461d      	mov	r5, r3
    cbac:	3301      	adds	r3, #1
    cbae:	f47f a8d5 	bne.w	bd5c <__ssvfscanf_r+0x818>
    cbb2:	462a      	mov	r2, r5
    cbb4:	f7ff b8e8 	b.w	bd88 <__ssvfscanf_r+0x844>
    cbb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    cbba:	6818      	ldr	r0, [r3, #0]
    cbbc:	f001 facc 	bl	e158 <iswspace>
    cbc0:	2800      	cmp	r0, #0
    cbc2:	f47f aea8 	bne.w	c916 <__ssvfscanf_r+0x13d2>
    cbc6:	2c03      	cmp	r4, #3
    cbc8:	44aa      	add	sl, r5
    cbca:	f47f a849 	bne.w	bc60 <__ssvfscanf_r+0x71c>
    cbce:	6833      	ldr	r3, [r6, #0]
    cbd0:	2b04      	cmp	r3, #4
    cbd2:	f47f a845 	bne.w	bc60 <__ssvfscanf_r+0x71c>
    cbd6:	f7ff b845 	b.w	bc64 <__ssvfscanf_r+0x720>
    cbda:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
    cbde:	f853 6b04 	ldr.w	r6, [r3], #4
    cbe2:	633b      	str	r3, [r7, #48]	; 0x30
    cbe4:	4615      	mov	r5, r2
    cbe6:	63fa      	str	r2, [r7, #60]	; 0x3c
    cbe8:	64ba      	str	r2, [r7, #72]	; 0x48
    cbea:	e709      	b.n	ca00 <__ssvfscanf_r+0x14bc>
    cbec:	461c      	mov	r4, r3
    cbee:	f8db 3004 	ldr.w	r3, [fp, #4]
    cbf2:	4598      	cmp	r8, r3
    cbf4:	dd39      	ble.n	cc6a <__ssvfscanf_r+0x1726>
    cbf6:	f8db 2000 	ldr.w	r2, [fp]
    cbfa:	441a      	add	r2, r3
    cbfc:	f8cb 2000 	str.w	r2, [fp]
    cc00:	4659      	mov	r1, fp
    cc02:	4648      	mov	r0, r9
    cc04:	441c      	add	r4, r3
    cc06:	eba8 0803 	sub.w	r8, r8, r3
    cc0a:	f002 fc2f 	bl	f46c <__ssrefill_r>
    cc0e:	2800      	cmp	r0, #0
    cc10:	d0ed      	beq.n	cbee <__ssvfscanf_r+0x16aa>
    cc12:	2c00      	cmp	r4, #0
    cc14:	f43e ad82 	beq.w	b71c <__ssvfscanf_r+0x1d8>
    cc18:	44a2      	add	sl, r4
    cc1a:	f7fe bcba 	b.w	b592 <__ssvfscanf_r+0x4e>
    cc1e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    cc20:	4643      	mov	r3, r8
    cc22:	6829      	ldr	r1, [r5, #0]
    cc24:	f8cd b000 	str.w	fp, [sp]
    cc28:	2201      	movs	r2, #1
    cc2a:	4648      	mov	r0, r9
    cc2c:	f002 fc3c 	bl	f4a8 <_sfread_r>
    cc30:	4604      	mov	r4, r0
    cc32:	2800      	cmp	r0, #0
    cc34:	f43e ad72 	beq.w	b71c <__ssvfscanf_r+0x1d8>
    cc38:	3504      	adds	r5, #4
    cc3a:	64bd      	str	r5, [r7, #72]	; 0x48
    cc3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cc3e:	3301      	adds	r3, #1
    cc40:	647b      	str	r3, [r7, #68]	; 0x44
    cc42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    cc44:	633b      	str	r3, [r7, #48]	; 0x30
    cc46:	44a2      	add	sl, r4
    cc48:	f7fe bca3 	b.w	b592 <__ssvfscanf_r+0x4e>
    cc4c:	6818      	ldr	r0, [r3, #0]
    cc4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    cc50:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    cc54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cc56:	633c      	str	r4, [r7, #48]	; 0x30
    cc58:	3501      	adds	r5, #1
    cc5a:	80dd      	strh	r5, [r3, #6]
    cc5c:	63fe      	str	r6, [r7, #60]	; 0x3c
    cc5e:	2520      	movs	r5, #32
    cc60:	e6ce      	b.n	ca00 <__ssvfscanf_r+0x14bc>
    cc62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cc64:	8093      	strh	r3, [r2, #4]
    cc66:	6010      	str	r0, [r2, #0]
    cc68:	e7f1      	b.n	cc4e <__ssvfscanf_r+0x170a>
    cc6a:	eba3 0308 	sub.w	r3, r3, r8
    cc6e:	f8cb 3004 	str.w	r3, [fp, #4]
    cc72:	f8db 3000 	ldr.w	r3, [fp]
    cc76:	4444      	add	r4, r8
    cc78:	4443      	add	r3, r8
    cc7a:	f8cb 3000 	str.w	r3, [fp]
    cc7e:	44a2      	add	sl, r4
    cc80:	f7fe bc87 	b.w	b592 <__ssvfscanf_r+0x4e>
    cc84:	680a      	ldr	r2, [r1, #0]
    cc86:	63fa      	str	r2, [r7, #60]	; 0x3c
    cc88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cc8a:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
    cc8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cc90:	3601      	adds	r6, #1
    cc92:	b2b6      	uxth	r6, r6
    cc94:	80d6      	strh	r6, [r2, #6]
    cc96:	4619      	mov	r1, r3
    cc98:	f8cd b000 	str.w	fp, [sp]
    cc9c:	4643      	mov	r3, r8
    cc9e:	2201      	movs	r2, #1
    cca0:	4648      	mov	r0, r9
    cca2:	f002 fc01 	bl	f4a8 <_sfread_r>
    cca6:	4604      	mov	r4, r0
    cca8:	b1d8      	cbz	r0, cce2 <__ssvfscanf_r+0x179e>
    ccaa:	4580      	cmp	r8, r0
    ccac:	d9c6      	bls.n	cc3c <__ssvfscanf_r+0x16f8>
    ccae:	6828      	ldr	r0, [r5, #0]
    ccb0:	4621      	mov	r1, r4
    ccb2:	f7fa f909 	bl	6ec8 <realloc>
    ccb6:	2800      	cmp	r0, #0
    ccb8:	d0c0      	beq.n	cc3c <__ssvfscanf_r+0x16f8>
    ccba:	6028      	str	r0, [r5, #0]
    ccbc:	e7be      	b.n	cc3c <__ssvfscanf_r+0x16f8>
    ccbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ccc0:	3208      	adds	r2, #8
    ccc2:	b294      	uxth	r4, r2
    ccc4:	681a      	ldr	r2, [r3, #0]
    ccc6:	637a      	str	r2, [r7, #52]	; 0x34
    ccc8:	4610      	mov	r0, r2
    ccca:	00a1      	lsls	r1, r4, #2
    cccc:	f7fa f8fc 	bl	6ec8 <realloc>
    ccd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ccd2:	63f8      	str	r0, [r7, #60]	; 0x3c
    ccd4:	2800      	cmp	r0, #0
    ccd6:	d05b      	beq.n	cd90 <__ssvfscanf_r+0x184c>
    ccd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ccda:	809c      	strh	r4, [r3, #4]
    ccdc:	6018      	str	r0, [r3, #0]
    ccde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cce0:	e7d2      	b.n	cc88 <__ssvfscanf_r+0x1744>
    cce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cce4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
    cce8:	2b00      	cmp	r3, #0
    ccea:	f43f ad75 	beq.w	c7d8 <__ssvfscanf_r+0x1294>
    ccee:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    ccf2:	065b      	lsls	r3, r3, #25
    ccf4:	f57e ad1d 	bpl.w	b732 <__ssvfscanf_r+0x1ee>
    ccf8:	e56a      	b.n	c7d0 <__ssvfscanf_r+0x128c>
    ccfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ccfc:	3202      	adds	r2, #2
    ccfe:	d11d      	bne.n	cd3c <__ssvfscanf_r+0x17f8>
    cd00:	f8db 2004 	ldr.w	r2, [fp, #4]
    cd04:	2a00      	cmp	r2, #0
    cd06:	461d      	mov	r5, r3
    cd08:	f73f ae80 	bgt.w	ca0c <__ssvfscanf_r+0x14c8>
    cd0c:	4659      	mov	r1, fp
    cd0e:	4620      	mov	r0, r4
    cd10:	f002 fbac 	bl	f46c <__ssrefill_r>
    cd14:	b9e0      	cbnz	r0, cd50 <__ssvfscanf_r+0x180c>
    cd16:	f1b9 0f00 	cmp.w	r9, #0
    cd1a:	f47f ae77 	bne.w	ca0c <__ssvfscanf_r+0x14c8>
    cd1e:	4645      	mov	r5, r8
    cd20:	46a1      	mov	r9, r4
    cd22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    cd24:	b123      	cbz	r3, cd30 <__ssvfscanf_r+0x17ec>
    cd26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cd28:	1af1      	subs	r1, r6, r3
    cd2a:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
    cd2e:	d827      	bhi.n	cd80 <__ssvfscanf_r+0x183c>
    cd30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd32:	2b00      	cmp	r3, #0
    cd34:	f47e ac2d 	bne.w	b592 <__ssvfscanf_r+0x4e>
    cd38:	f7ff ba1c 	b.w	c174 <__ssvfscanf_r+0xc30>
    cd3c:	449a      	add	sl, r3
    cd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cd40:	2b03      	cmp	r3, #3
    cd42:	f47f ae97 	bne.w	ca74 <__ssvfscanf_r+0x1530>
    cd46:	682b      	ldr	r3, [r5, #0]
    cd48:	2b04      	cmp	r3, #4
    cd4a:	f47f ae93 	bne.w	ca74 <__ssvfscanf_r+0x1530>
    cd4e:	e693      	b.n	ca78 <__ssvfscanf_r+0x1534>
    cd50:	46a1      	mov	r9, r4
    cd52:	462c      	mov	r4, r5
    cd54:	4645      	mov	r5, r8
    cd56:	2c00      	cmp	r4, #0
    cd58:	d0e3      	beq.n	cd22 <__ssvfscanf_r+0x17de>
    cd5a:	f7fe bcdf 	b.w	b71c <__ssvfscanf_r+0x1d8>
    cd5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
    cd60:	1946      	adds	r6, r0, r5
    cd62:	6010      	str	r0, [r2, #0]
    cd64:	ea4f 0848 	mov.w	r8, r8, lsl #1
    cd68:	3604      	adds	r6, #4
    cd6a:	f8db 3004 	ldr.w	r3, [fp, #4]
    cd6e:	2b00      	cmp	r3, #0
    cd70:	f04f 0500 	mov.w	r5, #0
    cd74:	ddca      	ble.n	cd0c <__ssvfscanf_r+0x17c8>
    cd76:	f1b9 0f00 	cmp.w	r9, #0
    cd7a:	f47f ae47 	bne.w	ca0c <__ssvfscanf_r+0x14c8>
    cd7e:	e7ce      	b.n	cd1e <__ssvfscanf_r+0x17da>
    cd80:	6cbc      	ldr	r4, [r7, #72]	; 0x48
    cd82:	6820      	ldr	r0, [r4, #0]
    cd84:	f7fa f8a0 	bl	6ec8 <realloc>
    cd88:	2800      	cmp	r0, #0
    cd8a:	d0d1      	beq.n	cd30 <__ssvfscanf_r+0x17ec>
    cd8c:	6020      	str	r0, [r4, #0]
    cd8e:	e7cf      	b.n	cd30 <__ssvfscanf_r+0x17ec>
    cd90:	4690      	mov	r8, r2
    cd92:	e521      	b.n	c7d8 <__ssvfscanf_r+0x1294>

0000cd94 <_Balloc>:
    cd94:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cd96:	b570      	push	{r4, r5, r6, lr}
    cd98:	4605      	mov	r5, r0
    cd9a:	460c      	mov	r4, r1
    cd9c:	b14b      	cbz	r3, cdb2 <_Balloc+0x1e>
    cd9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    cda2:	b180      	cbz	r0, cdc6 <_Balloc+0x32>
    cda4:	6802      	ldr	r2, [r0, #0]
    cda6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    cdaa:	2300      	movs	r3, #0
    cdac:	e9c0 3303 	strd	r3, r3, [r0, #12]
    cdb0:	bd70      	pop	{r4, r5, r6, pc}
    cdb2:	2221      	movs	r2, #33	; 0x21
    cdb4:	2104      	movs	r1, #4
    cdb6:	f001 fb0f 	bl	e3d8 <_calloc_r>
    cdba:	4603      	mov	r3, r0
    cdbc:	6468      	str	r0, [r5, #68]	; 0x44
    cdbe:	2800      	cmp	r0, #0
    cdc0:	d1ed      	bne.n	cd9e <_Balloc+0xa>
    cdc2:	2000      	movs	r0, #0
    cdc4:	bd70      	pop	{r4, r5, r6, pc}
    cdc6:	2101      	movs	r1, #1
    cdc8:	fa01 f604 	lsl.w	r6, r1, r4
    cdcc:	1d72      	adds	r2, r6, #5
    cdce:	0092      	lsls	r2, r2, #2
    cdd0:	4628      	mov	r0, r5
    cdd2:	f001 fb01 	bl	e3d8 <_calloc_r>
    cdd6:	2800      	cmp	r0, #0
    cdd8:	d0f3      	beq.n	cdc2 <_Balloc+0x2e>
    cdda:	e9c0 4601 	strd	r4, r6, [r0, #4]
    cdde:	e7e4      	b.n	cdaa <_Balloc+0x16>

0000cde0 <_Bfree>:
    cde0:	b131      	cbz	r1, cdf0 <_Bfree+0x10>
    cde2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cde4:	684a      	ldr	r2, [r1, #4]
    cde6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    cdea:	6008      	str	r0, [r1, #0]
    cdec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    cdf0:	4770      	bx	lr
    cdf2:	bf00      	nop

0000cdf4 <__multadd>:
    cdf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cdf8:	690e      	ldr	r6, [r1, #16]
    cdfa:	4680      	mov	r8, r0
    cdfc:	460f      	mov	r7, r1
    cdfe:	461d      	mov	r5, r3
    ce00:	f101 0e14 	add.w	lr, r1, #20
    ce04:	2000      	movs	r0, #0
    ce06:	f8de 1000 	ldr.w	r1, [lr]
    ce0a:	b28c      	uxth	r4, r1
    ce0c:	fb02 5304 	mla	r3, r2, r4, r5
    ce10:	0c09      	lsrs	r1, r1, #16
    ce12:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    ce16:	fb02 cc01 	mla	ip, r2, r1, ip
    ce1a:	3001      	adds	r0, #1
    ce1c:	b29c      	uxth	r4, r3
    ce1e:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    ce22:	4286      	cmp	r6, r0
    ce24:	f84e 4b04 	str.w	r4, [lr], #4
    ce28:	ea4f 451c 	mov.w	r5, ip, lsr #16
    ce2c:	dceb      	bgt.n	ce06 <__multadd+0x12>
    ce2e:	b13d      	cbz	r5, ce40 <__multadd+0x4c>
    ce30:	68bb      	ldr	r3, [r7, #8]
    ce32:	42b3      	cmp	r3, r6
    ce34:	dd07      	ble.n	ce46 <__multadd+0x52>
    ce36:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    ce3a:	3601      	adds	r6, #1
    ce3c:	615d      	str	r5, [r3, #20]
    ce3e:	613e      	str	r6, [r7, #16]
    ce40:	4638      	mov	r0, r7
    ce42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce46:	6879      	ldr	r1, [r7, #4]
    ce48:	4640      	mov	r0, r8
    ce4a:	3101      	adds	r1, #1
    ce4c:	f7ff ffa2 	bl	cd94 <_Balloc>
    ce50:	4604      	mov	r4, r0
    ce52:	b1b0      	cbz	r0, ce82 <__multadd+0x8e>
    ce54:	693a      	ldr	r2, [r7, #16]
    ce56:	3202      	adds	r2, #2
    ce58:	f107 010c 	add.w	r1, r7, #12
    ce5c:	0092      	lsls	r2, r2, #2
    ce5e:	300c      	adds	r0, #12
    ce60:	f7f7 fe94 	bl	4b8c <memcpy>
    ce64:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    ce68:	687a      	ldr	r2, [r7, #4]
    ce6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    ce6e:	6039      	str	r1, [r7, #0]
    ce70:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    ce74:	4627      	mov	r7, r4
    ce76:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    ce7a:	3601      	adds	r6, #1
    ce7c:	615d      	str	r5, [r3, #20]
    ce7e:	613e      	str	r6, [r7, #16]
    ce80:	e7de      	b.n	ce40 <__multadd+0x4c>
    ce82:	4b03      	ldr	r3, [pc, #12]	; (ce90 <__multadd+0x9c>)
    ce84:	4803      	ldr	r0, [pc, #12]	; (ce94 <__multadd+0xa0>)
    ce86:	4622      	mov	r2, r4
    ce88:	21ba      	movs	r1, #186	; 0xba
    ce8a:	f001 f9b9 	bl	e200 <__assert_func>
    ce8e:	bf00      	nop
    ce90:	20000768 	.word	0x20000768
    ce94:	200008e8 	.word	0x200008e8

0000ce98 <__s2b>:
    ce98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ce9c:	4617      	mov	r7, r2
    ce9e:	4a27      	ldr	r2, [pc, #156]	; (cf3c <__s2b+0xa4>)
    cea0:	461e      	mov	r6, r3
    cea2:	3308      	adds	r3, #8
    cea4:	460c      	mov	r4, r1
    cea6:	2e09      	cmp	r6, #9
    cea8:	fb82 1203 	smull	r1, r2, r2, r3
    ceac:	ea4f 73e3 	mov.w	r3, r3, asr #31
    ceb0:	4605      	mov	r5, r0
    ceb2:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    ceb6:	dd39      	ble.n	cf2c <__s2b+0x94>
    ceb8:	f04f 0c01 	mov.w	ip, #1
    cebc:	2100      	movs	r1, #0
    cebe:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    cec2:	4563      	cmp	r3, ip
    cec4:	f101 0101 	add.w	r1, r1, #1
    cec8:	dcf9      	bgt.n	cebe <__s2b+0x26>
    ceca:	4628      	mov	r0, r5
    cecc:	f7ff ff62 	bl	cd94 <_Balloc>
    ced0:	4601      	mov	r1, r0
    ced2:	b368      	cbz	r0, cf30 <__s2b+0x98>
    ced4:	9b08      	ldr	r3, [sp, #32]
    ced6:	6143      	str	r3, [r0, #20]
    ced8:	2f09      	cmp	r7, #9
    ceda:	f04f 0301 	mov.w	r3, #1
    cede:	6103      	str	r3, [r0, #16]
    cee0:	dc12      	bgt.n	cf08 <__s2b+0x70>
    cee2:	340a      	adds	r4, #10
    cee4:	2709      	movs	r7, #9
    cee6:	42be      	cmp	r6, r7
    cee8:	dd0b      	ble.n	cf02 <__s2b+0x6a>
    ceea:	1bf2      	subs	r2, r6, r7
    ceec:	18a6      	adds	r6, r4, r2
    ceee:	f814 3b01 	ldrb.w	r3, [r4], #1
    cef2:	220a      	movs	r2, #10
    cef4:	3b30      	subs	r3, #48	; 0x30
    cef6:	4628      	mov	r0, r5
    cef8:	f7ff ff7c 	bl	cdf4 <__multadd>
    cefc:	42a6      	cmp	r6, r4
    cefe:	4601      	mov	r1, r0
    cf00:	d1f5      	bne.n	ceee <__s2b+0x56>
    cf02:	4608      	mov	r0, r1
    cf04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cf08:	f104 0909 	add.w	r9, r4, #9
    cf0c:	46c8      	mov	r8, r9
    cf0e:	443c      	add	r4, r7
    cf10:	f818 3b01 	ldrb.w	r3, [r8], #1
    cf14:	220a      	movs	r2, #10
    cf16:	3b30      	subs	r3, #48	; 0x30
    cf18:	4628      	mov	r0, r5
    cf1a:	f7ff ff6b 	bl	cdf4 <__multadd>
    cf1e:	45a0      	cmp	r8, r4
    cf20:	4601      	mov	r1, r0
    cf22:	d1f5      	bne.n	cf10 <__s2b+0x78>
    cf24:	f1a7 0408 	sub.w	r4, r7, #8
    cf28:	444c      	add	r4, r9
    cf2a:	e7dc      	b.n	cee6 <__s2b+0x4e>
    cf2c:	2100      	movs	r1, #0
    cf2e:	e7cc      	b.n	ceca <__s2b+0x32>
    cf30:	460a      	mov	r2, r1
    cf32:	4b03      	ldr	r3, [pc, #12]	; (cf40 <__s2b+0xa8>)
    cf34:	4803      	ldr	r0, [pc, #12]	; (cf44 <__s2b+0xac>)
    cf36:	21d3      	movs	r1, #211	; 0xd3
    cf38:	f001 f962 	bl	e200 <__assert_func>
    cf3c:	38e38e39 	.word	0x38e38e39
    cf40:	20000768 	.word	0x20000768
    cf44:	200008e8 	.word	0x200008e8

0000cf48 <__hi0bits>:
    cf48:	0c03      	lsrs	r3, r0, #16
    cf4a:	041b      	lsls	r3, r3, #16
    cf4c:	b9d3      	cbnz	r3, cf84 <__hi0bits+0x3c>
    cf4e:	0400      	lsls	r0, r0, #16
    cf50:	2310      	movs	r3, #16
    cf52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    cf56:	bf04      	itt	eq
    cf58:	0200      	lsleq	r0, r0, #8
    cf5a:	3308      	addeq	r3, #8
    cf5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    cf60:	bf04      	itt	eq
    cf62:	0100      	lsleq	r0, r0, #4
    cf64:	3304      	addeq	r3, #4
    cf66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    cf6a:	bf04      	itt	eq
    cf6c:	0080      	lsleq	r0, r0, #2
    cf6e:	3302      	addeq	r3, #2
    cf70:	2800      	cmp	r0, #0
    cf72:	db05      	blt.n	cf80 <__hi0bits+0x38>
    cf74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    cf78:	f103 0301 	add.w	r3, r3, #1
    cf7c:	bf08      	it	eq
    cf7e:	2320      	moveq	r3, #32
    cf80:	4618      	mov	r0, r3
    cf82:	4770      	bx	lr
    cf84:	2300      	movs	r3, #0
    cf86:	e7e4      	b.n	cf52 <__hi0bits+0xa>

0000cf88 <__lo0bits>:
    cf88:	6803      	ldr	r3, [r0, #0]
    cf8a:	f013 0207 	ands.w	r2, r3, #7
    cf8e:	d008      	beq.n	cfa2 <__lo0bits+0x1a>
    cf90:	07d9      	lsls	r1, r3, #31
    cf92:	d41f      	bmi.n	cfd4 <__lo0bits+0x4c>
    cf94:	079a      	lsls	r2, r3, #30
    cf96:	d522      	bpl.n	cfde <__lo0bits+0x56>
    cf98:	085b      	lsrs	r3, r3, #1
    cf9a:	6003      	str	r3, [r0, #0]
    cf9c:	2201      	movs	r2, #1
    cf9e:	4610      	mov	r0, r2
    cfa0:	4770      	bx	lr
    cfa2:	b299      	uxth	r1, r3
    cfa4:	b909      	cbnz	r1, cfaa <__lo0bits+0x22>
    cfa6:	0c1b      	lsrs	r3, r3, #16
    cfa8:	2210      	movs	r2, #16
    cfaa:	b2d9      	uxtb	r1, r3
    cfac:	b909      	cbnz	r1, cfb2 <__lo0bits+0x2a>
    cfae:	3208      	adds	r2, #8
    cfb0:	0a1b      	lsrs	r3, r3, #8
    cfb2:	0719      	lsls	r1, r3, #28
    cfb4:	bf04      	itt	eq
    cfb6:	091b      	lsreq	r3, r3, #4
    cfb8:	3204      	addeq	r2, #4
    cfba:	0799      	lsls	r1, r3, #30
    cfbc:	bf04      	itt	eq
    cfbe:	089b      	lsreq	r3, r3, #2
    cfc0:	3202      	addeq	r2, #2
    cfc2:	07d9      	lsls	r1, r3, #31
    cfc4:	d403      	bmi.n	cfce <__lo0bits+0x46>
    cfc6:	085b      	lsrs	r3, r3, #1
    cfc8:	f102 0201 	add.w	r2, r2, #1
    cfcc:	d005      	beq.n	cfda <__lo0bits+0x52>
    cfce:	6003      	str	r3, [r0, #0]
    cfd0:	4610      	mov	r0, r2
    cfd2:	4770      	bx	lr
    cfd4:	2200      	movs	r2, #0
    cfd6:	4610      	mov	r0, r2
    cfd8:	4770      	bx	lr
    cfda:	2220      	movs	r2, #32
    cfdc:	e7df      	b.n	cf9e <__lo0bits+0x16>
    cfde:	089b      	lsrs	r3, r3, #2
    cfe0:	2202      	movs	r2, #2
    cfe2:	6003      	str	r3, [r0, #0]
    cfe4:	4610      	mov	r0, r2
    cfe6:	4770      	bx	lr

0000cfe8 <__i2b>:
    cfe8:	b538      	push	{r3, r4, r5, lr}
    cfea:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cfec:	4604      	mov	r4, r0
    cfee:	460d      	mov	r5, r1
    cff0:	b14b      	cbz	r3, d006 <__i2b+0x1e>
    cff2:	6858      	ldr	r0, [r3, #4]
    cff4:	b1b0      	cbz	r0, d024 <__i2b+0x3c>
    cff6:	6802      	ldr	r2, [r0, #0]
    cff8:	605a      	str	r2, [r3, #4]
    cffa:	2200      	movs	r2, #0
    cffc:	2301      	movs	r3, #1
    cffe:	e9c0 3504 	strd	r3, r5, [r0, #16]
    d002:	60c2      	str	r2, [r0, #12]
    d004:	bd38      	pop	{r3, r4, r5, pc}
    d006:	2221      	movs	r2, #33	; 0x21
    d008:	2104      	movs	r1, #4
    d00a:	f001 f9e5 	bl	e3d8 <_calloc_r>
    d00e:	4603      	mov	r3, r0
    d010:	6460      	str	r0, [r4, #68]	; 0x44
    d012:	2800      	cmp	r0, #0
    d014:	d1ed      	bne.n	cff2 <__i2b+0xa>
    d016:	4b09      	ldr	r3, [pc, #36]	; (d03c <__i2b+0x54>)
    d018:	4809      	ldr	r0, [pc, #36]	; (d040 <__i2b+0x58>)
    d01a:	2200      	movs	r2, #0
    d01c:	f240 1145 	movw	r1, #325	; 0x145
    d020:	f001 f8ee 	bl	e200 <__assert_func>
    d024:	221c      	movs	r2, #28
    d026:	2101      	movs	r1, #1
    d028:	4620      	mov	r0, r4
    d02a:	f001 f9d5 	bl	e3d8 <_calloc_r>
    d02e:	2800      	cmp	r0, #0
    d030:	d0f1      	beq.n	d016 <__i2b+0x2e>
    d032:	2201      	movs	r2, #1
    d034:	2302      	movs	r3, #2
    d036:	e9c0 2301 	strd	r2, r3, [r0, #4]
    d03a:	e7de      	b.n	cffa <__i2b+0x12>
    d03c:	20000768 	.word	0x20000768
    d040:	200008e8 	.word	0x200008e8

0000d044 <__multiply>:
    d044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d048:	690e      	ldr	r6, [r1, #16]
    d04a:	6915      	ldr	r5, [r2, #16]
    d04c:	42ae      	cmp	r6, r5
    d04e:	b085      	sub	sp, #20
    d050:	4688      	mov	r8, r1
    d052:	4614      	mov	r4, r2
    d054:	db05      	blt.n	d062 <__multiply+0x1e>
    d056:	462a      	mov	r2, r5
    d058:	4623      	mov	r3, r4
    d05a:	4635      	mov	r5, r6
    d05c:	460c      	mov	r4, r1
    d05e:	4616      	mov	r6, r2
    d060:	4698      	mov	r8, r3
    d062:	68a3      	ldr	r3, [r4, #8]
    d064:	6861      	ldr	r1, [r4, #4]
    d066:	19af      	adds	r7, r5, r6
    d068:	42bb      	cmp	r3, r7
    d06a:	bfb8      	it	lt
    d06c:	3101      	addlt	r1, #1
    d06e:	f7ff fe91 	bl	cd94 <_Balloc>
    d072:	9001      	str	r0, [sp, #4]
    d074:	2800      	cmp	r0, #0
    d076:	f000 8087 	beq.w	d188 <__multiply+0x144>
    d07a:	9b01      	ldr	r3, [sp, #4]
    d07c:	f103 0914 	add.w	r9, r3, #20
    d080:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    d084:	45d1      	cmp	r9, sl
    d086:	d205      	bcs.n	d094 <__multiply+0x50>
    d088:	464b      	mov	r3, r9
    d08a:	2200      	movs	r2, #0
    d08c:	f843 2b04 	str.w	r2, [r3], #4
    d090:	459a      	cmp	sl, r3
    d092:	d8fb      	bhi.n	d08c <__multiply+0x48>
    d094:	f108 0814 	add.w	r8, r8, #20
    d098:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    d09c:	f104 0314 	add.w	r3, r4, #20
    d0a0:	45d8      	cmp	r8, fp
    d0a2:	461a      	mov	r2, r3
    d0a4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    d0a8:	d25f      	bcs.n	d16a <__multiply+0x126>
    d0aa:	1b2b      	subs	r3, r5, r4
    d0ac:	3b15      	subs	r3, #21
    d0ae:	f023 0303 	bic.w	r3, r3, #3
    d0b2:	3304      	adds	r3, #4
    d0b4:	3415      	adds	r4, #21
    d0b6:	42a5      	cmp	r5, r4
    d0b8:	bf38      	it	cc
    d0ba:	2304      	movcc	r3, #4
    d0bc:	e9cd a702 	strd	sl, r7, [sp, #8]
    d0c0:	46ac      	mov	ip, r5
    d0c2:	461f      	mov	r7, r3
    d0c4:	4692      	mov	sl, r2
    d0c6:	e005      	b.n	d0d4 <__multiply+0x90>
    d0c8:	0c09      	lsrs	r1, r1, #16
    d0ca:	d129      	bne.n	d120 <__multiply+0xdc>
    d0cc:	45c3      	cmp	fp, r8
    d0ce:	f109 0904 	add.w	r9, r9, #4
    d0d2:	d948      	bls.n	d166 <__multiply+0x122>
    d0d4:	f858 1b04 	ldr.w	r1, [r8], #4
    d0d8:	b28d      	uxth	r5, r1
    d0da:	2d00      	cmp	r5, #0
    d0dc:	d0f4      	beq.n	d0c8 <__multiply+0x84>
    d0de:	4656      	mov	r6, sl
    d0e0:	464c      	mov	r4, r9
    d0e2:	2300      	movs	r3, #0
    d0e4:	f856 1b04 	ldr.w	r1, [r6], #4
    d0e8:	6822      	ldr	r2, [r4, #0]
    d0ea:	fa1f fe81 	uxth.w	lr, r1
    d0ee:	b290      	uxth	r0, r2
    d0f0:	0c09      	lsrs	r1, r1, #16
    d0f2:	fb05 000e 	mla	r0, r5, lr, r0
    d0f6:	0c12      	lsrs	r2, r2, #16
    d0f8:	4403      	add	r3, r0
    d0fa:	fb05 2201 	mla	r2, r5, r1, r2
    d0fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    d102:	b29b      	uxth	r3, r3
    d104:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    d108:	45b4      	cmp	ip, r6
    d10a:	f844 3b04 	str.w	r3, [r4], #4
    d10e:	ea4f 4312 	mov.w	r3, r2, lsr #16
    d112:	d8e7      	bhi.n	d0e4 <__multiply+0xa0>
    d114:	f849 3007 	str.w	r3, [r9, r7]
    d118:	f858 1c04 	ldr.w	r1, [r8, #-4]
    d11c:	0c09      	lsrs	r1, r1, #16
    d11e:	d0d5      	beq.n	d0cc <__multiply+0x88>
    d120:	f8d9 3000 	ldr.w	r3, [r9]
    d124:	4650      	mov	r0, sl
    d126:	461a      	mov	r2, r3
    d128:	464c      	mov	r4, r9
    d12a:	2600      	movs	r6, #0
    d12c:	8805      	ldrh	r5, [r0, #0]
    d12e:	0c12      	lsrs	r2, r2, #16
    d130:	fb01 2205 	mla	r2, r1, r5, r2
    d134:	4416      	add	r6, r2
    d136:	b29b      	uxth	r3, r3
    d138:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    d13c:	f844 3b04 	str.w	r3, [r4], #4
    d140:	f850 5b04 	ldr.w	r5, [r0], #4
    d144:	6822      	ldr	r2, [r4, #0]
    d146:	0c2d      	lsrs	r5, r5, #16
    d148:	b293      	uxth	r3, r2
    d14a:	fb01 3305 	mla	r3, r1, r5, r3
    d14e:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    d152:	4584      	cmp	ip, r0
    d154:	ea4f 4613 	mov.w	r6, r3, lsr #16
    d158:	d8e8      	bhi.n	d12c <__multiply+0xe8>
    d15a:	45c3      	cmp	fp, r8
    d15c:	f849 3007 	str.w	r3, [r9, r7]
    d160:	f109 0904 	add.w	r9, r9, #4
    d164:	d8b6      	bhi.n	d0d4 <__multiply+0x90>
    d166:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    d16a:	2f00      	cmp	r7, #0
    d16c:	dc02      	bgt.n	d174 <__multiply+0x130>
    d16e:	e005      	b.n	d17c <__multiply+0x138>
    d170:	3f01      	subs	r7, #1
    d172:	d003      	beq.n	d17c <__multiply+0x138>
    d174:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    d178:	2b00      	cmp	r3, #0
    d17a:	d0f9      	beq.n	d170 <__multiply+0x12c>
    d17c:	9b01      	ldr	r3, [sp, #4]
    d17e:	4618      	mov	r0, r3
    d180:	611f      	str	r7, [r3, #16]
    d182:	b005      	add	sp, #20
    d184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d188:	4b03      	ldr	r3, [pc, #12]	; (d198 <__multiply+0x154>)
    d18a:	4804      	ldr	r0, [pc, #16]	; (d19c <__multiply+0x158>)
    d18c:	9a01      	ldr	r2, [sp, #4]
    d18e:	f44f 71b1 	mov.w	r1, #354	; 0x162
    d192:	f001 f835 	bl	e200 <__assert_func>
    d196:	bf00      	nop
    d198:	20000768 	.word	0x20000768
    d19c:	200008e8 	.word	0x200008e8

0000d1a0 <__pow5mult>:
    d1a0:	f012 0303 	ands.w	r3, r2, #3
    d1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1a8:	4614      	mov	r4, r2
    d1aa:	4606      	mov	r6, r0
    d1ac:	d132      	bne.n	d214 <__pow5mult+0x74>
    d1ae:	460d      	mov	r5, r1
    d1b0:	10a4      	asrs	r4, r4, #2
    d1b2:	d020      	beq.n	d1f6 <__pow5mult+0x56>
    d1b4:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    d1b8:	f1b8 0f00 	cmp.w	r8, #0
    d1bc:	d033      	beq.n	d226 <__pow5mult+0x86>
    d1be:	07e3      	lsls	r3, r4, #31
    d1c0:	f04f 0700 	mov.w	r7, #0
    d1c4:	d407      	bmi.n	d1d6 <__pow5mult+0x36>
    d1c6:	1064      	asrs	r4, r4, #1
    d1c8:	d015      	beq.n	d1f6 <__pow5mult+0x56>
    d1ca:	f8d8 0000 	ldr.w	r0, [r8]
    d1ce:	b1a8      	cbz	r0, d1fc <__pow5mult+0x5c>
    d1d0:	4680      	mov	r8, r0
    d1d2:	07e3      	lsls	r3, r4, #31
    d1d4:	d5f7      	bpl.n	d1c6 <__pow5mult+0x26>
    d1d6:	4642      	mov	r2, r8
    d1d8:	4629      	mov	r1, r5
    d1da:	4630      	mov	r0, r6
    d1dc:	f7ff ff32 	bl	d044 <__multiply>
    d1e0:	b1b5      	cbz	r5, d210 <__pow5mult+0x70>
    d1e2:	6869      	ldr	r1, [r5, #4]
    d1e4:	6c73      	ldr	r3, [r6, #68]	; 0x44
    d1e6:	1064      	asrs	r4, r4, #1
    d1e8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    d1ec:	602a      	str	r2, [r5, #0]
    d1ee:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    d1f2:	4605      	mov	r5, r0
    d1f4:	d1e9      	bne.n	d1ca <__pow5mult+0x2a>
    d1f6:	4628      	mov	r0, r5
    d1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d1fc:	4642      	mov	r2, r8
    d1fe:	4641      	mov	r1, r8
    d200:	4630      	mov	r0, r6
    d202:	f7ff ff1f 	bl	d044 <__multiply>
    d206:	f8c8 0000 	str.w	r0, [r8]
    d20a:	6007      	str	r7, [r0, #0]
    d20c:	4680      	mov	r8, r0
    d20e:	e7e0      	b.n	d1d2 <__pow5mult+0x32>
    d210:	4605      	mov	r5, r0
    d212:	e7d8      	b.n	d1c6 <__pow5mult+0x26>
    d214:	3b01      	subs	r3, #1
    d216:	4a0f      	ldr	r2, [pc, #60]	; (d254 <__pow5mult+0xb4>)
    d218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    d21c:	2300      	movs	r3, #0
    d21e:	f7ff fde9 	bl	cdf4 <__multadd>
    d222:	4605      	mov	r5, r0
    d224:	e7c4      	b.n	d1b0 <__pow5mult+0x10>
    d226:	2101      	movs	r1, #1
    d228:	4630      	mov	r0, r6
    d22a:	f7ff fdb3 	bl	cd94 <_Balloc>
    d22e:	4680      	mov	r8, r0
    d230:	b140      	cbz	r0, d244 <__pow5mult+0xa4>
    d232:	2301      	movs	r3, #1
    d234:	f240 2271 	movw	r2, #625	; 0x271
    d238:	e9c0 3204 	strd	r3, r2, [r0, #16]
    d23c:	2300      	movs	r3, #0
    d23e:	6430      	str	r0, [r6, #64]	; 0x40
    d240:	6003      	str	r3, [r0, #0]
    d242:	e7bc      	b.n	d1be <__pow5mult+0x1e>
    d244:	4b04      	ldr	r3, [pc, #16]	; (d258 <__pow5mult+0xb8>)
    d246:	4805      	ldr	r0, [pc, #20]	; (d25c <__pow5mult+0xbc>)
    d248:	4642      	mov	r2, r8
    d24a:	f240 1145 	movw	r1, #325	; 0x145
    d24e:	f000 ffd7 	bl	e200 <__assert_func>
    d252:	bf00      	nop
    d254:	20007810 	.word	0x20007810
    d258:	20000768 	.word	0x20000768
    d25c:	200008e8 	.word	0x200008e8

0000d260 <__lshift>:
    d260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d264:	460d      	mov	r5, r1
    d266:	4614      	mov	r4, r2
    d268:	692f      	ldr	r7, [r5, #16]
    d26a:	68ab      	ldr	r3, [r5, #8]
    d26c:	6849      	ldr	r1, [r1, #4]
    d26e:	eb07 1762 	add.w	r7, r7, r2, asr #5
    d272:	1c7e      	adds	r6, r7, #1
    d274:	429e      	cmp	r6, r3
    d276:	4680      	mov	r8, r0
    d278:	ea4f 1962 	mov.w	r9, r2, asr #5
    d27c:	dd04      	ble.n	d288 <__lshift+0x28>
    d27e:	005b      	lsls	r3, r3, #1
    d280:	429e      	cmp	r6, r3
    d282:	f101 0101 	add.w	r1, r1, #1
    d286:	dcfa      	bgt.n	d27e <__lshift+0x1e>
    d288:	4640      	mov	r0, r8
    d28a:	f7ff fd83 	bl	cd94 <_Balloc>
    d28e:	4684      	mov	ip, r0
    d290:	2800      	cmp	r0, #0
    d292:	d052      	beq.n	d33a <__lshift+0xda>
    d294:	f1b9 0f00 	cmp.w	r9, #0
    d298:	f100 0214 	add.w	r2, r0, #20
    d29c:	dd0e      	ble.n	d2bc <__lshift+0x5c>
    d29e:	f109 0105 	add.w	r1, r9, #5
    d2a2:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    d2a6:	4613      	mov	r3, r2
    d2a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    d2ac:	2000      	movs	r0, #0
    d2ae:	f843 0b04 	str.w	r0, [r3], #4
    d2b2:	428b      	cmp	r3, r1
    d2b4:	d1fb      	bne.n	d2ae <__lshift+0x4e>
    d2b6:	f1ae 0314 	sub.w	r3, lr, #20
    d2ba:	441a      	add	r2, r3
    d2bc:	6929      	ldr	r1, [r5, #16]
    d2be:	f105 0314 	add.w	r3, r5, #20
    d2c2:	f014 0e1f 	ands.w	lr, r4, #31
    d2c6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d2ca:	d02e      	beq.n	d32a <__lshift+0xca>
    d2cc:	f1ce 0920 	rsb	r9, lr, #32
    d2d0:	4610      	mov	r0, r2
    d2d2:	f04f 0a00 	mov.w	sl, #0
    d2d6:	681c      	ldr	r4, [r3, #0]
    d2d8:	fa04 f40e 	lsl.w	r4, r4, lr
    d2dc:	ea44 040a 	orr.w	r4, r4, sl
    d2e0:	f840 4b04 	str.w	r4, [r0], #4
    d2e4:	f853 4b04 	ldr.w	r4, [r3], #4
    d2e8:	4299      	cmp	r1, r3
    d2ea:	fa24 fa09 	lsr.w	sl, r4, r9
    d2ee:	d8f2      	bhi.n	d2d6 <__lshift+0x76>
    d2f0:	1b4b      	subs	r3, r1, r5
    d2f2:	3b15      	subs	r3, #21
    d2f4:	f023 0303 	bic.w	r3, r3, #3
    d2f8:	3304      	adds	r3, #4
    d2fa:	f105 0015 	add.w	r0, r5, #21
    d2fe:	4281      	cmp	r1, r0
    d300:	bf38      	it	cc
    d302:	2304      	movcc	r3, #4
    d304:	f1ba 0f00 	cmp.w	sl, #0
    d308:	bf18      	it	ne
    d30a:	4637      	movne	r7, r6
    d30c:	f842 a003 	str.w	sl, [r2, r3]
    d310:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    d314:	686a      	ldr	r2, [r5, #4]
    d316:	f8cc 7010 	str.w	r7, [ip, #16]
    d31a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d31e:	6029      	str	r1, [r5, #0]
    d320:	4660      	mov	r0, ip
    d322:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    d326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d32a:	3a04      	subs	r2, #4
    d32c:	f853 0b04 	ldr.w	r0, [r3], #4
    d330:	f842 0f04 	str.w	r0, [r2, #4]!
    d334:	4299      	cmp	r1, r3
    d336:	d8f9      	bhi.n	d32c <__lshift+0xcc>
    d338:	e7ea      	b.n	d310 <__lshift+0xb0>
    d33a:	4b03      	ldr	r3, [pc, #12]	; (d348 <__lshift+0xe8>)
    d33c:	4803      	ldr	r0, [pc, #12]	; (d34c <__lshift+0xec>)
    d33e:	4662      	mov	r2, ip
    d340:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    d344:	f000 ff5c 	bl	e200 <__assert_func>
    d348:	20000768 	.word	0x20000768
    d34c:	200008e8 	.word	0x200008e8

0000d350 <__mcmp>:
    d350:	690b      	ldr	r3, [r1, #16]
    d352:	4684      	mov	ip, r0
    d354:	6900      	ldr	r0, [r0, #16]
    d356:	1ac0      	subs	r0, r0, r3
    d358:	d116      	bne.n	d388 <__mcmp+0x38>
    d35a:	f10c 0c14 	add.w	ip, ip, #20
    d35e:	3114      	adds	r1, #20
    d360:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    d364:	b410      	push	{r4}
    d366:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    d36a:	e001      	b.n	d370 <__mcmp+0x20>
    d36c:	4594      	cmp	ip, r2
    d36e:	d208      	bcs.n	d382 <__mcmp+0x32>
    d370:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    d374:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    d378:	428c      	cmp	r4, r1
    d37a:	d0f7      	beq.n	d36c <__mcmp+0x1c>
    d37c:	d205      	bcs.n	d38a <__mcmp+0x3a>
    d37e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d382:	f85d 4b04 	ldr.w	r4, [sp], #4
    d386:	4770      	bx	lr
    d388:	4770      	bx	lr
    d38a:	2001      	movs	r0, #1
    d38c:	f85d 4b04 	ldr.w	r4, [sp], #4
    d390:	4770      	bx	lr
    d392:	bf00      	nop

0000d394 <__mdiff>:
    d394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d398:	690f      	ldr	r7, [r1, #16]
    d39a:	6913      	ldr	r3, [r2, #16]
    d39c:	1aff      	subs	r7, r7, r3
    d39e:	2f00      	cmp	r7, #0
    d3a0:	460e      	mov	r6, r1
    d3a2:	4690      	mov	r8, r2
    d3a4:	d17f      	bne.n	d4a6 <__mdiff+0x112>
    d3a6:	f101 0514 	add.w	r5, r1, #20
    d3aa:	3214      	adds	r2, #20
    d3ac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    d3b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    d3b4:	e001      	b.n	d3ba <__mdiff+0x26>
    d3b6:	429d      	cmp	r5, r3
    d3b8:	d278      	bcs.n	d4ac <__mdiff+0x118>
    d3ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    d3be:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    d3c2:	42a1      	cmp	r1, r4
    d3c4:	d0f7      	beq.n	d3b6 <__mdiff+0x22>
    d3c6:	d369      	bcc.n	d49c <__mdiff+0x108>
    d3c8:	6871      	ldr	r1, [r6, #4]
    d3ca:	f7ff fce3 	bl	cd94 <_Balloc>
    d3ce:	4681      	mov	r9, r0
    d3d0:	2800      	cmp	r0, #0
    d3d2:	d077      	beq.n	d4c4 <__mdiff+0x130>
    d3d4:	6935      	ldr	r5, [r6, #16]
    d3d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
    d3da:	60c7      	str	r7, [r0, #12]
    d3dc:	f108 0e14 	add.w	lr, r8, #20
    d3e0:	f106 0014 	add.w	r0, r6, #20
    d3e4:	f109 0a14 	add.w	sl, r9, #20
    d3e8:	f106 0110 	add.w	r1, r6, #16
    d3ec:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    d3f0:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    d3f4:	4656      	mov	r6, sl
    d3f6:	f04f 0c00 	mov.w	ip, #0
    d3fa:	f85e 4b04 	ldr.w	r4, [lr], #4
    d3fe:	f851 bf04 	ldr.w	fp, [r1, #4]!
    d402:	b2a3      	uxth	r3, r4
    d404:	fa1c fc8b 	uxtah	ip, ip, fp
    d408:	ebac 0303 	sub.w	r3, ip, r3
    d40c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    d410:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    d414:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    d418:	b29b      	uxth	r3, r3
    d41a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    d41e:	4572      	cmp	r2, lr
    d420:	f846 3b04 	str.w	r3, [r6], #4
    d424:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    d428:	d8e7      	bhi.n	d3fa <__mdiff+0x66>
    d42a:	eba2 0108 	sub.w	r1, r2, r8
    d42e:	3915      	subs	r1, #21
    d430:	f108 0815 	add.w	r8, r8, #21
    d434:	4542      	cmp	r2, r8
    d436:	f021 0403 	bic.w	r4, r1, #3
    d43a:	f104 0404 	add.w	r4, r4, #4
    d43e:	bf38      	it	cc
    d440:	2404      	movcc	r4, #4
    d442:	4420      	add	r0, r4
    d444:	f021 0203 	bic.w	r2, r1, #3
    d448:	bf38      	it	cc
    d44a:	2200      	movcc	r2, #0
    d44c:	4287      	cmp	r7, r0
    d44e:	4452      	add	r2, sl
    d450:	4454      	add	r4, sl
    d452:	d918      	bls.n	d486 <__mdiff+0xf2>
    d454:	4626      	mov	r6, r4
    d456:	4601      	mov	r1, r0
    d458:	f851 3b04 	ldr.w	r3, [r1], #4
    d45c:	fa1c fc83 	uxtah	ip, ip, r3
    d460:	ea4f 422c 	mov.w	r2, ip, asr #16
    d464:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    d468:	fa1f fc8c 	uxth.w	ip, ip
    d46c:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    d470:	428f      	cmp	r7, r1
    d472:	f846 3b04 	str.w	r3, [r6], #4
    d476:	ea4f 4c22 	mov.w	ip, r2, asr #16
    d47a:	d8ed      	bhi.n	d458 <__mdiff+0xc4>
    d47c:	3f01      	subs	r7, #1
    d47e:	1a3f      	subs	r7, r7, r0
    d480:	f027 0703 	bic.w	r7, r7, #3
    d484:	19e2      	adds	r2, r4, r7
    d486:	b923      	cbnz	r3, d492 <__mdiff+0xfe>
    d488:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    d48c:	3d01      	subs	r5, #1
    d48e:	2b00      	cmp	r3, #0
    d490:	d0fa      	beq.n	d488 <__mdiff+0xf4>
    d492:	f8c9 5010 	str.w	r5, [r9, #16]
    d496:	4648      	mov	r0, r9
    d498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d49c:	4633      	mov	r3, r6
    d49e:	2701      	movs	r7, #1
    d4a0:	4646      	mov	r6, r8
    d4a2:	4698      	mov	r8, r3
    d4a4:	e790      	b.n	d3c8 <__mdiff+0x34>
    d4a6:	dbf9      	blt.n	d49c <__mdiff+0x108>
    d4a8:	2700      	movs	r7, #0
    d4aa:	e78d      	b.n	d3c8 <__mdiff+0x34>
    d4ac:	2100      	movs	r1, #0
    d4ae:	f7ff fc71 	bl	cd94 <_Balloc>
    d4b2:	4681      	mov	r9, r0
    d4b4:	b168      	cbz	r0, d4d2 <__mdiff+0x13e>
    d4b6:	2201      	movs	r2, #1
    d4b8:	2300      	movs	r3, #0
    d4ba:	e9c9 2304 	strd	r2, r3, [r9, #16]
    d4be:	4648      	mov	r0, r9
    d4c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4c4:	4b06      	ldr	r3, [pc, #24]	; (d4e0 <__mdiff+0x14c>)
    d4c6:	4807      	ldr	r0, [pc, #28]	; (d4e4 <__mdiff+0x150>)
    d4c8:	464a      	mov	r2, r9
    d4ca:	f240 2145 	movw	r1, #581	; 0x245
    d4ce:	f000 fe97 	bl	e200 <__assert_func>
    d4d2:	4b03      	ldr	r3, [pc, #12]	; (d4e0 <__mdiff+0x14c>)
    d4d4:	4803      	ldr	r0, [pc, #12]	; (d4e4 <__mdiff+0x150>)
    d4d6:	464a      	mov	r2, r9
    d4d8:	f240 2137 	movw	r1, #567	; 0x237
    d4dc:	f000 fe90 	bl	e200 <__assert_func>
    d4e0:	20000768 	.word	0x20000768
    d4e4:	200008e8 	.word	0x200008e8

0000d4e8 <__ulp>:
    d4e8:	b082      	sub	sp, #8
    d4ea:	ed8d 0b00 	vstr	d0, [sp]
    d4ee:	4b16      	ldr	r3, [pc, #88]	; (d548 <__ulp+0x60>)
    d4f0:	9a01      	ldr	r2, [sp, #4]
    d4f2:	4013      	ands	r3, r2
    d4f4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    d4f8:	2b00      	cmp	r3, #0
    d4fa:	dd06      	ble.n	d50a <__ulp+0x22>
    d4fc:	2200      	movs	r2, #0
    d4fe:	4619      	mov	r1, r3
    d500:	4610      	mov	r0, r2
    d502:	ec41 0b10 	vmov	d0, r0, r1
    d506:	b002      	add	sp, #8
    d508:	4770      	bx	lr
    d50a:	425b      	negs	r3, r3
    d50c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    d510:	ea4f 5223 	mov.w	r2, r3, asr #20
    d514:	da09      	bge.n	d52a <__ulp+0x42>
    d516:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    d51a:	4113      	asrs	r3, r2
    d51c:	2200      	movs	r2, #0
    d51e:	4619      	mov	r1, r3
    d520:	4610      	mov	r0, r2
    d522:	ec41 0b10 	vmov	d0, r0, r1
    d526:	b002      	add	sp, #8
    d528:	4770      	bx	lr
    d52a:	f1a2 0314 	sub.w	r3, r2, #20
    d52e:	2b1e      	cmp	r3, #30
    d530:	bfda      	itte	le
    d532:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    d536:	40da      	lsrle	r2, r3
    d538:	2201      	movgt	r2, #1
    d53a:	2300      	movs	r3, #0
    d53c:	4619      	mov	r1, r3
    d53e:	4610      	mov	r0, r2
    d540:	ec41 0b10 	vmov	d0, r0, r1
    d544:	b002      	add	sp, #8
    d546:	4770      	bx	lr
    d548:	7ff00000 	.word	0x7ff00000

0000d54c <__b2d>:
    d54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d54e:	6904      	ldr	r4, [r0, #16]
    d550:	f100 0614 	add.w	r6, r0, #20
    d554:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    d558:	1f27      	subs	r7, r4, #4
    d55a:	f854 5c04 	ldr.w	r5, [r4, #-4]
    d55e:	4628      	mov	r0, r5
    d560:	f7ff fcf2 	bl	cf48 <__hi0bits>
    d564:	f1c0 0320 	rsb	r3, r0, #32
    d568:	280a      	cmp	r0, #10
    d56a:	600b      	str	r3, [r1, #0]
    d56c:	dd1b      	ble.n	d5a6 <__b2d+0x5a>
    d56e:	42be      	cmp	r6, r7
    d570:	d20b      	bcs.n	d58a <__b2d+0x3e>
    d572:	380b      	subs	r0, #11
    d574:	f854 1c08 	ldr.w	r1, [r4, #-8]
    d578:	d12e      	bne.n	d5d8 <__b2d+0x8c>
    d57a:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    d57e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d582:	460a      	mov	r2, r1
    d584:	ec43 2b10 	vmov	d0, r2, r3
    d588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d58a:	f1b0 010b 	subs.w	r1, r0, #11
    d58e:	d0f4      	beq.n	d57a <__b2d+0x2e>
    d590:	fa05 f101 	lsl.w	r1, r5, r1
    d594:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    d598:	2100      	movs	r1, #0
    d59a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d59e:	460a      	mov	r2, r1
    d5a0:	ec43 2b10 	vmov	d0, r2, r3
    d5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d5a6:	f1c0 0c0b 	rsb	ip, r0, #11
    d5aa:	fa25 f10c 	lsr.w	r1, r5, ip
    d5ae:	42be      	cmp	r6, r7
    d5b0:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    d5b4:	bf38      	it	cc
    d5b6:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    d5ba:	f100 0015 	add.w	r0, r0, #21
    d5be:	bf34      	ite	cc
    d5c0:	fa21 f10c 	lsrcc.w	r1, r1, ip
    d5c4:	2100      	movcs	r1, #0
    d5c6:	fa05 f000 	lsl.w	r0, r5, r0
    d5ca:	4301      	orrs	r1, r0
    d5cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d5d0:	460a      	mov	r2, r1
    d5d2:	ec43 2b10 	vmov	d0, r2, r3
    d5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d5d8:	f1c0 0c20 	rsb	ip, r0, #32
    d5dc:	4085      	lsls	r5, r0
    d5de:	fa21 f30c 	lsr.w	r3, r1, ip
    d5e2:	ea45 0703 	orr.w	r7, r5, r3
    d5e6:	f1a4 0508 	sub.w	r5, r4, #8
    d5ea:	42ae      	cmp	r6, r5
    d5ec:	fa01 f100 	lsl.w	r1, r1, r0
    d5f0:	bf3c      	itt	cc
    d5f2:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    d5f6:	fa20 f00c 	lsrcc.w	r0, r0, ip
    d5fa:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    d5fe:	bf38      	it	cc
    d600:	4301      	orrcc	r1, r0
    d602:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d606:	460a      	mov	r2, r1
    d608:	ec43 2b10 	vmov	d0, r2, r3
    d60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d60e:	bf00      	nop

0000d610 <__d2b>:
    d610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d614:	4688      	mov	r8, r1
    d616:	b083      	sub	sp, #12
    d618:	2101      	movs	r1, #1
    d61a:	ec57 6b10 	vmov	r6, r7, d0
    d61e:	4615      	mov	r5, r2
    d620:	f7ff fbb8 	bl	cd94 <_Balloc>
    d624:	4604      	mov	r4, r0
    d626:	2800      	cmp	r0, #0
    d628:	d051      	beq.n	d6ce <__d2b+0xbe>
    d62a:	f3c7 590a 	ubfx	r9, r7, #20, #11
    d62e:	f3c7 0313 	ubfx	r3, r7, #0, #20
    d632:	f1b9 0f00 	cmp.w	r9, #0
    d636:	d001      	beq.n	d63c <__d2b+0x2c>
    d638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d63c:	2e00      	cmp	r6, #0
    d63e:	9301      	str	r3, [sp, #4]
    d640:	d118      	bne.n	d674 <__d2b+0x64>
    d642:	a801      	add	r0, sp, #4
    d644:	f7ff fca0 	bl	cf88 <__lo0bits>
    d648:	9a01      	ldr	r2, [sp, #4]
    d64a:	6162      	str	r2, [r4, #20]
    d64c:	2201      	movs	r2, #1
    d64e:	f100 0320 	add.w	r3, r0, #32
    d652:	6122      	str	r2, [r4, #16]
    d654:	f1b9 0f00 	cmp.w	r9, #0
    d658:	d025      	beq.n	d6a6 <__d2b+0x96>
    d65a:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    d65e:	eb09 0203 	add.w	r2, r9, r3
    d662:	4620      	mov	r0, r4
    d664:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    d668:	f8c8 2000 	str.w	r2, [r8]
    d66c:	602b      	str	r3, [r5, #0]
    d66e:	b003      	add	sp, #12
    d670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d674:	4668      	mov	r0, sp
    d676:	9600      	str	r6, [sp, #0]
    d678:	f7ff fc86 	bl	cf88 <__lo0bits>
    d67c:	4603      	mov	r3, r0
    d67e:	b310      	cbz	r0, d6c6 <__d2b+0xb6>
    d680:	e9dd 0200 	ldrd	r0, r2, [sp]
    d684:	f1c3 0120 	rsb	r1, r3, #32
    d688:	fa02 f101 	lsl.w	r1, r2, r1
    d68c:	4301      	orrs	r1, r0
    d68e:	40da      	lsrs	r2, r3
    d690:	6161      	str	r1, [r4, #20]
    d692:	9201      	str	r2, [sp, #4]
    d694:	2a00      	cmp	r2, #0
    d696:	61a2      	str	r2, [r4, #24]
    d698:	bf14      	ite	ne
    d69a:	2202      	movne	r2, #2
    d69c:	2201      	moveq	r2, #1
    d69e:	6122      	str	r2, [r4, #16]
    d6a0:	f1b9 0f00 	cmp.w	r9, #0
    d6a4:	d1d9      	bne.n	d65a <__d2b+0x4a>
    d6a6:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    d6aa:	f8c8 3000 	str.w	r3, [r8]
    d6ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    d6b2:	6918      	ldr	r0, [r3, #16]
    d6b4:	f7ff fc48 	bl	cf48 <__hi0bits>
    d6b8:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    d6bc:	4620      	mov	r0, r4
    d6be:	602b      	str	r3, [r5, #0]
    d6c0:	b003      	add	sp, #12
    d6c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d6c6:	9a00      	ldr	r2, [sp, #0]
    d6c8:	6162      	str	r2, [r4, #20]
    d6ca:	9a01      	ldr	r2, [sp, #4]
    d6cc:	e7e2      	b.n	d694 <__d2b+0x84>
    d6ce:	4b03      	ldr	r3, [pc, #12]	; (d6dc <__d2b+0xcc>)
    d6d0:	4803      	ldr	r0, [pc, #12]	; (d6e0 <__d2b+0xd0>)
    d6d2:	4622      	mov	r2, r4
    d6d4:	f240 310f 	movw	r1, #783	; 0x30f
    d6d8:	f000 fd92 	bl	e200 <__assert_func>
    d6dc:	20000768 	.word	0x20000768
    d6e0:	200008e8 	.word	0x200008e8

0000d6e4 <__ratio>:
    d6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6e6:	b083      	sub	sp, #12
    d6e8:	460e      	mov	r6, r1
    d6ea:	4669      	mov	r1, sp
    d6ec:	4607      	mov	r7, r0
    d6ee:	f7ff ff2d 	bl	d54c <__b2d>
    d6f2:	a901      	add	r1, sp, #4
    d6f4:	4630      	mov	r0, r6
    d6f6:	ec55 4b10 	vmov	r4, r5, d0
    d6fa:	eeb0 7b40 	vmov.f64	d7, d0
    d6fe:	f7ff ff25 	bl	d54c <__b2d>
    d702:	6933      	ldr	r3, [r6, #16]
    d704:	693a      	ldr	r2, [r7, #16]
    d706:	1ad2      	subs	r2, r2, r3
    d708:	e9dd 3100 	ldrd	r3, r1, [sp]
    d70c:	1a5b      	subs	r3, r3, r1
    d70e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    d712:	2b00      	cmp	r3, #0
    d714:	dd09      	ble.n	d72a <__ratio+0x46>
    d716:	ee17 2a90 	vmov	r2, s15
    d71a:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    d71e:	ec45 4b17 	vmov	d7, r4, r5
    d722:	ee87 0b00 	vdiv.f64	d0, d7, d0
    d726:	b003      	add	sp, #12
    d728:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d72a:	ee10 2a90 	vmov	r2, s1
    d72e:	ec51 0b10 	vmov	r0, r1, d0
    d732:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    d736:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    d73a:	ec41 0b10 	vmov	d0, r0, r1
    d73e:	ee87 0b00 	vdiv.f64	d0, d7, d0
    d742:	b003      	add	sp, #12
    d744:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d746:	bf00      	nop

0000d748 <__copybits>:
    d748:	3901      	subs	r1, #1
    d74a:	1149      	asrs	r1, r1, #5
    d74c:	f101 0c01 	add.w	ip, r1, #1
    d750:	6911      	ldr	r1, [r2, #16]
    d752:	f102 0314 	add.w	r3, r2, #20
    d756:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d75a:	428b      	cmp	r3, r1
    d75c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    d760:	d217      	bcs.n	d792 <__copybits+0x4a>
    d762:	b510      	push	{r4, lr}
    d764:	f1a0 0e04 	sub.w	lr, r0, #4
    d768:	f853 4b04 	ldr.w	r4, [r3], #4
    d76c:	f84e 4f04 	str.w	r4, [lr, #4]!
    d770:	4299      	cmp	r1, r3
    d772:	d8f9      	bhi.n	d768 <__copybits+0x20>
    d774:	1a8a      	subs	r2, r1, r2
    d776:	f1a2 0315 	sub.w	r3, r2, #21
    d77a:	f023 0303 	bic.w	r3, r3, #3
    d77e:	3304      	adds	r3, #4
    d780:	4418      	add	r0, r3
    d782:	4584      	cmp	ip, r0
    d784:	d904      	bls.n	d790 <__copybits+0x48>
    d786:	2300      	movs	r3, #0
    d788:	f840 3b04 	str.w	r3, [r0], #4
    d78c:	4584      	cmp	ip, r0
    d78e:	d8fb      	bhi.n	d788 <__copybits+0x40>
    d790:	bd10      	pop	{r4, pc}
    d792:	4584      	cmp	ip, r0
    d794:	d905      	bls.n	d7a2 <__copybits+0x5a>
    d796:	2300      	movs	r3, #0
    d798:	f840 3b04 	str.w	r3, [r0], #4
    d79c:	4584      	cmp	ip, r0
    d79e:	d8fb      	bhi.n	d798 <__copybits+0x50>
    d7a0:	4770      	bx	lr
    d7a2:	4770      	bx	lr

0000d7a4 <__any_on>:
    d7a4:	6903      	ldr	r3, [r0, #16]
    d7a6:	114a      	asrs	r2, r1, #5
    d7a8:	4293      	cmp	r3, r2
    d7aa:	f100 0014 	add.w	r0, r0, #20
    d7ae:	da09      	bge.n	d7c4 <__any_on+0x20>
    d7b0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    d7b4:	e002      	b.n	d7bc <__any_on+0x18>
    d7b6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d7ba:	b9c2      	cbnz	r2, d7ee <__any_on+0x4a>
    d7bc:	4283      	cmp	r3, r0
    d7be:	d8fa      	bhi.n	d7b6 <__any_on+0x12>
    d7c0:	2000      	movs	r0, #0
    d7c2:	4770      	bx	lr
    d7c4:	dd10      	ble.n	d7e8 <__any_on+0x44>
    d7c6:	f011 011f 	ands.w	r1, r1, #31
    d7ca:	d00d      	beq.n	d7e8 <__any_on+0x44>
    d7cc:	b410      	push	{r4}
    d7ce:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    d7d2:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d7d6:	fa24 f201 	lsr.w	r2, r4, r1
    d7da:	408a      	lsls	r2, r1
    d7dc:	4294      	cmp	r4, r2
    d7de:	d00c      	beq.n	d7fa <__any_on+0x56>
    d7e0:	2001      	movs	r0, #1
    d7e2:	f85d 4b04 	ldr.w	r4, [sp], #4
    d7e6:	4770      	bx	lr
    d7e8:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d7ec:	e7e6      	b.n	d7bc <__any_on+0x18>
    d7ee:	2001      	movs	r0, #1
    d7f0:	4770      	bx	lr
    d7f2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d7f6:	2a00      	cmp	r2, #0
    d7f8:	d1f2      	bne.n	d7e0 <__any_on+0x3c>
    d7fa:	4283      	cmp	r3, r0
    d7fc:	d8f9      	bhi.n	d7f2 <__any_on+0x4e>
    d7fe:	2000      	movs	r0, #0
    d800:	f85d 4b04 	ldr.w	r4, [sp], #4
    d804:	4770      	bx	lr
    d806:	bf00      	nop

0000d808 <_fclose_r>:
    d808:	b570      	push	{r4, r5, r6, lr}
    d80a:	2900      	cmp	r1, #0
    d80c:	d04b      	beq.n	d8a6 <_fclose_r+0x9e>
    d80e:	4606      	mov	r6, r0
    d810:	460c      	mov	r4, r1
    d812:	b110      	cbz	r0, d81a <_fclose_r+0x12>
    d814:	6b43      	ldr	r3, [r0, #52]	; 0x34
    d816:	2b00      	cmp	r3, #0
    d818:	d048      	beq.n	d8ac <_fclose_r+0xa4>
    d81a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d81c:	07d8      	lsls	r0, r3, #31
    d81e:	d534      	bpl.n	d88a <_fclose_r+0x82>
    d820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d824:	2b00      	cmp	r3, #0
    d826:	d03e      	beq.n	d8a6 <_fclose_r+0x9e>
    d828:	4621      	mov	r1, r4
    d82a:	4630      	mov	r0, r6
    d82c:	f000 f936 	bl	da9c <__sflush_r>
    d830:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d832:	4605      	mov	r5, r0
    d834:	b133      	cbz	r3, d844 <_fclose_r+0x3c>
    d836:	69e1      	ldr	r1, [r4, #28]
    d838:	4630      	mov	r0, r6
    d83a:	4798      	blx	r3
    d83c:	2800      	cmp	r0, #0
    d83e:	bfb8      	it	lt
    d840:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    d844:	89a3      	ldrh	r3, [r4, #12]
    d846:	061a      	lsls	r2, r3, #24
    d848:	d43c      	bmi.n	d8c4 <_fclose_r+0xbc>
    d84a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    d84c:	b141      	cbz	r1, d860 <_fclose_r+0x58>
    d84e:	f104 0340 	add.w	r3, r4, #64	; 0x40
    d852:	4299      	cmp	r1, r3
    d854:	d002      	beq.n	d85c <_fclose_r+0x54>
    d856:	4630      	mov	r0, r6
    d858:	f7fb fba4 	bl	8fa4 <_free_r>
    d85c:	2300      	movs	r3, #0
    d85e:	6323      	str	r3, [r4, #48]	; 0x30
    d860:	6c61      	ldr	r1, [r4, #68]	; 0x44
    d862:	b121      	cbz	r1, d86e <_fclose_r+0x66>
    d864:	4630      	mov	r0, r6
    d866:	f7fb fb9d 	bl	8fa4 <_free_r>
    d86a:	2300      	movs	r3, #0
    d86c:	6463      	str	r3, [r4, #68]	; 0x44
    d86e:	f7fa fe8f 	bl	8590 <__sfp_lock_acquire>
    d872:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d874:	2200      	movs	r2, #0
    d876:	07db      	lsls	r3, r3, #31
    d878:	81a2      	strh	r2, [r4, #12]
    d87a:	d51f      	bpl.n	d8bc <_fclose_r+0xb4>
    d87c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d87e:	f7fb fa71 	bl	8d64 <__retarget_lock_close_recursive>
    d882:	f7fa fe8b 	bl	859c <__sfp_lock_release>
    d886:	4628      	mov	r0, r5
    d888:	bd70      	pop	{r4, r5, r6, pc}
    d88a:	89a3      	ldrh	r3, [r4, #12]
    d88c:	0599      	lsls	r1, r3, #22
    d88e:	d4cb      	bmi.n	d828 <_fclose_r+0x20>
    d890:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d892:	f7fb fa69 	bl	8d68 <__retarget_lock_acquire_recursive>
    d896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d89a:	2b00      	cmp	r3, #0
    d89c:	d1c4      	bne.n	d828 <_fclose_r+0x20>
    d89e:	6e65      	ldr	r5, [r4, #100]	; 0x64
    d8a0:	f015 0501 	ands.w	r5, r5, #1
    d8a4:	d005      	beq.n	d8b2 <_fclose_r+0xaa>
    d8a6:	2500      	movs	r5, #0
    d8a8:	4628      	mov	r0, r5
    d8aa:	bd70      	pop	{r4, r5, r6, pc}
    d8ac:	f7fa fe52 	bl	8554 <__sinit>
    d8b0:	e7b3      	b.n	d81a <_fclose_r+0x12>
    d8b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d8b4:	f7fb fa5a 	bl	8d6c <__retarget_lock_release_recursive>
    d8b8:	4628      	mov	r0, r5
    d8ba:	bd70      	pop	{r4, r5, r6, pc}
    d8bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d8be:	f7fb fa55 	bl	8d6c <__retarget_lock_release_recursive>
    d8c2:	e7db      	b.n	d87c <_fclose_r+0x74>
    d8c4:	6921      	ldr	r1, [r4, #16]
    d8c6:	4630      	mov	r0, r6
    d8c8:	f7fb fb6c 	bl	8fa4 <_free_r>
    d8cc:	e7bd      	b.n	d84a <_fclose_r+0x42>
    d8ce:	bf00      	nop

0000d8d0 <__sccl>:
    d8d0:	b570      	push	{r4, r5, r6, lr}
    d8d2:	780c      	ldrb	r4, [r1, #0]
    d8d4:	2c5e      	cmp	r4, #94	; 0x5e
    d8d6:	4686      	mov	lr, r0
    d8d8:	d01e      	beq.n	d918 <__sccl+0x48>
    d8da:	2200      	movs	r2, #0
    d8dc:	1c48      	adds	r0, r1, #1
    d8de:	4694      	mov	ip, r2
    d8e0:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    d8e4:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
    d8e8:	f803 2f01 	strb.w	r2, [r3, #1]!
    d8ec:	428b      	cmp	r3, r1
    d8ee:	d1fb      	bne.n	d8e8 <__sccl+0x18>
    d8f0:	b184      	cbz	r4, d914 <__sccl+0x44>
    d8f2:	f08c 0101 	eor.w	r1, ip, #1
    d8f6:	f80e 1004 	strb.w	r1, [lr, r4]
    d8fa:	1c45      	adds	r5, r0, #1
    d8fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    d900:	2b2d      	cmp	r3, #45	; 0x2d
    d902:	d00e      	beq.n	d922 <__sccl+0x52>
    d904:	2b5d      	cmp	r3, #93	; 0x5d
    d906:	d003      	beq.n	d910 <__sccl+0x40>
    d908:	b11b      	cbz	r3, d912 <__sccl+0x42>
    d90a:	461c      	mov	r4, r3
    d90c:	4628      	mov	r0, r5
    d90e:	e7f2      	b.n	d8f6 <__sccl+0x26>
    d910:	4628      	mov	r0, r5
    d912:	bd70      	pop	{r4, r5, r6, pc}
    d914:	3801      	subs	r0, #1
    d916:	bd70      	pop	{r4, r5, r6, pc}
    d918:	2201      	movs	r2, #1
    d91a:	784c      	ldrb	r4, [r1, #1]
    d91c:	1c88      	adds	r0, r1, #2
    d91e:	4694      	mov	ip, r2
    d920:	e7de      	b.n	d8e0 <__sccl+0x10>
    d922:	f890 c001 	ldrb.w	ip, [r0, #1]
    d926:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    d92a:	d0ee      	beq.n	d90a <__sccl+0x3a>
    d92c:	4564      	cmp	r4, ip
    d92e:	dcec      	bgt.n	d90a <__sccl+0x3a>
    d930:	1c66      	adds	r6, r4, #1
    d932:	3002      	adds	r0, #2
    d934:	eb0e 0206 	add.w	r2, lr, r6
    d938:	f802 1b01 	strb.w	r1, [r2], #1
    d93c:	eba2 030e 	sub.w	r3, r2, lr
    d940:	3b01      	subs	r3, #1
    d942:	459c      	cmp	ip, r3
    d944:	dcf8      	bgt.n	d938 <__sccl+0x68>
    d946:	ebac 0304 	sub.w	r3, ip, r4
    d94a:	3b01      	subs	r3, #1
    d94c:	4564      	cmp	r4, ip
    d94e:	bfa8      	it	ge
    d950:	2300      	movge	r3, #0
    d952:	3502      	adds	r5, #2
    d954:	199c      	adds	r4, r3, r6
    d956:	e7d1      	b.n	d8fc <__sccl+0x2c>

0000d958 <_strtoul_l.constprop.0>:
    d958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d95c:	4607      	mov	r7, r0
    d95e:	484c      	ldr	r0, [pc, #304]	; (da90 <_strtoul_l.constprop.0+0x138>)
    d960:	460e      	mov	r6, r1
    d962:	4635      	mov	r5, r6
    d964:	f816 eb01 	ldrb.w	lr, [r6], #1
    d968:	f810 c00e 	ldrb.w	ip, [r0, lr]
    d96c:	f01c 0c08 	ands.w	ip, ip, #8
    d970:	d1f7      	bne.n	d962 <_strtoul_l.constprop.0+0xa>
    d972:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
    d976:	d05a      	beq.n	da2e <_strtoul_l.constprop.0+0xd6>
    d978:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
    d97c:	bf03      	ittte	eq
    d97e:	f896 e000 	ldrbeq.w	lr, [r6]
    d982:	4664      	moveq	r4, ip
    d984:	1cae      	addeq	r6, r5, #2
    d986:	4664      	movne	r4, ip
    d988:	b15b      	cbz	r3, d9a2 <_strtoul_l.constprop.0+0x4a>
    d98a:	2b10      	cmp	r3, #16
    d98c:	d054      	beq.n	da38 <_strtoul_l.constprop.0+0xe0>
    d98e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    d992:	fbb8 f8f3 	udiv	r8, r8, r3
    d996:	fb03 fa08 	mul.w	sl, r3, r8
    d99a:	ea6f 0a0a 	mvn.w	sl, sl
    d99e:	4699      	mov	r9, r3
    d9a0:	e008      	b.n	d9b4 <_strtoul_l.constprop.0+0x5c>
    d9a2:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    d9a6:	d05a      	beq.n	da5e <_strtoul_l.constprop.0+0x106>
    d9a8:	230a      	movs	r3, #10
    d9aa:	f8df 80e8 	ldr.w	r8, [pc, #232]	; da94 <_strtoul_l.constprop.0+0x13c>
    d9ae:	f04f 0a05 	mov.w	sl, #5
    d9b2:	4699      	mov	r9, r3
    d9b4:	2500      	movs	r5, #0
    d9b6:	4628      	mov	r0, r5
    d9b8:	e005      	b.n	d9c6 <_strtoul_l.constprop.0+0x6e>
    d9ba:	d02c      	beq.n	da16 <_strtoul_l.constprop.0+0xbe>
    d9bc:	fb09 c000 	mla	r0, r9, r0, ip
    d9c0:	2501      	movs	r5, #1
    d9c2:	f816 eb01 	ldrb.w	lr, [r6], #1
    d9c6:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
    d9ca:	f1bc 0f09 	cmp.w	ip, #9
    d9ce:	d906      	bls.n	d9de <_strtoul_l.constprop.0+0x86>
    d9d0:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
    d9d4:	f1bc 0f19 	cmp.w	ip, #25
    d9d8:	d80b      	bhi.n	d9f2 <_strtoul_l.constprop.0+0x9a>
    d9da:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
    d9de:	4563      	cmp	r3, ip
    d9e0:	dd10      	ble.n	da04 <_strtoul_l.constprop.0+0xac>
    d9e2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    d9e6:	d0ec      	beq.n	d9c2 <_strtoul_l.constprop.0+0x6a>
    d9e8:	4540      	cmp	r0, r8
    d9ea:	d9e6      	bls.n	d9ba <_strtoul_l.constprop.0+0x62>
    d9ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    d9f0:	e7e7      	b.n	d9c2 <_strtoul_l.constprop.0+0x6a>
    d9f2:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
    d9f6:	f1bc 0f19 	cmp.w	ip, #25
    d9fa:	d803      	bhi.n	da04 <_strtoul_l.constprop.0+0xac>
    d9fc:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
    da00:	4563      	cmp	r3, ip
    da02:	dcee      	bgt.n	d9e2 <_strtoul_l.constprop.0+0x8a>
    da04:	1c6b      	adds	r3, r5, #1
    da06:	d00b      	beq.n	da20 <_strtoul_l.constprop.0+0xc8>
    da08:	b104      	cbz	r4, da0c <_strtoul_l.constprop.0+0xb4>
    da0a:	4240      	negs	r0, r0
    da0c:	b10a      	cbz	r2, da12 <_strtoul_l.constprop.0+0xba>
    da0e:	b965      	cbnz	r5, da2a <_strtoul_l.constprop.0+0xd2>
    da10:	6011      	str	r1, [r2, #0]
    da12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    da16:	45d4      	cmp	ip, sl
    da18:	ddd0      	ble.n	d9bc <_strtoul_l.constprop.0+0x64>
    da1a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    da1e:	e7d0      	b.n	d9c2 <_strtoul_l.constprop.0+0x6a>
    da20:	2322      	movs	r3, #34	; 0x22
    da22:	603b      	str	r3, [r7, #0]
    da24:	4628      	mov	r0, r5
    da26:	2a00      	cmp	r2, #0
    da28:	d0f3      	beq.n	da12 <_strtoul_l.constprop.0+0xba>
    da2a:	1e71      	subs	r1, r6, #1
    da2c:	e7f0      	b.n	da10 <_strtoul_l.constprop.0+0xb8>
    da2e:	f896 e000 	ldrb.w	lr, [r6]
    da32:	2401      	movs	r4, #1
    da34:	1cae      	adds	r6, r5, #2
    da36:	e7a7      	b.n	d988 <_strtoul_l.constprop.0+0x30>
    da38:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    da3c:	d121      	bne.n	da82 <_strtoul_l.constprop.0+0x12a>
    da3e:	7830      	ldrb	r0, [r6, #0]
    da40:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    da44:	2858      	cmp	r0, #88	; 0x58
    da46:	d116      	bne.n	da76 <_strtoul_l.constprop.0+0x11e>
    da48:	f04f 0910 	mov.w	r9, #16
    da4c:	f896 e001 	ldrb.w	lr, [r6, #1]
    da50:	f04f 0a0f 	mov.w	sl, #15
    da54:	3602      	adds	r6, #2
    da56:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    da5a:	464b      	mov	r3, r9
    da5c:	e7aa      	b.n	d9b4 <_strtoul_l.constprop.0+0x5c>
    da5e:	7833      	ldrb	r3, [r6, #0]
    da60:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    da64:	2b58      	cmp	r3, #88	; 0x58
    da66:	d0ef      	beq.n	da48 <_strtoul_l.constprop.0+0xf0>
    da68:	2308      	movs	r3, #8
    da6a:	f04f 0a07 	mov.w	sl, #7
    da6e:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    da72:	4699      	mov	r9, r3
    da74:	e79e      	b.n	d9b4 <_strtoul_l.constprop.0+0x5c>
    da76:	4699      	mov	r9, r3
    da78:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    da7c:	f04f 0a0f 	mov.w	sl, #15
    da80:	e798      	b.n	d9b4 <_strtoul_l.constprop.0+0x5c>
    da82:	f04f 0a0f 	mov.w	sl, #15
    da86:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    da8a:	4699      	mov	r9, r3
    da8c:	e792      	b.n	d9b4 <_strtoul_l.constprop.0+0x5c>
    da8e:	bf00      	nop
    da90:	20000955 	.word	0x20000955
    da94:	19999999 	.word	0x19999999

0000da98 <_strtoul_r>:
    da98:	f7ff bf5e 	b.w	d958 <_strtoul_l.constprop.0>

0000da9c <__sflush_r>:
    da9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    daa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    daa4:	460c      	mov	r4, r1
    daa6:	0711      	lsls	r1, r2, #28
    daa8:	4680      	mov	r8, r0
    daaa:	d447      	bmi.n	db3c <__sflush_r+0xa0>
    daac:	6863      	ldr	r3, [r4, #4]
    daae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    dab2:	2b00      	cmp	r3, #0
    dab4:	81a2      	strh	r2, [r4, #12]
    dab6:	dd5e      	ble.n	db76 <__sflush_r+0xda>
    dab8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    daba:	2d00      	cmp	r5, #0
    dabc:	d058      	beq.n	db70 <__sflush_r+0xd4>
    dabe:	2300      	movs	r3, #0
    dac0:	f8d8 6000 	ldr.w	r6, [r8]
    dac4:	f8c8 3000 	str.w	r3, [r8]
    dac8:	b293      	uxth	r3, r2
    daca:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    dace:	d156      	bne.n	db7e <__sflush_r+0xe2>
    dad0:	2301      	movs	r3, #1
    dad2:	69e1      	ldr	r1, [r4, #28]
    dad4:	4640      	mov	r0, r8
    dad6:	47a8      	blx	r5
    dad8:	1c43      	adds	r3, r0, #1
    dada:	d067      	beq.n	dbac <__sflush_r+0x110>
    dadc:	89a3      	ldrh	r3, [r4, #12]
    dade:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    dae0:	075f      	lsls	r7, r3, #29
    dae2:	d505      	bpl.n	daf0 <__sflush_r+0x54>
    dae4:	6863      	ldr	r3, [r4, #4]
    dae6:	1ac0      	subs	r0, r0, r3
    dae8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    daea:	b10b      	cbz	r3, daf0 <__sflush_r+0x54>
    daec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    daee:	1ac0      	subs	r0, r0, r3
    daf0:	69e1      	ldr	r1, [r4, #28]
    daf2:	4602      	mov	r2, r0
    daf4:	2300      	movs	r3, #0
    daf6:	4640      	mov	r0, r8
    daf8:	47a8      	blx	r5
    dafa:	1c41      	adds	r1, r0, #1
    dafc:	d141      	bne.n	db82 <__sflush_r+0xe6>
    dafe:	f8d8 3000 	ldr.w	r3, [r8]
    db02:	2b00      	cmp	r3, #0
    db04:	d03d      	beq.n	db82 <__sflush_r+0xe6>
    db06:	2b1d      	cmp	r3, #29
    db08:	d001      	beq.n	db0e <__sflush_r+0x72>
    db0a:	2b16      	cmp	r3, #22
    db0c:	d156      	bne.n	dbbc <__sflush_r+0x120>
    db0e:	89a3      	ldrh	r3, [r4, #12]
    db10:	6922      	ldr	r2, [r4, #16]
    db12:	6022      	str	r2, [r4, #0]
    db14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    db18:	2100      	movs	r1, #0
    db1a:	6061      	str	r1, [r4, #4]
    db1c:	81a3      	strh	r3, [r4, #12]
    db1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    db20:	f8c8 6000 	str.w	r6, [r8]
    db24:	b321      	cbz	r1, db70 <__sflush_r+0xd4>
    db26:	f104 0340 	add.w	r3, r4, #64	; 0x40
    db2a:	4299      	cmp	r1, r3
    db2c:	d002      	beq.n	db34 <__sflush_r+0x98>
    db2e:	4640      	mov	r0, r8
    db30:	f7fb fa38 	bl	8fa4 <_free_r>
    db34:	2000      	movs	r0, #0
    db36:	6320      	str	r0, [r4, #48]	; 0x30
    db38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db3c:	6926      	ldr	r6, [r4, #16]
    db3e:	b1be      	cbz	r6, db70 <__sflush_r+0xd4>
    db40:	b293      	uxth	r3, r2
    db42:	6825      	ldr	r5, [r4, #0]
    db44:	6026      	str	r6, [r4, #0]
    db46:	079a      	lsls	r2, r3, #30
    db48:	bf0c      	ite	eq
    db4a:	6963      	ldreq	r3, [r4, #20]
    db4c:	2300      	movne	r3, #0
    db4e:	1bad      	subs	r5, r5, r6
    db50:	60a3      	str	r3, [r4, #8]
    db52:	e00b      	b.n	db6c <__sflush_r+0xd0>
    db54:	462b      	mov	r3, r5
    db56:	4632      	mov	r2, r6
    db58:	69e1      	ldr	r1, [r4, #28]
    db5a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    db5c:	4640      	mov	r0, r8
    db5e:	47b8      	blx	r7
    db60:	f1b0 0c00 	subs.w	ip, r0, #0
    db64:	eba5 050c 	sub.w	r5, r5, ip
    db68:	4466      	add	r6, ip
    db6a:	dd17      	ble.n	db9c <__sflush_r+0x100>
    db6c:	2d00      	cmp	r5, #0
    db6e:	dcf1      	bgt.n	db54 <__sflush_r+0xb8>
    db70:	2000      	movs	r0, #0
    db72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    db78:	2b00      	cmp	r3, #0
    db7a:	dc9d      	bgt.n	dab8 <__sflush_r+0x1c>
    db7c:	e7f8      	b.n	db70 <__sflush_r+0xd4>
    db7e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    db80:	e7ae      	b.n	dae0 <__sflush_r+0x44>
    db82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    db86:	6922      	ldr	r2, [r4, #16]
    db88:	6022      	str	r2, [r4, #0]
    db8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    db8e:	81a3      	strh	r3, [r4, #12]
    db90:	2200      	movs	r2, #0
    db92:	04db      	lsls	r3, r3, #19
    db94:	6062      	str	r2, [r4, #4]
    db96:	d5c2      	bpl.n	db1e <__sflush_r+0x82>
    db98:	6520      	str	r0, [r4, #80]	; 0x50
    db9a:	e7c0      	b.n	db1e <__sflush_r+0x82>
    db9c:	89a3      	ldrh	r3, [r4, #12]
    db9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dba6:	81a3      	strh	r3, [r4, #12]
    dba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbac:	f8d8 3000 	ldr.w	r3, [r8]
    dbb0:	2b00      	cmp	r3, #0
    dbb2:	d093      	beq.n	dadc <__sflush_r+0x40>
    dbb4:	2b1d      	cmp	r3, #29
    dbb6:	d006      	beq.n	dbc6 <__sflush_r+0x12a>
    dbb8:	2b16      	cmp	r3, #22
    dbba:	d004      	beq.n	dbc6 <__sflush_r+0x12a>
    dbbc:	89a3      	ldrh	r3, [r4, #12]
    dbbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dbc2:	81a3      	strh	r3, [r4, #12]
    dbc4:	e7d5      	b.n	db72 <__sflush_r+0xd6>
    dbc6:	f8c8 6000 	str.w	r6, [r8]
    dbca:	e7d1      	b.n	db70 <__sflush_r+0xd4>

0000dbcc <_fflush_r>:
    dbcc:	b538      	push	{r3, r4, r5, lr}
    dbce:	460c      	mov	r4, r1
    dbd0:	4605      	mov	r5, r0
    dbd2:	b108      	cbz	r0, dbd8 <_fflush_r+0xc>
    dbd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    dbd6:	b303      	cbz	r3, dc1a <_fflush_r+0x4e>
    dbd8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    dbdc:	b188      	cbz	r0, dc02 <_fflush_r+0x36>
    dbde:	6e63      	ldr	r3, [r4, #100]	; 0x64
    dbe0:	07db      	lsls	r3, r3, #31
    dbe2:	d401      	bmi.n	dbe8 <_fflush_r+0x1c>
    dbe4:	0581      	lsls	r1, r0, #22
    dbe6:	d50f      	bpl.n	dc08 <_fflush_r+0x3c>
    dbe8:	4628      	mov	r0, r5
    dbea:	4621      	mov	r1, r4
    dbec:	f7ff ff56 	bl	da9c <__sflush_r>
    dbf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    dbf2:	07da      	lsls	r2, r3, #31
    dbf4:	4605      	mov	r5, r0
    dbf6:	d402      	bmi.n	dbfe <_fflush_r+0x32>
    dbf8:	89a3      	ldrh	r3, [r4, #12]
    dbfa:	059b      	lsls	r3, r3, #22
    dbfc:	d508      	bpl.n	dc10 <_fflush_r+0x44>
    dbfe:	4628      	mov	r0, r5
    dc00:	bd38      	pop	{r3, r4, r5, pc}
    dc02:	4605      	mov	r5, r0
    dc04:	4628      	mov	r0, r5
    dc06:	bd38      	pop	{r3, r4, r5, pc}
    dc08:	6da0      	ldr	r0, [r4, #88]	; 0x58
    dc0a:	f7fb f8ad 	bl	8d68 <__retarget_lock_acquire_recursive>
    dc0e:	e7eb      	b.n	dbe8 <_fflush_r+0x1c>
    dc10:	6da0      	ldr	r0, [r4, #88]	; 0x58
    dc12:	f7fb f8ab 	bl	8d6c <__retarget_lock_release_recursive>
    dc16:	4628      	mov	r0, r5
    dc18:	bd38      	pop	{r3, r4, r5, pc}
    dc1a:	f7fa fc9b 	bl	8554 <__sinit>
    dc1e:	e7db      	b.n	dbd8 <_fflush_r+0xc>

0000dc20 <sprintf>:
    dc20:	b40e      	push	{r1, r2, r3}
    dc22:	b510      	push	{r4, lr}
    dc24:	b09d      	sub	sp, #116	; 0x74
    dc26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dc2a:	ab1f      	add	r3, sp, #124	; 0x7c
    dc2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    dc30:	9104      	str	r1, [sp, #16]
    dc32:	4909      	ldr	r1, [pc, #36]	; (dc58 <sprintf+0x38>)
    dc34:	f853 2b04 	ldr.w	r2, [r3], #4
    dc38:	9002      	str	r0, [sp, #8]
    dc3a:	4c08      	ldr	r4, [pc, #32]	; (dc5c <sprintf+0x3c>)
    dc3c:	6808      	ldr	r0, [r1, #0]
    dc3e:	9301      	str	r3, [sp, #4]
    dc40:	a902      	add	r1, sp, #8
    dc42:	9405      	str	r4, [sp, #20]
    dc44:	f7fb fedc 	bl	9a00 <_svfprintf_r>
    dc48:	9b02      	ldr	r3, [sp, #8]
    dc4a:	2200      	movs	r2, #0
    dc4c:	701a      	strb	r2, [r3, #0]
    dc4e:	b01d      	add	sp, #116	; 0x74
    dc50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc54:	b003      	add	sp, #12
    dc56:	4770      	bx	lr
    dc58:	20008bc0 	.word	0x20008bc0
    dc5c:	ffff0208 	.word	0xffff0208

0000dc60 <__ascii_wctomb>:
    dc60:	b149      	cbz	r1, dc76 <__ascii_wctomb+0x16>
    dc62:	2aff      	cmp	r2, #255	; 0xff
    dc64:	d802      	bhi.n	dc6c <__ascii_wctomb+0xc>
    dc66:	700a      	strb	r2, [r1, #0]
    dc68:	2001      	movs	r0, #1
    dc6a:	4770      	bx	lr
    dc6c:	238a      	movs	r3, #138	; 0x8a
    dc6e:	6003      	str	r3, [r0, #0]
    dc70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dc74:	4770      	bx	lr
    dc76:	4608      	mov	r0, r1
    dc78:	4770      	bx	lr
    dc7a:	bf00      	nop

0000dc7c <stpncpy>:
    dc7c:	ea41 0300 	orr.w	r3, r1, r0
    dc80:	079b      	lsls	r3, r3, #30
    dc82:	b430      	push	{r4, r5}
    dc84:	d101      	bne.n	dc8a <stpncpy+0xe>
    dc86:	2a03      	cmp	r2, #3
    dc88:	d80f      	bhi.n	dcaa <stpncpy+0x2e>
    dc8a:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    dc8e:	e007      	b.n	dca0 <stpncpy+0x24>
    dc90:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    dc94:	f803 1b01 	strb.w	r1, [r3], #1
    dc98:	1e54      	subs	r4, r2, #1
    dc9a:	b1c1      	cbz	r1, dcce <stpncpy+0x52>
    dc9c:	4622      	mov	r2, r4
    dc9e:	4618      	mov	r0, r3
    dca0:	4603      	mov	r3, r0
    dca2:	2a00      	cmp	r2, #0
    dca4:	d1f4      	bne.n	dc90 <stpncpy+0x14>
    dca6:	bc30      	pop	{r4, r5}
    dca8:	4770      	bx	lr
    dcaa:	460b      	mov	r3, r1
    dcac:	4619      	mov	r1, r3
    dcae:	f853 5b04 	ldr.w	r5, [r3], #4
    dcb2:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    dcb6:	ea24 0405 	bic.w	r4, r4, r5
    dcba:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    dcbe:	d1e4      	bne.n	dc8a <stpncpy+0xe>
    dcc0:	3a04      	subs	r2, #4
    dcc2:	2a03      	cmp	r2, #3
    dcc4:	f840 5b04 	str.w	r5, [r0], #4
    dcc8:	4619      	mov	r1, r3
    dcca:	d8ef      	bhi.n	dcac <stpncpy+0x30>
    dccc:	e7dd      	b.n	dc8a <stpncpy+0xe>
    dcce:	4402      	add	r2, r0
    dcd0:	2c00      	cmp	r4, #0
    dcd2:	d0e8      	beq.n	dca6 <stpncpy+0x2a>
    dcd4:	f803 1b01 	strb.w	r1, [r3], #1
    dcd8:	4293      	cmp	r3, r2
    dcda:	d1fb      	bne.n	dcd4 <stpncpy+0x58>
    dcdc:	bc30      	pop	{r4, r5}
    dcde:	4770      	bx	lr

0000dce0 <_localeconv_r>:
    dce0:	4800      	ldr	r0, [pc, #0]	; (dce4 <_localeconv_r+0x4>)
    dce2:	4770      	bx	lr
    dce4:	20008728 	.word	0x20008728

0000dce8 <_strtoll_l.constprop.0>:
    dce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcec:	b085      	sub	sp, #20
    dcee:	461f      	mov	r7, r3
    dcf0:	4b57      	ldr	r3, [pc, #348]	; (de50 <_strtoll_l.constprop.0+0x168>)
    dcf2:	9003      	str	r0, [sp, #12]
    dcf4:	468a      	mov	sl, r1
    dcf6:	9200      	str	r2, [sp, #0]
    dcf8:	460d      	mov	r5, r1
    dcfa:	462a      	mov	r2, r5
    dcfc:	f815 4b01 	ldrb.w	r4, [r5], #1
    dd00:	5d1e      	ldrb	r6, [r3, r4]
    dd02:	f016 0608 	ands.w	r6, r6, #8
    dd06:	d1f8      	bne.n	dcfa <_strtoll_l.constprop.0+0x12>
    dd08:	2c2d      	cmp	r4, #45	; 0x2d
    dd0a:	d075      	beq.n	ddf8 <_strtoll_l.constprop.0+0x110>
    dd0c:	2c2b      	cmp	r4, #43	; 0x2b
    dd0e:	bf05      	ittet	eq
    dd10:	782c      	ldrbeq	r4, [r5, #0]
    dd12:	9602      	streq	r6, [sp, #8]
    dd14:	9602      	strne	r6, [sp, #8]
    dd16:	1c95      	addeq	r5, r2, #2
    dd18:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    dd1c:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    dd20:	b12f      	cbz	r7, dd2e <_strtoll_l.constprop.0+0x46>
    dd22:	2f10      	cmp	r7, #16
    dd24:	d06f      	beq.n	de06 <_strtoll_l.constprop.0+0x11e>
    dd26:	46b8      	mov	r8, r7
    dd28:	ea4f 79e7 	mov.w	r9, r7, asr #31
    dd2c:	e005      	b.n	dd3a <_strtoll_l.constprop.0+0x52>
    dd2e:	2c30      	cmp	r4, #48	; 0x30
    dd30:	d074      	beq.n	de1c <_strtoll_l.constprop.0+0x134>
    dd32:	f04f 080a 	mov.w	r8, #10
    dd36:	46b9      	mov	r9, r7
    dd38:	4647      	mov	r7, r8
    dd3a:	4642      	mov	r2, r8
    dd3c:	464b      	mov	r3, r9
    dd3e:	4630      	mov	r0, r6
    dd40:	4659      	mov	r1, fp
    dd42:	f7f8 fc6b 	bl	661c <__aeabi_uldivmod>
    dd46:	2300      	movs	r3, #0
    dd48:	9201      	str	r2, [sp, #4]
    dd4a:	4684      	mov	ip, r0
    dd4c:	460a      	mov	r2, r1
    dd4e:	4618      	mov	r0, r3
    dd50:	4619      	mov	r1, r3
    dd52:	e011      	b.n	dd78 <_strtoll_l.constprop.0+0x90>
    dd54:	428a      	cmp	r2, r1
    dd56:	bf08      	it	eq
    dd58:	4584      	cmpeq	ip, r0
    dd5a:	d03d      	beq.n	ddd8 <_strtoll_l.constprop.0+0xf0>
    dd5c:	fb00 f309 	mul.w	r3, r0, r9
    dd60:	fb08 3301 	mla	r3, r8, r1, r3
    dd64:	fba0 0108 	umull	r0, r1, r0, r8
    dd68:	440b      	add	r3, r1
    dd6a:	eb1e 0000 	adds.w	r0, lr, r0
    dd6e:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
    dd72:	2301      	movs	r3, #1
    dd74:	f815 4b01 	ldrb.w	r4, [r5], #1
    dd78:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
    dd7c:	f1be 0f09 	cmp.w	lr, #9
    dd80:	d906      	bls.n	dd90 <_strtoll_l.constprop.0+0xa8>
    dd82:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
    dd86:	f1be 0f19 	cmp.w	lr, #25
    dd8a:	d80c      	bhi.n	dda6 <_strtoll_l.constprop.0+0xbe>
    dd8c:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
    dd90:	4577      	cmp	r7, lr
    dd92:	dd11      	ble.n	ddb8 <_strtoll_l.constprop.0+0xd0>
    dd94:	1c5c      	adds	r4, r3, #1
    dd96:	d0ed      	beq.n	dd74 <_strtoll_l.constprop.0+0x8c>
    dd98:	4584      	cmp	ip, r0
    dd9a:	eb72 0301 	sbcs.w	r3, r2, r1
    dd9e:	d2d9      	bcs.n	dd54 <_strtoll_l.constprop.0+0x6c>
    dda0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dda4:	e7e6      	b.n	dd74 <_strtoll_l.constprop.0+0x8c>
    dda6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    ddaa:	f1be 0f19 	cmp.w	lr, #25
    ddae:	d803      	bhi.n	ddb8 <_strtoll_l.constprop.0+0xd0>
    ddb0:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
    ddb4:	4577      	cmp	r7, lr
    ddb6:	dced      	bgt.n	dd94 <_strtoll_l.constprop.0+0xac>
    ddb8:	1c5a      	adds	r2, r3, #1
    ddba:	d013      	beq.n	dde4 <_strtoll_l.constprop.0+0xfc>
    ddbc:	9a02      	ldr	r2, [sp, #8]
    ddbe:	b112      	cbz	r2, ddc6 <_strtoll_l.constprop.0+0xde>
    ddc0:	4240      	negs	r0, r0
    ddc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ddc6:	9a00      	ldr	r2, [sp, #0]
    ddc8:	b11a      	cbz	r2, ddd2 <_strtoll_l.constprop.0+0xea>
    ddca:	bba3      	cbnz	r3, de36 <_strtoll_l.constprop.0+0x14e>
    ddcc:	9b00      	ldr	r3, [sp, #0]
    ddce:	f8c3 a000 	str.w	sl, [r3]
    ddd2:	b005      	add	sp, #20
    ddd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddd8:	9b01      	ldr	r3, [sp, #4]
    ddda:	4573      	cmp	r3, lr
    dddc:	dabe      	bge.n	dd5c <_strtoll_l.constprop.0+0x74>
    ddde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dde2:	e7c7      	b.n	dd74 <_strtoll_l.constprop.0+0x8c>
    dde4:	9a03      	ldr	r2, [sp, #12]
    dde6:	2322      	movs	r3, #34	; 0x22
    dde8:	6013      	str	r3, [r2, #0]
    ddea:	9b00      	ldr	r3, [sp, #0]
    ddec:	b333      	cbz	r3, de3c <_strtoll_l.constprop.0+0x154>
    ddee:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
    ddf2:	4630      	mov	r0, r6
    ddf4:	4659      	mov	r1, fp
    ddf6:	e7e9      	b.n	ddcc <_strtoll_l.constprop.0+0xe4>
    ddf8:	2301      	movs	r3, #1
    ddfa:	782c      	ldrb	r4, [r5, #0]
    ddfc:	9302      	str	r3, [sp, #8]
    ddfe:	1c95      	adds	r5, r2, #2
    de00:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
    de04:	e78c      	b.n	dd20 <_strtoll_l.constprop.0+0x38>
    de06:	2c30      	cmp	r4, #48	; 0x30
    de08:	d104      	bne.n	de14 <_strtoll_l.constprop.0+0x12c>
    de0a:	782b      	ldrb	r3, [r5, #0]
    de0c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    de10:	2b58      	cmp	r3, #88	; 0x58
    de12:	d008      	beq.n	de26 <_strtoll_l.constprop.0+0x13e>
    de14:	46b8      	mov	r8, r7
    de16:	f04f 0900 	mov.w	r9, #0
    de1a:	e78e      	b.n	dd3a <_strtoll_l.constprop.0+0x52>
    de1c:	782b      	ldrb	r3, [r5, #0]
    de1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    de22:	2b58      	cmp	r3, #88	; 0x58
    de24:	d10f      	bne.n	de46 <_strtoll_l.constprop.0+0x15e>
    de26:	f04f 0810 	mov.w	r8, #16
    de2a:	786c      	ldrb	r4, [r5, #1]
    de2c:	f04f 0900 	mov.w	r9, #0
    de30:	3502      	adds	r5, #2
    de32:	4647      	mov	r7, r8
    de34:	e781      	b.n	dd3a <_strtoll_l.constprop.0+0x52>
    de36:	4606      	mov	r6, r0
    de38:	468b      	mov	fp, r1
    de3a:	e7d8      	b.n	ddee <_strtoll_l.constprop.0+0x106>
    de3c:	4630      	mov	r0, r6
    de3e:	4659      	mov	r1, fp
    de40:	b005      	add	sp, #20
    de42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de46:	f04f 0808 	mov.w	r8, #8
    de4a:	46b9      	mov	r9, r7
    de4c:	4647      	mov	r7, r8
    de4e:	e774      	b.n	dd3a <_strtoll_l.constprop.0+0x52>
    de50:	20000955 	.word	0x20000955

0000de54 <_strtoll_r>:
    de54:	f7ff bf48 	b.w	dce8 <_strtoll_l.constprop.0>

0000de58 <_strtoull_l.constprop.0>:
    de58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de5c:	b085      	sub	sp, #20
    de5e:	468b      	mov	fp, r1
    de60:	9201      	str	r2, [sp, #4]
    de62:	4a62      	ldr	r2, [pc, #392]	; (dfec <_strtoull_l.constprop.0+0x194>)
    de64:	9003      	str	r0, [sp, #12]
    de66:	461e      	mov	r6, r3
    de68:	460d      	mov	r5, r1
    de6a:	4629      	mov	r1, r5
    de6c:	f815 4b01 	ldrb.w	r4, [r5], #1
    de70:	5d13      	ldrb	r3, [r2, r4]
    de72:	f013 0308 	ands.w	r3, r3, #8
    de76:	d1f8      	bne.n	de6a <_strtoull_l.constprop.0+0x12>
    de78:	2c2d      	cmp	r4, #45	; 0x2d
    de7a:	f000 8082 	beq.w	df82 <_strtoull_l.constprop.0+0x12a>
    de7e:	2c2b      	cmp	r4, #43	; 0x2b
    de80:	bf03      	ittte	eq
    de82:	782c      	ldrbeq	r4, [r5, #0]
    de84:	9302      	streq	r3, [sp, #8]
    de86:	1c8d      	addeq	r5, r1, #2
    de88:	9302      	strne	r3, [sp, #8]
    de8a:	b1be      	cbz	r6, debc <_strtoull_l.constprop.0+0x64>
    de8c:	2e10      	cmp	r6, #16
    de8e:	d07d      	beq.n	df8c <_strtoull_l.constprop.0+0x134>
    de90:	ea4f 7ae6 	mov.w	sl, r6, asr #31
    de94:	4632      	mov	r2, r6
    de96:	4653      	mov	r3, sl
    de98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    de9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dea0:	f7f8 fbbc 	bl	661c <__aeabi_uldivmod>
    dea4:	4632      	mov	r2, r6
    dea6:	4607      	mov	r7, r0
    dea8:	4688      	mov	r8, r1
    deaa:	4653      	mov	r3, sl
    deac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    deb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    deb4:	46b1      	mov	r9, r6
    deb6:	f7f8 fbb1 	bl	661c <__aeabi_uldivmod>
    deba:	e00a      	b.n	ded2 <_strtoull_l.constprop.0+0x7a>
    debc:	2c30      	cmp	r4, #48	; 0x30
    debe:	d079      	beq.n	dfb4 <_strtoull_l.constprop.0+0x15c>
    dec0:	f04f 090a 	mov.w	r9, #10
    dec4:	f8df 8128 	ldr.w	r8, [pc, #296]	; dff0 <_strtoull_l.constprop.0+0x198>
    dec8:	46b2      	mov	sl, r6
    deca:	2205      	movs	r2, #5
    decc:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
    ded0:	464e      	mov	r6, r9
    ded2:	f04f 0c00 	mov.w	ip, #0
    ded6:	4660      	mov	r0, ip
    ded8:	4661      	mov	r1, ip
    deda:	e011      	b.n	df00 <_strtoull_l.constprop.0+0xa8>
    dedc:	4541      	cmp	r1, r8
    dede:	bf08      	it	eq
    dee0:	42b8      	cmpeq	r0, r7
    dee2:	d03e      	beq.n	df62 <_strtoull_l.constprop.0+0x10a>
    dee4:	fb00 f40a 	mul.w	r4, r0, sl
    dee8:	fb09 4101 	mla	r1, r9, r1, r4
    deec:	fba0 0409 	umull	r0, r4, r0, r9
    def0:	4421      	add	r1, r4
    def2:	1818      	adds	r0, r3, r0
    def4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
    def8:	f04f 0c01 	mov.w	ip, #1
    defc:	f815 4b01 	ldrb.w	r4, [r5], #1
    df00:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    df04:	2b09      	cmp	r3, #9
    df06:	d905      	bls.n	df14 <_strtoull_l.constprop.0+0xbc>
    df08:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    df0c:	2b19      	cmp	r3, #25
    df0e:	d80d      	bhi.n	df2c <_strtoull_l.constprop.0+0xd4>
    df10:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
    df14:	429e      	cmp	r6, r3
    df16:	dd11      	ble.n	df3c <_strtoull_l.constprop.0+0xe4>
    df18:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    df1c:	d0ee      	beq.n	defc <_strtoull_l.constprop.0+0xa4>
    df1e:	4287      	cmp	r7, r0
    df20:	eb78 0401 	sbcs.w	r4, r8, r1
    df24:	d2da      	bcs.n	dedc <_strtoull_l.constprop.0+0x84>
    df26:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    df2a:	e7e7      	b.n	defc <_strtoull_l.constprop.0+0xa4>
    df2c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    df30:	2b19      	cmp	r3, #25
    df32:	d803      	bhi.n	df3c <_strtoull_l.constprop.0+0xe4>
    df34:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
    df38:	429e      	cmp	r6, r3
    df3a:	dced      	bgt.n	df18 <_strtoull_l.constprop.0+0xc0>
    df3c:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    df40:	d014      	beq.n	df6c <_strtoull_l.constprop.0+0x114>
    df42:	9b02      	ldr	r3, [sp, #8]
    df44:	b113      	cbz	r3, df4c <_strtoull_l.constprop.0+0xf4>
    df46:	4240      	negs	r0, r0
    df48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    df4c:	9b01      	ldr	r3, [sp, #4]
    df4e:	b12b      	cbz	r3, df5c <_strtoull_l.constprop.0+0x104>
    df50:	f1bc 0f00 	cmp.w	ip, #0
    df54:	d112      	bne.n	df7c <_strtoull_l.constprop.0+0x124>
    df56:	9b01      	ldr	r3, [sp, #4]
    df58:	f8c3 b000 	str.w	fp, [r3]
    df5c:	b005      	add	sp, #20
    df5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df62:	4293      	cmp	r3, r2
    df64:	ddbe      	ble.n	dee4 <_strtoull_l.constprop.0+0x8c>
    df66:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    df6a:	e7c7      	b.n	defc <_strtoull_l.constprop.0+0xa4>
    df6c:	9a03      	ldr	r2, [sp, #12]
    df6e:	2322      	movs	r3, #34	; 0x22
    df70:	6013      	str	r3, [r2, #0]
    df72:	9b01      	ldr	r3, [sp, #4]
    df74:	4660      	mov	r0, ip
    df76:	4661      	mov	r1, ip
    df78:	2b00      	cmp	r3, #0
    df7a:	d0ef      	beq.n	df5c <_strtoull_l.constprop.0+0x104>
    df7c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
    df80:	e7e9      	b.n	df56 <_strtoull_l.constprop.0+0xfe>
    df82:	2301      	movs	r3, #1
    df84:	782c      	ldrb	r4, [r5, #0]
    df86:	9302      	str	r3, [sp, #8]
    df88:	1c8d      	adds	r5, r1, #2
    df8a:	e77e      	b.n	de8a <_strtoull_l.constprop.0+0x32>
    df8c:	2c30      	cmp	r4, #48	; 0x30
    df8e:	d123      	bne.n	dfd8 <_strtoull_l.constprop.0+0x180>
    df90:	782b      	ldrb	r3, [r5, #0]
    df92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    df96:	2b58      	cmp	r3, #88	; 0x58
    df98:	d11b      	bne.n	dfd2 <_strtoull_l.constprop.0+0x17a>
    df9a:	f04f 0910 	mov.w	r9, #16
    df9e:	786c      	ldrb	r4, [r5, #1]
    dfa0:	220f      	movs	r2, #15
    dfa2:	3502      	adds	r5, #2
    dfa4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    dfa8:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    dfac:	f04f 0a00 	mov.w	sl, #0
    dfb0:	464e      	mov	r6, r9
    dfb2:	e78e      	b.n	ded2 <_strtoull_l.constprop.0+0x7a>
    dfb4:	782b      	ldrb	r3, [r5, #0]
    dfb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    dfba:	2b58      	cmp	r3, #88	; 0x58
    dfbc:	d0ed      	beq.n	df9a <_strtoull_l.constprop.0+0x142>
    dfbe:	f04f 0908 	mov.w	r9, #8
    dfc2:	46b2      	mov	sl, r6
    dfc4:	2207      	movs	r2, #7
    dfc6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    dfca:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    dfce:	464e      	mov	r6, r9
    dfd0:	e77f      	b.n	ded2 <_strtoull_l.constprop.0+0x7a>
    dfd2:	f04f 0a00 	mov.w	sl, #0
    dfd6:	e75d      	b.n	de94 <_strtoull_l.constprop.0+0x3c>
    dfd8:	220f      	movs	r2, #15
    dfda:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    dfde:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    dfe2:	46b1      	mov	r9, r6
    dfe4:	f04f 0a00 	mov.w	sl, #0
    dfe8:	e773      	b.n	ded2 <_strtoull_l.constprop.0+0x7a>
    dfea:	bf00      	nop
    dfec:	20000955 	.word	0x20000955
    dff0:	19999999 	.word	0x19999999

0000dff4 <_strtoull_r>:
    dff4:	f7ff bf30 	b.w	de58 <_strtoull_l.constprop.0>
	...

0000e000 <memchr>:
    e000:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e004:	2a10      	cmp	r2, #16
    e006:	db2b      	blt.n	e060 <memchr+0x60>
    e008:	f010 0f07 	tst.w	r0, #7
    e00c:	d008      	beq.n	e020 <memchr+0x20>
    e00e:	f810 3b01 	ldrb.w	r3, [r0], #1
    e012:	3a01      	subs	r2, #1
    e014:	428b      	cmp	r3, r1
    e016:	d02d      	beq.n	e074 <memchr+0x74>
    e018:	f010 0f07 	tst.w	r0, #7
    e01c:	b342      	cbz	r2, e070 <memchr+0x70>
    e01e:	d1f6      	bne.n	e00e <memchr+0xe>
    e020:	b4f0      	push	{r4, r5, r6, r7}
    e022:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    e026:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    e02a:	f022 0407 	bic.w	r4, r2, #7
    e02e:	f07f 0700 	mvns.w	r7, #0
    e032:	2300      	movs	r3, #0
    e034:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    e038:	3c08      	subs	r4, #8
    e03a:	ea85 0501 	eor.w	r5, r5, r1
    e03e:	ea86 0601 	eor.w	r6, r6, r1
    e042:	fa85 f547 	uadd8	r5, r5, r7
    e046:	faa3 f587 	sel	r5, r3, r7
    e04a:	fa86 f647 	uadd8	r6, r6, r7
    e04e:	faa5 f687 	sel	r6, r5, r7
    e052:	b98e      	cbnz	r6, e078 <memchr+0x78>
    e054:	d1ee      	bne.n	e034 <memchr+0x34>
    e056:	bcf0      	pop	{r4, r5, r6, r7}
    e058:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e05c:	f002 0207 	and.w	r2, r2, #7
    e060:	b132      	cbz	r2, e070 <memchr+0x70>
    e062:	f810 3b01 	ldrb.w	r3, [r0], #1
    e066:	3a01      	subs	r2, #1
    e068:	ea83 0301 	eor.w	r3, r3, r1
    e06c:	b113      	cbz	r3, e074 <memchr+0x74>
    e06e:	d1f8      	bne.n	e062 <memchr+0x62>
    e070:	2000      	movs	r0, #0
    e072:	4770      	bx	lr
    e074:	3801      	subs	r0, #1
    e076:	4770      	bx	lr
    e078:	2d00      	cmp	r5, #0
    e07a:	bf06      	itte	eq
    e07c:	4635      	moveq	r5, r6
    e07e:	3803      	subeq	r0, #3
    e080:	3807      	subne	r0, #7
    e082:	f015 0f01 	tst.w	r5, #1
    e086:	d107      	bne.n	e098 <memchr+0x98>
    e088:	3001      	adds	r0, #1
    e08a:	f415 7f80 	tst.w	r5, #256	; 0x100
    e08e:	bf02      	ittt	eq
    e090:	3001      	addeq	r0, #1
    e092:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    e096:	3001      	addeq	r0, #1
    e098:	bcf0      	pop	{r4, r5, r6, r7}
    e09a:	3801      	subs	r0, #1
    e09c:	4770      	bx	lr
    e09e:	bf00      	nop

0000e0a0 <_mbrtowc_r>:
    e0a0:	b570      	push	{r4, r5, r6, lr}
    e0a2:	b082      	sub	sp, #8
    e0a4:	4604      	mov	r4, r0
    e0a6:	9d06      	ldr	r5, [sp, #24]
    e0a8:	b155      	cbz	r5, e0c0 <_mbrtowc_r+0x20>
    e0aa:	b16a      	cbz	r2, e0c8 <_mbrtowc_r+0x28>
    e0ac:	480f      	ldr	r0, [pc, #60]	; (e0ec <_mbrtowc_r+0x4c>)
    e0ae:	9500      	str	r5, [sp, #0]
    e0b0:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
    e0b4:	4620      	mov	r0, r4
    e0b6:	47b0      	blx	r6
    e0b8:	1c43      	adds	r3, r0, #1
    e0ba:	d010      	beq.n	e0de <_mbrtowc_r+0x3e>
    e0bc:	b002      	add	sp, #8
    e0be:	bd70      	pop	{r4, r5, r6, pc}
    e0c0:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
    e0c4:	2a00      	cmp	r2, #0
    e0c6:	d1f1      	bne.n	e0ac <_mbrtowc_r+0xc>
    e0c8:	4b08      	ldr	r3, [pc, #32]	; (e0ec <_mbrtowc_r+0x4c>)
    e0ca:	9500      	str	r5, [sp, #0]
    e0cc:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    e0d0:	4611      	mov	r1, r2
    e0d2:	2301      	movs	r3, #1
    e0d4:	4a06      	ldr	r2, [pc, #24]	; (e0f0 <_mbrtowc_r+0x50>)
    e0d6:	4620      	mov	r0, r4
    e0d8:	47b0      	blx	r6
    e0da:	1c43      	adds	r3, r0, #1
    e0dc:	d1ee      	bne.n	e0bc <_mbrtowc_r+0x1c>
    e0de:	2200      	movs	r2, #0
    e0e0:	238a      	movs	r3, #138	; 0x8a
    e0e2:	602a      	str	r2, [r5, #0]
    e0e4:	6023      	str	r3, [r4, #0]
    e0e6:	b002      	add	sp, #8
    e0e8:	bd70      	pop	{r4, r5, r6, pc}
    e0ea:	bf00      	nop
    e0ec:	20008638 	.word	0x20008638
    e0f0:	2000056c 	.word	0x2000056c

0000e0f4 <_wcrtomb_r>:
    e0f4:	b570      	push	{r4, r5, r6, lr}
    e0f6:	4605      	mov	r5, r0
    e0f8:	b084      	sub	sp, #16
    e0fa:	b15b      	cbz	r3, e114 <_wcrtomb_r+0x20>
    e0fc:	461c      	mov	r4, r3
    e0fe:	b169      	cbz	r1, e11c <_wcrtomb_r+0x28>
    e100:	4b0e      	ldr	r3, [pc, #56]	; (e13c <_wcrtomb_r+0x48>)
    e102:	4628      	mov	r0, r5
    e104:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    e108:	4623      	mov	r3, r4
    e10a:	47b0      	blx	r6
    e10c:	1c43      	adds	r3, r0, #1
    e10e:	d00f      	beq.n	e130 <_wcrtomb_r+0x3c>
    e110:	b004      	add	sp, #16
    e112:	bd70      	pop	{r4, r5, r6, pc}
    e114:	f500 7482 	add.w	r4, r0, #260	; 0x104
    e118:	2900      	cmp	r1, #0
    e11a:	d1f1      	bne.n	e100 <_wcrtomb_r+0xc>
    e11c:	4a07      	ldr	r2, [pc, #28]	; (e13c <_wcrtomb_r+0x48>)
    e11e:	4623      	mov	r3, r4
    e120:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    e124:	4628      	mov	r0, r5
    e126:	460a      	mov	r2, r1
    e128:	a901      	add	r1, sp, #4
    e12a:	47b0      	blx	r6
    e12c:	1c43      	adds	r3, r0, #1
    e12e:	d1ef      	bne.n	e110 <_wcrtomb_r+0x1c>
    e130:	2200      	movs	r2, #0
    e132:	238a      	movs	r3, #138	; 0x8a
    e134:	6022      	str	r2, [r4, #0]
    e136:	602b      	str	r3, [r5, #0]
    e138:	b004      	add	sp, #16
    e13a:	bd70      	pop	{r4, r5, r6, pc}
    e13c:	20008638 	.word	0x20008638

0000e140 <_wcsrtombs_r>:
    e140:	b510      	push	{r4, lr}
    e142:	b082      	sub	sp, #8
    e144:	9c04      	ldr	r4, [sp, #16]
    e146:	e9cd 3400 	strd	r3, r4, [sp]
    e14a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e14e:	f002 fd71 	bl	10c34 <_wcsnrtombs_r>
    e152:	b002      	add	sp, #8
    e154:	bd10      	pop	{r4, pc}
    e156:	bf00      	nop

0000e158 <iswspace>:
    e158:	2100      	movs	r1, #0
    e15a:	f000 b801 	b.w	e160 <iswspace_l>
    e15e:	bf00      	nop

0000e160 <iswspace_l>:
    e160:	b510      	push	{r4, lr}
    e162:	f000 f907 	bl	e374 <_jp2uc_l>
    e166:	4604      	mov	r4, r0
    e168:	f001 f87c 	bl	f264 <category>
    e16c:	f1a0 031a 	sub.w	r3, r0, #26
    e170:	b2db      	uxtb	r3, r3
    e172:	2b02      	cmp	r3, #2
    e174:	d906      	bls.n	e184 <iswspace_l+0x24>
    e176:	f1a4 0009 	sub.w	r0, r4, #9
    e17a:	2804      	cmp	r0, #4
    e17c:	bf8c      	ite	hi
    e17e:	2000      	movhi	r0, #0
    e180:	2001      	movls	r0, #1
    e182:	bd10      	pop	{r4, pc}
    e184:	2001      	movs	r0, #1
    e186:	bd10      	pop	{r4, pc}

0000e188 <frexp>:
    e188:	b430      	push	{r4, r5}
    e18a:	b082      	sub	sp, #8
    e18c:	ed8d 0b00 	vstr	d0, [sp]
    e190:	9a01      	ldr	r2, [sp, #4]
    e192:	4c19      	ldr	r4, [pc, #100]	; (e1f8 <frexp+0x70>)
    e194:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    e198:	2100      	movs	r1, #0
    e19a:	42a3      	cmp	r3, r4
    e19c:	6001      	str	r1, [r0, #0]
    e19e:	dc21      	bgt.n	e1e4 <frexp+0x5c>
    e1a0:	9c00      	ldr	r4, [sp, #0]
    e1a2:	431c      	orrs	r4, r3
    e1a4:	d01e      	beq.n	e1e4 <frexp+0x5c>
    e1a6:	4c15      	ldr	r4, [pc, #84]	; (e1fc <frexp+0x74>)
    e1a8:	4014      	ands	r4, r2
    e1aa:	b954      	cbnz	r4, e1c2 <frexp+0x3a>
    e1ac:	ed9f 7b10 	vldr	d7, [pc, #64]	; e1f0 <frexp+0x68>
    e1b0:	ee20 7b07 	vmul.f64	d7, d0, d7
    e1b4:	ed8d 7b00 	vstr	d7, [sp]
    e1b8:	9a01      	ldr	r2, [sp, #4]
    e1ba:	f06f 0135 	mvn.w	r1, #53	; 0x35
    e1be:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    e1c2:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    e1c6:	e9dd 4500 	ldrd	r4, r5, [sp]
    e1ca:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    e1ce:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    e1d2:	151b      	asrs	r3, r3, #20
    e1d4:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    e1d8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    e1dc:	e9cd 4500 	strd	r4, r5, [sp]
    e1e0:	440b      	add	r3, r1
    e1e2:	6003      	str	r3, [r0, #0]
    e1e4:	ed9d 0b00 	vldr	d0, [sp]
    e1e8:	b002      	add	sp, #8
    e1ea:	bc30      	pop	{r4, r5}
    e1ec:	4770      	bx	lr
    e1ee:	bf00      	nop
    e1f0:	00000000 	.word	0x00000000
    e1f4:	43500000 	.word	0x43500000
    e1f8:	7fefffff 	.word	0x7fefffff
    e1fc:	7ff00000 	.word	0x7ff00000

0000e200 <__assert_func>:
    e200:	b500      	push	{lr}
    e202:	4c0b      	ldr	r4, [pc, #44]	; (e230 <__assert_func+0x30>)
    e204:	6825      	ldr	r5, [r4, #0]
    e206:	4614      	mov	r4, r2
    e208:	68ee      	ldr	r6, [r5, #12]
    e20a:	461a      	mov	r2, r3
    e20c:	b085      	sub	sp, #20
    e20e:	4603      	mov	r3, r0
    e210:	460d      	mov	r5, r1
    e212:	b14c      	cbz	r4, e228 <__assert_func+0x28>
    e214:	4907      	ldr	r1, [pc, #28]	; (e234 <__assert_func+0x34>)
    e216:	9500      	str	r5, [sp, #0]
    e218:	e9cd 1401 	strd	r1, r4, [sp, #4]
    e21c:	4630      	mov	r0, r6
    e21e:	4906      	ldr	r1, [pc, #24]	; (e238 <__assert_func+0x38>)
    e220:	f001 f850 	bl	f2c4 <fiprintf>
    e224:	f7f7 f8e2 	bl	53ec <abort>
    e228:	4904      	ldr	r1, [pc, #16]	; (e23c <__assert_func+0x3c>)
    e22a:	460c      	mov	r4, r1
    e22c:	e7f3      	b.n	e216 <__assert_func+0x16>
    e22e:	bf00      	nop
    e230:	20008bc0 	.word	0x20008bc0
    e234:	20000728 	.word	0x20000728
    e238:	20000738 	.word	0x20000738
    e23c:	2000056c 	.word	0x2000056c

0000e240 <__jp2uc>:
    e240:	2902      	cmp	r1, #2
    e242:	d032      	beq.n	e2aa <__jp2uc+0x6a>
    e244:	2903      	cmp	r1, #3
    e246:	f3c0 2307 	ubfx	r3, r0, #8, #8
    e24a:	bf1d      	ittte	ne
    e24c:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
    e250:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
    e254:	b2d2      	uxtbne	r2, r2
    e256:	b2c2      	uxtbeq	r2, r0
    e258:	f103 0150 	add.w	r1, r3, #80	; 0x50
    e25c:	b2c9      	uxtb	r1, r1
    e25e:	291f      	cmp	r1, #31
    e260:	d806      	bhi.n	e270 <__jp2uc+0x30>
    e262:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
    e266:	4288      	cmp	r0, r1
    e268:	d969      	bls.n	e33e <__jp2uc+0xfe>
    e26a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e26e:	4770      	bx	lr
    e270:	f103 0130 	add.w	r1, r3, #48	; 0x30
    e274:	b2c9      	uxtb	r1, r1
    e276:	2924      	cmp	r1, #36	; 0x24
    e278:	d80e      	bhi.n	e298 <__jp2uc+0x58>
    e27a:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
    e27e:	4288      	cmp	r0, r1
    e280:	d8f3      	bhi.n	e26a <__jp2uc+0x2a>
    e282:	3bd0      	subs	r3, #208	; 0xd0
    e284:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
    e288:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    e28c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    e290:	4a30      	ldr	r2, [pc, #192]	; (e354 <__jp2uc+0x114>)
    e292:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    e296:	4770      	bx	lr
    e298:	3ba1      	subs	r3, #161	; 0xa1
    e29a:	2b07      	cmp	r3, #7
    e29c:	d8e5      	bhi.n	e26a <__jp2uc+0x2a>
    e29e:	e8df f003 	tbb	[pc, r3]
    e2a2:	3e48      	.short	0x3e48
    e2a4:	25292e34 	.word	0x25292e34
    e2a8:	1921      	.short	0x1921
    e2aa:	b2c2      	uxtb	r2, r0
    e2ac:	2a9e      	cmp	r2, #158	; 0x9e
    e2ae:	f3c0 2107 	ubfx	r1, r0, #8, #8
    e2b2:	d90b      	bls.n	e2cc <__jp2uc+0x8c>
    e2b4:	3223      	adds	r2, #35	; 0x23
    e2b6:	b2d2      	uxtb	r2, r2
    e2b8:	2380      	movs	r3, #128	; 0x80
    e2ba:	299f      	cmp	r1, #159	; 0x9f
    e2bc:	bf94      	ite	ls
    e2be:	3970      	subls	r1, #112	; 0x70
    e2c0:	3150      	addhi	r1, #80	; 0x50
    e2c2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    e2c6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    e2ca:	e7c5      	b.n	e258 <__jp2uc+0x18>
    e2cc:	3a7e      	subs	r2, #126	; 0x7e
    e2ce:	b2d2      	uxtb	r2, r2
    e2d0:	237f      	movs	r3, #127	; 0x7f
    e2d2:	e7f2      	b.n	e2ba <__jp2uc+0x7a>
    e2d4:	2ac0      	cmp	r2, #192	; 0xc0
    e2d6:	d8c8      	bhi.n	e26a <__jp2uc+0x2a>
    e2d8:	4b1f      	ldr	r3, [pc, #124]	; (e358 <__jp2uc+0x118>)
    e2da:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    e2de:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    e2e2:	4770      	bx	lr
    e2e4:	2af1      	cmp	r2, #241	; 0xf1
    e2e6:	d8c0      	bhi.n	e26a <__jp2uc+0x2a>
    e2e8:	4b1c      	ldr	r3, [pc, #112]	; (e35c <__jp2uc+0x11c>)
    e2ea:	e019      	b.n	e320 <__jp2uc+0xe0>
    e2ec:	2ad8      	cmp	r2, #216	; 0xd8
    e2ee:	d8bc      	bhi.n	e26a <__jp2uc+0x2a>
    e2f0:	4b1b      	ldr	r3, [pc, #108]	; (e360 <__jp2uc+0x120>)
    e2f2:	e015      	b.n	e320 <__jp2uc+0xe0>
    e2f4:	2af6      	cmp	r2, #246	; 0xf6
    e2f6:	d8b8      	bhi.n	e26a <__jp2uc+0x2a>
    e2f8:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
    e2fc:	4770      	bx	lr
    e2fe:	2af3      	cmp	r2, #243	; 0xf3
    e300:	d8b3      	bhi.n	e26a <__jp2uc+0x2a>
    e302:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
    e306:	3020      	adds	r0, #32
    e308:	4770      	bx	lr
    e30a:	4b16      	ldr	r3, [pc, #88]	; (e364 <__jp2uc+0x124>)
    e30c:	4413      	add	r3, r2
    e30e:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
    e312:	2b00      	cmp	r3, #0
    e314:	d0a9      	beq.n	e26a <__jp2uc+0x2a>
    e316:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
    e31a:	3060      	adds	r0, #96	; 0x60
    e31c:	4770      	bx	lr
    e31e:	4b12      	ldr	r3, [pc, #72]	; (e368 <__jp2uc+0x128>)
    e320:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    e324:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    e328:	2800      	cmp	r0, #0
    e32a:	bf08      	it	eq
    e32c:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
    e330:	4770      	bx	lr
    e332:	4b0e      	ldr	r3, [pc, #56]	; (e36c <__jp2uc+0x12c>)
    e334:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    e338:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    e33c:	4770      	bx	lr
    e33e:	3bb0      	subs	r3, #176	; 0xb0
    e340:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
    e344:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    e348:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    e34c:	4a08      	ldr	r2, [pc, #32]	; (e370 <__jp2uc+0x130>)
    e34e:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    e352:	4770      	bx	lr
    e354:	20005aec 	.word	0x20005aec
    e358:	20000e14 	.word	0x20000e14
    e35c:	20000d70 	.word	0x20000d70
    e360:	20000d00 	.word	0x20000d00
    e364:	20000ca4 	.word	0x20000ca4
    e368:	20000be8 	.word	0x20000be8
    e36c:	20000b2c 	.word	0x20000b2c
    e370:	20000e54 	.word	0x20000e54

0000e374 <_jp2uc_l>:
    e374:	b538      	push	{r3, r4, r5, lr}
    e376:	4605      	mov	r5, r0
    e378:	b1b9      	cbz	r1, e3aa <_jp2uc_l+0x36>
    e37a:	f501 7495 	add.w	r4, r1, #298	; 0x12a
    e37e:	4912      	ldr	r1, [pc, #72]	; (e3c8 <_jp2uc_l+0x54>)
    e380:	4620      	mov	r0, r4
    e382:	f7fa fb01 	bl	8988 <strcmp>
    e386:	b928      	cbnz	r0, e394 <_jp2uc_l+0x20>
    e388:	4628      	mov	r0, r5
    e38a:	2101      	movs	r1, #1
    e38c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e390:	f7ff bf56 	b.w	e240 <__jp2uc>
    e394:	490d      	ldr	r1, [pc, #52]	; (e3cc <_jp2uc_l+0x58>)
    e396:	4620      	mov	r0, r4
    e398:	f7fa faf6 	bl	8988 <strcmp>
    e39c:	b938      	cbnz	r0, e3ae <_jp2uc_l+0x3a>
    e39e:	4628      	mov	r0, r5
    e3a0:	2102      	movs	r1, #2
    e3a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e3a6:	f7ff bf4b 	b.w	e240 <__jp2uc>
    e3aa:	4c09      	ldr	r4, [pc, #36]	; (e3d0 <_jp2uc_l+0x5c>)
    e3ac:	e7e7      	b.n	e37e <_jp2uc_l+0xa>
    e3ae:	4909      	ldr	r1, [pc, #36]	; (e3d4 <_jp2uc_l+0x60>)
    e3b0:	4620      	mov	r0, r4
    e3b2:	f7fa fae9 	bl	8988 <strcmp>
    e3b6:	b928      	cbnz	r0, e3c4 <_jp2uc_l+0x50>
    e3b8:	4628      	mov	r0, r5
    e3ba:	2103      	movs	r1, #3
    e3bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e3c0:	f7ff bf3e 	b.w	e240 <__jp2uc>
    e3c4:	4628      	mov	r0, r5
    e3c6:	bd38      	pop	{r3, r4, r5, pc}
    e3c8:	20000acc 	.word	0x20000acc
    e3cc:	20000ad0 	.word	0x20000ad0
    e3d0:	20008762 	.word	0x20008762
    e3d4:	20000ad8 	.word	0x20000ad8

0000e3d8 <_calloc_r>:
    e3d8:	b538      	push	{r3, r4, r5, lr}
    e3da:	fba1 1402 	umull	r1, r4, r1, r2
    e3de:	bb8c      	cbnz	r4, e444 <_calloc_r+0x6c>
    e3e0:	f7f8 fab6 	bl	6950 <_malloc_r>
    e3e4:	4605      	mov	r5, r0
    e3e6:	b1e0      	cbz	r0, e422 <_calloc_r+0x4a>
    e3e8:	f850 2c04 	ldr.w	r2, [r0, #-4]
    e3ec:	f022 0203 	bic.w	r2, r2, #3
    e3f0:	3a04      	subs	r2, #4
    e3f2:	2a24      	cmp	r2, #36	; 0x24
    e3f4:	d817      	bhi.n	e426 <_calloc_r+0x4e>
    e3f6:	2a13      	cmp	r2, #19
    e3f8:	d91a      	bls.n	e430 <_calloc_r+0x58>
    e3fa:	2a1b      	cmp	r2, #27
    e3fc:	e9c0 4400 	strd	r4, r4, [r0]
    e400:	d91d      	bls.n	e43e <_calloc_r+0x66>
    e402:	2a24      	cmp	r2, #36	; 0x24
    e404:	bf14      	ite	ne
    e406:	f100 0210 	addne.w	r2, r0, #16
    e40a:	f100 0218 	addeq.w	r2, r0, #24
    e40e:	f04f 0300 	mov.w	r3, #0
    e412:	e9c0 4402 	strd	r4, r4, [r0, #8]
    e416:	bf04      	itt	eq
    e418:	6104      	streq	r4, [r0, #16]
    e41a:	6144      	streq	r4, [r0, #20]
    e41c:	e9c2 3300 	strd	r3, r3, [r2]
    e420:	6093      	str	r3, [r2, #8]
    e422:	4628      	mov	r0, r5
    e424:	bd38      	pop	{r3, r4, r5, pc}
    e426:	4621      	mov	r1, r4
    e428:	f7fa f95e 	bl	86e8 <memset>
    e42c:	4628      	mov	r0, r5
    e42e:	bd38      	pop	{r3, r4, r5, pc}
    e430:	4602      	mov	r2, r0
    e432:	2300      	movs	r3, #0
    e434:	e9c2 3300 	strd	r3, r3, [r2]
    e438:	6093      	str	r3, [r2, #8]
    e43a:	4628      	mov	r0, r5
    e43c:	bd38      	pop	{r3, r4, r5, pc}
    e43e:	f100 0208 	add.w	r2, r0, #8
    e442:	e7f6      	b.n	e432 <_calloc_r+0x5a>
    e444:	f7fa fa8c 	bl	8960 <__errno>
    e448:	230c      	movs	r3, #12
    e44a:	2500      	movs	r5, #0
    e44c:	6003      	str	r3, [r0, #0]
    e44e:	e7e8      	b.n	e422 <_calloc_r+0x4a>

0000e450 <quorem>:
    e450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e454:	6903      	ldr	r3, [r0, #16]
    e456:	690c      	ldr	r4, [r1, #16]
    e458:	42a3      	cmp	r3, r4
    e45a:	b083      	sub	sp, #12
    e45c:	f2c0 8087 	blt.w	e56e <quorem+0x11e>
    e460:	3c01      	subs	r4, #1
    e462:	f101 0514 	add.w	r5, r1, #20
    e466:	00a3      	lsls	r3, r4, #2
    e468:	f100 0814 	add.w	r8, r0, #20
    e46c:	9300      	str	r3, [sp, #0]
    e46e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    e472:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    e476:	3301      	adds	r3, #1
    e478:	4681      	mov	r9, r0
    e47a:	429a      	cmp	r2, r3
    e47c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    e480:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    e484:	9001      	str	r0, [sp, #4]
    e486:	fbb2 f6f3 	udiv	r6, r2, r3
    e48a:	d33b      	bcc.n	e504 <quorem+0xb4>
    e48c:	f04f 0c00 	mov.w	ip, #0
    e490:	46ae      	mov	lr, r5
    e492:	4640      	mov	r0, r8
    e494:	46e2      	mov	sl, ip
    e496:	4663      	mov	r3, ip
    e498:	f85e bb04 	ldr.w	fp, [lr], #4
    e49c:	6802      	ldr	r2, [r0, #0]
    e49e:	fa1f fc8b 	uxth.w	ip, fp
    e4a2:	fb06 330c 	mla	r3, r6, ip, r3
    e4a6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    e4aa:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    e4ae:	fb06 cc0b 	mla	ip, r6, fp, ip
    e4b2:	b29b      	uxth	r3, r3
    e4b4:	ebaa 0303 	sub.w	r3, sl, r3
    e4b8:	fa1f fa8c 	uxth.w	sl, ip
    e4bc:	fa13 f382 	uxtah	r3, r3, r2
    e4c0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    e4c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
    e4c8:	b29b      	uxth	r3, r3
    e4ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    e4ce:	4577      	cmp	r7, lr
    e4d0:	f840 3b04 	str.w	r3, [r0], #4
    e4d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
    e4d8:	ea4f 431c 	mov.w	r3, ip, lsr #16
    e4dc:	d2dc      	bcs.n	e498 <quorem+0x48>
    e4de:	9b00      	ldr	r3, [sp, #0]
    e4e0:	f858 3003 	ldr.w	r3, [r8, r3]
    e4e4:	b973      	cbnz	r3, e504 <quorem+0xb4>
    e4e6:	9b01      	ldr	r3, [sp, #4]
    e4e8:	3b04      	subs	r3, #4
    e4ea:	4598      	cmp	r8, r3
    e4ec:	d304      	bcc.n	e4f8 <quorem+0xa8>
    e4ee:	e007      	b.n	e500 <quorem+0xb0>
    e4f0:	4598      	cmp	r8, r3
    e4f2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    e4f6:	d203      	bcs.n	e500 <quorem+0xb0>
    e4f8:	f853 2904 	ldr.w	r2, [r3], #-4
    e4fc:	2a00      	cmp	r2, #0
    e4fe:	d0f7      	beq.n	e4f0 <quorem+0xa0>
    e500:	f8c9 4010 	str.w	r4, [r9, #16]
    e504:	4648      	mov	r0, r9
    e506:	f7fe ff23 	bl	d350 <__mcmp>
    e50a:	2800      	cmp	r0, #0
    e50c:	db2b      	blt.n	e566 <quorem+0x116>
    e50e:	3601      	adds	r6, #1
    e510:	4641      	mov	r1, r8
    e512:	2300      	movs	r3, #0
    e514:	f855 0b04 	ldr.w	r0, [r5], #4
    e518:	f8d1 c000 	ldr.w	ip, [r1]
    e51c:	b282      	uxth	r2, r0
    e51e:	1a9a      	subs	r2, r3, r2
    e520:	0c03      	lsrs	r3, r0, #16
    e522:	fa12 f28c 	uxtah	r2, r2, ip
    e526:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    e52a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    e52e:	b292      	uxth	r2, r2
    e530:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    e534:	42af      	cmp	r7, r5
    e536:	f841 2b04 	str.w	r2, [r1], #4
    e53a:	ea4f 4323 	mov.w	r3, r3, asr #16
    e53e:	d2e9      	bcs.n	e514 <quorem+0xc4>
    e540:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    e544:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    e548:	b96a      	cbnz	r2, e566 <quorem+0x116>
    e54a:	3b04      	subs	r3, #4
    e54c:	4598      	cmp	r8, r3
    e54e:	d304      	bcc.n	e55a <quorem+0x10a>
    e550:	e007      	b.n	e562 <quorem+0x112>
    e552:	4598      	cmp	r8, r3
    e554:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    e558:	d203      	bcs.n	e562 <quorem+0x112>
    e55a:	f853 2904 	ldr.w	r2, [r3], #-4
    e55e:	2a00      	cmp	r2, #0
    e560:	d0f7      	beq.n	e552 <quorem+0x102>
    e562:	f8c9 4010 	str.w	r4, [r9, #16]
    e566:	4630      	mov	r0, r6
    e568:	b003      	add	sp, #12
    e56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e56e:	2000      	movs	r0, #0
    e570:	b003      	add	sp, #12
    e572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e576:	bf00      	nop

0000e578 <_dtoa_r>:
    e578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e57c:	ed2d 8b02 	vpush	{d8}
    e580:	b08f      	sub	sp, #60	; 0x3c
    e582:	ed8d 0b02 	vstr	d0, [sp, #8]
    e586:	9101      	str	r1, [sp, #4]
    e588:	6b81      	ldr	r1, [r0, #56]	; 0x38
    e58a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    e58c:	9305      	str	r3, [sp, #20]
    e58e:	ec57 6b10 	vmov	r6, r7, d0
    e592:	4604      	mov	r4, r0
    e594:	4693      	mov	fp, r2
    e596:	b141      	cbz	r1, e5aa <_dtoa_r+0x32>
    e598:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    e59a:	604a      	str	r2, [r1, #4]
    e59c:	2301      	movs	r3, #1
    e59e:	4093      	lsls	r3, r2
    e5a0:	608b      	str	r3, [r1, #8]
    e5a2:	f7fe fc1d 	bl	cde0 <_Bfree>
    e5a6:	2300      	movs	r3, #0
    e5a8:	63a3      	str	r3, [r4, #56]	; 0x38
    e5aa:	f1b7 0800 	subs.w	r8, r7, #0
    e5ae:	bfb4      	ite	lt
    e5b0:	2301      	movlt	r3, #1
    e5b2:	2300      	movge	r3, #0
    e5b4:	602b      	str	r3, [r5, #0]
    e5b6:	4bbe      	ldr	r3, [pc, #760]	; (e8b0 <_dtoa_r+0x338>)
    e5b8:	bfbc      	itt	lt
    e5ba:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    e5be:	f8cd 800c 	strlt.w	r8, [sp, #12]
    e5c2:	ea33 0308 	bics.w	r3, r3, r8
    e5c6:	f000 809f 	beq.w	e708 <_dtoa_r+0x190>
    e5ca:	ed9d 8b02 	vldr	d8, [sp, #8]
    e5ce:	eeb5 8b40 	vcmp.f64	d8, #0.0
    e5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e5d6:	d111      	bne.n	e5fc <_dtoa_r+0x84>
    e5d8:	9a05      	ldr	r2, [sp, #20]
    e5da:	2301      	movs	r3, #1
    e5dc:	6013      	str	r3, [r2, #0]
    e5de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e5e0:	2b00      	cmp	r3, #0
    e5e2:	f000 823f 	beq.w	ea64 <_dtoa_r+0x4ec>
    e5e6:	4bb3      	ldr	r3, [pc, #716]	; (e8b4 <_dtoa_r+0x33c>)
    e5e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    e5ea:	6013      	str	r3, [r2, #0]
    e5ec:	3b01      	subs	r3, #1
    e5ee:	9300      	str	r3, [sp, #0]
    e5f0:	9800      	ldr	r0, [sp, #0]
    e5f2:	b00f      	add	sp, #60	; 0x3c
    e5f4:	ecbd 8b02 	vpop	{d8}
    e5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e5fc:	aa0c      	add	r2, sp, #48	; 0x30
    e5fe:	a90d      	add	r1, sp, #52	; 0x34
    e600:	4620      	mov	r0, r4
    e602:	eeb0 0b48 	vmov.f64	d0, d8
    e606:	f7ff f803 	bl	d610 <__d2b>
    e60a:	ea5f 5318 	movs.w	r3, r8, lsr #20
    e60e:	4605      	mov	r5, r0
    e610:	f040 8092 	bne.w	e738 <_dtoa_r+0x1c0>
    e614:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    e618:	440b      	add	r3, r1
    e61a:	f203 4232 	addw	r2, r3, #1074	; 0x432
    e61e:	2a20      	cmp	r2, #32
    e620:	f340 82fa 	ble.w	ec18 <_dtoa_r+0x6a0>
    e624:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    e628:	fa08 f802 	lsl.w	r8, r8, r2
    e62c:	f203 4212 	addw	r2, r3, #1042	; 0x412
    e630:	40d6      	lsrs	r6, r2
    e632:	ea48 0206 	orr.w	r2, r8, r6
    e636:	ee07 2a10 	vmov	s14, r2
    e63a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    e63e:	1e58      	subs	r0, r3, #1
    e640:	ee17 6a90 	vmov	r6, s15
    e644:	ec53 2b17 	vmov	r2, r3, d7
    e648:	f04f 0a01 	mov.w	sl, #1
    e64c:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    e650:	ed9f 3b91 	vldr	d3, [pc, #580]	; e898 <_dtoa_r+0x320>
    e654:	ed9f 7b92 	vldr	d7, [pc, #584]	; e8a0 <_dtoa_r+0x328>
    e658:	ed9f 5b93 	vldr	d5, [pc, #588]	; e8a8 <_dtoa_r+0x330>
    e65c:	ee06 0a90 	vmov	s13, r0
    e660:	ec43 2b12 	vmov	d2, r2, r3
    e664:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    e668:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    e66c:	ee32 6b46 	vsub.f64	d6, d2, d6
    e670:	eea6 7b03 	vfma.f64	d7, d6, d3
    e674:	eea4 7b05 	vfma.f64	d7, d4, d5
    e678:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    e67c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    e680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e684:	ee16 7a90 	vmov	r7, s13
    e688:	d508      	bpl.n	e69c <_dtoa_r+0x124>
    e68a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    e68e:	eeb4 6b47 	vcmp.f64	d6, d7
    e692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e696:	bf18      	it	ne
    e698:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
    e69c:	2f16      	cmp	r7, #22
    e69e:	f200 8145 	bhi.w	e92c <_dtoa_r+0x3b4>
    e6a2:	4b85      	ldr	r3, [pc, #532]	; (e8b8 <_dtoa_r+0x340>)
    e6a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    e6a8:	ed93 7b00 	vldr	d7, [r3]
    e6ac:	eeb4 8bc7 	vcmpe.f64	d8, d7
    e6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e6b4:	d557      	bpl.n	e766 <_dtoa_r+0x1ee>
    e6b6:	1a09      	subs	r1, r1, r0
    e6b8:	2300      	movs	r3, #0
    e6ba:	f1b1 0801 	subs.w	r8, r1, #1
    e6be:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    e6c2:	930a      	str	r3, [sp, #40]	; 0x28
    e6c4:	f100 8139 	bmi.w	e93a <_dtoa_r+0x3c2>
    e6c8:	2300      	movs	r3, #0
    e6ca:	9306      	str	r3, [sp, #24]
    e6cc:	2f00      	cmp	r7, #0
    e6ce:	da52      	bge.n	e776 <_dtoa_r+0x1fe>
    e6d0:	9b06      	ldr	r3, [sp, #24]
    e6d2:	9704      	str	r7, [sp, #16]
    e6d4:	1bdb      	subs	r3, r3, r7
    e6d6:	9306      	str	r3, [sp, #24]
    e6d8:	427b      	negs	r3, r7
    e6da:	9308      	str	r3, [sp, #32]
    e6dc:	9b01      	ldr	r3, [sp, #4]
    e6de:	2b09      	cmp	r3, #9
    e6e0:	f04f 0700 	mov.w	r7, #0
    e6e4:	d84e      	bhi.n	e784 <_dtoa_r+0x20c>
    e6e6:	2b05      	cmp	r3, #5
    e6e8:	f340 829d 	ble.w	ec26 <_dtoa_r+0x6ae>
    e6ec:	3b04      	subs	r3, #4
    e6ee:	9301      	str	r3, [sp, #4]
    e6f0:	2600      	movs	r6, #0
    e6f2:	9b01      	ldr	r3, [sp, #4]
    e6f4:	1e9a      	subs	r2, r3, #2
    e6f6:	2a03      	cmp	r2, #3
    e6f8:	f200 8125 	bhi.w	e946 <_dtoa_r+0x3ce>
    e6fc:	e8df f012 	tbh	[pc, r2, lsl #1]
    e700:	03a703aa 	.word	0x03a703aa
    e704:	037e039d 	.word	0x037e039d
    e708:	9a05      	ldr	r2, [sp, #20]
    e70a:	f3c8 0813 	ubfx	r8, r8, #0, #20
    e70e:	f242 730f 	movw	r3, #9999	; 0x270f
    e712:	ea58 0806 	orrs.w	r8, r8, r6
    e716:	6013      	str	r3, [r2, #0]
    e718:	d11e      	bne.n	e758 <_dtoa_r+0x1e0>
    e71a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e71c:	2b00      	cmp	r3, #0
    e71e:	f000 8591 	beq.w	f244 <_dtoa_r+0xccc>
    e722:	4b66      	ldr	r3, [pc, #408]	; (e8bc <_dtoa_r+0x344>)
    e724:	9300      	str	r3, [sp, #0]
    e726:	3308      	adds	r3, #8
    e728:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    e72a:	9800      	ldr	r0, [sp, #0]
    e72c:	6013      	str	r3, [r2, #0]
    e72e:	b00f      	add	sp, #60	; 0x3c
    e730:	ecbd 8b02 	vpop	{d8}
    e734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e738:	ee18 6a90 	vmov	r6, s17
    e73c:	f3c6 0613 	ubfx	r6, r6, #0, #20
    e740:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    e744:	ec53 2b18 	vmov	r2, r3, d8
    e748:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    e74c:	990c      	ldr	r1, [sp, #48]	; 0x30
    e74e:	f04f 0a00 	mov.w	sl, #0
    e752:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    e756:	e77b      	b.n	e650 <_dtoa_r+0xd8>
    e758:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e75a:	2b00      	cmp	r3, #0
    e75c:	f040 833b 	bne.w	edd6 <_dtoa_r+0x85e>
    e760:	4b57      	ldr	r3, [pc, #348]	; (e8c0 <_dtoa_r+0x348>)
    e762:	9300      	str	r3, [sp, #0]
    e764:	e744      	b.n	e5f0 <_dtoa_r+0x78>
    e766:	1a09      	subs	r1, r1, r0
    e768:	2300      	movs	r3, #0
    e76a:	f1b1 0801 	subs.w	r8, r1, #1
    e76e:	930a      	str	r3, [sp, #40]	; 0x28
    e770:	f100 80e3 	bmi.w	e93a <_dtoa_r+0x3c2>
    e774:	9306      	str	r3, [sp, #24]
    e776:	2300      	movs	r3, #0
    e778:	9308      	str	r3, [sp, #32]
    e77a:	9b01      	ldr	r3, [sp, #4]
    e77c:	9704      	str	r7, [sp, #16]
    e77e:	2b09      	cmp	r3, #9
    e780:	44b8      	add	r8, r7
    e782:	d9b0      	bls.n	e6e6 <_dtoa_r+0x16e>
    e784:	2300      	movs	r3, #0
    e786:	2601      	movs	r6, #1
    e788:	9301      	str	r3, [sp, #4]
    e78a:	9607      	str	r6, [sp, #28]
    e78c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    e790:	469b      	mov	fp, r3
    e792:	2100      	movs	r1, #0
    e794:	63e1      	str	r1, [r4, #60]	; 0x3c
    e796:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    e79a:	4620      	mov	r0, r4
    e79c:	f7fe fafa 	bl	cd94 <_Balloc>
    e7a0:	9000      	str	r0, [sp, #0]
    e7a2:	2800      	cmp	r0, #0
    e7a4:	f000 8540 	beq.w	f228 <_dtoa_r+0xcb0>
    e7a8:	9b00      	ldr	r3, [sp, #0]
    e7aa:	63a3      	str	r3, [r4, #56]	; 0x38
    e7ac:	f1b9 0f0e 	cmp.w	r9, #14
    e7b0:	f200 80dc 	bhi.w	e96c <_dtoa_r+0x3f4>
    e7b4:	2e00      	cmp	r6, #0
    e7b6:	f000 80d9 	beq.w	e96c <_dtoa_r+0x3f4>
    e7ba:	9b04      	ldr	r3, [sp, #16]
    e7bc:	2b00      	cmp	r3, #0
    e7be:	f340 83de 	ble.w	ef7e <_dtoa_r+0xa06>
    e7c2:	4a3d      	ldr	r2, [pc, #244]	; (e8b8 <_dtoa_r+0x340>)
    e7c4:	f003 010f 	and.w	r1, r3, #15
    e7c8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    e7cc:	ed92 7b00 	vldr	d7, [r2]
    e7d0:	111a      	asrs	r2, r3, #4
    e7d2:	05db      	lsls	r3, r3, #23
    e7d4:	f140 8382 	bpl.w	eedc <_dtoa_r+0x964>
    e7d8:	493a      	ldr	r1, [pc, #232]	; (e8c4 <_dtoa_r+0x34c>)
    e7da:	ed91 6b08 	vldr	d6, [r1, #32]
    e7de:	f002 020f 	and.w	r2, r2, #15
    e7e2:	2003      	movs	r0, #3
    e7e4:	ee88 5b06 	vdiv.f64	d5, d8, d6
    e7e8:	b15a      	cbz	r2, e802 <_dtoa_r+0x28a>
    e7ea:	4936      	ldr	r1, [pc, #216]	; (e8c4 <_dtoa_r+0x34c>)
    e7ec:	07d6      	lsls	r6, r2, #31
    e7ee:	d504      	bpl.n	e7fa <_dtoa_r+0x282>
    e7f0:	ed91 6b00 	vldr	d6, [r1]
    e7f4:	3001      	adds	r0, #1
    e7f6:	ee27 7b06 	vmul.f64	d7, d7, d6
    e7fa:	1052      	asrs	r2, r2, #1
    e7fc:	f101 0108 	add.w	r1, r1, #8
    e800:	d1f4      	bne.n	e7ec <_dtoa_r+0x274>
    e802:	ee85 6b07 	vdiv.f64	d6, d5, d7
    e806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e808:	b13b      	cbz	r3, e81a <_dtoa_r+0x2a2>
    e80a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    e80e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    e812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e816:	f100 84ae 	bmi.w	f176 <_dtoa_r+0xbfe>
    e81a:	ee07 0a90 	vmov	s15, r0
    e81e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    e822:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    e826:	eea5 7b06 	vfma.f64	d7, d5, d6
    e82a:	ee17 2a90 	vmov	r2, s15
    e82e:	ec51 0b17 	vmov	r0, r1, d7
    e832:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    e836:	f1b9 0f00 	cmp.w	r9, #0
    e83a:	f000 8388 	beq.w	ef4e <_dtoa_r+0x9d6>
    e83e:	9e04      	ldr	r6, [sp, #16]
    e840:	464a      	mov	r2, r9
    e842:	9b07      	ldr	r3, [sp, #28]
    e844:	2b00      	cmp	r3, #0
    e846:	f000 8447 	beq.w	f0d8 <_dtoa_r+0xb60>
    e84a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    e84e:	4b1a      	ldr	r3, [pc, #104]	; (e8b8 <_dtoa_r+0x340>)
    e850:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    e854:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    e858:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    e85c:	ee36 7b47 	vsub.f64	d7, d6, d7
    e860:	ed1c 6b02 	vldr	d6, [ip, #-8]
    e864:	ee83 5b06 	vdiv.f64	d5, d3, d6
    e868:	ec41 0b16 	vmov	d6, r0, r1
    e86c:	ee14 0a90 	vmov	r0, s9
    e870:	ee35 5b46 	vsub.f64	d5, d5, d6
    e874:	9900      	ldr	r1, [sp, #0]
    e876:	eeb4 5bc7 	vcmpe.f64	d5, d7
    e87a:	3030      	adds	r0, #48	; 0x30
    e87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e880:	f801 0b01 	strb.w	r0, [r1], #1
    e884:	f300 84ac 	bgt.w	f1e0 <_dtoa_r+0xc68>
    e888:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    e88c:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    e890:	f04f 0c00 	mov.w	ip, #0
    e894:	e031      	b.n	e8fa <_dtoa_r+0x382>
    e896:	bf00      	nop
    e898:	636f4361 	.word	0x636f4361
    e89c:	3fd287a7 	.word	0x3fd287a7
    e8a0:	8b60c8b3 	.word	0x8b60c8b3
    e8a4:	3fc68a28 	.word	0x3fc68a28
    e8a8:	509f79fb 	.word	0x509f79fb
    e8ac:	3fd34413 	.word	0x3fd34413
    e8b0:	7ff00000 	.word	0x7ff00000
    e8b4:	20000b29 	.word	0x20000b29
    e8b8:	200002a8 	.word	0x200002a8
    e8bc:	20000a58 	.word	0x20000a58
    e8c0:	20000a64 	.word	0x20000a64
    e8c4:	20000280 	.word	0x20000280
    e8c8:	f10c 0c01 	add.w	ip, ip, #1
    e8cc:	4594      	cmp	ip, r2
    e8ce:	da4d      	bge.n	e96c <_dtoa_r+0x3f4>
    e8d0:	ee27 7b04 	vmul.f64	d7, d7, d4
    e8d4:	ee25 5b04 	vmul.f64	d5, d5, d4
    e8d8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    e8dc:	ee16 3a90 	vmov	r3, s13
    e8e0:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    e8e4:	3330      	adds	r3, #48	; 0x30
    e8e6:	ee37 7b43 	vsub.f64	d7, d7, d3
    e8ea:	eeb4 7bc5 	vcmpe.f64	d7, d5
    e8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e8f2:	f801 3b01 	strb.w	r3, [r1], #1
    e8f6:	f100 8473 	bmi.w	f1e0 <_dtoa_r+0xc68>
    e8fa:	ee32 6b47 	vsub.f64	d6, d2, d7
    e8fe:	eeb4 6bc5 	vcmpe.f64	d6, d5
    e902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e906:	d5df      	bpl.n	e8c8 <_dtoa_r+0x350>
    e908:	9a00      	ldr	r2, [sp, #0]
    e90a:	9604      	str	r6, [sp, #16]
    e90c:	e002      	b.n	e914 <_dtoa_r+0x39c>
    e90e:	428a      	cmp	r2, r1
    e910:	f000 8450 	beq.w	f1b4 <_dtoa_r+0xc3c>
    e914:	4689      	mov	r9, r1
    e916:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    e91a:	2b39      	cmp	r3, #57	; 0x39
    e91c:	d0f7      	beq.n	e90e <_dtoa_r+0x396>
    e91e:	3301      	adds	r3, #1
    e920:	b2db      	uxtb	r3, r3
    e922:	700b      	strb	r3, [r1, #0]
    e924:	9b04      	ldr	r3, [sp, #16]
    e926:	3301      	adds	r3, #1
    e928:	9304      	str	r3, [sp, #16]
    e92a:	e155      	b.n	ebd8 <_dtoa_r+0x660>
    e92c:	1a09      	subs	r1, r1, r0
    e92e:	2301      	movs	r3, #1
    e930:	f1b1 0801 	subs.w	r8, r1, #1
    e934:	930a      	str	r3, [sp, #40]	; 0x28
    e936:	f57f aec7 	bpl.w	e6c8 <_dtoa_r+0x150>
    e93a:	f1c1 0301 	rsb	r3, r1, #1
    e93e:	9306      	str	r3, [sp, #24]
    e940:	f04f 0800 	mov.w	r8, #0
    e944:	e6c2      	b.n	e6cc <_dtoa_r+0x154>
    e946:	2600      	movs	r6, #0
    e948:	63e6      	str	r6, [r4, #60]	; 0x3c
    e94a:	4631      	mov	r1, r6
    e94c:	4620      	mov	r0, r4
    e94e:	f7fe fa21 	bl	cd94 <_Balloc>
    e952:	9000      	str	r0, [sp, #0]
    e954:	2800      	cmp	r0, #0
    e956:	f000 8467 	beq.w	f228 <_dtoa_r+0xcb0>
    e95a:	9b00      	ldr	r3, [sp, #0]
    e95c:	63a3      	str	r3, [r4, #56]	; 0x38
    e95e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e962:	930b      	str	r3, [sp, #44]	; 0x2c
    e964:	4699      	mov	r9, r3
    e966:	2301      	movs	r3, #1
    e968:	46b3      	mov	fp, r6
    e96a:	9307      	str	r3, [sp, #28]
    e96c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e96e:	2a00      	cmp	r2, #0
    e970:	db55      	blt.n	ea1e <_dtoa_r+0x4a6>
    e972:	9904      	ldr	r1, [sp, #16]
    e974:	290e      	cmp	r1, #14
    e976:	dc52      	bgt.n	ea1e <_dtoa_r+0x4a6>
    e978:	4bb7      	ldr	r3, [pc, #732]	; (ec58 <_dtoa_r+0x6e0>)
    e97a:	f1bb 0f00 	cmp.w	fp, #0
    e97e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    e982:	ed93 6b00 	vldr	d6, [r3]
    e986:	da15      	bge.n	e9b4 <_dtoa_r+0x43c>
    e988:	f1b9 0f00 	cmp.w	r9, #0
    e98c:	dc12      	bgt.n	e9b4 <_dtoa_r+0x43c>
    e98e:	f040 82f2 	bne.w	ef76 <_dtoa_r+0x9fe>
    e992:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    e996:	ee26 7b07 	vmul.f64	d7, d6, d7
    e99a:	eeb4 8bc7 	vcmpe.f64	d8, d7
    e99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e9a2:	46ca      	mov	sl, r9
    e9a4:	464e      	mov	r6, r9
    e9a6:	f200 826d 	bhi.w	ee84 <_dtoa_r+0x90c>
    e9aa:	f8dd 8000 	ldr.w	r8, [sp]
    e9ae:	ea6f 0b0b 	mvn.w	fp, fp
    e9b2:	e270      	b.n	ee96 <_dtoa_r+0x91e>
    e9b4:	ee88 7b06 	vdiv.f64	d7, d8, d6
    e9b8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    e9bc:	9900      	ldr	r1, [sp, #0]
    e9be:	ee17 3a10 	vmov	r3, s14
    e9c2:	f1b9 0f01 	cmp.w	r9, #1
    e9c6:	f103 0330 	add.w	r3, r3, #48	; 0x30
    e9ca:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    e9ce:	f801 3b01 	strb.w	r3, [r1], #1
    e9d2:	eea5 8b46 	vfms.f64	d8, d5, d6
    e9d6:	f000 8334 	beq.w	f042 <_dtoa_r+0xaca>
    e9da:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    e9de:	2301      	movs	r3, #1
    e9e0:	e011      	b.n	ea06 <_dtoa_r+0x48e>
    e9e2:	ee88 7b06 	vdiv.f64	d7, d8, d6
    e9e6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    e9ea:	3301      	adds	r3, #1
    e9ec:	ee17 2a10 	vmov	r2, s14
    e9f0:	454b      	cmp	r3, r9
    e9f2:	f102 0230 	add.w	r2, r2, #48	; 0x30
    e9f6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    e9fa:	f801 2b01 	strb.w	r2, [r1], #1
    e9fe:	eea5 8b46 	vfms.f64	d8, d5, d6
    ea02:	f000 831e 	beq.w	f042 <_dtoa_r+0xaca>
    ea06:	ee28 8b04 	vmul.f64	d8, d8, d4
    ea0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
    ea0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ea12:	d1e6      	bne.n	e9e2 <_dtoa_r+0x46a>
    ea14:	9b04      	ldr	r3, [sp, #16]
    ea16:	3301      	adds	r3, #1
    ea18:	9304      	str	r3, [sp, #16]
    ea1a:	4689      	mov	r9, r1
    ea1c:	e0dc      	b.n	ebd8 <_dtoa_r+0x660>
    ea1e:	9b07      	ldr	r3, [sp, #28]
    ea20:	b343      	cbz	r3, ea74 <_dtoa_r+0x4fc>
    ea22:	9b01      	ldr	r3, [sp, #4]
    ea24:	2b01      	cmp	r3, #1
    ea26:	f340 8276 	ble.w	ef16 <_dtoa_r+0x99e>
    ea2a:	9b08      	ldr	r3, [sp, #32]
    ea2c:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
    ea30:	4553      	cmp	r3, sl
    ea32:	f280 823f 	bge.w	eeb4 <_dtoa_r+0x93c>
    ea36:	9b08      	ldr	r3, [sp, #32]
    ea38:	f8cd a020 	str.w	sl, [sp, #32]
    ea3c:	ebaa 0203 	sub.w	r2, sl, r3
    ea40:	4417      	add	r7, r2
    ea42:	f04f 0a00 	mov.w	sl, #0
    ea46:	f1b9 0f00 	cmp.w	r9, #0
    ea4a:	f2c0 8325 	blt.w	f098 <_dtoa_r+0xb20>
    ea4e:	9b06      	ldr	r3, [sp, #24]
    ea50:	9309      	str	r3, [sp, #36]	; 0x24
    ea52:	444b      	add	r3, r9
    ea54:	44c8      	add	r8, r9
    ea56:	9306      	str	r3, [sp, #24]
    ea58:	2101      	movs	r1, #1
    ea5a:	4620      	mov	r0, r4
    ea5c:	f7fe fac4 	bl	cfe8 <__i2b>
    ea60:	4606      	mov	r6, r0
    ea62:	e00c      	b.n	ea7e <_dtoa_r+0x506>
    ea64:	4b7d      	ldr	r3, [pc, #500]	; (ec5c <_dtoa_r+0x6e4>)
    ea66:	9300      	str	r3, [sp, #0]
    ea68:	9800      	ldr	r0, [sp, #0]
    ea6a:	b00f      	add	sp, #60	; 0x3c
    ea6c:	ecbd 8b02 	vpop	{d8}
    ea70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea74:	9b06      	ldr	r3, [sp, #24]
    ea76:	f8dd a020 	ldr.w	sl, [sp, #32]
    ea7a:	9e07      	ldr	r6, [sp, #28]
    ea7c:	9309      	str	r3, [sp, #36]	; 0x24
    ea7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ea80:	b16b      	cbz	r3, ea9e <_dtoa_r+0x526>
    ea82:	f1b8 0f00 	cmp.w	r8, #0
    ea86:	dd0a      	ble.n	ea9e <_dtoa_r+0x526>
    ea88:	4543      	cmp	r3, r8
    ea8a:	9906      	ldr	r1, [sp, #24]
    ea8c:	461a      	mov	r2, r3
    ea8e:	bfa8      	it	ge
    ea90:	4642      	movge	r2, r8
    ea92:	1a89      	subs	r1, r1, r2
    ea94:	1a9b      	subs	r3, r3, r2
    ea96:	9106      	str	r1, [sp, #24]
    ea98:	9309      	str	r3, [sp, #36]	; 0x24
    ea9a:	eba8 0802 	sub.w	r8, r8, r2
    ea9e:	9b08      	ldr	r3, [sp, #32]
    eaa0:	b163      	cbz	r3, eabc <_dtoa_r+0x544>
    eaa2:	9b07      	ldr	r3, [sp, #28]
    eaa4:	2b00      	cmp	r3, #0
    eaa6:	f000 82a7 	beq.w	eff8 <_dtoa_r+0xa80>
    eaaa:	f1ba 0f00 	cmp.w	sl, #0
    eaae:	f300 8204 	bgt.w	eeba <_dtoa_r+0x942>
    eab2:	9b08      	ldr	r3, [sp, #32]
    eab4:	ebb3 020a 	subs.w	r2, r3, sl
    eab8:	f040 82ff 	bne.w	f0ba <_dtoa_r+0xb42>
    eabc:	2101      	movs	r1, #1
    eabe:	4620      	mov	r0, r4
    eac0:	f7fe fa92 	bl	cfe8 <__i2b>
    eac4:	2f00      	cmp	r7, #0
    eac6:	4682      	mov	sl, r0
    eac8:	f300 80af 	bgt.w	ec2a <_dtoa_r+0x6b2>
    eacc:	9b01      	ldr	r3, [sp, #4]
    eace:	2b01      	cmp	r3, #1
    ead0:	f340 8187 	ble.w	ede2 <_dtoa_r+0x86a>
    ead4:	2300      	movs	r3, #0
    ead6:	9308      	str	r3, [sp, #32]
    ead8:	2001      	movs	r0, #1
    eada:	2f00      	cmp	r7, #0
    eadc:	f040 80b1 	bne.w	ec42 <_dtoa_r+0x6ca>
    eae0:	4440      	add	r0, r8
    eae2:	f010 001f 	ands.w	r0, r0, #31
    eae6:	f000 817a 	beq.w	edde <_dtoa_r+0x866>
    eaea:	f1c0 0220 	rsb	r2, r0, #32
    eaee:	2a04      	cmp	r2, #4
    eaf0:	f300 8088 	bgt.w	ec04 <_dtoa_r+0x68c>
    eaf4:	f040 81f6 	bne.w	eee4 <_dtoa_r+0x96c>
    eaf8:	9b06      	ldr	r3, [sp, #24]
    eafa:	2b00      	cmp	r3, #0
    eafc:	dd05      	ble.n	eb0a <_dtoa_r+0x592>
    eafe:	4629      	mov	r1, r5
    eb00:	461a      	mov	r2, r3
    eb02:	4620      	mov	r0, r4
    eb04:	f7fe fbac 	bl	d260 <__lshift>
    eb08:	4605      	mov	r5, r0
    eb0a:	f1b8 0f00 	cmp.w	r8, #0
    eb0e:	dd05      	ble.n	eb1c <_dtoa_r+0x5a4>
    eb10:	4651      	mov	r1, sl
    eb12:	4642      	mov	r2, r8
    eb14:	4620      	mov	r0, r4
    eb16:	f7fe fba3 	bl	d260 <__lshift>
    eb1a:	4682      	mov	sl, r0
    eb1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    eb1e:	2b00      	cmp	r3, #0
    eb20:	f040 813f 	bne.w	eda2 <_dtoa_r+0x82a>
    eb24:	f1b9 0f00 	cmp.w	r9, #0
    eb28:	f340 8125 	ble.w	ed76 <_dtoa_r+0x7fe>
    eb2c:	9b07      	ldr	r3, [sp, #28]
    eb2e:	2b00      	cmp	r3, #0
    eb30:	f040 80a3 	bne.w	ec7a <_dtoa_r+0x702>
    eb34:	9b04      	ldr	r3, [sp, #16]
    eb36:	3301      	adds	r3, #1
    eb38:	9304      	str	r3, [sp, #16]
    eb3a:	f8dd 8000 	ldr.w	r8, [sp]
    eb3e:	2701      	movs	r7, #1
    eb40:	e007      	b.n	eb52 <_dtoa_r+0x5da>
    eb42:	4629      	mov	r1, r5
    eb44:	2300      	movs	r3, #0
    eb46:	220a      	movs	r2, #10
    eb48:	4620      	mov	r0, r4
    eb4a:	f7fe f953 	bl	cdf4 <__multadd>
    eb4e:	3701      	adds	r7, #1
    eb50:	4605      	mov	r5, r0
    eb52:	4651      	mov	r1, sl
    eb54:	4628      	mov	r0, r5
    eb56:	f7ff fc7b 	bl	e450 <quorem>
    eb5a:	45b9      	cmp	r9, r7
    eb5c:	f100 0030 	add.w	r0, r0, #48	; 0x30
    eb60:	f808 0b01 	strb.w	r0, [r8], #1
    eb64:	dced      	bgt.n	eb42 <_dtoa_r+0x5ca>
    eb66:	f1b9 0f00 	cmp.w	r9, #0
    eb6a:	9a00      	ldr	r2, [sp, #0]
    eb6c:	bfcc      	ite	gt
    eb6e:	46cb      	movgt	fp, r9
    eb70:	f04f 0b01 	movle.w	fp, #1
    eb74:	4603      	mov	r3, r0
    eb76:	4493      	add	fp, r2
    eb78:	2700      	movs	r7, #0
    eb7a:	4629      	mov	r1, r5
    eb7c:	2201      	movs	r2, #1
    eb7e:	4620      	mov	r0, r4
    eb80:	9301      	str	r3, [sp, #4]
    eb82:	f7fe fb6d 	bl	d260 <__lshift>
    eb86:	4651      	mov	r1, sl
    eb88:	4605      	mov	r5, r0
    eb8a:	f7fe fbe1 	bl	d350 <__mcmp>
    eb8e:	2800      	cmp	r0, #0
    eb90:	f340 81af 	ble.w	eef2 <_dtoa_r+0x97a>
    eb94:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    eb98:	9a00      	ldr	r2, [sp, #0]
    eb9a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    eb9e:	e004      	b.n	ebaa <_dtoa_r+0x632>
    eba0:	455a      	cmp	r2, fp
    eba2:	f000 81b1 	beq.w	ef08 <_dtoa_r+0x990>
    eba6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    ebaa:	2b39      	cmp	r3, #57	; 0x39
    ebac:	f10b 0901 	add.w	r9, fp, #1
    ebb0:	d0f6      	beq.n	eba0 <_dtoa_r+0x628>
    ebb2:	3301      	adds	r3, #1
    ebb4:	f88b 3000 	strb.w	r3, [fp]
    ebb8:	4651      	mov	r1, sl
    ebba:	4620      	mov	r0, r4
    ebbc:	f7fe f910 	bl	cde0 <_Bfree>
    ebc0:	b156      	cbz	r6, ebd8 <_dtoa_r+0x660>
    ebc2:	b12f      	cbz	r7, ebd0 <_dtoa_r+0x658>
    ebc4:	42b7      	cmp	r7, r6
    ebc6:	d003      	beq.n	ebd0 <_dtoa_r+0x658>
    ebc8:	4639      	mov	r1, r7
    ebca:	4620      	mov	r0, r4
    ebcc:	f7fe f908 	bl	cde0 <_Bfree>
    ebd0:	4631      	mov	r1, r6
    ebd2:	4620      	mov	r0, r4
    ebd4:	f7fe f904 	bl	cde0 <_Bfree>
    ebd8:	4629      	mov	r1, r5
    ebda:	4620      	mov	r0, r4
    ebdc:	f7fe f900 	bl	cde0 <_Bfree>
    ebe0:	2300      	movs	r3, #0
    ebe2:	f889 3000 	strb.w	r3, [r9]
    ebe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ebea:	601a      	str	r2, [r3, #0]
    ebec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ebee:	2b00      	cmp	r3, #0
    ebf0:	f43f acfe 	beq.w	e5f0 <_dtoa_r+0x78>
    ebf4:	9800      	ldr	r0, [sp, #0]
    ebf6:	f8c3 9000 	str.w	r9, [r3]
    ebfa:	b00f      	add	sp, #60	; 0x3c
    ebfc:	ecbd 8b02 	vpop	{d8}
    ec00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec04:	f1c0 001c 	rsb	r0, r0, #28
    ec08:	9b06      	ldr	r3, [sp, #24]
    ec0a:	4403      	add	r3, r0
    ec0c:	9306      	str	r3, [sp, #24]
    ec0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ec10:	4403      	add	r3, r0
    ec12:	9309      	str	r3, [sp, #36]	; 0x24
    ec14:	4480      	add	r8, r0
    ec16:	e76f      	b.n	eaf8 <_dtoa_r+0x580>
    ec18:	f1c2 0220 	rsb	r2, r2, #32
    ec1c:	fa06 f202 	lsl.w	r2, r6, r2
    ec20:	ee07 2a10 	vmov	s14, r2
    ec24:	e509      	b.n	e63a <_dtoa_r+0xc2>
    ec26:	2601      	movs	r6, #1
    ec28:	e563      	b.n	e6f2 <_dtoa_r+0x17a>
    ec2a:	4601      	mov	r1, r0
    ec2c:	463a      	mov	r2, r7
    ec2e:	4620      	mov	r0, r4
    ec30:	f7fe fab6 	bl	d1a0 <__pow5mult>
    ec34:	9b01      	ldr	r3, [sp, #4]
    ec36:	2b01      	cmp	r3, #1
    ec38:	4682      	mov	sl, r0
    ec3a:	f340 81c5 	ble.w	efc8 <_dtoa_r+0xa50>
    ec3e:	2300      	movs	r3, #0
    ec40:	9308      	str	r3, [sp, #32]
    ec42:	f8da 2010 	ldr.w	r2, [sl, #16]
    ec46:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    ec4a:	6910      	ldr	r0, [r2, #16]
    ec4c:	f7fe f97c 	bl	cf48 <__hi0bits>
    ec50:	f1c0 0020 	rsb	r0, r0, #32
    ec54:	e744      	b.n	eae0 <_dtoa_r+0x568>
    ec56:	bf00      	nop
    ec58:	200002a8 	.word	0x200002a8
    ec5c:	20000b28 	.word	0x20000b28
    ec60:	4631      	mov	r1, r6
    ec62:	2300      	movs	r3, #0
    ec64:	220a      	movs	r2, #10
    ec66:	4620      	mov	r0, r4
    ec68:	f7fe f8c4 	bl	cdf4 <__multadd>
    ec6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ec6e:	2b00      	cmp	r3, #0
    ec70:	4606      	mov	r6, r0
    ec72:	f340 82ce 	ble.w	f212 <_dtoa_r+0xc9a>
    ec76:	9704      	str	r7, [sp, #16]
    ec78:	4699      	mov	r9, r3
    ec7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ec7c:	2b00      	cmp	r3, #0
    ec7e:	dd05      	ble.n	ec8c <_dtoa_r+0x714>
    ec80:	4631      	mov	r1, r6
    ec82:	461a      	mov	r2, r3
    ec84:	4620      	mov	r0, r4
    ec86:	f7fe faeb 	bl	d260 <__lshift>
    ec8a:	4606      	mov	r6, r0
    ec8c:	9b08      	ldr	r3, [sp, #32]
    ec8e:	2b00      	cmp	r3, #0
    ec90:	f040 81eb 	bne.w	f06a <_dtoa_r+0xaf2>
    ec94:	46b0      	mov	r8, r6
    ec96:	9b02      	ldr	r3, [sp, #8]
    ec98:	9f00      	ldr	r7, [sp, #0]
    ec9a:	f003 0201 	and.w	r2, r3, #1
    ec9e:	1e7b      	subs	r3, r7, #1
    eca0:	444b      	add	r3, r9
    eca2:	9308      	str	r3, [sp, #32]
    eca4:	9b01      	ldr	r3, [sp, #4]
    eca6:	920a      	str	r2, [sp, #40]	; 0x28
    eca8:	4313      	orrs	r3, r2
    ecaa:	9309      	str	r3, [sp, #36]	; 0x24
    ecac:	4651      	mov	r1, sl
    ecae:	4628      	mov	r0, r5
    ecb0:	f7ff fbce 	bl	e450 <quorem>
    ecb4:	4631      	mov	r1, r6
    ecb6:	4683      	mov	fp, r0
    ecb8:	4628      	mov	r0, r5
    ecba:	f7fe fb49 	bl	d350 <__mcmp>
    ecbe:	4642      	mov	r2, r8
    ecc0:	4651      	mov	r1, sl
    ecc2:	4681      	mov	r9, r0
    ecc4:	4620      	mov	r0, r4
    ecc6:	f7fe fb65 	bl	d394 <__mdiff>
    ecca:	68c2      	ldr	r2, [r0, #12]
    eccc:	4601      	mov	r1, r0
    ecce:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    ecd2:	2a00      	cmp	r2, #0
    ecd4:	d142      	bne.n	ed5c <_dtoa_r+0x7e4>
    ecd6:	e9cd 0306 	strd	r0, r3, [sp, #24]
    ecda:	4628      	mov	r0, r5
    ecdc:	f7fe fb38 	bl	d350 <__mcmp>
    ece0:	9906      	ldr	r1, [sp, #24]
    ece2:	9002      	str	r0, [sp, #8]
    ece4:	4620      	mov	r0, r4
    ece6:	f7fe f87b 	bl	cde0 <_Bfree>
    ecea:	9a02      	ldr	r2, [sp, #8]
    ecec:	9b07      	ldr	r3, [sp, #28]
    ecee:	b91a      	cbnz	r2, ecf8 <_dtoa_r+0x780>
    ecf0:	9909      	ldr	r1, [sp, #36]	; 0x24
    ecf2:	2900      	cmp	r1, #0
    ecf4:	f000 827e 	beq.w	f1f4 <_dtoa_r+0xc7c>
    ecf8:	f1b9 0f00 	cmp.w	r9, #0
    ecfc:	f2c0 8183 	blt.w	f006 <_dtoa_r+0xa8e>
    ed00:	9901      	ldr	r1, [sp, #4]
    ed02:	ea49 0901 	orr.w	r9, r9, r1
    ed06:	990a      	ldr	r1, [sp, #40]	; 0x28
    ed08:	ea51 0909 	orrs.w	r9, r1, r9
    ed0c:	f000 817b 	beq.w	f006 <_dtoa_r+0xa8e>
    ed10:	2a00      	cmp	r2, #0
    ed12:	f300 81c6 	bgt.w	f0a2 <_dtoa_r+0xb2a>
    ed16:	9a08      	ldr	r2, [sp, #32]
    ed18:	703b      	strb	r3, [r7, #0]
    ed1a:	f107 0901 	add.w	r9, r7, #1
    ed1e:	4297      	cmp	r7, r2
    ed20:	46cb      	mov	fp, r9
    ed22:	f000 81c4 	beq.w	f0ae <_dtoa_r+0xb36>
    ed26:	4629      	mov	r1, r5
    ed28:	2300      	movs	r3, #0
    ed2a:	220a      	movs	r2, #10
    ed2c:	4620      	mov	r0, r4
    ed2e:	f7fe f861 	bl	cdf4 <__multadd>
    ed32:	4546      	cmp	r6, r8
    ed34:	4605      	mov	r5, r0
    ed36:	4631      	mov	r1, r6
    ed38:	f04f 0300 	mov.w	r3, #0
    ed3c:	f04f 020a 	mov.w	r2, #10
    ed40:	4620      	mov	r0, r4
    ed42:	d012      	beq.n	ed6a <_dtoa_r+0x7f2>
    ed44:	f7fe f856 	bl	cdf4 <__multadd>
    ed48:	4641      	mov	r1, r8
    ed4a:	4606      	mov	r6, r0
    ed4c:	2300      	movs	r3, #0
    ed4e:	220a      	movs	r2, #10
    ed50:	4620      	mov	r0, r4
    ed52:	f7fe f84f 	bl	cdf4 <__multadd>
    ed56:	464f      	mov	r7, r9
    ed58:	4680      	mov	r8, r0
    ed5a:	e7a7      	b.n	ecac <_dtoa_r+0x734>
    ed5c:	4620      	mov	r0, r4
    ed5e:	9302      	str	r3, [sp, #8]
    ed60:	f7fe f83e 	bl	cde0 <_Bfree>
    ed64:	9b02      	ldr	r3, [sp, #8]
    ed66:	2201      	movs	r2, #1
    ed68:	e7c6      	b.n	ecf8 <_dtoa_r+0x780>
    ed6a:	f7fe f843 	bl	cdf4 <__multadd>
    ed6e:	464f      	mov	r7, r9
    ed70:	4606      	mov	r6, r0
    ed72:	4680      	mov	r8, r0
    ed74:	e79a      	b.n	ecac <_dtoa_r+0x734>
    ed76:	9b01      	ldr	r3, [sp, #4]
    ed78:	2b02      	cmp	r3, #2
    ed7a:	dc71      	bgt.n	ee60 <_dtoa_r+0x8e8>
    ed7c:	9b07      	ldr	r3, [sp, #28]
    ed7e:	2b00      	cmp	r3, #0
    ed80:	f47f af7b 	bne.w	ec7a <_dtoa_r+0x702>
    ed84:	9b04      	ldr	r3, [sp, #16]
    ed86:	4651      	mov	r1, sl
    ed88:	3301      	adds	r3, #1
    ed8a:	4628      	mov	r0, r5
    ed8c:	9304      	str	r3, [sp, #16]
    ed8e:	f7ff fb5f 	bl	e450 <quorem>
    ed92:	f8dd b000 	ldr.w	fp, [sp]
    ed96:	f100 0330 	add.w	r3, r0, #48	; 0x30
    ed9a:	f80b 3b01 	strb.w	r3, [fp], #1
    ed9e:	2700      	movs	r7, #0
    eda0:	e6eb      	b.n	eb7a <_dtoa_r+0x602>
    eda2:	4651      	mov	r1, sl
    eda4:	4628      	mov	r0, r5
    eda6:	f7fe fad3 	bl	d350 <__mcmp>
    edaa:	2800      	cmp	r0, #0
    edac:	f6bf aeba 	bge.w	eb24 <_dtoa_r+0x5ac>
    edb0:	4629      	mov	r1, r5
    edb2:	2300      	movs	r3, #0
    edb4:	220a      	movs	r2, #10
    edb6:	4620      	mov	r0, r4
    edb8:	f7fe f81c 	bl	cdf4 <__multadd>
    edbc:	9b04      	ldr	r3, [sp, #16]
    edbe:	1e5f      	subs	r7, r3, #1
    edc0:	9b07      	ldr	r3, [sp, #28]
    edc2:	4605      	mov	r5, r0
    edc4:	2b00      	cmp	r3, #0
    edc6:	f47f af4b 	bne.w	ec60 <_dtoa_r+0x6e8>
    edca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    edcc:	2b00      	cmp	r3, #0
    edce:	f340 8218 	ble.w	f202 <_dtoa_r+0xc8a>
    edd2:	4699      	mov	r9, r3
    edd4:	e6b1      	b.n	eb3a <_dtoa_r+0x5c2>
    edd6:	4bbc      	ldr	r3, [pc, #752]	; (f0c8 <_dtoa_r+0xb50>)
    edd8:	9300      	str	r3, [sp, #0]
    edda:	3303      	adds	r3, #3
    eddc:	e4a4      	b.n	e728 <_dtoa_r+0x1b0>
    edde:	201c      	movs	r0, #28
    ede0:	e712      	b.n	ec08 <_dtoa_r+0x690>
    ede2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ede6:	2800      	cmp	r0, #0
    ede8:	f47f ae74 	bne.w	ead4 <_dtoa_r+0x55c>
    edec:	f3c1 0213 	ubfx	r2, r1, #0, #20
    edf0:	2a00      	cmp	r2, #0
    edf2:	f000 80f4 	beq.w	efde <_dtoa_r+0xa66>
    edf6:	9b02      	ldr	r3, [sp, #8]
    edf8:	9308      	str	r3, [sp, #32]
    edfa:	e66d      	b.n	ead8 <_dtoa_r+0x560>
    edfc:	2301      	movs	r3, #1
    edfe:	9307      	str	r3, [sp, #28]
    ee00:	9b04      	ldr	r3, [sp, #16]
    ee02:	445b      	add	r3, fp
    ee04:	f103 0901 	add.w	r9, r3, #1
    ee08:	f1b9 0f01 	cmp.w	r9, #1
    ee0c:	46cc      	mov	ip, r9
    ee0e:	930b      	str	r3, [sp, #44]	; 0x2c
    ee10:	bfb8      	it	lt
    ee12:	f04f 0c01 	movlt.w	ip, #1
    ee16:	2100      	movs	r1, #0
    ee18:	f1bc 0f17 	cmp.w	ip, #23
    ee1c:	63e1      	str	r1, [r4, #60]	; 0x3c
    ee1e:	f77f acbc 	ble.w	e79a <_dtoa_r+0x222>
    ee22:	2001      	movs	r0, #1
    ee24:	2204      	movs	r2, #4
    ee26:	0052      	lsls	r2, r2, #1
    ee28:	f102 0314 	add.w	r3, r2, #20
    ee2c:	4563      	cmp	r3, ip
    ee2e:	4601      	mov	r1, r0
    ee30:	f100 0001 	add.w	r0, r0, #1
    ee34:	d9f7      	bls.n	ee26 <_dtoa_r+0x8ae>
    ee36:	63e1      	str	r1, [r4, #60]	; 0x3c
    ee38:	e4af      	b.n	e79a <_dtoa_r+0x222>
    ee3a:	2301      	movs	r3, #1
    ee3c:	9307      	str	r3, [sp, #28]
    ee3e:	f1bb 0f00 	cmp.w	fp, #0
    ee42:	dd52      	ble.n	eeea <_dtoa_r+0x972>
    ee44:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    ee48:	46d9      	mov	r9, fp
    ee4a:	46dc      	mov	ip, fp
    ee4c:	e7e3      	b.n	ee16 <_dtoa_r+0x89e>
    ee4e:	2300      	movs	r3, #0
    ee50:	9307      	str	r3, [sp, #28]
    ee52:	e7d5      	b.n	ee00 <_dtoa_r+0x888>
    ee54:	2300      	movs	r3, #0
    ee56:	9307      	str	r3, [sp, #28]
    ee58:	e7f1      	b.n	ee3e <_dtoa_r+0x8c6>
    ee5a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    ee5e:	9704      	str	r7, [sp, #16]
    ee60:	f1b9 0f00 	cmp.w	r9, #0
    ee64:	f47f ada1 	bne.w	e9aa <_dtoa_r+0x432>
    ee68:	4651      	mov	r1, sl
    ee6a:	464b      	mov	r3, r9
    ee6c:	2205      	movs	r2, #5
    ee6e:	4620      	mov	r0, r4
    ee70:	f7fd ffc0 	bl	cdf4 <__multadd>
    ee74:	4601      	mov	r1, r0
    ee76:	4682      	mov	sl, r0
    ee78:	4628      	mov	r0, r5
    ee7a:	f7fe fa69 	bl	d350 <__mcmp>
    ee7e:	2800      	cmp	r0, #0
    ee80:	f77f ad93 	ble.w	e9aa <_dtoa_r+0x432>
    ee84:	9b04      	ldr	r3, [sp, #16]
    ee86:	f103 0b01 	add.w	fp, r3, #1
    ee8a:	9b00      	ldr	r3, [sp, #0]
    ee8c:	2231      	movs	r2, #49	; 0x31
    ee8e:	4698      	mov	r8, r3
    ee90:	f803 2b01 	strb.w	r2, [r3], #1
    ee94:	9300      	str	r3, [sp, #0]
    ee96:	4651      	mov	r1, sl
    ee98:	4620      	mov	r0, r4
    ee9a:	f7fd ffa1 	bl	cde0 <_Bfree>
    ee9e:	f10b 0301 	add.w	r3, fp, #1
    eea2:	f8dd 9000 	ldr.w	r9, [sp]
    eea6:	9304      	str	r3, [sp, #16]
    eea8:	f8cd 8000 	str.w	r8, [sp]
    eeac:	2e00      	cmp	r6, #0
    eeae:	f47f ae8f 	bne.w	ebd0 <_dtoa_r+0x658>
    eeb2:	e691      	b.n	ebd8 <_dtoa_r+0x660>
    eeb4:	eba3 0a0a 	sub.w	sl, r3, sl
    eeb8:	e5c5      	b.n	ea46 <_dtoa_r+0x4ce>
    eeba:	4631      	mov	r1, r6
    eebc:	4652      	mov	r2, sl
    eebe:	4620      	mov	r0, r4
    eec0:	f7fe f96e 	bl	d1a0 <__pow5mult>
    eec4:	462a      	mov	r2, r5
    eec6:	4601      	mov	r1, r0
    eec8:	4606      	mov	r6, r0
    eeca:	4620      	mov	r0, r4
    eecc:	f7fe f8ba 	bl	d044 <__multiply>
    eed0:	4629      	mov	r1, r5
    eed2:	4605      	mov	r5, r0
    eed4:	4620      	mov	r0, r4
    eed6:	f7fd ff83 	bl	cde0 <_Bfree>
    eeda:	e5ea      	b.n	eab2 <_dtoa_r+0x53a>
    eedc:	2002      	movs	r0, #2
    eede:	eeb0 5b48 	vmov.f64	d5, d8
    eee2:	e481      	b.n	e7e8 <_dtoa_r+0x270>
    eee4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    eee8:	e68e      	b.n	ec08 <_dtoa_r+0x690>
    eeea:	f04f 0b01 	mov.w	fp, #1
    eeee:	46d9      	mov	r9, fp
    eef0:	e44f      	b.n	e792 <_dtoa_r+0x21a>
    eef2:	d103      	bne.n	eefc <_dtoa_r+0x984>
    eef4:	9b01      	ldr	r3, [sp, #4]
    eef6:	07db      	lsls	r3, r3, #31
    eef8:	f53f ae4c 	bmi.w	eb94 <_dtoa_r+0x61c>
    eefc:	46d9      	mov	r9, fp
    eefe:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    ef02:	2b30      	cmp	r3, #48	; 0x30
    ef04:	d0fa      	beq.n	eefc <_dtoa_r+0x984>
    ef06:	e657      	b.n	ebb8 <_dtoa_r+0x640>
    ef08:	9b04      	ldr	r3, [sp, #16]
    ef0a:	9a00      	ldr	r2, [sp, #0]
    ef0c:	3301      	adds	r3, #1
    ef0e:	9304      	str	r3, [sp, #16]
    ef10:	2331      	movs	r3, #49	; 0x31
    ef12:	7013      	strb	r3, [r2, #0]
    ef14:	e650      	b.n	ebb8 <_dtoa_r+0x640>
    ef16:	f1ba 0f00 	cmp.w	sl, #0
    ef1a:	f000 8123 	beq.w	f164 <_dtoa_r+0xbec>
    ef1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
    ef22:	9b06      	ldr	r3, [sp, #24]
    ef24:	9309      	str	r3, [sp, #36]	; 0x24
    ef26:	4413      	add	r3, r2
    ef28:	f8dd a020 	ldr.w	sl, [sp, #32]
    ef2c:	9306      	str	r3, [sp, #24]
    ef2e:	4490      	add	r8, r2
    ef30:	e592      	b.n	ea58 <_dtoa_r+0x4e0>
    ef32:	ee07 0a90 	vmov	s15, r0
    ef36:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    ef3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    ef3e:	eea6 5b07 	vfma.f64	d5, d6, d7
    ef42:	ee15 2a90 	vmov	r2, s11
    ef46:	ec51 0b15 	vmov	r0, r1, d5
    ef4a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    ef4e:	ec41 0b15 	vmov	d5, r0, r1
    ef52:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    ef56:	ee36 7b47 	vsub.f64	d7, d6, d7
    ef5a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    ef5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef62:	f300 8137 	bgt.w	f1d4 <_dtoa_r+0xc5c>
    ef66:	eeb1 5b45 	vneg.f64	d5, d5
    ef6a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    ef6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef72:	f57f acfb 	bpl.w	e96c <_dtoa_r+0x3f4>
    ef76:	f04f 0a00 	mov.w	sl, #0
    ef7a:	4656      	mov	r6, sl
    ef7c:	e515      	b.n	e9aa <_dtoa_r+0x432>
    ef7e:	f000 80f5 	beq.w	f16c <_dtoa_r+0xbf4>
    ef82:	9b04      	ldr	r3, [sp, #16]
    ef84:	4951      	ldr	r1, [pc, #324]	; (f0cc <_dtoa_r+0xb54>)
    ef86:	425a      	negs	r2, r3
    ef88:	f002 000f 	and.w	r0, r2, #15
    ef8c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    ef90:	ed91 6b00 	vldr	d6, [r1]
    ef94:	1112      	asrs	r2, r2, #4
    ef96:	ee28 6b06 	vmul.f64	d6, d8, d6
    ef9a:	f000 8142 	beq.w	f222 <_dtoa_r+0xcaa>
    ef9e:	eeb0 7b46 	vmov.f64	d7, d6
    efa2:	494b      	ldr	r1, [pc, #300]	; (f0d0 <_dtoa_r+0xb58>)
    efa4:	2600      	movs	r6, #0
    efa6:	2002      	movs	r0, #2
    efa8:	07d3      	lsls	r3, r2, #31
    efaa:	d505      	bpl.n	efb8 <_dtoa_r+0xa40>
    efac:	ed91 5b00 	vldr	d5, [r1]
    efb0:	3001      	adds	r0, #1
    efb2:	2601      	movs	r6, #1
    efb4:	ee27 7b05 	vmul.f64	d7, d7, d5
    efb8:	1052      	asrs	r2, r2, #1
    efba:	f101 0108 	add.w	r1, r1, #8
    efbe:	d1f3      	bne.n	efa8 <_dtoa_r+0xa30>
    efc0:	2e00      	cmp	r6, #0
    efc2:	fe06 6b07 	vseleq.f64	d6, d6, d7
    efc6:	e41e      	b.n	e806 <_dtoa_r+0x28e>
    efc8:	9b02      	ldr	r3, [sp, #8]
    efca:	2b00      	cmp	r3, #0
    efcc:	f47f ae37 	bne.w	ec3e <_dtoa_r+0x6c6>
    efd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    efd4:	f3c1 0213 	ubfx	r2, r1, #0, #20
    efd8:	2a00      	cmp	r2, #0
    efda:	f040 8137 	bne.w	f24c <_dtoa_r+0xcd4>
    efde:	4a3d      	ldr	r2, [pc, #244]	; (f0d4 <_dtoa_r+0xb5c>)
    efe0:	400a      	ands	r2, r1
    efe2:	2a00      	cmp	r2, #0
    efe4:	f000 80fa 	beq.w	f1dc <_dtoa_r+0xc64>
    efe8:	9b06      	ldr	r3, [sp, #24]
    efea:	3301      	adds	r3, #1
    efec:	9306      	str	r3, [sp, #24]
    efee:	2301      	movs	r3, #1
    eff0:	f108 0801 	add.w	r8, r8, #1
    eff4:	9308      	str	r3, [sp, #32]
    eff6:	e56f      	b.n	ead8 <_dtoa_r+0x560>
    eff8:	4629      	mov	r1, r5
    effa:	9a08      	ldr	r2, [sp, #32]
    effc:	4620      	mov	r0, r4
    effe:	f7fe f8cf 	bl	d1a0 <__pow5mult>
    f002:	4605      	mov	r5, r0
    f004:	e55a      	b.n	eabc <_dtoa_r+0x544>
    f006:	2a00      	cmp	r2, #0
    f008:	dd12      	ble.n	f030 <_dtoa_r+0xab8>
    f00a:	4629      	mov	r1, r5
    f00c:	2201      	movs	r2, #1
    f00e:	4620      	mov	r0, r4
    f010:	9301      	str	r3, [sp, #4]
    f012:	f7fe f925 	bl	d260 <__lshift>
    f016:	4651      	mov	r1, sl
    f018:	4605      	mov	r5, r0
    f01a:	f7fe f999 	bl	d350 <__mcmp>
    f01e:	2800      	cmp	r0, #0
    f020:	9b01      	ldr	r3, [sp, #4]
    f022:	f340 80e1 	ble.w	f1e8 <_dtoa_r+0xc70>
    f026:	2b39      	cmp	r3, #57	; 0x39
    f028:	f000 80ca 	beq.w	f1c0 <_dtoa_r+0xc48>
    f02c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    f030:	46b9      	mov	r9, r7
    f032:	f809 3b01 	strb.w	r3, [r9], #1
    f036:	9b04      	ldr	r3, [sp, #16]
    f038:	3301      	adds	r3, #1
    f03a:	4637      	mov	r7, r6
    f03c:	9304      	str	r3, [sp, #16]
    f03e:	4646      	mov	r6, r8
    f040:	e5ba      	b.n	ebb8 <_dtoa_r+0x640>
    f042:	ee38 8b08 	vadd.f64	d8, d8, d8
    f046:	eeb4 8bc6 	vcmpe.f64	d8, d6
    f04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f04e:	dc0a      	bgt.n	f066 <_dtoa_r+0xaee>
    f050:	eeb4 8b46 	vcmp.f64	d8, d6
    f054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f058:	f47f acdc 	bne.w	ea14 <_dtoa_r+0x49c>
    f05c:	ee17 3a10 	vmov	r3, s14
    f060:	07d8      	lsls	r0, r3, #31
    f062:	f57f acd7 	bpl.w	ea14 <_dtoa_r+0x49c>
    f066:	9a00      	ldr	r2, [sp, #0]
    f068:	e454      	b.n	e914 <_dtoa_r+0x39c>
    f06a:	6871      	ldr	r1, [r6, #4]
    f06c:	4620      	mov	r0, r4
    f06e:	f7fd fe91 	bl	cd94 <_Balloc>
    f072:	4607      	mov	r7, r0
    f074:	2800      	cmp	r0, #0
    f076:	f000 80de 	beq.w	f236 <_dtoa_r+0xcbe>
    f07a:	6933      	ldr	r3, [r6, #16]
    f07c:	3302      	adds	r3, #2
    f07e:	009a      	lsls	r2, r3, #2
    f080:	f106 010c 	add.w	r1, r6, #12
    f084:	300c      	adds	r0, #12
    f086:	f7f5 fd81 	bl	4b8c <memcpy>
    f08a:	4639      	mov	r1, r7
    f08c:	2201      	movs	r2, #1
    f08e:	4620      	mov	r0, r4
    f090:	f7fe f8e6 	bl	d260 <__lshift>
    f094:	4680      	mov	r8, r0
    f096:	e5fe      	b.n	ec96 <_dtoa_r+0x71e>
    f098:	9b06      	ldr	r3, [sp, #24]
    f09a:	eba3 0309 	sub.w	r3, r3, r9
    f09e:	9309      	str	r3, [sp, #36]	; 0x24
    f0a0:	e4da      	b.n	ea58 <_dtoa_r+0x4e0>
    f0a2:	2b39      	cmp	r3, #57	; 0x39
    f0a4:	f000 808c 	beq.w	f1c0 <_dtoa_r+0xc48>
    f0a8:	46b9      	mov	r9, r7
    f0aa:	3301      	adds	r3, #1
    f0ac:	e7c1      	b.n	f032 <_dtoa_r+0xaba>
    f0ae:	9a04      	ldr	r2, [sp, #16]
    f0b0:	3201      	adds	r2, #1
    f0b2:	4637      	mov	r7, r6
    f0b4:	9204      	str	r2, [sp, #16]
    f0b6:	4646      	mov	r6, r8
    f0b8:	e55f      	b.n	eb7a <_dtoa_r+0x602>
    f0ba:	4629      	mov	r1, r5
    f0bc:	4620      	mov	r0, r4
    f0be:	f7fe f86f 	bl	d1a0 <__pow5mult>
    f0c2:	4605      	mov	r5, r0
    f0c4:	e4fa      	b.n	eabc <_dtoa_r+0x544>
    f0c6:	bf00      	nop
    f0c8:	20000a64 	.word	0x20000a64
    f0cc:	200002a8 	.word	0x200002a8
    f0d0:	20000280 	.word	0x20000280
    f0d4:	7ff00000 	.word	0x7ff00000
    f0d8:	4b5e      	ldr	r3, [pc, #376]	; (f254 <_dtoa_r+0xcdc>)
    f0da:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    f0de:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    f0e2:	ed1c 3b02 	vldr	d3, [ip, #-8]
    f0e6:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    f0ea:	ee36 7b47 	vsub.f64	d7, d6, d7
    f0ee:	ec41 0b16 	vmov	d6, r0, r1
    f0f2:	ee15 1a90 	vmov	r1, s11
    f0f6:	ee23 3b06 	vmul.f64	d3, d3, d6
    f0fa:	9800      	ldr	r0, [sp, #0]
    f0fc:	3130      	adds	r1, #48	; 0x30
    f0fe:	2a01      	cmp	r2, #1
    f100:	f800 1b01 	strb.w	r1, [r0], #1
    f104:	f000 8083 	beq.w	f20e <_dtoa_r+0xc96>
    f108:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    f10c:	9b00      	ldr	r3, [sp, #0]
    f10e:	1899      	adds	r1, r3, r2
    f110:	ee27 7b04 	vmul.f64	d7, d7, d4
    f114:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    f118:	ee16 3a90 	vmov	r3, s13
    f11c:	3330      	adds	r3, #48	; 0x30
    f11e:	f800 3b01 	strb.w	r3, [r0], #1
    f122:	4281      	cmp	r1, r0
    f124:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    f128:	ee37 7b45 	vsub.f64	d7, d7, d5
    f12c:	d1f0      	bne.n	f110 <_dtoa_r+0xb98>
    f12e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    f132:	ee33 5b06 	vadd.f64	d5, d3, d6
    f136:	eeb4 5bc7 	vcmpe.f64	d5, d7
    f13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f13e:	f53f abe3 	bmi.w	e908 <_dtoa_r+0x390>
    f142:	ee36 6b43 	vsub.f64	d6, d6, d3
    f146:	eeb4 6bc7 	vcmpe.f64	d6, d7
    f14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f14e:	f77f ac0d 	ble.w	e96c <_dtoa_r+0x3f4>
    f152:	4689      	mov	r9, r1
    f154:	3901      	subs	r1, #1
    f156:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    f15a:	2b30      	cmp	r3, #48	; 0x30
    f15c:	d0f9      	beq.n	f152 <_dtoa_r+0xbda>
    f15e:	1c73      	adds	r3, r6, #1
    f160:	9304      	str	r3, [sp, #16]
    f162:	e539      	b.n	ebd8 <_dtoa_r+0x660>
    f164:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f166:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    f16a:	e6da      	b.n	ef22 <_dtoa_r+0x9aa>
    f16c:	2002      	movs	r0, #2
    f16e:	eeb0 6b48 	vmov.f64	d6, d8
    f172:	f7ff bb48 	b.w	e806 <_dtoa_r+0x28e>
    f176:	f1b9 0f00 	cmp.w	r9, #0
    f17a:	f43f aeda 	beq.w	ef32 <_dtoa_r+0x9ba>
    f17e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f180:	2a00      	cmp	r2, #0
    f182:	f77f abf3 	ble.w	e96c <_dtoa_r+0x3f4>
    f186:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    f18a:	ee26 6b04 	vmul.f64	d6, d6, d4
    f18e:	3001      	adds	r0, #1
    f190:	ee07 0a90 	vmov	s15, r0
    f194:	9b04      	ldr	r3, [sp, #16]
    f196:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    f19a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    f19e:	eea6 7b05 	vfma.f64	d7, d6, d5
    f1a2:	ee17 ca90 	vmov	ip, s15
    f1a6:	ec51 0b17 	vmov	r0, r1, d7
    f1aa:	1e5e      	subs	r6, r3, #1
    f1ac:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    f1b0:	f7ff bb47 	b.w	e842 <_dtoa_r+0x2ca>
    f1b4:	9b04      	ldr	r3, [sp, #16]
    f1b6:	3301      	adds	r3, #1
    f1b8:	9304      	str	r3, [sp, #16]
    f1ba:	2331      	movs	r3, #49	; 0x31
    f1bc:	f7ff bbb1 	b.w	e922 <_dtoa_r+0x3aa>
    f1c0:	9b04      	ldr	r3, [sp, #16]
    f1c2:	46bb      	mov	fp, r7
    f1c4:	3301      	adds	r3, #1
    f1c6:	9304      	str	r3, [sp, #16]
    f1c8:	2339      	movs	r3, #57	; 0x39
    f1ca:	4637      	mov	r7, r6
    f1cc:	f80b 3b01 	strb.w	r3, [fp], #1
    f1d0:	4646      	mov	r6, r8
    f1d2:	e4e1      	b.n	eb98 <_dtoa_r+0x620>
    f1d4:	f04f 0a00 	mov.w	sl, #0
    f1d8:	4656      	mov	r6, sl
    f1da:	e653      	b.n	ee84 <_dtoa_r+0x90c>
    f1dc:	9208      	str	r2, [sp, #32]
    f1de:	e47b      	b.n	ead8 <_dtoa_r+0x560>
    f1e0:	1c73      	adds	r3, r6, #1
    f1e2:	9304      	str	r3, [sp, #16]
    f1e4:	4689      	mov	r9, r1
    f1e6:	e4f7      	b.n	ebd8 <_dtoa_r+0x660>
    f1e8:	f47f af22 	bne.w	f030 <_dtoa_r+0xab8>
    f1ec:	07da      	lsls	r2, r3, #31
    f1ee:	f57f af1f 	bpl.w	f030 <_dtoa_r+0xab8>
    f1f2:	e718      	b.n	f026 <_dtoa_r+0xaae>
    f1f4:	2b39      	cmp	r3, #57	; 0x39
    f1f6:	d0e3      	beq.n	f1c0 <_dtoa_r+0xc48>
    f1f8:	f1b9 0f00 	cmp.w	r9, #0
    f1fc:	f73f af16 	bgt.w	f02c <_dtoa_r+0xab4>
    f200:	e716      	b.n	f030 <_dtoa_r+0xab8>
    f202:	9b01      	ldr	r3, [sp, #4]
    f204:	2b02      	cmp	r3, #2
    f206:	f73f ae28 	bgt.w	ee5a <_dtoa_r+0x8e2>
    f20a:	9704      	str	r7, [sp, #16]
    f20c:	e5ba      	b.n	ed84 <_dtoa_r+0x80c>
    f20e:	4601      	mov	r1, r0
    f210:	e78d      	b.n	f12e <_dtoa_r+0xbb6>
    f212:	9b01      	ldr	r3, [sp, #4]
    f214:	2b02      	cmp	r3, #2
    f216:	f73f ae20 	bgt.w	ee5a <_dtoa_r+0x8e2>
    f21a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    f21e:	9704      	str	r7, [sp, #16]
    f220:	e52b      	b.n	ec7a <_dtoa_r+0x702>
    f222:	2002      	movs	r0, #2
    f224:	f7ff baef 	b.w	e806 <_dtoa_r+0x28e>
    f228:	4b0b      	ldr	r3, [pc, #44]	; (f258 <_dtoa_r+0xce0>)
    f22a:	480c      	ldr	r0, [pc, #48]	; (f25c <_dtoa_r+0xce4>)
    f22c:	2200      	movs	r2, #0
    f22e:	f240 11af 	movw	r1, #431	; 0x1af
    f232:	f7fe ffe5 	bl	e200 <__assert_func>
    f236:	4b08      	ldr	r3, [pc, #32]	; (f258 <_dtoa_r+0xce0>)
    f238:	4808      	ldr	r0, [pc, #32]	; (f25c <_dtoa_r+0xce4>)
    f23a:	463a      	mov	r2, r7
    f23c:	f240 21ef 	movw	r1, #751	; 0x2ef
    f240:	f7fe ffde 	bl	e200 <__assert_func>
    f244:	4b06      	ldr	r3, [pc, #24]	; (f260 <_dtoa_r+0xce8>)
    f246:	9300      	str	r3, [sp, #0]
    f248:	f7ff b9d2 	b.w	e5f0 <_dtoa_r+0x78>
    f24c:	9b02      	ldr	r3, [sp, #8]
    f24e:	9308      	str	r3, [sp, #32]
    f250:	e4f7      	b.n	ec42 <_dtoa_r+0x6ca>
    f252:	bf00      	nop
    f254:	200002a8 	.word	0x200002a8
    f258:	20000768 	.word	0x20000768
    f25c:	20000a68 	.word	0x20000a68
    f260:	20000a58 	.word	0x20000a58

0000f264 <category>:
    f264:	4b15      	ldr	r3, [pc, #84]	; (f2bc <category+0x58>)
    f266:	4298      	cmp	r0, r3
    f268:	d823      	bhi.n	f2b2 <category+0x4e>
    f26a:	b570      	push	{r4, r5, r6, lr}
    f26c:	4e14      	ldr	r6, [pc, #80]	; (f2c0 <category+0x5c>)
    f26e:	f04f 0e00 	mov.w	lr, #0
    f272:	f640 04db 	movw	r4, #2267	; 0x8db
    f276:	e003      	b.n	f280 <category+0x1c>
    f278:	f102 0e01 	add.w	lr, r2, #1
    f27c:	45a6      	cmp	lr, r4
    f27e:	dc16      	bgt.n	f2ae <category+0x4a>
    f280:	eb04 020e 	add.w	r2, r4, lr
    f284:	f022 0301 	bic.w	r3, r2, #1
    f288:	eb03 0362 	add.w	r3, r3, r2, asr #1
    f28c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    f290:	1052      	asrs	r2, r2, #1
    f292:	7859      	ldrb	r1, [r3, #1]
    f294:	885d      	ldrh	r5, [r3, #2]
    f296:	f8b3 c004 	ldrh.w	ip, [r3, #4]
    f29a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    f29e:	448c      	add	ip, r1
    f2a0:	4560      	cmp	r0, ip
    f2a2:	d8e9      	bhi.n	f278 <category+0x14>
    f2a4:	4288      	cmp	r0, r1
    f2a6:	d206      	bcs.n	f2b6 <category+0x52>
    f2a8:	1e54      	subs	r4, r2, #1
    f2aa:	45a6      	cmp	lr, r4
    f2ac:	dde8      	ble.n	f280 <category+0x1c>
    f2ae:	20ff      	movs	r0, #255	; 0xff
    f2b0:	bd70      	pop	{r4, r5, r6, pc}
    f2b2:	20ff      	movs	r0, #255	; 0xff
    f2b4:	4770      	bx	lr
    f2b6:	7818      	ldrb	r0, [r3, #0]
    f2b8:	bd70      	pop	{r4, r5, r6, pc}
    f2ba:	bf00      	nop
    f2bc:	000e01ef 	.word	0x000e01ef
    f2c0:	200025c4 	.word	0x200025c4

0000f2c4 <fiprintf>:
    f2c4:	b40e      	push	{r1, r2, r3}
    f2c6:	b510      	push	{r4, lr}
    f2c8:	b083      	sub	sp, #12
    f2ca:	ab05      	add	r3, sp, #20
    f2cc:	4c06      	ldr	r4, [pc, #24]	; (f2e8 <fiprintf+0x24>)
    f2ce:	f853 2b04 	ldr.w	r2, [r3], #4
    f2d2:	9301      	str	r3, [sp, #4]
    f2d4:	4601      	mov	r1, r0
    f2d6:	6820      	ldr	r0, [r4, #0]
    f2d8:	f000 f97c 	bl	f5d4 <_vfiprintf_r>
    f2dc:	b003      	add	sp, #12
    f2de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f2e2:	b003      	add	sp, #12
    f2e4:	4770      	bx	lr
    f2e6:	bf00      	nop
    f2e8:	20008bc0 	.word	0x20008bc0

0000f2ec <__ssprint_r>:
    f2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2f0:	6893      	ldr	r3, [r2, #8]
    f2f2:	6817      	ldr	r7, [r2, #0]
    f2f4:	b083      	sub	sp, #12
    f2f6:	4692      	mov	sl, r2
    f2f8:	2b00      	cmp	r3, #0
    f2fa:	d070      	beq.n	f3de <__ssprint_r+0xf2>
    f2fc:	4681      	mov	r9, r0
    f2fe:	688a      	ldr	r2, [r1, #8]
    f300:	6808      	ldr	r0, [r1, #0]
    f302:	460c      	mov	r4, r1
    f304:	3708      	adds	r7, #8
    f306:	e043      	b.n	f390 <__ssprint_r+0xa4>
    f308:	89a3      	ldrh	r3, [r4, #12]
    f30a:	f413 6f90 	tst.w	r3, #1152	; 0x480
    f30e:	d02e      	beq.n	f36e <__ssprint_r+0x82>
    f310:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    f314:	eba0 0801 	sub.w	r8, r0, r1
    f318:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    f31c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    f320:	f108 0001 	add.w	r0, r8, #1
    f324:	1076      	asrs	r6, r6, #1
    f326:	4428      	add	r0, r5
    f328:	42b0      	cmp	r0, r6
    f32a:	4632      	mov	r2, r6
    f32c:	bf84      	itt	hi
    f32e:	4606      	movhi	r6, r0
    f330:	4632      	movhi	r2, r6
    f332:	055b      	lsls	r3, r3, #21
    f334:	d537      	bpl.n	f3a6 <__ssprint_r+0xba>
    f336:	4611      	mov	r1, r2
    f338:	4648      	mov	r0, r9
    f33a:	f7f7 fb09 	bl	6950 <_malloc_r>
    f33e:	9001      	str	r0, [sp, #4]
    f340:	2800      	cmp	r0, #0
    f342:	d03a      	beq.n	f3ba <__ssprint_r+0xce>
    f344:	4642      	mov	r2, r8
    f346:	6921      	ldr	r1, [r4, #16]
    f348:	f7f5 fc20 	bl	4b8c <memcpy>
    f34c:	89a2      	ldrh	r2, [r4, #12]
    f34e:	9b01      	ldr	r3, [sp, #4]
    f350:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    f354:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    f358:	81a2      	strh	r2, [r4, #12]
    f35a:	eba6 0208 	sub.w	r2, r6, r8
    f35e:	eb03 0008 	add.w	r0, r3, r8
    f362:	6166      	str	r6, [r4, #20]
    f364:	60a2      	str	r2, [r4, #8]
    f366:	6123      	str	r3, [r4, #16]
    f368:	6020      	str	r0, [r4, #0]
    f36a:	462e      	mov	r6, r5
    f36c:	46a8      	mov	r8, r5
    f36e:	4642      	mov	r2, r8
    f370:	4659      	mov	r1, fp
    f372:	f7f9 f93d 	bl	85f0 <memmove>
    f376:	f8da 3008 	ldr.w	r3, [sl, #8]
    f37a:	68a2      	ldr	r2, [r4, #8]
    f37c:	6820      	ldr	r0, [r4, #0]
    f37e:	1b92      	subs	r2, r2, r6
    f380:	4440      	add	r0, r8
    f382:	1b5b      	subs	r3, r3, r5
    f384:	60a2      	str	r2, [r4, #8]
    f386:	6020      	str	r0, [r4, #0]
    f388:	f8ca 3008 	str.w	r3, [sl, #8]
    f38c:	b33b      	cbz	r3, f3de <__ssprint_r+0xf2>
    f38e:	3708      	adds	r7, #8
    f390:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    f394:	2d00      	cmp	r5, #0
    f396:	d0fa      	beq.n	f38e <__ssprint_r+0xa2>
    f398:	42aa      	cmp	r2, r5
    f39a:	4616      	mov	r6, r2
    f39c:	4690      	mov	r8, r2
    f39e:	d9b3      	bls.n	f308 <__ssprint_r+0x1c>
    f3a0:	462e      	mov	r6, r5
    f3a2:	46a8      	mov	r8, r5
    f3a4:	e7e3      	b.n	f36e <__ssprint_r+0x82>
    f3a6:	4648      	mov	r0, r9
    f3a8:	f7f7 fd9a 	bl	6ee0 <_realloc_r>
    f3ac:	4603      	mov	r3, r0
    f3ae:	2800      	cmp	r0, #0
    f3b0:	d1d3      	bne.n	f35a <__ssprint_r+0x6e>
    f3b2:	6921      	ldr	r1, [r4, #16]
    f3b4:	4648      	mov	r0, r9
    f3b6:	f7f9 fdf5 	bl	8fa4 <_free_r>
    f3ba:	89a3      	ldrh	r3, [r4, #12]
    f3bc:	220c      	movs	r2, #12
    f3be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f3c2:	f8c9 2000 	str.w	r2, [r9]
    f3c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f3ca:	81a3      	strh	r3, [r4, #12]
    f3cc:	2200      	movs	r2, #0
    f3ce:	2300      	movs	r3, #0
    f3d0:	f8ca 2008 	str.w	r2, [sl, #8]
    f3d4:	f8ca 3004 	str.w	r3, [sl, #4]
    f3d8:	b003      	add	sp, #12
    f3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3de:	2000      	movs	r0, #0
    f3e0:	2300      	movs	r3, #0
    f3e2:	f8ca 3004 	str.w	r3, [sl, #4]
    f3e6:	b003      	add	sp, #12
    f3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f3ec <_sungetc_r>:
    f3ec:	b538      	push	{r3, r4, r5, lr}
    f3ee:	1c4b      	adds	r3, r1, #1
    f3f0:	d01a      	beq.n	f428 <_sungetc_r+0x3c>
    f3f2:	8993      	ldrh	r3, [r2, #12]
    f3f4:	4614      	mov	r4, r2
    f3f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
    f3f8:	f023 0320 	bic.w	r3, r3, #32
    f3fc:	81a3      	strh	r3, [r4, #12]
    f3fe:	b2cd      	uxtb	r5, r1
    f400:	b1aa      	cbz	r2, f42e <_sungetc_r+0x42>
    f402:	6862      	ldr	r2, [r4, #4]
    f404:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f406:	429a      	cmp	r2, r3
    f408:	da09      	bge.n	f41e <_sungetc_r+0x32>
    f40a:	6823      	ldr	r3, [r4, #0]
    f40c:	1e5a      	subs	r2, r3, #1
    f40e:	6022      	str	r2, [r4, #0]
    f410:	f803 5c01 	strb.w	r5, [r3, #-1]
    f414:	6863      	ldr	r3, [r4, #4]
    f416:	3301      	adds	r3, #1
    f418:	6063      	str	r3, [r4, #4]
    f41a:	4628      	mov	r0, r5
    f41c:	bd38      	pop	{r3, r4, r5, pc}
    f41e:	4621      	mov	r1, r4
    f420:	f001 f8de 	bl	105e0 <__submore>
    f424:	2800      	cmp	r0, #0
    f426:	d0f0      	beq.n	f40a <_sungetc_r+0x1e>
    f428:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    f42c:	e7f5      	b.n	f41a <_sungetc_r+0x2e>
    f42e:	6923      	ldr	r3, [r4, #16]
    f430:	6822      	ldr	r2, [r4, #0]
    f432:	b12b      	cbz	r3, f440 <_sungetc_r+0x54>
    f434:	4293      	cmp	r3, r2
    f436:	d203      	bcs.n	f440 <_sungetc_r+0x54>
    f438:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    f43c:	42ab      	cmp	r3, r5
    f43e:	d00f      	beq.n	f460 <_sungetc_r+0x74>
    f440:	6861      	ldr	r1, [r4, #4]
    f442:	63e1      	str	r1, [r4, #60]	; 0x3c
    f444:	4623      	mov	r3, r4
    f446:	63a2      	str	r2, [r4, #56]	; 0x38
    f448:	f104 0140 	add.w	r1, r4, #64	; 0x40
    f44c:	2203      	movs	r2, #3
    f44e:	6362      	str	r2, [r4, #52]	; 0x34
    f450:	6321      	str	r1, [r4, #48]	; 0x30
    f452:	f803 5f42 	strb.w	r5, [r3, #66]!
    f456:	2201      	movs	r2, #1
    f458:	e9c4 3200 	strd	r3, r2, [r4]
    f45c:	4628      	mov	r0, r5
    f45e:	bd38      	pop	{r3, r4, r5, pc}
    f460:	6863      	ldr	r3, [r4, #4]
    f462:	3a01      	subs	r2, #1
    f464:	3301      	adds	r3, #1
    f466:	e9c4 2300 	strd	r2, r3, [r4]
    f46a:	e7d6      	b.n	f41a <_sungetc_r+0x2e>

0000f46c <__ssrefill_r>:
    f46c:	b510      	push	{r4, lr}
    f46e:	460c      	mov	r4, r1
    f470:	6b09      	ldr	r1, [r1, #48]	; 0x30
    f472:	b169      	cbz	r1, f490 <__ssrefill_r+0x24>
    f474:	f104 0340 	add.w	r3, r4, #64	; 0x40
    f478:	4299      	cmp	r1, r3
    f47a:	d001      	beq.n	f480 <__ssrefill_r+0x14>
    f47c:	f7f9 fd92 	bl	8fa4 <_free_r>
    f480:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f482:	6063      	str	r3, [r4, #4]
    f484:	2000      	movs	r0, #0
    f486:	6320      	str	r0, [r4, #48]	; 0x30
    f488:	b113      	cbz	r3, f490 <__ssrefill_r+0x24>
    f48a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f48c:	6023      	str	r3, [r4, #0]
    f48e:	bd10      	pop	{r4, pc}
    f490:	89a3      	ldrh	r3, [r4, #12]
    f492:	6921      	ldr	r1, [r4, #16]
    f494:	2200      	movs	r2, #0
    f496:	f043 0320 	orr.w	r3, r3, #32
    f49a:	e9c4 1200 	strd	r1, r2, [r4]
    f49e:	81a3      	strh	r3, [r4, #12]
    f4a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f4a4:	bd10      	pop	{r4, pc}
    f4a6:	bf00      	nop

0000f4a8 <_sfread_r>:
    f4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4ac:	b085      	sub	sp, #20
    f4ae:	e9cd 3202 	strd	r3, r2, [sp, #8]
    f4b2:	fb02 f303 	mul.w	r3, r2, r3
    f4b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    f4b8:	9301      	str	r3, [sp, #4]
    f4ba:	b3a3      	cbz	r3, f526 <_sfread_r+0x7e>
    f4bc:	f8d4 a004 	ldr.w	sl, [r4, #4]
    f4c0:	9b01      	ldr	r3, [sp, #4]
    f4c2:	4553      	cmp	r3, sl
    f4c4:	468b      	mov	fp, r1
    f4c6:	d946      	bls.n	f556 <_sfread_r+0xae>
    f4c8:	46a0      	mov	r8, r4
    f4ca:	9d01      	ldr	r5, [sp, #4]
    f4cc:	f858 1b40 	ldr.w	r1, [r8], #64
    f4d0:	4607      	mov	r7, r0
    f4d2:	2600      	movs	r6, #0
    f4d4:	4652      	mov	r2, sl
    f4d6:	4658      	mov	r0, fp
    f4d8:	f7f5 fb58 	bl	4b8c <memcpy>
    f4dc:	6823      	ldr	r3, [r4, #0]
    f4de:	6b22      	ldr	r2, [r4, #48]	; 0x30
    f4e0:	4453      	add	r3, sl
    f4e2:	46a9      	mov	r9, r5
    f4e4:	e9c4 3600 	strd	r3, r6, [r4]
    f4e8:	4611      	mov	r1, r2
    f4ea:	4638      	mov	r0, r7
    f4ec:	44d3      	add	fp, sl
    f4ee:	eba5 050a 	sub.w	r5, r5, sl
    f4f2:	b1e2      	cbz	r2, f52e <_sfread_r+0x86>
    f4f4:	4542      	cmp	r2, r8
    f4f6:	d001      	beq.n	f4fc <_sfread_r+0x54>
    f4f8:	f7f9 fd54 	bl	8fa4 <_free_r>
    f4fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f4fe:	6326      	str	r6, [r4, #48]	; 0x30
    f500:	6063      	str	r3, [r4, #4]
    f502:	b1a3      	cbz	r3, f52e <_sfread_r+0x86>
    f504:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    f506:	6021      	str	r1, [r4, #0]
    f508:	42ab      	cmp	r3, r5
    f50a:	469a      	mov	sl, r3
    f50c:	d3e2      	bcc.n	f4d4 <_sfread_r+0x2c>
    f50e:	9b02      	ldr	r3, [sp, #8]
    f510:	9301      	str	r3, [sp, #4]
    f512:	462a      	mov	r2, r5
    f514:	4658      	mov	r0, fp
    f516:	f7f5 fb39 	bl	4b8c <memcpy>
    f51a:	e9d4 3200 	ldrd	r3, r2, [r4]
    f51e:	1b52      	subs	r2, r2, r5
    f520:	442b      	add	r3, r5
    f522:	e9c4 3200 	strd	r3, r2, [r4]
    f526:	9801      	ldr	r0, [sp, #4]
    f528:	b005      	add	sp, #20
    f52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f52e:	9a01      	ldr	r2, [sp, #4]
    f530:	9b03      	ldr	r3, [sp, #12]
    f532:	4452      	add	r2, sl
    f534:	eba2 0209 	sub.w	r2, r2, r9
    f538:	fbb2 f3f3 	udiv	r3, r2, r3
    f53c:	9301      	str	r3, [sp, #4]
    f53e:	89a3      	ldrh	r3, [r4, #12]
    f540:	6922      	ldr	r2, [r4, #16]
    f542:	9801      	ldr	r0, [sp, #4]
    f544:	f043 0320 	orr.w	r3, r3, #32
    f548:	81a3      	strh	r3, [r4, #12]
    f54a:	2300      	movs	r3, #0
    f54c:	e9c4 2300 	strd	r2, r3, [r4]
    f550:	b005      	add	sp, #20
    f552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f556:	6821      	ldr	r1, [r4, #0]
    f558:	461d      	mov	r5, r3
    f55a:	e7d8      	b.n	f50e <_sfread_r+0x66>

0000f55c <__sprint_r.part.0>:
    f55c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f560:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    f562:	049c      	lsls	r4, r3, #18
    f564:	4690      	mov	r8, r2
    f566:	d52d      	bpl.n	f5c4 <__sprint_r.part.0+0x68>
    f568:	6893      	ldr	r3, [r2, #8]
    f56a:	6812      	ldr	r2, [r2, #0]
    f56c:	b343      	cbz	r3, f5c0 <__sprint_r.part.0+0x64>
    f56e:	468b      	mov	fp, r1
    f570:	4606      	mov	r6, r0
    f572:	f102 0908 	add.w	r9, r2, #8
    f576:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    f57a:	ea5f 079a 	movs.w	r7, sl, lsr #2
    f57e:	d015      	beq.n	f5ac <__sprint_r.part.0+0x50>
    f580:	3d04      	subs	r5, #4
    f582:	2400      	movs	r4, #0
    f584:	e001      	b.n	f58a <__sprint_r.part.0+0x2e>
    f586:	42a7      	cmp	r7, r4
    f588:	d00e      	beq.n	f5a8 <__sprint_r.part.0+0x4c>
    f58a:	f855 1f04 	ldr.w	r1, [r5, #4]!
    f58e:	465a      	mov	r2, fp
    f590:	4630      	mov	r0, r6
    f592:	f001 fa97 	bl	10ac4 <_fputwc_r>
    f596:	1c43      	adds	r3, r0, #1
    f598:	f104 0401 	add.w	r4, r4, #1
    f59c:	d1f3      	bne.n	f586 <__sprint_r.part.0+0x2a>
    f59e:	2300      	movs	r3, #0
    f5a0:	e9c8 3301 	strd	r3, r3, [r8, #4]
    f5a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f5a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
    f5ac:	f02a 0a03 	bic.w	sl, sl, #3
    f5b0:	eba3 030a 	sub.w	r3, r3, sl
    f5b4:	f8c8 3008 	str.w	r3, [r8, #8]
    f5b8:	f109 0908 	add.w	r9, r9, #8
    f5bc:	2b00      	cmp	r3, #0
    f5be:	d1da      	bne.n	f576 <__sprint_r.part.0+0x1a>
    f5c0:	2000      	movs	r0, #0
    f5c2:	e7ec      	b.n	f59e <__sprint_r.part.0+0x42>
    f5c4:	f001 f848 	bl	10658 <__sfvwrite_r>
    f5c8:	2300      	movs	r3, #0
    f5ca:	e9c8 3301 	strd	r3, r3, [r8, #4]
    f5ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f5d2:	bf00      	nop

0000f5d4 <_vfiprintf_r>:
    f5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f5d8:	ed2d 8b02 	vpush	{d8}
    f5dc:	b0c5      	sub	sp, #276	; 0x114
    f5de:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    f5e2:	4683      	mov	fp, r0
    f5e4:	ee08 1a10 	vmov	s16, r1
    f5e8:	4616      	mov	r6, r2
    f5ea:	2100      	movs	r1, #0
    f5ec:	2208      	movs	r2, #8
    f5ee:	4650      	mov	r0, sl
    f5f0:	461c      	mov	r4, r3
    f5f2:	9307      	str	r3, [sp, #28]
    f5f4:	f7f9 f878 	bl	86e8 <memset>
    f5f8:	f1bb 0f00 	cmp.w	fp, #0
    f5fc:	d004      	beq.n	f608 <_vfiprintf_r+0x34>
    f5fe:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    f602:	2b00      	cmp	r3, #0
    f604:	f000 86a0 	beq.w	10348 <_vfiprintf_r+0xd74>
    f608:	ee18 2a10 	vmov	r2, s16
    f60c:	6e53      	ldr	r3, [r2, #100]	; 0x64
    f60e:	07db      	lsls	r3, r3, #31
    f610:	f140 8513 	bpl.w	1003a <_vfiprintf_r+0xa66>
    f614:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    f618:	b28a      	uxth	r2, r1
    f61a:	0495      	lsls	r5, r2, #18
    f61c:	d40b      	bmi.n	f636 <_vfiprintf_r+0x62>
    f61e:	ee18 3a10 	vmov	r3, s16
    f622:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    f626:	8199      	strh	r1, [r3, #12]
    f628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    f62a:	b28a      	uxth	r2, r1
    f62c:	ee18 1a10 	vmov	r1, s16
    f630:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    f634:	664b      	str	r3, [r1, #100]	; 0x64
    f636:	0710      	lsls	r0, r2, #28
    f638:	f140 8105 	bpl.w	f846 <_vfiprintf_r+0x272>
    f63c:	ee18 3a10 	vmov	r3, s16
    f640:	691b      	ldr	r3, [r3, #16]
    f642:	2b00      	cmp	r3, #0
    f644:	f000 80ff 	beq.w	f846 <_vfiprintf_r+0x272>
    f648:	f002 031a 	and.w	r3, r2, #26
    f64c:	2b0a      	cmp	r3, #10
    f64e:	f000 810a 	beq.w	f866 <_vfiprintf_r+0x292>
    f652:	2300      	movs	r3, #0
    f654:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    f658:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    f65c:	aa1b      	add	r2, sp, #108	; 0x6c
    f65e:	930c      	str	r3, [sp, #48]	; 0x30
    f660:	9218      	str	r2, [sp, #96]	; 0x60
    f662:	4691      	mov	r9, r2
    f664:	930b      	str	r3, [sp, #44]	; 0x2c
    f666:	9305      	str	r3, [sp, #20]
    f668:	46b0      	mov	r8, r6
    f66a:	4644      	mov	r4, r8
    f66c:	4ba8      	ldr	r3, [pc, #672]	; (f910 <_vfiprintf_r+0x33c>)
    f66e:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    f672:	f7f9 f903 	bl	887c <__locale_mb_cur_max>
    f676:	4622      	mov	r2, r4
    f678:	4603      	mov	r3, r0
    f67a:	a912      	add	r1, sp, #72	; 0x48
    f67c:	f8cd a000 	str.w	sl, [sp]
    f680:	4658      	mov	r0, fp
    f682:	47a8      	blx	r5
    f684:	2800      	cmp	r0, #0
    f686:	f000 8145 	beq.w	f914 <_vfiprintf_r+0x340>
    f68a:	f2c0 8139 	blt.w	f900 <_vfiprintf_r+0x32c>
    f68e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    f690:	2a25      	cmp	r2, #37	; 0x25
    f692:	4603      	mov	r3, r0
    f694:	d001      	beq.n	f69a <_vfiprintf_r+0xc6>
    f696:	441c      	add	r4, r3
    f698:	e7e8      	b.n	f66c <_vfiprintf_r+0x98>
    f69a:	ebb4 0608 	subs.w	r6, r4, r8
    f69e:	4605      	mov	r5, r0
    f6a0:	f040 813c 	bne.w	f91c <_vfiprintf_r+0x348>
    f6a4:	2300      	movs	r3, #0
    f6a6:	7861      	ldrb	r1, [r4, #1]
    f6a8:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    f6ac:	f104 0801 	add.w	r8, r4, #1
    f6b0:	9306      	str	r3, [sp, #24]
    f6b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    f6b6:	461e      	mov	r6, r3
    f6b8:	242b      	movs	r4, #43	; 0x2b
    f6ba:	f108 0801 	add.w	r8, r8, #1
    f6be:	f1a1 0320 	sub.w	r3, r1, #32
    f6c2:	2b5a      	cmp	r3, #90	; 0x5a
    f6c4:	f200 8178 	bhi.w	f9b8 <_vfiprintf_r+0x3e4>
    f6c8:	e8df f013 	tbh	[pc, r3, lsl #1]
    f6cc:	017602b5 	.word	0x017602b5
    f6d0:	02b00176 	.word	0x02b00176
    f6d4:	01760176 	.word	0x01760176
    f6d8:	006a0176 	.word	0x006a0176
    f6dc:	01760176 	.word	0x01760176
    f6e0:	028d027d 	.word	0x028d027d
    f6e4:	02880176 	.word	0x02880176
    f6e8:	01760297 	.word	0x01760297
    f6ec:	005b0292 	.word	0x005b0292
    f6f0:	005b005b 	.word	0x005b005b
    f6f4:	005b005b 	.word	0x005b005b
    f6f8:	005b005b 	.word	0x005b005b
    f6fc:	005b005b 	.word	0x005b005b
    f700:	01760176 	.word	0x01760176
    f704:	01760176 	.word	0x01760176
    f708:	01760176 	.word	0x01760176
    f70c:	01760176 	.word	0x01760176
    f710:	025c0176 	.word	0x025c0176
    f714:	01760084 	.word	0x01760084
    f718:	01760176 	.word	0x01760176
    f71c:	01760176 	.word	0x01760176
    f720:	01760176 	.word	0x01760176
    f724:	01760176 	.word	0x01760176
    f728:	00e80176 	.word	0x00e80176
    f72c:	01760176 	.word	0x01760176
    f730:	02330176 	.word	0x02330176
    f734:	02da0176 	.word	0x02da0176
    f738:	01760176 	.word	0x01760176
    f73c:	0176058b 	.word	0x0176058b
    f740:	01760176 	.word	0x01760176
    f744:	01760176 	.word	0x01760176
    f748:	01760176 	.word	0x01760176
    f74c:	01760176 	.word	0x01760176
    f750:	025c0176 	.word	0x025c0176
    f754:	01760086 	.word	0x01760086
    f758:	01760176 	.word	0x01760176
    f75c:	008602cd 	.word	0x008602cd
    f760:	0176007f 	.word	0x0176007f
    f764:	017602c0 	.word	0x017602c0
    f768:	00ea02fd 	.word	0x00ea02fd
    f76c:	007f02ed 	.word	0x007f02ed
    f770:	02330176 	.word	0x02330176
    f774:	0569007c 	.word	0x0569007c
    f778:	01760176 	.word	0x01760176
    f77c:	0176056b 	.word	0x0176056b
    f780:	007c      	.short	0x007c
    f782:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    f786:	2200      	movs	r2, #0
    f788:	f818 1b01 	ldrb.w	r1, [r8], #1
    f78c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    f790:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    f794:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    f798:	2b09      	cmp	r3, #9
    f79a:	d9f5      	bls.n	f788 <_vfiprintf_r+0x1b4>
    f79c:	9206      	str	r2, [sp, #24]
    f79e:	e78e      	b.n	f6be <_vfiprintf_r+0xea>
    f7a0:	4658      	mov	r0, fp
    f7a2:	f7fe fa9d 	bl	dce0 <_localeconv_r>
    f7a6:	6843      	ldr	r3, [r0, #4]
    f7a8:	930d      	str	r3, [sp, #52]	; 0x34
    f7aa:	4618      	mov	r0, r3
    f7ac:	f7f9 fae8 	bl	8d80 <strlen>
    f7b0:	900e      	str	r0, [sp, #56]	; 0x38
    f7b2:	4605      	mov	r5, r0
    f7b4:	4658      	mov	r0, fp
    f7b6:	f7fe fa93 	bl	dce0 <_localeconv_r>
    f7ba:	6883      	ldr	r3, [r0, #8]
    f7bc:	930b      	str	r3, [sp, #44]	; 0x2c
    f7be:	2d00      	cmp	r5, #0
    f7c0:	f040 84d6 	bne.w	10170 <_vfiprintf_r+0xb9c>
    f7c4:	f898 1000 	ldrb.w	r1, [r8]
    f7c8:	e777      	b.n	f6ba <_vfiprintf_r+0xe6>
    f7ca:	f898 1000 	ldrb.w	r1, [r8]
    f7ce:	f046 0620 	orr.w	r6, r6, #32
    f7d2:	e772      	b.n	f6ba <_vfiprintf_r+0xe6>
    f7d4:	f046 0610 	orr.w	r6, r6, #16
    f7d8:	06b4      	lsls	r4, r6, #26
    f7da:	f140 818e 	bpl.w	fafa <_vfiprintf_r+0x526>
    f7de:	9b07      	ldr	r3, [sp, #28]
    f7e0:	3307      	adds	r3, #7
    f7e2:	f023 0307 	bic.w	r3, r3, #7
    f7e6:	461a      	mov	r2, r3
    f7e8:	6859      	ldr	r1, [r3, #4]
    f7ea:	f852 3b08 	ldr.w	r3, [r2], #8
    f7ee:	9207      	str	r2, [sp, #28]
    f7f0:	460a      	mov	r2, r1
    f7f2:	2900      	cmp	r1, #0
    f7f4:	f2c0 8470 	blt.w	100d8 <_vfiprintf_r+0xb04>
    f7f8:	1c79      	adds	r1, r7, #1
    f7fa:	f000 85a2 	beq.w	10342 <_vfiprintf_r+0xd6e>
    f7fe:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    f802:	9103      	str	r1, [sp, #12]
    f804:	ea53 0102 	orrs.w	r1, r3, r2
    f808:	f000 843f 	beq.w	1008a <_vfiprintf_r+0xab6>
    f80c:	2b0a      	cmp	r3, #10
    f80e:	f172 0100 	sbcs.w	r1, r2, #0
    f812:	f080 8541 	bcs.w	10298 <_vfiprintf_r+0xcc4>
    f816:	3330      	adds	r3, #48	; 0x30
    f818:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    f81c:	9e03      	ldr	r6, [sp, #12]
    f81e:	2301      	movs	r3, #1
    f820:	9304      	str	r3, [sp, #16]
    f822:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    f826:	9b04      	ldr	r3, [sp, #16]
    f828:	42bb      	cmp	r3, r7
    f82a:	bfb8      	it	lt
    f82c:	463b      	movlt	r3, r7
    f82e:	9303      	str	r3, [sp, #12]
    f830:	2300      	movs	r3, #0
    f832:	9308      	str	r3, [sp, #32]
    f834:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    f838:	2b00      	cmp	r3, #0
    f83a:	f000 80cb 	beq.w	f9d4 <_vfiprintf_r+0x400>
    f83e:	9b03      	ldr	r3, [sp, #12]
    f840:	3301      	adds	r3, #1
    f842:	9303      	str	r3, [sp, #12]
    f844:	e0c6      	b.n	f9d4 <_vfiprintf_r+0x400>
    f846:	ee18 1a10 	vmov	r1, s16
    f84a:	4658      	mov	r0, fp
    f84c:	ee18 5a10 	vmov	r5, s16
    f850:	f001 f87c 	bl	1094c <__swsetup_r>
    f854:	2800      	cmp	r0, #0
    f856:	f040 8652 	bne.w	104fe <_vfiprintf_r+0xf2a>
    f85a:	89aa      	ldrh	r2, [r5, #12]
    f85c:	f002 031a 	and.w	r3, r2, #26
    f860:	2b0a      	cmp	r3, #10
    f862:	f47f aef6 	bne.w	f652 <_vfiprintf_r+0x7e>
    f866:	ee18 1a10 	vmov	r1, s16
    f86a:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    f86e:	2b00      	cmp	r3, #0
    f870:	f6ff aeef 	blt.w	f652 <_vfiprintf_r+0x7e>
    f874:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    f876:	07db      	lsls	r3, r3, #31
    f878:	d402      	bmi.n	f880 <_vfiprintf_r+0x2ac>
    f87a:	0597      	lsls	r7, r2, #22
    f87c:	f140 8612 	bpl.w	104a4 <_vfiprintf_r+0xed0>
    f880:	ee18 1a10 	vmov	r1, s16
    f884:	4623      	mov	r3, r4
    f886:	4632      	mov	r2, r6
    f888:	4658      	mov	r0, fp
    f88a:	f000 fe69 	bl	10560 <__sbprintf>
    f88e:	9005      	str	r0, [sp, #20]
    f890:	9805      	ldr	r0, [sp, #20]
    f892:	b045      	add	sp, #276	; 0x114
    f894:	ecbd 8b02 	vpop	{d8}
    f898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f89c:	f046 0610 	orr.w	r6, r6, #16
    f8a0:	f016 0220 	ands.w	r2, r6, #32
    f8a4:	f000 8136 	beq.w	fb14 <_vfiprintf_r+0x540>
    f8a8:	9b07      	ldr	r3, [sp, #28]
    f8aa:	3307      	adds	r3, #7
    f8ac:	f023 0307 	bic.w	r3, r3, #7
    f8b0:	4619      	mov	r1, r3
    f8b2:	685a      	ldr	r2, [r3, #4]
    f8b4:	f851 3b08 	ldr.w	r3, [r1], #8
    f8b8:	9107      	str	r1, [sp, #28]
    f8ba:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    f8be:	9103      	str	r1, [sp, #12]
    f8c0:	2100      	movs	r1, #0
    f8c2:	2000      	movs	r0, #0
    f8c4:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    f8c8:	1c78      	adds	r0, r7, #1
    f8ca:	f000 8210 	beq.w	fcee <_vfiprintf_r+0x71a>
    f8ce:	9803      	ldr	r0, [sp, #12]
    f8d0:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    f8d4:	ea53 0002 	orrs.w	r0, r3, r2
    f8d8:	f040 8208 	bne.w	fcec <_vfiprintf_r+0x718>
    f8dc:	2f00      	cmp	r7, #0
    f8de:	f040 8538 	bne.w	10352 <_vfiprintf_r+0xd7e>
    f8e2:	2900      	cmp	r1, #0
    f8e4:	f040 83d5 	bne.w	10092 <_vfiprintf_r+0xabe>
    f8e8:	9b03      	ldr	r3, [sp, #12]
    f8ea:	f013 0301 	ands.w	r3, r3, #1
    f8ee:	9304      	str	r3, [sp, #16]
    f8f0:	f000 8411 	beq.w	10116 <_vfiprintf_r+0xb42>
    f8f4:	2330      	movs	r3, #48	; 0x30
    f8f6:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    f8fa:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    f8fe:	e792      	b.n	f826 <_vfiprintf_r+0x252>
    f900:	2208      	movs	r2, #8
    f902:	2100      	movs	r1, #0
    f904:	4650      	mov	r0, sl
    f906:	f7f8 feef 	bl	86e8 <memset>
    f90a:	2301      	movs	r3, #1
    f90c:	441c      	add	r4, r3
    f90e:	e6ad      	b.n	f66c <_vfiprintf_r+0x98>
    f910:	20008638 	.word	0x20008638
    f914:	ebb4 0608 	subs.w	r6, r4, r8
    f918:	4605      	mov	r5, r0
    f91a:	d01b      	beq.n	f954 <_vfiprintf_r+0x380>
    f91c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    f91e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    f920:	3301      	adds	r3, #1
    f922:	4432      	add	r2, r6
    f924:	2b07      	cmp	r3, #7
    f926:	e9c9 8600 	strd	r8, r6, [r9]
    f92a:	921a      	str	r2, [sp, #104]	; 0x68
    f92c:	9319      	str	r3, [sp, #100]	; 0x64
    f92e:	dd1c      	ble.n	f96a <_vfiprintf_r+0x396>
    f930:	2a00      	cmp	r2, #0
    f932:	f000 83a6 	beq.w	10082 <_vfiprintf_r+0xaae>
    f936:	ee18 1a10 	vmov	r1, s16
    f93a:	aa18      	add	r2, sp, #96	; 0x60
    f93c:	4658      	mov	r0, fp
    f93e:	f7ff fe0d 	bl	f55c <__sprint_r.part.0>
    f942:	bb20      	cbnz	r0, f98e <_vfiprintf_r+0x3ba>
    f944:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    f948:	9b05      	ldr	r3, [sp, #20]
    f94a:	4433      	add	r3, r6
    f94c:	9305      	str	r3, [sp, #20]
    f94e:	2d00      	cmp	r5, #0
    f950:	f47f aea8 	bne.w	f6a4 <_vfiprintf_r+0xd0>
    f954:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    f956:	2b00      	cmp	r3, #0
    f958:	f040 85c1 	bne.w	104de <_vfiprintf_r+0xf0a>
    f95c:	ee18 3a10 	vmov	r3, s16
    f960:	2200      	movs	r2, #0
    f962:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    f966:	9219      	str	r2, [sp, #100]	; 0x64
    f968:	e015      	b.n	f996 <_vfiprintf_r+0x3c2>
    f96a:	f109 0908 	add.w	r9, r9, #8
    f96e:	e7eb      	b.n	f948 <_vfiprintf_r+0x374>
    f970:	ee18 1a10 	vmov	r1, s16
    f974:	aa18      	add	r2, sp, #96	; 0x60
    f976:	4658      	mov	r0, fp
    f978:	f7ff fdf0 	bl	f55c <__sprint_r.part.0>
    f97c:	2800      	cmp	r0, #0
    f97e:	f000 80a6 	beq.w	face <_vfiprintf_r+0x4fa>
    f982:	9b08      	ldr	r3, [sp, #32]
    f984:	b11b      	cbz	r3, f98e <_vfiprintf_r+0x3ba>
    f986:	9908      	ldr	r1, [sp, #32]
    f988:	4658      	mov	r0, fp
    f98a:	f7f9 fb0b 	bl	8fa4 <_free_r>
    f98e:	ee18 3a10 	vmov	r3, s16
    f992:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    f996:	ee18 2a10 	vmov	r2, s16
    f99a:	6e52      	ldr	r2, [r2, #100]	; 0x64
    f99c:	f012 0f01 	tst.w	r2, #1
    f9a0:	b29a      	uxth	r2, r3
    f9a2:	f000 80a0 	beq.w	fae6 <_vfiprintf_r+0x512>
    f9a6:	0650      	lsls	r0, r2, #25
    f9a8:	f100 85b2 	bmi.w	10510 <_vfiprintf_r+0xf3c>
    f9ac:	9805      	ldr	r0, [sp, #20]
    f9ae:	b045      	add	sp, #276	; 0x114
    f9b0:	ecbd 8b02 	vpop	{d8}
    f9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f9b8:	2900      	cmp	r1, #0
    f9ba:	d0cb      	beq.n	f954 <_vfiprintf_r+0x380>
    f9bc:	2300      	movs	r3, #0
    f9be:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    f9c2:	2301      	movs	r3, #1
    f9c4:	e9cd 3303 	strd	r3, r3, [sp, #12]
    f9c8:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    f9cc:	ac2b      	add	r4, sp, #172	; 0xac
    f9ce:	2300      	movs	r3, #0
    f9d0:	9308      	str	r3, [sp, #32]
    f9d2:	461f      	mov	r7, r3
    f9d4:	f016 0302 	ands.w	r3, r6, #2
    f9d8:	9309      	str	r3, [sp, #36]	; 0x24
    f9da:	d002      	beq.n	f9e2 <_vfiprintf_r+0x40e>
    f9dc:	9b03      	ldr	r3, [sp, #12]
    f9de:	3302      	adds	r3, #2
    f9e0:	9303      	str	r3, [sp, #12]
    f9e2:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    f9e6:	930a      	str	r3, [sp, #40]	; 0x28
    f9e8:	d105      	bne.n	f9f6 <_vfiprintf_r+0x422>
    f9ea:	9b06      	ldr	r3, [sp, #24]
    f9ec:	9a03      	ldr	r2, [sp, #12]
    f9ee:	1a9d      	subs	r5, r3, r2
    f9f0:	2d00      	cmp	r5, #0
    f9f2:	f300 827b 	bgt.w	feec <_vfiprintf_r+0x918>
    f9f6:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    f9fa:	1c41      	adds	r1, r0, #1
    f9fc:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    fa00:	b182      	cbz	r2, fa24 <_vfiprintf_r+0x450>
    fa02:	2201      	movs	r2, #1
    fa04:	3301      	adds	r3, #1
    fa06:	f8c9 2004 	str.w	r2, [r9, #4]
    fa0a:	2907      	cmp	r1, #7
    fa0c:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    fa10:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    fa14:	f8c9 2000 	str.w	r2, [r9]
    fa18:	f300 824a 	bgt.w	feb0 <_vfiprintf_r+0x8dc>
    fa1c:	4608      	mov	r0, r1
    fa1e:	f109 0908 	add.w	r9, r9, #8
    fa22:	3101      	adds	r1, #1
    fa24:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fa26:	b1e2      	cbz	r2, fa62 <_vfiprintf_r+0x48e>
    fa28:	aa11      	add	r2, sp, #68	; 0x44
    fa2a:	3302      	adds	r3, #2
    fa2c:	f8c9 2000 	str.w	r2, [r9]
    fa30:	2907      	cmp	r1, #7
    fa32:	f04f 0202 	mov.w	r2, #2
    fa36:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    fa3a:	f8c9 2004 	str.w	r2, [r9, #4]
    fa3e:	f340 8250 	ble.w	fee2 <_vfiprintf_r+0x90e>
    fa42:	2b00      	cmp	r3, #0
    fa44:	f000 8343 	beq.w	100ce <_vfiprintf_r+0xafa>
    fa48:	ee18 1a10 	vmov	r1, s16
    fa4c:	aa18      	add	r2, sp, #96	; 0x60
    fa4e:	4658      	mov	r0, fp
    fa50:	f7ff fd84 	bl	f55c <__sprint_r.part.0>
    fa54:	2800      	cmp	r0, #0
    fa56:	d194      	bne.n	f982 <_vfiprintf_r+0x3ae>
    fa58:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    fa5c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fa60:	1c41      	adds	r1, r0, #1
    fa62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fa64:	2a80      	cmp	r2, #128	; 0x80
    fa66:	f000 8184 	beq.w	fd72 <_vfiprintf_r+0x79e>
    fa6a:	9a04      	ldr	r2, [sp, #16]
    fa6c:	1abd      	subs	r5, r7, r2
    fa6e:	2d00      	cmp	r5, #0
    fa70:	f300 81d7 	bgt.w	fe22 <_vfiprintf_r+0x84e>
    fa74:	9a04      	ldr	r2, [sp, #16]
    fa76:	f8c9 4000 	str.w	r4, [r9]
    fa7a:	4413      	add	r3, r2
    fa7c:	2907      	cmp	r1, #7
    fa7e:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    fa82:	f8c9 2004 	str.w	r2, [r9, #4]
    fa86:	f340 816e 	ble.w	fd66 <_vfiprintf_r+0x792>
    fa8a:	2b00      	cmp	r3, #0
    fa8c:	f000 8275 	beq.w	ff7a <_vfiprintf_r+0x9a6>
    fa90:	ee18 1a10 	vmov	r1, s16
    fa94:	aa18      	add	r2, sp, #96	; 0x60
    fa96:	4658      	mov	r0, fp
    fa98:	f7ff fd60 	bl	f55c <__sprint_r.part.0>
    fa9c:	2800      	cmp	r0, #0
    fa9e:	f47f af70 	bne.w	f982 <_vfiprintf_r+0x3ae>
    faa2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    faa4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    faa8:	0775      	lsls	r5, r6, #29
    faaa:	d505      	bpl.n	fab8 <_vfiprintf_r+0x4e4>
    faac:	9a06      	ldr	r2, [sp, #24]
    faae:	9903      	ldr	r1, [sp, #12]
    fab0:	1a54      	subs	r4, r2, r1
    fab2:	2c00      	cmp	r4, #0
    fab4:	f300 826b 	bgt.w	ff8e <_vfiprintf_r+0x9ba>
    fab8:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    fabc:	9803      	ldr	r0, [sp, #12]
    fabe:	4281      	cmp	r1, r0
    fac0:	bfac      	ite	ge
    fac2:	1852      	addge	r2, r2, r1
    fac4:	1812      	addlt	r2, r2, r0
    fac6:	9205      	str	r2, [sp, #20]
    fac8:	2b00      	cmp	r3, #0
    faca:	f47f af51 	bne.w	f970 <_vfiprintf_r+0x39c>
    face:	9908      	ldr	r1, [sp, #32]
    fad0:	2300      	movs	r3, #0
    fad2:	9319      	str	r3, [sp, #100]	; 0x64
    fad4:	2900      	cmp	r1, #0
    fad6:	f000 8149 	beq.w	fd6c <_vfiprintf_r+0x798>
    fada:	4658      	mov	r0, fp
    fadc:	f7f9 fa62 	bl	8fa4 <_free_r>
    fae0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fae4:	e5c1      	b.n	f66a <_vfiprintf_r+0x96>
    fae6:	059c      	lsls	r4, r3, #22
    fae8:	f53f af5d 	bmi.w	f9a6 <_vfiprintf_r+0x3d2>
    faec:	ee18 4a10 	vmov	r4, s16
    faf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    faf2:	f7f9 f93b 	bl	8d6c <__retarget_lock_release_recursive>
    faf6:	89a2      	ldrh	r2, [r4, #12]
    faf8:	e755      	b.n	f9a6 <_vfiprintf_r+0x3d2>
    fafa:	06f0      	lsls	r0, r6, #27
    fafc:	9a07      	ldr	r2, [sp, #28]
    fafe:	f100 831f 	bmi.w	10140 <_vfiprintf_r+0xb6c>
    fb02:	0671      	lsls	r1, r6, #25
    fb04:	f140 8319 	bpl.w	1013a <_vfiprintf_r+0xb66>
    fb08:	f932 3b04 	ldrsh.w	r3, [r2], #4
    fb0c:	9207      	str	r2, [sp, #28]
    fb0e:	17da      	asrs	r2, r3, #31
    fb10:	4611      	mov	r1, r2
    fb12:	e66e      	b.n	f7f2 <_vfiprintf_r+0x21e>
    fb14:	f016 0310 	ands.w	r3, r6, #16
    fb18:	9907      	ldr	r1, [sp, #28]
    fb1a:	f040 8309 	bne.w	10130 <_vfiprintf_r+0xb5c>
    fb1e:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    fb22:	f000 8301 	beq.w	10128 <_vfiprintf_r+0xb54>
    fb26:	461a      	mov	r2, r3
    fb28:	f851 3b04 	ldr.w	r3, [r1], #4
    fb2c:	9107      	str	r1, [sp, #28]
    fb2e:	b29b      	uxth	r3, r3
    fb30:	e6c3      	b.n	f8ba <_vfiprintf_r+0x2e6>
    fb32:	9b07      	ldr	r3, [sp, #28]
    fb34:	461a      	mov	r2, r3
    fb36:	2300      	movs	r3, #0
    fb38:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    fb3c:	4613      	mov	r3, r2
    fb3e:	f853 4b04 	ldr.w	r4, [r3], #4
    fb42:	9303      	str	r3, [sp, #12]
    fb44:	2c00      	cmp	r4, #0
    fb46:	f000 8412 	beq.w	1036e <_vfiprintf_r+0xd9a>
    fb4a:	2953      	cmp	r1, #83	; 0x53
    fb4c:	f000 8365 	beq.w	1021a <_vfiprintf_r+0xc46>
    fb50:	f016 0510 	ands.w	r5, r6, #16
    fb54:	f040 8361 	bne.w	1021a <_vfiprintf_r+0xc46>
    fb58:	1c7b      	adds	r3, r7, #1
    fb5a:	f000 84b3 	beq.w	104c4 <_vfiprintf_r+0xef0>
    fb5e:	463a      	mov	r2, r7
    fb60:	4629      	mov	r1, r5
    fb62:	4620      	mov	r0, r4
    fb64:	f7fe fa4c 	bl	e000 <memchr>
    fb68:	9008      	str	r0, [sp, #32]
    fb6a:	2800      	cmp	r0, #0
    fb6c:	f000 849f 	beq.w	104ae <_vfiprintf_r+0xeda>
    fb70:	1b03      	subs	r3, r0, r4
    fb72:	9a03      	ldr	r2, [sp, #12]
    fb74:	9304      	str	r3, [sp, #16]
    fb76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fb7a:	462f      	mov	r7, r5
    fb7c:	9207      	str	r2, [sp, #28]
    fb7e:	9303      	str	r3, [sp, #12]
    fb80:	9508      	str	r5, [sp, #32]
    fb82:	e657      	b.n	f834 <_vfiprintf_r+0x260>
    fb84:	2943      	cmp	r1, #67	; 0x43
    fb86:	d002      	beq.n	fb8e <_vfiprintf_r+0x5ba>
    fb88:	06f5      	lsls	r5, r6, #27
    fb8a:	f140 832d 	bpl.w	101e8 <_vfiprintf_r+0xc14>
    fb8e:	9d07      	ldr	r5, [sp, #28]
    fb90:	2208      	movs	r2, #8
    fb92:	2100      	movs	r1, #0
    fb94:	a816      	add	r0, sp, #88	; 0x58
    fb96:	ac2b      	add	r4, sp, #172	; 0xac
    fb98:	f7f8 fda6 	bl	86e8 <memset>
    fb9c:	ab16      	add	r3, sp, #88	; 0x58
    fb9e:	f855 2b04 	ldr.w	r2, [r5], #4
    fba2:	4621      	mov	r1, r4
    fba4:	4658      	mov	r0, fp
    fba6:	f7fe faa5 	bl	e0f4 <_wcrtomb_r>
    fbaa:	4603      	mov	r3, r0
    fbac:	3301      	adds	r3, #1
    fbae:	9004      	str	r0, [sp, #16]
    fbb0:	f000 84b3 	beq.w	1051a <_vfiprintf_r+0xf46>
    fbb4:	9b04      	ldr	r3, [sp, #16]
    fbb6:	9507      	str	r5, [sp, #28]
    fbb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fbbc:	9303      	str	r3, [sp, #12]
    fbbe:	2300      	movs	r3, #0
    fbc0:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    fbc4:	e703      	b.n	f9ce <_vfiprintf_r+0x3fa>
    fbc6:	9b07      	ldr	r3, [sp, #28]
    fbc8:	f853 2b04 	ldr.w	r2, [r3], #4
    fbcc:	9206      	str	r2, [sp, #24]
    fbce:	2a00      	cmp	r2, #0
    fbd0:	f280 829c 	bge.w	1010c <_vfiprintf_r+0xb38>
    fbd4:	9a06      	ldr	r2, [sp, #24]
    fbd6:	4252      	negs	r2, r2
    fbd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    fbdc:	f898 1000 	ldrb.w	r1, [r8]
    fbe0:	f046 0604 	orr.w	r6, r6, #4
    fbe4:	e569      	b.n	f6ba <_vfiprintf_r+0xe6>
    fbe6:	f898 1000 	ldrb.w	r1, [r8]
    fbea:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    fbee:	e564      	b.n	f6ba <_vfiprintf_r+0xe6>
    fbf0:	f898 1000 	ldrb.w	r1, [r8]
    fbf4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    fbf8:	e55f      	b.n	f6ba <_vfiprintf_r+0xe6>
    fbfa:	4642      	mov	r2, r8
    fbfc:	f812 1b01 	ldrb.w	r1, [r2], #1
    fc00:	292a      	cmp	r1, #42	; 0x2a
    fc02:	f000 8496 	beq.w	10532 <_vfiprintf_r+0xf5e>
    fc06:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    fc0a:	2b09      	cmp	r3, #9
    fc0c:	4690      	mov	r8, r2
    fc0e:	f04f 0700 	mov.w	r7, #0
    fc12:	f63f ad54 	bhi.w	f6be <_vfiprintf_r+0xea>
    fc16:	f818 1b01 	ldrb.w	r1, [r8], #1
    fc1a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    fc1e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    fc22:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    fc26:	2b09      	cmp	r3, #9
    fc28:	d9f5      	bls.n	fc16 <_vfiprintf_r+0x642>
    fc2a:	e548      	b.n	f6be <_vfiprintf_r+0xea>
    fc2c:	f898 1000 	ldrb.w	r1, [r8]
    fc30:	f046 0601 	orr.w	r6, r6, #1
    fc34:	e541      	b.n	f6ba <_vfiprintf_r+0xe6>
    fc36:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    fc3a:	2b00      	cmp	r3, #0
    fc3c:	f47f adc2 	bne.w	f7c4 <_vfiprintf_r+0x1f0>
    fc40:	2320      	movs	r3, #32
    fc42:	f898 1000 	ldrb.w	r1, [r8]
    fc46:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    fc4a:	e536      	b.n	f6ba <_vfiprintf_r+0xe6>
    fc4c:	f898 1000 	ldrb.w	r1, [r8]
    fc50:	296c      	cmp	r1, #108	; 0x6c
    fc52:	bf03      	ittte	eq
    fc54:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    fc58:	f046 0620 	orreq.w	r6, r6, #32
    fc5c:	f108 0801 	addeq.w	r8, r8, #1
    fc60:	f046 0610 	orrne.w	r6, r6, #16
    fc64:	e529      	b.n	f6ba <_vfiprintf_r+0xe6>
    fc66:	f898 1000 	ldrb.w	r1, [r8]
    fc6a:	2968      	cmp	r1, #104	; 0x68
    fc6c:	bf03      	ittte	eq
    fc6e:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    fc72:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    fc76:	f108 0801 	addeq.w	r8, r8, #1
    fc7a:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    fc7e:	e51c      	b.n	f6ba <_vfiprintf_r+0xe6>
    fc80:	f046 0310 	orr.w	r3, r6, #16
    fc84:	9303      	str	r3, [sp, #12]
    fc86:	9b03      	ldr	r3, [sp, #12]
    fc88:	f013 0220 	ands.w	r2, r3, #32
    fc8c:	f000 8206 	beq.w	1009c <_vfiprintf_r+0xac8>
    fc90:	9b07      	ldr	r3, [sp, #28]
    fc92:	3307      	adds	r3, #7
    fc94:	f023 0307 	bic.w	r3, r3, #7
    fc98:	4619      	mov	r1, r3
    fc9a:	685a      	ldr	r2, [r3, #4]
    fc9c:	f851 3b08 	ldr.w	r3, [r1], #8
    fca0:	9107      	str	r1, [sp, #28]
    fca2:	2101      	movs	r1, #1
    fca4:	e60d      	b.n	f8c2 <_vfiprintf_r+0x2ee>
    fca6:	9a07      	ldr	r2, [sp, #28]
    fca8:	f046 0302 	orr.w	r3, r6, #2
    fcac:	9303      	str	r3, [sp, #12]
    fcae:	f852 3b04 	ldr.w	r3, [r2], #4
    fcb2:	9207      	str	r2, [sp, #28]
    fcb4:	f647 0230 	movw	r2, #30768	; 0x7830
    fcb8:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    fcbc:	4ab8      	ldr	r2, [pc, #736]	; (ffa0 <_vfiprintf_r+0x9cc>)
    fcbe:	920c      	str	r2, [sp, #48]	; 0x30
    fcc0:	2102      	movs	r1, #2
    fcc2:	2200      	movs	r2, #0
    fcc4:	e5fd      	b.n	f8c2 <_vfiprintf_r+0x2ee>
    fcc6:	06b7      	lsls	r7, r6, #26
    fcc8:	f100 8248 	bmi.w	1015c <_vfiprintf_r+0xb88>
    fccc:	06f5      	lsls	r5, r6, #27
    fcce:	f100 8346 	bmi.w	1035e <_vfiprintf_r+0xd8a>
    fcd2:	0674      	lsls	r4, r6, #25
    fcd4:	f100 83d5 	bmi.w	10482 <_vfiprintf_r+0xeae>
    fcd8:	05b0      	lsls	r0, r6, #22
    fcda:	f140 8340 	bpl.w	1035e <_vfiprintf_r+0xd8a>
    fcde:	9b07      	ldr	r3, [sp, #28]
    fce0:	9905      	ldr	r1, [sp, #20]
    fce2:	f853 2b04 	ldr.w	r2, [r3], #4
    fce6:	9307      	str	r3, [sp, #28]
    fce8:	7011      	strb	r1, [r2, #0]
    fcea:	e4be      	b.n	f66a <_vfiprintf_r+0x96>
    fcec:	9603      	str	r6, [sp, #12]
    fcee:	2901      	cmp	r1, #1
    fcf0:	f43f ad8c 	beq.w	f80c <_vfiprintf_r+0x238>
    fcf4:	2902      	cmp	r1, #2
    fcf6:	ac44      	add	r4, sp, #272	; 0x110
    fcf8:	d111      	bne.n	fd1e <_vfiprintf_r+0x74a>
    fcfa:	980c      	ldr	r0, [sp, #48]	; 0x30
    fcfc:	f003 010f 	and.w	r1, r3, #15
    fd00:	091b      	lsrs	r3, r3, #4
    fd02:	5c41      	ldrb	r1, [r0, r1]
    fd04:	f804 1d01 	strb.w	r1, [r4, #-1]!
    fd08:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    fd0c:	0912      	lsrs	r2, r2, #4
    fd0e:	ea53 0102 	orrs.w	r1, r3, r2
    fd12:	d1f3      	bne.n	fcfc <_vfiprintf_r+0x728>
    fd14:	9e03      	ldr	r6, [sp, #12]
    fd16:	ab44      	add	r3, sp, #272	; 0x110
    fd18:	1b1b      	subs	r3, r3, r4
    fd1a:	9304      	str	r3, [sp, #16]
    fd1c:	e583      	b.n	f826 <_vfiprintf_r+0x252>
    fd1e:	f003 0107 	and.w	r1, r3, #7
    fd22:	08db      	lsrs	r3, r3, #3
    fd24:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    fd28:	08d2      	lsrs	r2, r2, #3
    fd2a:	3130      	adds	r1, #48	; 0x30
    fd2c:	ea53 0502 	orrs.w	r5, r3, r2
    fd30:	4620      	mov	r0, r4
    fd32:	f804 1d01 	strb.w	r1, [r4, #-1]!
    fd36:	d1f2      	bne.n	fd1e <_vfiprintf_r+0x74a>
    fd38:	9e03      	ldr	r6, [sp, #12]
    fd3a:	07f3      	lsls	r3, r6, #31
    fd3c:	d5eb      	bpl.n	fd16 <_vfiprintf_r+0x742>
    fd3e:	2930      	cmp	r1, #48	; 0x30
    fd40:	d0e8      	beq.n	fd14 <_vfiprintf_r+0x740>
    fd42:	2330      	movs	r3, #48	; 0x30
    fd44:	3802      	subs	r0, #2
    fd46:	f804 3c01 	strb.w	r3, [r4, #-1]
    fd4a:	ab44      	add	r3, sp, #272	; 0x110
    fd4c:	1a1b      	subs	r3, r3, r0
    fd4e:	9e03      	ldr	r6, [sp, #12]
    fd50:	9304      	str	r3, [sp, #16]
    fd52:	4604      	mov	r4, r0
    fd54:	e567      	b.n	f826 <_vfiprintf_r+0x252>
    fd56:	9b04      	ldr	r3, [sp, #16]
    fd58:	941b      	str	r4, [sp, #108]	; 0x6c
    fd5a:	2201      	movs	r2, #1
    fd5c:	931c      	str	r3, [sp, #112]	; 0x70
    fd5e:	931a      	str	r3, [sp, #104]	; 0x68
    fd60:	9219      	str	r2, [sp, #100]	; 0x64
    fd62:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fd66:	f109 0908 	add.w	r9, r9, #8
    fd6a:	e69d      	b.n	faa8 <_vfiprintf_r+0x4d4>
    fd6c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fd70:	e47b      	b.n	f66a <_vfiprintf_r+0x96>
    fd72:	9a06      	ldr	r2, [sp, #24]
    fd74:	9d03      	ldr	r5, [sp, #12]
    fd76:	1b55      	subs	r5, r2, r5
    fd78:	2d00      	cmp	r5, #0
    fd7a:	f77f ae76 	ble.w	fa6a <_vfiprintf_r+0x496>
    fd7e:	2d10      	cmp	r5, #16
    fd80:	f340 83bb 	ble.w	104fa <_vfiprintf_r+0xf26>
    fd84:	9409      	str	r4, [sp, #36]	; 0x24
    fd86:	ee18 4a10 	vmov	r4, s16
    fd8a:	e007      	b.n	fd9c <_vfiprintf_r+0x7c8>
    fd8c:	f100 0c02 	add.w	ip, r0, #2
    fd90:	f109 0908 	add.w	r9, r9, #8
    fd94:	4610      	mov	r0, r2
    fd96:	3d10      	subs	r5, #16
    fd98:	2d10      	cmp	r5, #16
    fd9a:	dd1e      	ble.n	fdda <_vfiprintf_r+0x806>
    fd9c:	4981      	ldr	r1, [pc, #516]	; (ffa4 <_vfiprintf_r+0x9d0>)
    fd9e:	f8c9 1000 	str.w	r1, [r9]
    fda2:	1c42      	adds	r2, r0, #1
    fda4:	3310      	adds	r3, #16
    fda6:	2110      	movs	r1, #16
    fda8:	2a07      	cmp	r2, #7
    fdaa:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    fdae:	f8c9 1004 	str.w	r1, [r9, #4]
    fdb2:	ddeb      	ble.n	fd8c <_vfiprintf_r+0x7b8>
    fdb4:	aa18      	add	r2, sp, #96	; 0x60
    fdb6:	2b00      	cmp	r3, #0
    fdb8:	d074      	beq.n	fea4 <_vfiprintf_r+0x8d0>
    fdba:	4621      	mov	r1, r4
    fdbc:	4658      	mov	r0, fp
    fdbe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fdc2:	f7ff fbcb 	bl	f55c <__sprint_r.part.0>
    fdc6:	2800      	cmp	r0, #0
    fdc8:	f47f addb 	bne.w	f982 <_vfiprintf_r+0x3ae>
    fdcc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    fdd0:	3d10      	subs	r5, #16
    fdd2:	2d10      	cmp	r5, #16
    fdd4:	f100 0c01 	add.w	ip, r0, #1
    fdd8:	dce0      	bgt.n	fd9c <_vfiprintf_r+0x7c8>
    fdda:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fddc:	4a71      	ldr	r2, [pc, #452]	; (ffa4 <_vfiprintf_r+0x9d0>)
    fdde:	f8c9 5004 	str.w	r5, [r9, #4]
    fde2:	442b      	add	r3, r5
    fde4:	f1bc 0f07 	cmp.w	ip, #7
    fde8:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    fdec:	f8c9 2000 	str.w	r2, [r9]
    fdf0:	f340 8194 	ble.w	1011c <_vfiprintf_r+0xb48>
    fdf4:	2b00      	cmp	r3, #0
    fdf6:	f000 831f 	beq.w	10438 <_vfiprintf_r+0xe64>
    fdfa:	ee18 1a10 	vmov	r1, s16
    fdfe:	aa18      	add	r2, sp, #96	; 0x60
    fe00:	4658      	mov	r0, fp
    fe02:	f7ff fbab 	bl	f55c <__sprint_r.part.0>
    fe06:	2800      	cmp	r0, #0
    fe08:	f47f adbb 	bne.w	f982 <_vfiprintf_r+0x3ae>
    fe0c:	9a04      	ldr	r2, [sp, #16]
    fe0e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    fe12:	1abd      	subs	r5, r7, r2
    fe14:	2d00      	cmp	r5, #0
    fe16:	f100 0101 	add.w	r1, r0, #1
    fe1a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fe1e:	f77f ae29 	ble.w	fa74 <_vfiprintf_r+0x4a0>
    fe22:	2d10      	cmp	r5, #16
    fe24:	dd29      	ble.n	fe7a <_vfiprintf_r+0x8a6>
    fe26:	9409      	str	r4, [sp, #36]	; 0x24
    fe28:	2710      	movs	r7, #16
    fe2a:	ee18 4a10 	vmov	r4, s16
    fe2e:	e007      	b.n	fe40 <_vfiprintf_r+0x86c>
    fe30:	f100 0c02 	add.w	ip, r0, #2
    fe34:	f109 0908 	add.w	r9, r9, #8
    fe38:	4610      	mov	r0, r2
    fe3a:	3d10      	subs	r5, #16
    fe3c:	2d10      	cmp	r5, #16
    fe3e:	dd1a      	ble.n	fe76 <_vfiprintf_r+0x8a2>
    fe40:	1c42      	adds	r2, r0, #1
    fe42:	4958      	ldr	r1, [pc, #352]	; (ffa4 <_vfiprintf_r+0x9d0>)
    fe44:	3310      	adds	r3, #16
    fe46:	2a07      	cmp	r2, #7
    fe48:	e9c9 1700 	strd	r1, r7, [r9]
    fe4c:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    fe50:	ddee      	ble.n	fe30 <_vfiprintf_r+0x85c>
    fe52:	aa18      	add	r2, sp, #96	; 0x60
    fe54:	b303      	cbz	r3, fe98 <_vfiprintf_r+0x8c4>
    fe56:	4621      	mov	r1, r4
    fe58:	4658      	mov	r0, fp
    fe5a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fe5e:	f7ff fb7d 	bl	f55c <__sprint_r.part.0>
    fe62:	2800      	cmp	r0, #0
    fe64:	f47f ad8d 	bne.w	f982 <_vfiprintf_r+0x3ae>
    fe68:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    fe6c:	3d10      	subs	r5, #16
    fe6e:	2d10      	cmp	r5, #16
    fe70:	f100 0c01 	add.w	ip, r0, #1
    fe74:	dce4      	bgt.n	fe40 <_vfiprintf_r+0x86c>
    fe76:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fe78:	4661      	mov	r1, ip
    fe7a:	4a4a      	ldr	r2, [pc, #296]	; (ffa4 <_vfiprintf_r+0x9d0>)
    fe7c:	f8c9 5004 	str.w	r5, [r9, #4]
    fe80:	442b      	add	r3, r5
    fe82:	2907      	cmp	r1, #7
    fe84:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    fe88:	f8c9 2000 	str.w	r2, [r9]
    fe8c:	f300 80e7 	bgt.w	1005e <_vfiprintf_r+0xa8a>
    fe90:	f109 0908 	add.w	r9, r9, #8
    fe94:	3101      	adds	r1, #1
    fe96:	e5ed      	b.n	fa74 <_vfiprintf_r+0x4a0>
    fe98:	f04f 0c01 	mov.w	ip, #1
    fe9c:	4618      	mov	r0, r3
    fe9e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fea2:	e7ca      	b.n	fe3a <_vfiprintf_r+0x866>
    fea4:	f04f 0c01 	mov.w	ip, #1
    fea8:	4618      	mov	r0, r3
    feaa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    feae:	e772      	b.n	fd96 <_vfiprintf_r+0x7c2>
    feb0:	2b00      	cmp	r3, #0
    feb2:	f000 8104 	beq.w	100be <_vfiprintf_r+0xaea>
    feb6:	ee18 1a10 	vmov	r1, s16
    feba:	aa18      	add	r2, sp, #96	; 0x60
    febc:	4658      	mov	r0, fp
    febe:	f7ff fb4d 	bl	f55c <__sprint_r.part.0>
    fec2:	2800      	cmp	r0, #0
    fec4:	f47f ad5d 	bne.w	f982 <_vfiprintf_r+0x3ae>
    fec8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    fecc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fed0:	1c41      	adds	r1, r0, #1
    fed2:	e5a7      	b.n	fa24 <_vfiprintf_r+0x450>
    fed4:	2302      	movs	r3, #2
    fed6:	aa11      	add	r2, sp, #68	; 0x44
    fed8:	931c      	str	r3, [sp, #112]	; 0x70
    feda:	921b      	str	r2, [sp, #108]	; 0x6c
    fedc:	2101      	movs	r1, #1
    fede:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fee2:	4608      	mov	r0, r1
    fee4:	f109 0908 	add.w	r9, r9, #8
    fee8:	1c41      	adds	r1, r0, #1
    feea:	e5ba      	b.n	fa62 <_vfiprintf_r+0x48e>
    feec:	2d10      	cmp	r5, #16
    feee:	f340 82e5 	ble.w	104bc <_vfiprintf_r+0xee8>
    fef2:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    fef6:	940f      	str	r4, [sp, #60]	; 0x3c
    fef8:	4608      	mov	r0, r1
    fefa:	ee18 4a10 	vmov	r4, s16
    fefe:	e007      	b.n	ff10 <_vfiprintf_r+0x93c>
    ff00:	f100 0c02 	add.w	ip, r0, #2
    ff04:	f109 0908 	add.w	r9, r9, #8
    ff08:	4610      	mov	r0, r2
    ff0a:	3d10      	subs	r5, #16
    ff0c:	2d10      	cmp	r5, #16
    ff0e:	dd1d      	ble.n	ff4c <_vfiprintf_r+0x978>
    ff10:	4925      	ldr	r1, [pc, #148]	; (ffa8 <_vfiprintf_r+0x9d4>)
    ff12:	f8c9 1000 	str.w	r1, [r9]
    ff16:	1c42      	adds	r2, r0, #1
    ff18:	3310      	adds	r3, #16
    ff1a:	2110      	movs	r1, #16
    ff1c:	2a07      	cmp	r2, #7
    ff1e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    ff22:	f8c9 1004 	str.w	r1, [r9, #4]
    ff26:	ddeb      	ble.n	ff00 <_vfiprintf_r+0x92c>
    ff28:	aa18      	add	r2, sp, #96	; 0x60
    ff2a:	b303      	cbz	r3, ff6e <_vfiprintf_r+0x99a>
    ff2c:	4621      	mov	r1, r4
    ff2e:	4658      	mov	r0, fp
    ff30:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ff34:	f7ff fb12 	bl	f55c <__sprint_r.part.0>
    ff38:	2800      	cmp	r0, #0
    ff3a:	f47f ad22 	bne.w	f982 <_vfiprintf_r+0x3ae>
    ff3e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    ff42:	3d10      	subs	r5, #16
    ff44:	2d10      	cmp	r5, #16
    ff46:	f100 0c01 	add.w	ip, r0, #1
    ff4a:	dce1      	bgt.n	ff10 <_vfiprintf_r+0x93c>
    ff4c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    ff4e:	4660      	mov	r0, ip
    ff50:	4a15      	ldr	r2, [pc, #84]	; (ffa8 <_vfiprintf_r+0x9d4>)
    ff52:	f8c9 5004 	str.w	r5, [r9, #4]
    ff56:	442b      	add	r3, r5
    ff58:	2807      	cmp	r0, #7
    ff5a:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    ff5e:	f8c9 2000 	str.w	r2, [r9]
    ff62:	f300 80c1 	bgt.w	100e8 <_vfiprintf_r+0xb14>
    ff66:	f109 0908 	add.w	r9, r9, #8
    ff6a:	1c41      	adds	r1, r0, #1
    ff6c:	e546      	b.n	f9fc <_vfiprintf_r+0x428>
    ff6e:	4618      	mov	r0, r3
    ff70:	f04f 0c01 	mov.w	ip, #1
    ff74:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ff78:	e7c7      	b.n	ff0a <_vfiprintf_r+0x936>
    ff7a:	0776      	lsls	r6, r6, #29
    ff7c:	9319      	str	r3, [sp, #100]	; 0x64
    ff7e:	d553      	bpl.n	10028 <_vfiprintf_r+0xa54>
    ff80:	9a06      	ldr	r2, [sp, #24]
    ff82:	9903      	ldr	r1, [sp, #12]
    ff84:	1a54      	subs	r4, r2, r1
    ff86:	2c00      	cmp	r4, #0
    ff88:	dd4e      	ble.n	10028 <_vfiprintf_r+0xa54>
    ff8a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ff8e:	2c10      	cmp	r4, #16
    ff90:	f340 82b0 	ble.w	104f4 <_vfiprintf_r+0xf20>
    ff94:	9919      	ldr	r1, [sp, #100]	; 0x64
    ff96:	ee18 6a10 	vmov	r6, s16
    ff9a:	2510      	movs	r5, #16
    ff9c:	e00d      	b.n	ffba <_vfiprintf_r+0x9e6>
    ff9e:	bf00      	nop
    ffa0:	20000af8 	.word	0x20000af8
    ffa4:	20007bb4 	.word	0x20007bb4
    ffa8:	200025b4 	.word	0x200025b4
    ffac:	1c88      	adds	r0, r1, #2
    ffae:	f109 0908 	add.w	r9, r9, #8
    ffb2:	4611      	mov	r1, r2
    ffb4:	3c10      	subs	r4, #16
    ffb6:	2c10      	cmp	r4, #16
    ffb8:	dd1a      	ble.n	fff0 <_vfiprintf_r+0xa1c>
    ffba:	1c4a      	adds	r2, r1, #1
    ffbc:	48b3      	ldr	r0, [pc, #716]	; (1028c <_vfiprintf_r+0xcb8>)
    ffbe:	3310      	adds	r3, #16
    ffc0:	2a07      	cmp	r2, #7
    ffc2:	e9c9 0500 	strd	r0, r5, [r9]
    ffc6:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    ffca:	ddef      	ble.n	ffac <_vfiprintf_r+0x9d8>
    ffcc:	aa18      	add	r2, sp, #96	; 0x60
    ffce:	b333      	cbz	r3, 1001e <_vfiprintf_r+0xa4a>
    ffd0:	4631      	mov	r1, r6
    ffd2:	4658      	mov	r0, fp
    ffd4:	f7ff fac2 	bl	f55c <__sprint_r.part.0>
    ffd8:	2800      	cmp	r0, #0
    ffda:	f47f acd2 	bne.w	f982 <_vfiprintf_r+0x3ae>
    ffde:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    ffe2:	3c10      	subs	r4, #16
    ffe4:	2c10      	cmp	r4, #16
    ffe6:	f101 0001 	add.w	r0, r1, #1
    ffea:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ffee:	dce4      	bgt.n	ffba <_vfiprintf_r+0x9e6>
    fff0:	4aa6      	ldr	r2, [pc, #664]	; (1028c <_vfiprintf_r+0xcb8>)
    fff2:	f8c9 4004 	str.w	r4, [r9, #4]
    fff6:	4423      	add	r3, r4
    fff8:	2807      	cmp	r0, #7
    fffa:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    fffe:	f8c9 2000 	str.w	r2, [r9]
   10002:	f77f ad59 	ble.w	fab8 <_vfiprintf_r+0x4e4>
   10006:	b17b      	cbz	r3, 10028 <_vfiprintf_r+0xa54>
   10008:	ee18 1a10 	vmov	r1, s16
   1000c:	aa18      	add	r2, sp, #96	; 0x60
   1000e:	4658      	mov	r0, fp
   10010:	f7ff faa4 	bl	f55c <__sprint_r.part.0>
   10014:	2800      	cmp	r0, #0
   10016:	f47f acb4 	bne.w	f982 <_vfiprintf_r+0x3ae>
   1001a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1001c:	e54c      	b.n	fab8 <_vfiprintf_r+0x4e4>
   1001e:	2001      	movs	r0, #1
   10020:	4619      	mov	r1, r3
   10022:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10026:	e7c5      	b.n	ffb4 <_vfiprintf_r+0x9e0>
   10028:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   1002c:	9903      	ldr	r1, [sp, #12]
   1002e:	428a      	cmp	r2, r1
   10030:	bfac      	ite	ge
   10032:	189b      	addge	r3, r3, r2
   10034:	185b      	addlt	r3, r3, r1
   10036:	9305      	str	r3, [sp, #20]
   10038:	e549      	b.n	face <_vfiprintf_r+0x4fa>
   1003a:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   1003e:	058f      	lsls	r7, r1, #22
   10040:	ee18 3a10 	vmov	r3, s16
   10044:	b28a      	uxth	r2, r1
   10046:	f53f aae8 	bmi.w	f61a <_vfiprintf_r+0x46>
   1004a:	ee18 5a10 	vmov	r5, s16
   1004e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   10050:	f7f8 fe8a 	bl	8d68 <__retarget_lock_acquire_recursive>
   10054:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   10058:	b28a      	uxth	r2, r1
   1005a:	f7ff bade 	b.w	f61a <_vfiprintf_r+0x46>
   1005e:	2b00      	cmp	r3, #0
   10060:	f43f ae79 	beq.w	fd56 <_vfiprintf_r+0x782>
   10064:	ee18 1a10 	vmov	r1, s16
   10068:	aa18      	add	r2, sp, #96	; 0x60
   1006a:	4658      	mov	r0, fp
   1006c:	f7ff fa76 	bl	f55c <__sprint_r.part.0>
   10070:	2800      	cmp	r0, #0
   10072:	f47f ac86 	bne.w	f982 <_vfiprintf_r+0x3ae>
   10076:	9919      	ldr	r1, [sp, #100]	; 0x64
   10078:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1007a:	3101      	adds	r1, #1
   1007c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10080:	e4f8      	b.n	fa74 <_vfiprintf_r+0x4a0>
   10082:	9219      	str	r2, [sp, #100]	; 0x64
   10084:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10088:	e45e      	b.n	f948 <_vfiprintf_r+0x374>
   1008a:	2f00      	cmp	r7, #0
   1008c:	f47f abc3 	bne.w	f816 <_vfiprintf_r+0x242>
   10090:	9e03      	ldr	r6, [sp, #12]
   10092:	2700      	movs	r7, #0
   10094:	9704      	str	r7, [sp, #16]
   10096:	ac44      	add	r4, sp, #272	; 0x110
   10098:	f7ff bbc5 	b.w	f826 <_vfiprintf_r+0x252>
   1009c:	9b03      	ldr	r3, [sp, #12]
   1009e:	f013 0310 	ands.w	r3, r3, #16
   100a2:	d154      	bne.n	1014e <_vfiprintf_r+0xb7a>
   100a4:	9a03      	ldr	r2, [sp, #12]
   100a6:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   100aa:	f000 816b 	beq.w	10384 <_vfiprintf_r+0xdb0>
   100ae:	9907      	ldr	r1, [sp, #28]
   100b0:	461a      	mov	r2, r3
   100b2:	f851 3b04 	ldr.w	r3, [r1], #4
   100b6:	9107      	str	r1, [sp, #28]
   100b8:	b29b      	uxth	r3, r3
   100ba:	2101      	movs	r1, #1
   100bc:	e401      	b.n	f8c2 <_vfiprintf_r+0x2ee>
   100be:	9a09      	ldr	r2, [sp, #36]	; 0x24
   100c0:	2a00      	cmp	r2, #0
   100c2:	d164      	bne.n	1018e <_vfiprintf_r+0xbba>
   100c4:	4618      	mov	r0, r3
   100c6:	2101      	movs	r1, #1
   100c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   100cc:	e4c9      	b.n	fa62 <_vfiprintf_r+0x48e>
   100ce:	2101      	movs	r1, #1
   100d0:	4618      	mov	r0, r3
   100d2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   100d6:	e4c4      	b.n	fa62 <_vfiprintf_r+0x48e>
   100d8:	425b      	negs	r3, r3
   100da:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   100de:	9603      	str	r6, [sp, #12]
   100e0:	202d      	movs	r0, #45	; 0x2d
   100e2:	2101      	movs	r1, #1
   100e4:	f7ff bbee 	b.w	f8c4 <_vfiprintf_r+0x2f0>
   100e8:	2b00      	cmp	r3, #0
   100ea:	f000 8088 	beq.w	101fe <_vfiprintf_r+0xc2a>
   100ee:	ee18 1a10 	vmov	r1, s16
   100f2:	aa18      	add	r2, sp, #96	; 0x60
   100f4:	4658      	mov	r0, fp
   100f6:	f7ff fa31 	bl	f55c <__sprint_r.part.0>
   100fa:	2800      	cmp	r0, #0
   100fc:	f47f ac41 	bne.w	f982 <_vfiprintf_r+0x3ae>
   10100:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10104:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10108:	1c41      	adds	r1, r0, #1
   1010a:	e477      	b.n	f9fc <_vfiprintf_r+0x428>
   1010c:	f898 1000 	ldrb.w	r1, [r8]
   10110:	9307      	str	r3, [sp, #28]
   10112:	f7ff bad2 	b.w	f6ba <_vfiprintf_r+0xe6>
   10116:	ac44      	add	r4, sp, #272	; 0x110
   10118:	f7ff bb85 	b.w	f826 <_vfiprintf_r+0x252>
   1011c:	f109 0908 	add.w	r9, r9, #8
   10120:	f10c 0101 	add.w	r1, ip, #1
   10124:	4660      	mov	r0, ip
   10126:	e4a0      	b.n	fa6a <_vfiprintf_r+0x496>
   10128:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1012c:	f040 8197 	bne.w	1045e <_vfiprintf_r+0xe8a>
   10130:	f851 3b04 	ldr.w	r3, [r1], #4
   10134:	9107      	str	r1, [sp, #28]
   10136:	f7ff bbc0 	b.w	f8ba <_vfiprintf_r+0x2e6>
   1013a:	05b3      	lsls	r3, r6, #22
   1013c:	f100 8188 	bmi.w	10450 <_vfiprintf_r+0xe7c>
   10140:	f852 3b04 	ldr.w	r3, [r2], #4
   10144:	9207      	str	r2, [sp, #28]
   10146:	17da      	asrs	r2, r3, #31
   10148:	4611      	mov	r1, r2
   1014a:	f7ff bb52 	b.w	f7f2 <_vfiprintf_r+0x21e>
   1014e:	9907      	ldr	r1, [sp, #28]
   10150:	f851 3b04 	ldr.w	r3, [r1], #4
   10154:	9107      	str	r1, [sp, #28]
   10156:	2101      	movs	r1, #1
   10158:	f7ff bbb3 	b.w	f8c2 <_vfiprintf_r+0x2ee>
   1015c:	9b07      	ldr	r3, [sp, #28]
   1015e:	9805      	ldr	r0, [sp, #20]
   10160:	f853 1b04 	ldr.w	r1, [r3], #4
   10164:	9307      	str	r3, [sp, #28]
   10166:	17c2      	asrs	r2, r0, #31
   10168:	e9c1 0200 	strd	r0, r2, [r1]
   1016c:	f7ff ba7d 	b.w	f66a <_vfiprintf_r+0x96>
   10170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10172:	2b00      	cmp	r3, #0
   10174:	f43f ab26 	beq.w	f7c4 <_vfiprintf_r+0x1f0>
   10178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1017a:	781b      	ldrb	r3, [r3, #0]
   1017c:	2b00      	cmp	r3, #0
   1017e:	f43f ab21 	beq.w	f7c4 <_vfiprintf_r+0x1f0>
   10182:	f898 1000 	ldrb.w	r1, [r8]
   10186:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   1018a:	f7ff ba96 	b.w	f6ba <_vfiprintf_r+0xe6>
   1018e:	2302      	movs	r3, #2
   10190:	aa11      	add	r2, sp, #68	; 0x44
   10192:	931c      	str	r3, [sp, #112]	; 0x70
   10194:	921b      	str	r2, [sp, #108]	; 0x6c
   10196:	2001      	movs	r0, #1
   10198:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1019c:	e6a2      	b.n	fee4 <_vfiprintf_r+0x910>
   1019e:	9603      	str	r6, [sp, #12]
   101a0:	e571      	b.n	fc86 <_vfiprintf_r+0x6b2>
   101a2:	4b3b      	ldr	r3, [pc, #236]	; (10290 <_vfiprintf_r+0xcbc>)
   101a4:	930c      	str	r3, [sp, #48]	; 0x30
   101a6:	f016 0220 	ands.w	r2, r6, #32
   101aa:	d059      	beq.n	10260 <_vfiprintf_r+0xc8c>
   101ac:	9b07      	ldr	r3, [sp, #28]
   101ae:	3307      	adds	r3, #7
   101b0:	f023 0307 	bic.w	r3, r3, #7
   101b4:	4618      	mov	r0, r3
   101b6:	685a      	ldr	r2, [r3, #4]
   101b8:	f850 3b08 	ldr.w	r3, [r0], #8
   101bc:	9007      	str	r0, [sp, #28]
   101be:	07f4      	lsls	r4, r6, #31
   101c0:	d509      	bpl.n	101d6 <_vfiprintf_r+0xc02>
   101c2:	ea53 0002 	orrs.w	r0, r3, r2
   101c6:	d006      	beq.n	101d6 <_vfiprintf_r+0xc02>
   101c8:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   101cc:	2130      	movs	r1, #48	; 0x30
   101ce:	f046 0602 	orr.w	r6, r6, #2
   101d2:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   101d6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   101da:	9103      	str	r1, [sp, #12]
   101dc:	2102      	movs	r1, #2
   101de:	f7ff bb70 	b.w	f8c2 <_vfiprintf_r+0x2ee>
   101e2:	4b2c      	ldr	r3, [pc, #176]	; (10294 <_vfiprintf_r+0xcc0>)
   101e4:	930c      	str	r3, [sp, #48]	; 0x30
   101e6:	e7de      	b.n	101a6 <_vfiprintf_r+0xbd2>
   101e8:	9b07      	ldr	r3, [sp, #28]
   101ea:	2101      	movs	r1, #1
   101ec:	f853 2b04 	ldr.w	r2, [r3], #4
   101f0:	9103      	str	r1, [sp, #12]
   101f2:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   101f6:	9307      	str	r3, [sp, #28]
   101f8:	9104      	str	r1, [sp, #16]
   101fa:	ac2b      	add	r4, sp, #172	; 0xac
   101fc:	e4df      	b.n	fbbe <_vfiprintf_r+0x5ea>
   101fe:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   10202:	2a00      	cmp	r2, #0
   10204:	f040 8132 	bne.w	1046c <_vfiprintf_r+0xe98>
   10208:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1020a:	2a00      	cmp	r2, #0
   1020c:	f47f ae62 	bne.w	fed4 <_vfiprintf_r+0x900>
   10210:	4618      	mov	r0, r3
   10212:	2101      	movs	r1, #1
   10214:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10218:	e427      	b.n	fa6a <_vfiprintf_r+0x496>
   1021a:	2100      	movs	r1, #0
   1021c:	2208      	movs	r2, #8
   1021e:	a816      	add	r0, sp, #88	; 0x58
   10220:	9413      	str	r4, [sp, #76]	; 0x4c
   10222:	f7f8 fa61 	bl	86e8 <memset>
   10226:	1c79      	adds	r1, r7, #1
   10228:	f000 80bc 	beq.w	103a4 <_vfiprintf_r+0xdd0>
   1022c:	2500      	movs	r5, #0
   1022e:	9407      	str	r4, [sp, #28]
   10230:	462c      	mov	r4, r5
   10232:	e00c      	b.n	1024e <_vfiprintf_r+0xc7a>
   10234:	a92b      	add	r1, sp, #172	; 0xac
   10236:	4658      	mov	r0, fp
   10238:	f7fd ff5c 	bl	e0f4 <_wcrtomb_r>
   1023c:	1c42      	adds	r2, r0, #1
   1023e:	4420      	add	r0, r4
   10240:	f000 816b 	beq.w	1051a <_vfiprintf_r+0xf46>
   10244:	42b8      	cmp	r0, r7
   10246:	dc08      	bgt.n	1025a <_vfiprintf_r+0xc86>
   10248:	f000 8170 	beq.w	1052c <_vfiprintf_r+0xf58>
   1024c:	4604      	mov	r4, r0
   1024e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10250:	5952      	ldr	r2, [r2, r5]
   10252:	ab16      	add	r3, sp, #88	; 0x58
   10254:	3504      	adds	r5, #4
   10256:	2a00      	cmp	r2, #0
   10258:	d1ec      	bne.n	10234 <_vfiprintf_r+0xc60>
   1025a:	9404      	str	r4, [sp, #16]
   1025c:	9c07      	ldr	r4, [sp, #28]
   1025e:	e0af      	b.n	103c0 <_vfiprintf_r+0xdec>
   10260:	f016 0310 	ands.w	r3, r6, #16
   10264:	9807      	ldr	r0, [sp, #28]
   10266:	d10c      	bne.n	10282 <_vfiprintf_r+0xcae>
   10268:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   1026c:	d005      	beq.n	1027a <_vfiprintf_r+0xca6>
   1026e:	461a      	mov	r2, r3
   10270:	f850 3b04 	ldr.w	r3, [r0], #4
   10274:	9007      	str	r0, [sp, #28]
   10276:	b29b      	uxth	r3, r3
   10278:	e7a1      	b.n	101be <_vfiprintf_r+0xbea>
   1027a:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1027e:	f040 80e1 	bne.w	10444 <_vfiprintf_r+0xe70>
   10282:	f850 3b04 	ldr.w	r3, [r0], #4
   10286:	9007      	str	r0, [sp, #28]
   10288:	e799      	b.n	101be <_vfiprintf_r+0xbea>
   1028a:	bf00      	nop
   1028c:	200025b4 	.word	0x200025b4
   10290:	20000af8 	.word	0x20000af8
   10294:	20000b0c 	.word	0x20000b0c
   10298:	9903      	ldr	r1, [sp, #12]
   1029a:	9704      	str	r7, [sp, #16]
   1029c:	ac44      	add	r4, sp, #272	; 0x110
   1029e:	469e      	mov	lr, r3
   102a0:	ee08 ba90 	vmov	s17, fp
   102a4:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   102a8:	f04f 0c00 	mov.w	ip, #0
   102ac:	4623      	mov	r3, r4
   102ae:	e006      	b.n	102be <_vfiprintf_r+0xcea>
   102b0:	f1be 0f0a 	cmp.w	lr, #10
   102b4:	f172 0200 	sbcs.w	r2, r2, #0
   102b8:	d339      	bcc.n	1032e <_vfiprintf_r+0xd5a>
   102ba:	46a6      	mov	lr, r4
   102bc:	462a      	mov	r2, r5
   102be:	49a6      	ldr	r1, [pc, #664]	; (10558 <_vfiprintf_r+0xf84>)
   102c0:	eb1e 0002 	adds.w	r0, lr, r2
   102c4:	f140 0000 	adc.w	r0, r0, #0
   102c8:	460f      	mov	r7, r1
   102ca:	fba1 1400 	umull	r1, r4, r1, r0
   102ce:	f024 0103 	bic.w	r1, r4, #3
   102d2:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   102d6:	1a40      	subs	r0, r0, r1
   102d8:	ebbe 0100 	subs.w	r1, lr, r0
   102dc:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   102e0:	f162 0400 	sbc.w	r4, r2, #0
   102e4:	fb05 f501 	mul.w	r5, r5, r1
   102e8:	fb07 5504 	mla	r5, r7, r4, r5
   102ec:	fba1 4107 	umull	r4, r1, r1, r7
   102f0:	440d      	add	r5, r1
   102f2:	2705      	movs	r7, #5
   102f4:	f004 0101 	and.w	r1, r4, #1
   102f8:	fba1 1b07 	umull	r1, fp, r1, r7
   102fc:	1809      	adds	r1, r1, r0
   102fe:	0864      	lsrs	r4, r4, #1
   10300:	3130      	adds	r1, #48	; 0x30
   10302:	f803 1c01 	strb.w	r1, [r3, #-1]
   10306:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   1030a:	f10c 0c01 	add.w	ip, ip, #1
   1030e:	3b01      	subs	r3, #1
   10310:	086d      	lsrs	r5, r5, #1
   10312:	2e00      	cmp	r6, #0
   10314:	d0cc      	beq.n	102b0 <_vfiprintf_r+0xcdc>
   10316:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10318:	7809      	ldrb	r1, [r1, #0]
   1031a:	4561      	cmp	r1, ip
   1031c:	d1c8      	bne.n	102b0 <_vfiprintf_r+0xcdc>
   1031e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   10322:	d0c5      	beq.n	102b0 <_vfiprintf_r+0xcdc>
   10324:	f1be 0f0a 	cmp.w	lr, #10
   10328:	f172 0200 	sbcs.w	r2, r2, #0
   1032c:	d26c      	bcs.n	10408 <_vfiprintf_r+0xe34>
   1032e:	461c      	mov	r4, r3
   10330:	ab44      	add	r3, sp, #272	; 0x110
   10332:	1b1b      	subs	r3, r3, r4
   10334:	9f04      	ldr	r7, [sp, #16]
   10336:	9e03      	ldr	r6, [sp, #12]
   10338:	9304      	str	r3, [sp, #16]
   1033a:	ee18 ba90 	vmov	fp, s17
   1033e:	f7ff ba72 	b.w	f826 <_vfiprintf_r+0x252>
   10342:	9603      	str	r6, [sp, #12]
   10344:	f7ff ba62 	b.w	f80c <_vfiprintf_r+0x238>
   10348:	4658      	mov	r0, fp
   1034a:	f7f8 f903 	bl	8554 <__sinit>
   1034e:	f7ff b95b 	b.w	f608 <_vfiprintf_r+0x34>
   10352:	2901      	cmp	r1, #1
   10354:	9603      	str	r6, [sp, #12]
   10356:	f47f accd 	bne.w	fcf4 <_vfiprintf_r+0x720>
   1035a:	f7ff ba5c 	b.w	f816 <_vfiprintf_r+0x242>
   1035e:	9b07      	ldr	r3, [sp, #28]
   10360:	9905      	ldr	r1, [sp, #20]
   10362:	f853 2b04 	ldr.w	r2, [r3], #4
   10366:	6011      	str	r1, [r2, #0]
   10368:	9307      	str	r3, [sp, #28]
   1036a:	f7ff b97e 	b.w	f66a <_vfiprintf_r+0x96>
   1036e:	2f06      	cmp	r7, #6
   10370:	463b      	mov	r3, r7
   10372:	9a03      	ldr	r2, [sp, #12]
   10374:	4c79      	ldr	r4, [pc, #484]	; (1055c <_vfiprintf_r+0xf88>)
   10376:	9207      	str	r2, [sp, #28]
   10378:	bf28      	it	cs
   1037a:	2306      	movcs	r3, #6
   1037c:	9304      	str	r3, [sp, #16]
   1037e:	9303      	str	r3, [sp, #12]
   10380:	f7ff bb25 	b.w	f9ce <_vfiprintf_r+0x3fa>
   10384:	9b03      	ldr	r3, [sp, #12]
   10386:	9907      	ldr	r1, [sp, #28]
   10388:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   1038c:	bf14      	ite	ne
   1038e:	f851 3b04 	ldrne.w	r3, [r1], #4
   10392:	f851 3b04 	ldreq.w	r3, [r1], #4
   10396:	9107      	str	r1, [sp, #28]
   10398:	bf1c      	itt	ne
   1039a:	4602      	movne	r2, r0
   1039c:	b2db      	uxtbne	r3, r3
   1039e:	2101      	movs	r1, #1
   103a0:	f7ff ba8f 	b.w	f8c2 <_vfiprintf_r+0x2ee>
   103a4:	ab16      	add	r3, sp, #88	; 0x58
   103a6:	9300      	str	r3, [sp, #0]
   103a8:	2300      	movs	r3, #0
   103aa:	4619      	mov	r1, r3
   103ac:	aa13      	add	r2, sp, #76	; 0x4c
   103ae:	4658      	mov	r0, fp
   103b0:	f7fd fec6 	bl	e140 <_wcsrtombs_r>
   103b4:	4603      	mov	r3, r0
   103b6:	3301      	adds	r3, #1
   103b8:	9004      	str	r0, [sp, #16]
   103ba:	f000 80ae 	beq.w	1051a <_vfiprintf_r+0xf46>
   103be:	9413      	str	r4, [sp, #76]	; 0x4c
   103c0:	9b04      	ldr	r3, [sp, #16]
   103c2:	2b00      	cmp	r3, #0
   103c4:	d030      	beq.n	10428 <_vfiprintf_r+0xe54>
   103c6:	2b63      	cmp	r3, #99	; 0x63
   103c8:	dc63      	bgt.n	10492 <_vfiprintf_r+0xebe>
   103ca:	2300      	movs	r3, #0
   103cc:	9308      	str	r3, [sp, #32]
   103ce:	ac2b      	add	r4, sp, #172	; 0xac
   103d0:	2208      	movs	r2, #8
   103d2:	2100      	movs	r1, #0
   103d4:	a816      	add	r0, sp, #88	; 0x58
   103d6:	f7f8 f987 	bl	86e8 <memset>
   103da:	9d04      	ldr	r5, [sp, #16]
   103dc:	ab16      	add	r3, sp, #88	; 0x58
   103de:	9300      	str	r3, [sp, #0]
   103e0:	aa13      	add	r2, sp, #76	; 0x4c
   103e2:	462b      	mov	r3, r5
   103e4:	4621      	mov	r1, r4
   103e6:	4658      	mov	r0, fp
   103e8:	f7fd feaa 	bl	e140 <_wcsrtombs_r>
   103ec:	4285      	cmp	r5, r0
   103ee:	f040 80ab 	bne.w	10548 <_vfiprintf_r+0xf74>
   103f2:	9b03      	ldr	r3, [sp, #12]
   103f4:	9a04      	ldr	r2, [sp, #16]
   103f6:	9307      	str	r3, [sp, #28]
   103f8:	2300      	movs	r3, #0
   103fa:	54a3      	strb	r3, [r4, r2]
   103fc:	461f      	mov	r7, r3
   103fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10402:	9303      	str	r3, [sp, #12]
   10404:	f7ff ba16 	b.w	f834 <_vfiprintf_r+0x260>
   10408:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1040a:	990d      	ldr	r1, [sp, #52]	; 0x34
   1040c:	1a9b      	subs	r3, r3, r2
   1040e:	4618      	mov	r0, r3
   10410:	9308      	str	r3, [sp, #32]
   10412:	f7f8 fa01 	bl	8818 <strncpy>
   10416:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10418:	9b08      	ldr	r3, [sp, #32]
   1041a:	784a      	ldrb	r2, [r1, #1]
   1041c:	b10a      	cbz	r2, 10422 <_vfiprintf_r+0xe4e>
   1041e:	3101      	adds	r1, #1
   10420:	910b      	str	r1, [sp, #44]	; 0x2c
   10422:	f04f 0c00 	mov.w	ip, #0
   10426:	e748      	b.n	102ba <_vfiprintf_r+0xce6>
   10428:	9b03      	ldr	r3, [sp, #12]
   1042a:	9307      	str	r3, [sp, #28]
   1042c:	9b04      	ldr	r3, [sp, #16]
   1042e:	9303      	str	r3, [sp, #12]
   10430:	461f      	mov	r7, r3
   10432:	9308      	str	r3, [sp, #32]
   10434:	f7ff b9fe 	b.w	f834 <_vfiprintf_r+0x260>
   10438:	2101      	movs	r1, #1
   1043a:	4618      	mov	r0, r3
   1043c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10440:	f7ff bb13 	b.w	fa6a <_vfiprintf_r+0x496>
   10444:	f850 3b04 	ldr.w	r3, [r0], #4
   10448:	9007      	str	r0, [sp, #28]
   1044a:	4622      	mov	r2, r4
   1044c:	b2db      	uxtb	r3, r3
   1044e:	e6b6      	b.n	101be <_vfiprintf_r+0xbea>
   10450:	f912 3b04 	ldrsb.w	r3, [r2], #4
   10454:	9207      	str	r2, [sp, #28]
   10456:	17da      	asrs	r2, r3, #31
   10458:	4611      	mov	r1, r2
   1045a:	f7ff b9ca 	b.w	f7f2 <_vfiprintf_r+0x21e>
   1045e:	f851 3b04 	ldr.w	r3, [r1], #4
   10462:	9107      	str	r1, [sp, #28]
   10464:	4602      	mov	r2, r0
   10466:	b2db      	uxtb	r3, r3
   10468:	f7ff ba27 	b.w	f8ba <_vfiprintf_r+0x2e6>
   1046c:	2301      	movs	r3, #1
   1046e:	931c      	str	r3, [sp, #112]	; 0x70
   10470:	2101      	movs	r1, #1
   10472:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   10476:	931b      	str	r3, [sp, #108]	; 0x6c
   10478:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1047c:	460b      	mov	r3, r1
   1047e:	f7ff bacd 	b.w	fa1c <_vfiprintf_r+0x448>
   10482:	9b07      	ldr	r3, [sp, #28]
   10484:	9905      	ldr	r1, [sp, #20]
   10486:	f853 2b04 	ldr.w	r2, [r3], #4
   1048a:	9307      	str	r3, [sp, #28]
   1048c:	8011      	strh	r1, [r2, #0]
   1048e:	f7ff b8ec 	b.w	f66a <_vfiprintf_r+0x96>
   10492:	1c59      	adds	r1, r3, #1
   10494:	4658      	mov	r0, fp
   10496:	f7f6 fa5b 	bl	6950 <_malloc_r>
   1049a:	4604      	mov	r4, r0
   1049c:	2800      	cmp	r0, #0
   1049e:	d03c      	beq.n	1051a <_vfiprintf_r+0xf46>
   104a0:	9008      	str	r0, [sp, #32]
   104a2:	e795      	b.n	103d0 <_vfiprintf_r+0xdfc>
   104a4:	6d88      	ldr	r0, [r1, #88]	; 0x58
   104a6:	f7f8 fc61 	bl	8d6c <__retarget_lock_release_recursive>
   104aa:	f7ff b9e9 	b.w	f880 <_vfiprintf_r+0x2ac>
   104ae:	9b03      	ldr	r3, [sp, #12]
   104b0:	9307      	str	r3, [sp, #28]
   104b2:	e9cd 7703 	strd	r7, r7, [sp, #12]
   104b6:	9f08      	ldr	r7, [sp, #32]
   104b8:	f7ff b9bc 	b.w	f834 <_vfiprintf_r+0x260>
   104bc:	9819      	ldr	r0, [sp, #100]	; 0x64
   104be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   104c0:	3001      	adds	r0, #1
   104c2:	e545      	b.n	ff50 <_vfiprintf_r+0x97c>
   104c4:	9b03      	ldr	r3, [sp, #12]
   104c6:	9307      	str	r3, [sp, #28]
   104c8:	4620      	mov	r0, r4
   104ca:	f7f8 fc59 	bl	8d80 <strlen>
   104ce:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   104d2:	462f      	mov	r7, r5
   104d4:	9004      	str	r0, [sp, #16]
   104d6:	9303      	str	r3, [sp, #12]
   104d8:	9508      	str	r5, [sp, #32]
   104da:	f7ff b9ab 	b.w	f834 <_vfiprintf_r+0x260>
   104de:	ee18 1a10 	vmov	r1, s16
   104e2:	aa18      	add	r2, sp, #96	; 0x60
   104e4:	4658      	mov	r0, fp
   104e6:	f7ff f839 	bl	f55c <__sprint_r.part.0>
   104ea:	2800      	cmp	r0, #0
   104ec:	f43f aa36 	beq.w	f95c <_vfiprintf_r+0x388>
   104f0:	f7ff ba4d 	b.w	f98e <_vfiprintf_r+0x3ba>
   104f4:	9819      	ldr	r0, [sp, #100]	; 0x64
   104f6:	3001      	adds	r0, #1
   104f8:	e57a      	b.n	fff0 <_vfiprintf_r+0xa1c>
   104fa:	468c      	mov	ip, r1
   104fc:	e46e      	b.n	fddc <_vfiprintf_r+0x808>
   104fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10500:	07d9      	lsls	r1, r3, #31
   10502:	d405      	bmi.n	10510 <_vfiprintf_r+0xf3c>
   10504:	89ab      	ldrh	r3, [r5, #12]
   10506:	059a      	lsls	r2, r3, #22
   10508:	d402      	bmi.n	10510 <_vfiprintf_r+0xf3c>
   1050a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1050c:	f7f8 fc2e 	bl	8d6c <__retarget_lock_release_recursive>
   10510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10514:	9305      	str	r3, [sp, #20]
   10516:	f7ff ba49 	b.w	f9ac <_vfiprintf_r+0x3d8>
   1051a:	ee18 2a10 	vmov	r2, s16
   1051e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10526:	8193      	strh	r3, [r2, #12]
   10528:	f7ff ba35 	b.w	f996 <_vfiprintf_r+0x3c2>
   1052c:	9c07      	ldr	r4, [sp, #28]
   1052e:	9704      	str	r7, [sp, #16]
   10530:	e746      	b.n	103c0 <_vfiprintf_r+0xdec>
   10532:	9b07      	ldr	r3, [sp, #28]
   10534:	f898 1001 	ldrb.w	r1, [r8, #1]
   10538:	f853 7b04 	ldr.w	r7, [r3], #4
   1053c:	9307      	str	r3, [sp, #28]
   1053e:	4690      	mov	r8, r2
   10540:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   10544:	f7ff b8b9 	b.w	f6ba <_vfiprintf_r+0xe6>
   10548:	ee18 2a10 	vmov	r2, s16
   1054c:	8993      	ldrh	r3, [r2, #12]
   1054e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10552:	8193      	strh	r3, [r2, #12]
   10554:	f7ff ba15 	b.w	f982 <_vfiprintf_r+0x3ae>
   10558:	cccccccd 	.word	0xcccccccd
   1055c:	20000b20 	.word	0x20000b20

00010560 <__sbprintf>:
   10560:	b570      	push	{r4, r5, r6, lr}
   10562:	460c      	mov	r4, r1
   10564:	8989      	ldrh	r1, [r1, #12]
   10566:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   1056a:	f021 0102 	bic.w	r1, r1, #2
   1056e:	f8ad 1014 	strh.w	r1, [sp, #20]
   10572:	6e61      	ldr	r1, [r4, #100]	; 0x64
   10574:	911b      	str	r1, [sp, #108]	; 0x6c
   10576:	89e1      	ldrh	r1, [r4, #14]
   10578:	f8ad 1016 	strh.w	r1, [sp, #22]
   1057c:	69e1      	ldr	r1, [r4, #28]
   1057e:	9109      	str	r1, [sp, #36]	; 0x24
   10580:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10582:	910b      	str	r1, [sp, #44]	; 0x2c
   10584:	a91c      	add	r1, sp, #112	; 0x70
   10586:	9102      	str	r1, [sp, #8]
   10588:	9106      	str	r1, [sp, #24]
   1058a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1058e:	4606      	mov	r6, r0
   10590:	9104      	str	r1, [sp, #16]
   10592:	9107      	str	r1, [sp, #28]
   10594:	a818      	add	r0, sp, #96	; 0x60
   10596:	2100      	movs	r1, #0
   10598:	e9cd 3200 	strd	r3, r2, [sp]
   1059c:	9108      	str	r1, [sp, #32]
   1059e:	f7f8 fbdf 	bl	8d60 <__retarget_lock_init_recursive>
   105a2:	e9dd 3200 	ldrd	r3, r2, [sp]
   105a6:	a902      	add	r1, sp, #8
   105a8:	4630      	mov	r0, r6
   105aa:	f7ff f813 	bl	f5d4 <_vfiprintf_r>
   105ae:	1e05      	subs	r5, r0, #0
   105b0:	db07      	blt.n	105c2 <__sbprintf+0x62>
   105b2:	a902      	add	r1, sp, #8
   105b4:	4630      	mov	r0, r6
   105b6:	f7fd fb09 	bl	dbcc <_fflush_r>
   105ba:	2800      	cmp	r0, #0
   105bc:	bf18      	it	ne
   105be:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   105c2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   105c6:	065b      	lsls	r3, r3, #25
   105c8:	d503      	bpl.n	105d2 <__sbprintf+0x72>
   105ca:	89a3      	ldrh	r3, [r4, #12]
   105cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   105d0:	81a3      	strh	r3, [r4, #12]
   105d2:	9818      	ldr	r0, [sp, #96]	; 0x60
   105d4:	f7f8 fbc6 	bl	8d64 <__retarget_lock_close_recursive>
   105d8:	4628      	mov	r0, r5
   105da:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   105de:	bd70      	pop	{r4, r5, r6, pc}

000105e0 <__submore>:
   105e0:	f101 0340 	add.w	r3, r1, #64	; 0x40
   105e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105e8:	460c      	mov	r4, r1
   105ea:	6b09      	ldr	r1, [r1, #48]	; 0x30
   105ec:	4299      	cmp	r1, r3
   105ee:	d014      	beq.n	1061a <__submore+0x3a>
   105f0:	6b66      	ldr	r6, [r4, #52]	; 0x34
   105f2:	0077      	lsls	r7, r6, #1
   105f4:	463a      	mov	r2, r7
   105f6:	f7f6 fc73 	bl	6ee0 <_realloc_r>
   105fa:	4605      	mov	r5, r0
   105fc:	b340      	cbz	r0, 10650 <__submore+0x70>
   105fe:	eb00 0806 	add.w	r8, r0, r6
   10602:	4601      	mov	r1, r0
   10604:	4632      	mov	r2, r6
   10606:	4640      	mov	r0, r8
   10608:	f7f4 fac0 	bl	4b8c <memcpy>
   1060c:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   10610:	f8c4 8000 	str.w	r8, [r4]
   10614:	2000      	movs	r0, #0
   10616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1061a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1061e:	f7f6 f997 	bl	6950 <_malloc_r>
   10622:	b1a8      	cbz	r0, 10650 <__submore+0x70>
   10624:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   10628:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1062c:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   10630:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   10634:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   10638:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   1063c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   10640:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   10644:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   10648:	6023      	str	r3, [r4, #0]
   1064a:	2000      	movs	r0, #0
   1064c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10654:	e7df      	b.n	10616 <__submore+0x36>
   10656:	bf00      	nop

00010658 <__sfvwrite_r>:
   10658:	6893      	ldr	r3, [r2, #8]
   1065a:	2b00      	cmp	r3, #0
   1065c:	f000 8085 	beq.w	1076a <__sfvwrite_r+0x112>
   10660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10664:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   10668:	460c      	mov	r4, r1
   1066a:	0719      	lsls	r1, r3, #28
   1066c:	4680      	mov	r8, r0
   1066e:	b083      	sub	sp, #12
   10670:	4617      	mov	r7, r2
   10672:	b298      	uxth	r0, r3
   10674:	d525      	bpl.n	106c2 <__sfvwrite_r+0x6a>
   10676:	6923      	ldr	r3, [r4, #16]
   10678:	b31b      	cbz	r3, 106c2 <__sfvwrite_r+0x6a>
   1067a:	f010 0302 	ands.w	r3, r0, #2
   1067e:	683d      	ldr	r5, [r7, #0]
   10680:	d02d      	beq.n	106de <__sfvwrite_r+0x86>
   10682:	f04f 0a00 	mov.w	sl, #0
   10686:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 10948 <__sfvwrite_r+0x2f0>
   1068a:	4656      	mov	r6, sl
   1068c:	46b9      	mov	r9, r7
   1068e:	455e      	cmp	r6, fp
   10690:	4633      	mov	r3, r6
   10692:	4652      	mov	r2, sl
   10694:	bf28      	it	cs
   10696:	465b      	movcs	r3, fp
   10698:	4640      	mov	r0, r8
   1069a:	2e00      	cmp	r6, #0
   1069c:	d052      	beq.n	10744 <__sfvwrite_r+0xec>
   1069e:	69e1      	ldr	r1, [r4, #28]
   106a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   106a2:	47b8      	blx	r7
   106a4:	2800      	cmp	r0, #0
   106a6:	dd56      	ble.n	10756 <__sfvwrite_r+0xfe>
   106a8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   106ac:	1a1b      	subs	r3, r3, r0
   106ae:	4482      	add	sl, r0
   106b0:	1a36      	subs	r6, r6, r0
   106b2:	f8c9 3008 	str.w	r3, [r9, #8]
   106b6:	2b00      	cmp	r3, #0
   106b8:	d1e9      	bne.n	1068e <__sfvwrite_r+0x36>
   106ba:	2000      	movs	r0, #0
   106bc:	b003      	add	sp, #12
   106be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   106c2:	4621      	mov	r1, r4
   106c4:	4640      	mov	r0, r8
   106c6:	f000 f941 	bl	1094c <__swsetup_r>
   106ca:	2800      	cmp	r0, #0
   106cc:	f040 8138 	bne.w	10940 <__sfvwrite_r+0x2e8>
   106d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   106d4:	683d      	ldr	r5, [r7, #0]
   106d6:	b298      	uxth	r0, r3
   106d8:	f010 0302 	ands.w	r3, r0, #2
   106dc:	d1d1      	bne.n	10682 <__sfvwrite_r+0x2a>
   106de:	f010 0901 	ands.w	r9, r0, #1
   106e2:	d144      	bne.n	1076e <__sfvwrite_r+0x116>
   106e4:	464e      	mov	r6, r9
   106e6:	9700      	str	r7, [sp, #0]
   106e8:	b346      	cbz	r6, 1073c <__sfvwrite_r+0xe4>
   106ea:	0582      	lsls	r2, r0, #22
   106ec:	f8d4 b008 	ldr.w	fp, [r4, #8]
   106f0:	f140 8085 	bpl.w	107fe <__sfvwrite_r+0x1a6>
   106f4:	45b3      	cmp	fp, r6
   106f6:	465a      	mov	r2, fp
   106f8:	f200 80b4 	bhi.w	10864 <__sfvwrite_r+0x20c>
   106fc:	f410 6f90 	tst.w	r0, #1152	; 0x480
   10700:	f040 80c1 	bne.w	10886 <__sfvwrite_r+0x22e>
   10704:	6820      	ldr	r0, [r4, #0]
   10706:	9201      	str	r2, [sp, #4]
   10708:	4649      	mov	r1, r9
   1070a:	f7f7 ff71 	bl	85f0 <memmove>
   1070e:	68a3      	ldr	r3, [r4, #8]
   10710:	9a01      	ldr	r2, [sp, #4]
   10712:	eba3 010b 	sub.w	r1, r3, fp
   10716:	6823      	ldr	r3, [r4, #0]
   10718:	60a1      	str	r1, [r4, #8]
   1071a:	4413      	add	r3, r2
   1071c:	46b2      	mov	sl, r6
   1071e:	6023      	str	r3, [r4, #0]
   10720:	2600      	movs	r6, #0
   10722:	9a00      	ldr	r2, [sp, #0]
   10724:	6893      	ldr	r3, [r2, #8]
   10726:	eba3 030a 	sub.w	r3, r3, sl
   1072a:	44d1      	add	r9, sl
   1072c:	6093      	str	r3, [r2, #8]
   1072e:	2b00      	cmp	r3, #0
   10730:	d0c3      	beq.n	106ba <__sfvwrite_r+0x62>
   10732:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   10736:	b280      	uxth	r0, r0
   10738:	2e00      	cmp	r6, #0
   1073a:	d1d6      	bne.n	106ea <__sfvwrite_r+0x92>
   1073c:	e9d5 9600 	ldrd	r9, r6, [r5]
   10740:	3508      	adds	r5, #8
   10742:	e7d1      	b.n	106e8 <__sfvwrite_r+0x90>
   10744:	e9d5 a600 	ldrd	sl, r6, [r5]
   10748:	3508      	adds	r5, #8
   1074a:	e7a0      	b.n	1068e <__sfvwrite_r+0x36>
   1074c:	4621      	mov	r1, r4
   1074e:	4640      	mov	r0, r8
   10750:	f7fd fa3c 	bl	dbcc <_fflush_r>
   10754:	b388      	cbz	r0, 107ba <__sfvwrite_r+0x162>
   10756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1075a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1075e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10762:	81a3      	strh	r3, [r4, #12]
   10764:	b003      	add	sp, #12
   10766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1076a:	2000      	movs	r0, #0
   1076c:	4770      	bx	lr
   1076e:	461e      	mov	r6, r3
   10770:	46ba      	mov	sl, r7
   10772:	4699      	mov	r9, r3
   10774:	4618      	mov	r0, r3
   10776:	9500      	str	r5, [sp, #0]
   10778:	461f      	mov	r7, r3
   1077a:	b366      	cbz	r6, 107d6 <__sfvwrite_r+0x17e>
   1077c:	2800      	cmp	r0, #0
   1077e:	d032      	beq.n	107e6 <__sfvwrite_r+0x18e>
   10780:	464a      	mov	r2, r9
   10782:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   10786:	6820      	ldr	r0, [r4, #0]
   10788:	68a5      	ldr	r5, [r4, #8]
   1078a:	42b2      	cmp	r2, r6
   1078c:	bf28      	it	cs
   1078e:	4632      	movcs	r2, r6
   10790:	4288      	cmp	r0, r1
   10792:	d904      	bls.n	1079e <__sfvwrite_r+0x146>
   10794:	eb05 0b03 	add.w	fp, r5, r3
   10798:	455a      	cmp	r2, fp
   1079a:	f300 80a7 	bgt.w	108ec <__sfvwrite_r+0x294>
   1079e:	4293      	cmp	r3, r2
   107a0:	dc64      	bgt.n	1086c <__sfvwrite_r+0x214>
   107a2:	69e1      	ldr	r1, [r4, #28]
   107a4:	6a65      	ldr	r5, [r4, #36]	; 0x24
   107a6:	463a      	mov	r2, r7
   107a8:	4640      	mov	r0, r8
   107aa:	47a8      	blx	r5
   107ac:	f1b0 0b00 	subs.w	fp, r0, #0
   107b0:	ddd1      	ble.n	10756 <__sfvwrite_r+0xfe>
   107b2:	ebb9 090b 	subs.w	r9, r9, fp
   107b6:	d0c9      	beq.n	1074c <__sfvwrite_r+0xf4>
   107b8:	2001      	movs	r0, #1
   107ba:	f8da 3008 	ldr.w	r3, [sl, #8]
   107be:	eba3 030b 	sub.w	r3, r3, fp
   107c2:	445f      	add	r7, fp
   107c4:	eba6 060b 	sub.w	r6, r6, fp
   107c8:	f8ca 3008 	str.w	r3, [sl, #8]
   107cc:	2b00      	cmp	r3, #0
   107ce:	f43f af74 	beq.w	106ba <__sfvwrite_r+0x62>
   107d2:	2e00      	cmp	r6, #0
   107d4:	d1d2      	bne.n	1077c <__sfvwrite_r+0x124>
   107d6:	9a00      	ldr	r2, [sp, #0]
   107d8:	6856      	ldr	r6, [r2, #4]
   107da:	4613      	mov	r3, r2
   107dc:	3208      	adds	r2, #8
   107de:	9200      	str	r2, [sp, #0]
   107e0:	2e00      	cmp	r6, #0
   107e2:	d0f8      	beq.n	107d6 <__sfvwrite_r+0x17e>
   107e4:	681f      	ldr	r7, [r3, #0]
   107e6:	4632      	mov	r2, r6
   107e8:	210a      	movs	r1, #10
   107ea:	4638      	mov	r0, r7
   107ec:	f7fd fc08 	bl	e000 <memchr>
   107f0:	2800      	cmp	r0, #0
   107f2:	f000 809c 	beq.w	1092e <__sfvwrite_r+0x2d6>
   107f6:	3001      	adds	r0, #1
   107f8:	eba0 0907 	sub.w	r9, r0, r7
   107fc:	e7c0      	b.n	10780 <__sfvwrite_r+0x128>
   107fe:	6820      	ldr	r0, [r4, #0]
   10800:	6923      	ldr	r3, [r4, #16]
   10802:	4298      	cmp	r0, r3
   10804:	d816      	bhi.n	10834 <__sfvwrite_r+0x1dc>
   10806:	6962      	ldr	r2, [r4, #20]
   10808:	42b2      	cmp	r2, r6
   1080a:	d813      	bhi.n	10834 <__sfvwrite_r+0x1dc>
   1080c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   10810:	42b3      	cmp	r3, r6
   10812:	bf28      	it	cs
   10814:	4633      	movcs	r3, r6
   10816:	69e1      	ldr	r1, [r4, #28]
   10818:	fb93 f3f2 	sdiv	r3, r3, r2
   1081c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1081e:	fb02 f303 	mul.w	r3, r2, r3
   10822:	4640      	mov	r0, r8
   10824:	464a      	mov	r2, r9
   10826:	47b8      	blx	r7
   10828:	f1b0 0a00 	subs.w	sl, r0, #0
   1082c:	dd93      	ble.n	10756 <__sfvwrite_r+0xfe>
   1082e:	eba6 060a 	sub.w	r6, r6, sl
   10832:	e776      	b.n	10722 <__sfvwrite_r+0xca>
   10834:	45b3      	cmp	fp, r6
   10836:	46da      	mov	sl, fp
   10838:	bf28      	it	cs
   1083a:	46b2      	movcs	sl, r6
   1083c:	4652      	mov	r2, sl
   1083e:	4649      	mov	r1, r9
   10840:	f7f7 fed6 	bl	85f0 <memmove>
   10844:	68a3      	ldr	r3, [r4, #8]
   10846:	6822      	ldr	r2, [r4, #0]
   10848:	eba3 030a 	sub.w	r3, r3, sl
   1084c:	4452      	add	r2, sl
   1084e:	60a3      	str	r3, [r4, #8]
   10850:	6022      	str	r2, [r4, #0]
   10852:	2b00      	cmp	r3, #0
   10854:	d1eb      	bne.n	1082e <__sfvwrite_r+0x1d6>
   10856:	4621      	mov	r1, r4
   10858:	4640      	mov	r0, r8
   1085a:	f7fd f9b7 	bl	dbcc <_fflush_r>
   1085e:	2800      	cmp	r0, #0
   10860:	d0e5      	beq.n	1082e <__sfvwrite_r+0x1d6>
   10862:	e778      	b.n	10756 <__sfvwrite_r+0xfe>
   10864:	6820      	ldr	r0, [r4, #0]
   10866:	46b3      	mov	fp, r6
   10868:	4632      	mov	r2, r6
   1086a:	e74c      	b.n	10706 <__sfvwrite_r+0xae>
   1086c:	4639      	mov	r1, r7
   1086e:	9201      	str	r2, [sp, #4]
   10870:	f7f7 febe 	bl	85f0 <memmove>
   10874:	9a01      	ldr	r2, [sp, #4]
   10876:	68a3      	ldr	r3, [r4, #8]
   10878:	1a9b      	subs	r3, r3, r2
   1087a:	60a3      	str	r3, [r4, #8]
   1087c:	6823      	ldr	r3, [r4, #0]
   1087e:	4413      	add	r3, r2
   10880:	6023      	str	r3, [r4, #0]
   10882:	4693      	mov	fp, r2
   10884:	e795      	b.n	107b2 <__sfvwrite_r+0x15a>
   10886:	6823      	ldr	r3, [r4, #0]
   10888:	6921      	ldr	r1, [r4, #16]
   1088a:	eba3 0b01 	sub.w	fp, r3, r1
   1088e:	6963      	ldr	r3, [r4, #20]
   10890:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   10894:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   10898:	f10b 0301 	add.w	r3, fp, #1
   1089c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   108a0:	4433      	add	r3, r6
   108a2:	4553      	cmp	r3, sl
   108a4:	4652      	mov	r2, sl
   108a6:	bf84      	itt	hi
   108a8:	469a      	movhi	sl, r3
   108aa:	4652      	movhi	r2, sl
   108ac:	0543      	lsls	r3, r0, #21
   108ae:	d52c      	bpl.n	1090a <__sfvwrite_r+0x2b2>
   108b0:	4611      	mov	r1, r2
   108b2:	4640      	mov	r0, r8
   108b4:	f7f6 f84c 	bl	6950 <_malloc_r>
   108b8:	2800      	cmp	r0, #0
   108ba:	d03b      	beq.n	10934 <__sfvwrite_r+0x2dc>
   108bc:	465a      	mov	r2, fp
   108be:	6921      	ldr	r1, [r4, #16]
   108c0:	9001      	str	r0, [sp, #4]
   108c2:	f7f4 f963 	bl	4b8c <memcpy>
   108c6:	89a2      	ldrh	r2, [r4, #12]
   108c8:	9b01      	ldr	r3, [sp, #4]
   108ca:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   108ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   108d2:	81a2      	strh	r2, [r4, #12]
   108d4:	eb03 000b 	add.w	r0, r3, fp
   108d8:	6123      	str	r3, [r4, #16]
   108da:	ebaa 030b 	sub.w	r3, sl, fp
   108de:	f8c4 a014 	str.w	sl, [r4, #20]
   108e2:	60a3      	str	r3, [r4, #8]
   108e4:	6020      	str	r0, [r4, #0]
   108e6:	46b3      	mov	fp, r6
   108e8:	4632      	mov	r2, r6
   108ea:	e70c      	b.n	10706 <__sfvwrite_r+0xae>
   108ec:	4639      	mov	r1, r7
   108ee:	465a      	mov	r2, fp
   108f0:	f7f7 fe7e 	bl	85f0 <memmove>
   108f4:	6823      	ldr	r3, [r4, #0]
   108f6:	445b      	add	r3, fp
   108f8:	6023      	str	r3, [r4, #0]
   108fa:	4621      	mov	r1, r4
   108fc:	4640      	mov	r0, r8
   108fe:	f7fd f965 	bl	dbcc <_fflush_r>
   10902:	2800      	cmp	r0, #0
   10904:	f43f af55 	beq.w	107b2 <__sfvwrite_r+0x15a>
   10908:	e725      	b.n	10756 <__sfvwrite_r+0xfe>
   1090a:	4640      	mov	r0, r8
   1090c:	f7f6 fae8 	bl	6ee0 <_realloc_r>
   10910:	4603      	mov	r3, r0
   10912:	2800      	cmp	r0, #0
   10914:	d1de      	bne.n	108d4 <__sfvwrite_r+0x27c>
   10916:	6921      	ldr	r1, [r4, #16]
   10918:	4640      	mov	r0, r8
   1091a:	f7f8 fb43 	bl	8fa4 <_free_r>
   1091e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10922:	220c      	movs	r2, #12
   10924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   10928:	f8c8 2000 	str.w	r2, [r8]
   1092c:	e715      	b.n	1075a <__sfvwrite_r+0x102>
   1092e:	1c72      	adds	r2, r6, #1
   10930:	4691      	mov	r9, r2
   10932:	e726      	b.n	10782 <__sfvwrite_r+0x12a>
   10934:	220c      	movs	r2, #12
   10936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1093a:	f8c8 2000 	str.w	r2, [r8]
   1093e:	e70c      	b.n	1075a <__sfvwrite_r+0x102>
   10940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10944:	e6ba      	b.n	106bc <__sfvwrite_r+0x64>
   10946:	bf00      	nop
   10948:	7ffffc00 	.word	0x7ffffc00

0001094c <__swsetup_r>:
   1094c:	b538      	push	{r3, r4, r5, lr}
   1094e:	4b31      	ldr	r3, [pc, #196]	; (10a14 <__swsetup_r+0xc8>)
   10950:	681b      	ldr	r3, [r3, #0]
   10952:	4605      	mov	r5, r0
   10954:	460c      	mov	r4, r1
   10956:	b113      	cbz	r3, 1095e <__swsetup_r+0x12>
   10958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1095a:	2a00      	cmp	r2, #0
   1095c:	d04e      	beq.n	109fc <__swsetup_r+0xb0>
   1095e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10962:	0718      	lsls	r0, r3, #28
   10964:	b29a      	uxth	r2, r3
   10966:	d51c      	bpl.n	109a2 <__swsetup_r+0x56>
   10968:	6921      	ldr	r1, [r4, #16]
   1096a:	b329      	cbz	r1, 109b8 <__swsetup_r+0x6c>
   1096c:	f012 0001 	ands.w	r0, r2, #1
   10970:	d007      	beq.n	10982 <__swsetup_r+0x36>
   10972:	2000      	movs	r0, #0
   10974:	60a0      	str	r0, [r4, #8]
   10976:	6960      	ldr	r0, [r4, #20]
   10978:	4240      	negs	r0, r0
   1097a:	61a0      	str	r0, [r4, #24]
   1097c:	b139      	cbz	r1, 1098e <__swsetup_r+0x42>
   1097e:	2000      	movs	r0, #0
   10980:	bd38      	pop	{r3, r4, r5, pc}
   10982:	0795      	lsls	r5, r2, #30
   10984:	bf58      	it	pl
   10986:	6960      	ldrpl	r0, [r4, #20]
   10988:	60a0      	str	r0, [r4, #8]
   1098a:	2900      	cmp	r1, #0
   1098c:	d1f7      	bne.n	1097e <__swsetup_r+0x32>
   1098e:	0612      	lsls	r2, r2, #24
   10990:	bf58      	it	pl
   10992:	4608      	movpl	r0, r1
   10994:	d5f4      	bpl.n	10980 <__swsetup_r+0x34>
   10996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1099a:	81a3      	strh	r3, [r4, #12]
   1099c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   109a0:	bd38      	pop	{r3, r4, r5, pc}
   109a2:	06d1      	lsls	r1, r2, #27
   109a4:	d52e      	bpl.n	10a04 <__swsetup_r+0xb8>
   109a6:	0752      	lsls	r2, r2, #29
   109a8:	d414      	bmi.n	109d4 <__swsetup_r+0x88>
   109aa:	6921      	ldr	r1, [r4, #16]
   109ac:	f043 0308 	orr.w	r3, r3, #8
   109b0:	81a3      	strh	r3, [r4, #12]
   109b2:	b29a      	uxth	r2, r3
   109b4:	2900      	cmp	r1, #0
   109b6:	d1d9      	bne.n	1096c <__swsetup_r+0x20>
   109b8:	f402 7020 	and.w	r0, r2, #640	; 0x280
   109bc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   109c0:	d0d4      	beq.n	1096c <__swsetup_r+0x20>
   109c2:	4621      	mov	r1, r4
   109c4:	4628      	mov	r0, r5
   109c6:	f000 f947 	bl	10c58 <__smakebuf_r>
   109ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   109ce:	6921      	ldr	r1, [r4, #16]
   109d0:	b29a      	uxth	r2, r3
   109d2:	e7cb      	b.n	1096c <__swsetup_r+0x20>
   109d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   109d6:	b151      	cbz	r1, 109ee <__swsetup_r+0xa2>
   109d8:	f104 0240 	add.w	r2, r4, #64	; 0x40
   109dc:	4291      	cmp	r1, r2
   109de:	d004      	beq.n	109ea <__swsetup_r+0x9e>
   109e0:	4628      	mov	r0, r5
   109e2:	f7f8 fadf 	bl	8fa4 <_free_r>
   109e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   109ea:	2200      	movs	r2, #0
   109ec:	6322      	str	r2, [r4, #48]	; 0x30
   109ee:	6921      	ldr	r1, [r4, #16]
   109f0:	2200      	movs	r2, #0
   109f2:	e9c4 1200 	strd	r1, r2, [r4]
   109f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   109fa:	e7d7      	b.n	109ac <__swsetup_r+0x60>
   109fc:	4618      	mov	r0, r3
   109fe:	f7f7 fda9 	bl	8554 <__sinit>
   10a02:	e7ac      	b.n	1095e <__swsetup_r+0x12>
   10a04:	2209      	movs	r2, #9
   10a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10a0a:	602a      	str	r2, [r5, #0]
   10a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a10:	81a3      	strh	r3, [r4, #12]
   10a12:	bd38      	pop	{r3, r4, r5, pc}
   10a14:	20008bc0 	.word	0x20008bc0

00010a18 <__fputwc>:
   10a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10a1c:	b082      	sub	sp, #8
   10a1e:	4682      	mov	sl, r0
   10a20:	4688      	mov	r8, r1
   10a22:	4614      	mov	r4, r2
   10a24:	f7f7 ff2a 	bl	887c <__locale_mb_cur_max>
   10a28:	2801      	cmp	r0, #1
   10a2a:	d103      	bne.n	10a34 <__fputwc+0x1c>
   10a2c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   10a30:	2bfe      	cmp	r3, #254	; 0xfe
   10a32:	d936      	bls.n	10aa2 <__fputwc+0x8a>
   10a34:	f10d 0904 	add.w	r9, sp, #4
   10a38:	4642      	mov	r2, r8
   10a3a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   10a3e:	4649      	mov	r1, r9
   10a40:	4650      	mov	r0, sl
   10a42:	f7fd fb57 	bl	e0f4 <_wcrtomb_r>
   10a46:	1c42      	adds	r2, r0, #1
   10a48:	4606      	mov	r6, r0
   10a4a:	d032      	beq.n	10ab2 <__fputwc+0x9a>
   10a4c:	b320      	cbz	r0, 10a98 <__fputwc+0x80>
   10a4e:	f89d c004 	ldrb.w	ip, [sp, #4]
   10a52:	2500      	movs	r5, #0
   10a54:	e009      	b.n	10a6a <__fputwc+0x52>
   10a56:	6823      	ldr	r3, [r4, #0]
   10a58:	1c5a      	adds	r2, r3, #1
   10a5a:	6022      	str	r2, [r4, #0]
   10a5c:	f883 c000 	strb.w	ip, [r3]
   10a60:	3501      	adds	r5, #1
   10a62:	42b5      	cmp	r5, r6
   10a64:	d218      	bcs.n	10a98 <__fputwc+0x80>
   10a66:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   10a6a:	68a3      	ldr	r3, [r4, #8]
   10a6c:	3b01      	subs	r3, #1
   10a6e:	2b00      	cmp	r3, #0
   10a70:	60a3      	str	r3, [r4, #8]
   10a72:	daf0      	bge.n	10a56 <__fputwc+0x3e>
   10a74:	69a7      	ldr	r7, [r4, #24]
   10a76:	42bb      	cmp	r3, r7
   10a78:	4661      	mov	r1, ip
   10a7a:	4622      	mov	r2, r4
   10a7c:	4650      	mov	r0, sl
   10a7e:	db02      	blt.n	10a86 <__fputwc+0x6e>
   10a80:	f1bc 0f0a 	cmp.w	ip, #10
   10a84:	d1e7      	bne.n	10a56 <__fputwc+0x3e>
   10a86:	f000 f953 	bl	10d30 <__swbuf_r>
   10a8a:	1c43      	adds	r3, r0, #1
   10a8c:	d1e8      	bne.n	10a60 <__fputwc+0x48>
   10a8e:	4606      	mov	r6, r0
   10a90:	4630      	mov	r0, r6
   10a92:	b002      	add	sp, #8
   10a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10a98:	4646      	mov	r6, r8
   10a9a:	4630      	mov	r0, r6
   10a9c:	b002      	add	sp, #8
   10a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10aa2:	fa5f fc88 	uxtb.w	ip, r8
   10aa6:	f88d c004 	strb.w	ip, [sp, #4]
   10aaa:	4606      	mov	r6, r0
   10aac:	f10d 0904 	add.w	r9, sp, #4
   10ab0:	e7cf      	b.n	10a52 <__fputwc+0x3a>
   10ab2:	89a3      	ldrh	r3, [r4, #12]
   10ab4:	4630      	mov	r0, r6
   10ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10aba:	81a3      	strh	r3, [r4, #12]
   10abc:	b002      	add	sp, #8
   10abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10ac2:	bf00      	nop

00010ac4 <_fputwc_r>:
   10ac4:	b530      	push	{r4, r5, lr}
   10ac6:	6e53      	ldr	r3, [r2, #100]	; 0x64
   10ac8:	f013 0f01 	tst.w	r3, #1
   10acc:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10ad0:	4614      	mov	r4, r2
   10ad2:	b083      	sub	sp, #12
   10ad4:	4605      	mov	r5, r0
   10ad6:	b29a      	uxth	r2, r3
   10ad8:	d101      	bne.n	10ade <_fputwc_r+0x1a>
   10ada:	0598      	lsls	r0, r3, #22
   10adc:	d51c      	bpl.n	10b18 <_fputwc_r+0x54>
   10ade:	0490      	lsls	r0, r2, #18
   10ae0:	d406      	bmi.n	10af0 <_fputwc_r+0x2c>
   10ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   10ae4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   10ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   10aec:	81a3      	strh	r3, [r4, #12]
   10aee:	6662      	str	r2, [r4, #100]	; 0x64
   10af0:	4622      	mov	r2, r4
   10af2:	4628      	mov	r0, r5
   10af4:	f7ff ff90 	bl	10a18 <__fputwc>
   10af8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10afa:	07da      	lsls	r2, r3, #31
   10afc:	4605      	mov	r5, r0
   10afe:	d402      	bmi.n	10b06 <_fputwc_r+0x42>
   10b00:	89a3      	ldrh	r3, [r4, #12]
   10b02:	059b      	lsls	r3, r3, #22
   10b04:	d502      	bpl.n	10b0c <_fputwc_r+0x48>
   10b06:	4628      	mov	r0, r5
   10b08:	b003      	add	sp, #12
   10b0a:	bd30      	pop	{r4, r5, pc}
   10b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10b0e:	f7f8 f92d 	bl	8d6c <__retarget_lock_release_recursive>
   10b12:	4628      	mov	r0, r5
   10b14:	b003      	add	sp, #12
   10b16:	bd30      	pop	{r4, r5, pc}
   10b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10b1a:	9101      	str	r1, [sp, #4]
   10b1c:	f7f8 f924 	bl	8d68 <__retarget_lock_acquire_recursive>
   10b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10b24:	9901      	ldr	r1, [sp, #4]
   10b26:	b29a      	uxth	r2, r3
   10b28:	e7d9      	b.n	10ade <_fputwc_r+0x1a>
   10b2a:	bf00      	nop

00010b2c <_wcsnrtombs_l>:
   10b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b30:	b08b      	sub	sp, #44	; 0x2c
   10b32:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   10b36:	9f14      	ldr	r7, [sp, #80]	; 0x50
   10b38:	9103      	str	r1, [sp, #12]
   10b3a:	4681      	mov	r9, r0
   10b3c:	9205      	str	r2, [sp, #20]
   10b3e:	461e      	mov	r6, r3
   10b40:	f1b8 0f00 	cmp.w	r8, #0
   10b44:	d05c      	beq.n	10c00 <_wcsnrtombs_l+0xd4>
   10b46:	9b03      	ldr	r3, [sp, #12]
   10b48:	2b00      	cmp	r3, #0
   10b4a:	d05e      	beq.n	10c0a <_wcsnrtombs_l+0xde>
   10b4c:	9b05      	ldr	r3, [sp, #20]
   10b4e:	681d      	ldr	r5, [r3, #0]
   10b50:	2f00      	cmp	r7, #0
   10b52:	d06a      	beq.n	10c2a <_wcsnrtombs_l+0xfe>
   10b54:	1e74      	subs	r4, r6, #1
   10b56:	b34e      	cbz	r6, 10bac <_wcsnrtombs_l+0x80>
   10b58:	9b03      	ldr	r3, [sp, #12]
   10b5a:	9304      	str	r3, [sp, #16]
   10b5c:	3d04      	subs	r5, #4
   10b5e:	2600      	movs	r6, #0
   10b60:	9501      	str	r5, [sp, #4]
   10b62:	e00b      	b.n	10b7c <_wcsnrtombs_l+0x50>
   10b64:	9b03      	ldr	r3, [sp, #12]
   10b66:	bb2b      	cbnz	r3, 10bb4 <_wcsnrtombs_l+0x88>
   10b68:	9b01      	ldr	r3, [sp, #4]
   10b6a:	681a      	ldr	r2, [r3, #0]
   10b6c:	2a00      	cmp	r2, #0
   10b6e:	d03a      	beq.n	10be6 <_wcsnrtombs_l+0xba>
   10b70:	45bc      	cmp	ip, r7
   10b72:	d25c      	bcs.n	10c2e <_wcsnrtombs_l+0x102>
   10b74:	3c01      	subs	r4, #1
   10b76:	1c63      	adds	r3, r4, #1
   10b78:	4666      	mov	r6, ip
   10b7a:	d017      	beq.n	10bac <_wcsnrtombs_l+0x80>
   10b7c:	f8d8 3000 	ldr.w	r3, [r8]
   10b80:	9302      	str	r3, [sp, #8]
   10b82:	9b01      	ldr	r3, [sp, #4]
   10b84:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   10b88:	f853 2f04 	ldr.w	r2, [r3, #4]!
   10b8c:	9301      	str	r3, [sp, #4]
   10b8e:	a907      	add	r1, sp, #28
   10b90:	4643      	mov	r3, r8
   10b92:	4648      	mov	r0, r9
   10b94:	f8d8 b004 	ldr.w	fp, [r8, #4]
   10b98:	47a8      	blx	r5
   10b9a:	1c42      	adds	r2, r0, #1
   10b9c:	d03a      	beq.n	10c14 <_wcsnrtombs_l+0xe8>
   10b9e:	eb00 0c06 	add.w	ip, r0, r6
   10ba2:	45bc      	cmp	ip, r7
   10ba4:	d9de      	bls.n	10b64 <_wcsnrtombs_l+0x38>
   10ba6:	9b02      	ldr	r3, [sp, #8]
   10ba8:	e9c8 3b00 	strd	r3, fp, [r8]
   10bac:	4630      	mov	r0, r6
   10bae:	b00b      	add	sp, #44	; 0x2c
   10bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bb4:	2800      	cmp	r0, #0
   10bb6:	dd0e      	ble.n	10bd6 <_wcsnrtombs_l+0xaa>
   10bb8:	9b04      	ldr	r3, [sp, #16]
   10bba:	9d01      	ldr	r5, [sp, #4]
   10bbc:	4418      	add	r0, r3
   10bbe:	1e5a      	subs	r2, r3, #1
   10bc0:	a907      	add	r1, sp, #28
   10bc2:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   10bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
   10bca:	f802 3f01 	strb.w	r3, [r2, #1]!
   10bce:	4572      	cmp	r2, lr
   10bd0:	d1f9      	bne.n	10bc6 <_wcsnrtombs_l+0x9a>
   10bd2:	9501      	str	r5, [sp, #4]
   10bd4:	9004      	str	r0, [sp, #16]
   10bd6:	9b05      	ldr	r3, [sp, #20]
   10bd8:	681a      	ldr	r2, [r3, #0]
   10bda:	3204      	adds	r2, #4
   10bdc:	601a      	str	r2, [r3, #0]
   10bde:	9b01      	ldr	r3, [sp, #4]
   10be0:	681a      	ldr	r2, [r3, #0]
   10be2:	2a00      	cmp	r2, #0
   10be4:	d1c4      	bne.n	10b70 <_wcsnrtombs_l+0x44>
   10be6:	9b03      	ldr	r3, [sp, #12]
   10be8:	b10b      	cbz	r3, 10bee <_wcsnrtombs_l+0xc2>
   10bea:	9b05      	ldr	r3, [sp, #20]
   10bec:	601a      	str	r2, [r3, #0]
   10bee:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   10bf2:	2200      	movs	r2, #0
   10bf4:	4630      	mov	r0, r6
   10bf6:	f8c8 2000 	str.w	r2, [r8]
   10bfa:	b00b      	add	sp, #44	; 0x2c
   10bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c00:	9b03      	ldr	r3, [sp, #12]
   10c02:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   10c06:	2b00      	cmp	r3, #0
   10c08:	d1a0      	bne.n	10b4c <_wcsnrtombs_l+0x20>
   10c0a:	9b05      	ldr	r3, [sp, #20]
   10c0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   10c10:	681d      	ldr	r5, [r3, #0]
   10c12:	e79f      	b.n	10b54 <_wcsnrtombs_l+0x28>
   10c14:	4606      	mov	r6, r0
   10c16:	218a      	movs	r1, #138	; 0x8a
   10c18:	2200      	movs	r2, #0
   10c1a:	4630      	mov	r0, r6
   10c1c:	f8c9 1000 	str.w	r1, [r9]
   10c20:	f8c8 2000 	str.w	r2, [r8]
   10c24:	b00b      	add	sp, #44	; 0x2c
   10c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c2a:	463e      	mov	r6, r7
   10c2c:	e7be      	b.n	10bac <_wcsnrtombs_l+0x80>
   10c2e:	4666      	mov	r6, ip
   10c30:	e7bc      	b.n	10bac <_wcsnrtombs_l+0x80>
   10c32:	bf00      	nop

00010c34 <_wcsnrtombs_r>:
   10c34:	b510      	push	{r4, lr}
   10c36:	b084      	sub	sp, #16
   10c38:	4c05      	ldr	r4, [pc, #20]	; (10c50 <_wcsnrtombs_r+0x1c>)
   10c3a:	9806      	ldr	r0, [sp, #24]
   10c3c:	9000      	str	r0, [sp, #0]
   10c3e:	9807      	ldr	r0, [sp, #28]
   10c40:	9001      	str	r0, [sp, #4]
   10c42:	4804      	ldr	r0, [pc, #16]	; (10c54 <_wcsnrtombs_r+0x20>)
   10c44:	6800      	ldr	r0, [r0, #0]
   10c46:	9402      	str	r4, [sp, #8]
   10c48:	f7ff ff70 	bl	10b2c <_wcsnrtombs_l>
   10c4c:	b004      	add	sp, #16
   10c4e:	bd10      	pop	{r4, pc}
   10c50:	20008638 	.word	0x20008638
   10c54:	20008bc0 	.word	0x20008bc0

00010c58 <__smakebuf_r>:
   10c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c5c:	898b      	ldrh	r3, [r1, #12]
   10c5e:	460c      	mov	r4, r1
   10c60:	0799      	lsls	r1, r3, #30
   10c62:	b096      	sub	sp, #88	; 0x58
   10c64:	d508      	bpl.n	10c78 <__smakebuf_r+0x20>
   10c66:	f104 0343 	add.w	r3, r4, #67	; 0x43
   10c6a:	2201      	movs	r2, #1
   10c6c:	e9c4 3204 	strd	r3, r2, [r4, #16]
   10c70:	6023      	str	r3, [r4, #0]
   10c72:	b016      	add	sp, #88	; 0x58
   10c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   10c7c:	2900      	cmp	r1, #0
   10c7e:	4606      	mov	r6, r0
   10c80:	db25      	blt.n	10cce <__smakebuf_r+0x76>
   10c82:	466a      	mov	r2, sp
   10c84:	f000 f8ac 	bl	10de0 <_fstat_r>
   10c88:	2800      	cmp	r0, #0
   10c8a:	db1f      	blt.n	10ccc <__smakebuf_r+0x74>
   10c8c:	9d01      	ldr	r5, [sp, #4]
   10c8e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   10c92:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   10c96:	fab5 f585 	clz	r5, r5
   10c9a:	f44f 6880 	mov.w	r8, #1024	; 0x400
   10c9e:	096d      	lsrs	r5, r5, #5
   10ca0:	f44f 6700 	mov.w	r7, #2048	; 0x800
   10ca4:	4641      	mov	r1, r8
   10ca6:	4630      	mov	r0, r6
   10ca8:	f7f5 fe52 	bl	6950 <_malloc_r>
   10cac:	b1e0      	cbz	r0, 10ce8 <__smakebuf_r+0x90>
   10cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10cb2:	f8c4 8014 	str.w	r8, [r4, #20]
   10cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10cba:	6020      	str	r0, [r4, #0]
   10cbc:	6120      	str	r0, [r4, #16]
   10cbe:	81a3      	strh	r3, [r4, #12]
   10cc0:	bb35      	cbnz	r5, 10d10 <__smakebuf_r+0xb8>
   10cc2:	433b      	orrs	r3, r7
   10cc4:	81a3      	strh	r3, [r4, #12]
   10cc6:	b016      	add	sp, #88	; 0x58
   10cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ccc:	89a3      	ldrh	r3, [r4, #12]
   10cce:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   10cd2:	d019      	beq.n	10d08 <__smakebuf_r+0xb0>
   10cd4:	f04f 0840 	mov.w	r8, #64	; 0x40
   10cd8:	2500      	movs	r5, #0
   10cda:	4641      	mov	r1, r8
   10cdc:	4630      	mov	r0, r6
   10cde:	462f      	mov	r7, r5
   10ce0:	f7f5 fe36 	bl	6950 <_malloc_r>
   10ce4:	2800      	cmp	r0, #0
   10ce6:	d1e2      	bne.n	10cae <__smakebuf_r+0x56>
   10ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10cec:	059a      	lsls	r2, r3, #22
   10cee:	d4c0      	bmi.n	10c72 <__smakebuf_r+0x1a>
   10cf0:	f023 0303 	bic.w	r3, r3, #3
   10cf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   10cf8:	f043 0302 	orr.w	r3, r3, #2
   10cfc:	2101      	movs	r1, #1
   10cfe:	e9c4 2104 	strd	r2, r1, [r4, #16]
   10d02:	81a3      	strh	r3, [r4, #12]
   10d04:	6022      	str	r2, [r4, #0]
   10d06:	e7b4      	b.n	10c72 <__smakebuf_r+0x1a>
   10d08:	f44f 6880 	mov.w	r8, #1024	; 0x400
   10d0c:	462f      	mov	r7, r5
   10d0e:	e7c9      	b.n	10ca4 <__smakebuf_r+0x4c>
   10d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   10d14:	4630      	mov	r0, r6
   10d16:	f000 f879 	bl	10e0c <_isatty_r>
   10d1a:	b910      	cbnz	r0, 10d22 <__smakebuf_r+0xca>
   10d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10d20:	e7cf      	b.n	10cc2 <__smakebuf_r+0x6a>
   10d22:	89a3      	ldrh	r3, [r4, #12]
   10d24:	f023 0303 	bic.w	r3, r3, #3
   10d28:	f043 0301 	orr.w	r3, r3, #1
   10d2c:	b21b      	sxth	r3, r3
   10d2e:	e7c8      	b.n	10cc2 <__smakebuf_r+0x6a>

00010d30 <__swbuf_r>:
   10d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d32:	460d      	mov	r5, r1
   10d34:	4614      	mov	r4, r2
   10d36:	4606      	mov	r6, r0
   10d38:	b110      	cbz	r0, 10d40 <__swbuf_r+0x10>
   10d3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10d3c:	2b00      	cmp	r3, #0
   10d3e:	d04c      	beq.n	10dda <__swbuf_r+0xaa>
   10d40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   10d44:	69a3      	ldr	r3, [r4, #24]
   10d46:	60a3      	str	r3, [r4, #8]
   10d48:	0717      	lsls	r7, r2, #28
   10d4a:	b290      	uxth	r0, r2
   10d4c:	d51b      	bpl.n	10d86 <__swbuf_r+0x56>
   10d4e:	6923      	ldr	r3, [r4, #16]
   10d50:	b1cb      	cbz	r3, 10d86 <__swbuf_r+0x56>
   10d52:	b2ed      	uxtb	r5, r5
   10d54:	0481      	lsls	r1, r0, #18
   10d56:	462f      	mov	r7, r5
   10d58:	d522      	bpl.n	10da0 <__swbuf_r+0x70>
   10d5a:	6822      	ldr	r2, [r4, #0]
   10d5c:	6961      	ldr	r1, [r4, #20]
   10d5e:	1ad3      	subs	r3, r2, r3
   10d60:	4299      	cmp	r1, r3
   10d62:	dd29      	ble.n	10db8 <__swbuf_r+0x88>
   10d64:	3301      	adds	r3, #1
   10d66:	68a1      	ldr	r1, [r4, #8]
   10d68:	3901      	subs	r1, #1
   10d6a:	60a1      	str	r1, [r4, #8]
   10d6c:	1c51      	adds	r1, r2, #1
   10d6e:	6021      	str	r1, [r4, #0]
   10d70:	7015      	strb	r5, [r2, #0]
   10d72:	6962      	ldr	r2, [r4, #20]
   10d74:	429a      	cmp	r2, r3
   10d76:	d027      	beq.n	10dc8 <__swbuf_r+0x98>
   10d78:	89a3      	ldrh	r3, [r4, #12]
   10d7a:	07db      	lsls	r3, r3, #31
   10d7c:	d501      	bpl.n	10d82 <__swbuf_r+0x52>
   10d7e:	2d0a      	cmp	r5, #10
   10d80:	d022      	beq.n	10dc8 <__swbuf_r+0x98>
   10d82:	4638      	mov	r0, r7
   10d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d86:	4621      	mov	r1, r4
   10d88:	4630      	mov	r0, r6
   10d8a:	f7ff fddf 	bl	1094c <__swsetup_r>
   10d8e:	bb08      	cbnz	r0, 10dd4 <__swbuf_r+0xa4>
   10d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   10d94:	6923      	ldr	r3, [r4, #16]
   10d96:	b290      	uxth	r0, r2
   10d98:	b2ed      	uxtb	r5, r5
   10d9a:	0481      	lsls	r1, r0, #18
   10d9c:	462f      	mov	r7, r5
   10d9e:	d4dc      	bmi.n	10d5a <__swbuf_r+0x2a>
   10da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   10da4:	81a2      	strh	r2, [r4, #12]
   10da6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   10da8:	6961      	ldr	r1, [r4, #20]
   10daa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   10dae:	6662      	str	r2, [r4, #100]	; 0x64
   10db0:	6822      	ldr	r2, [r4, #0]
   10db2:	1ad3      	subs	r3, r2, r3
   10db4:	4299      	cmp	r1, r3
   10db6:	dcd5      	bgt.n	10d64 <__swbuf_r+0x34>
   10db8:	4621      	mov	r1, r4
   10dba:	4630      	mov	r0, r6
   10dbc:	f7fc ff06 	bl	dbcc <_fflush_r>
   10dc0:	b940      	cbnz	r0, 10dd4 <__swbuf_r+0xa4>
   10dc2:	6822      	ldr	r2, [r4, #0]
   10dc4:	2301      	movs	r3, #1
   10dc6:	e7ce      	b.n	10d66 <__swbuf_r+0x36>
   10dc8:	4621      	mov	r1, r4
   10dca:	4630      	mov	r0, r6
   10dcc:	f7fc fefe 	bl	dbcc <_fflush_r>
   10dd0:	2800      	cmp	r0, #0
   10dd2:	d0d6      	beq.n	10d82 <__swbuf_r+0x52>
   10dd4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   10dd8:	e7d3      	b.n	10d82 <__swbuf_r+0x52>
   10dda:	f7f7 fbbb 	bl	8554 <__sinit>
   10dde:	e7af      	b.n	10d40 <__swbuf_r+0x10>

00010de0 <_fstat_r>:
   10de0:	b570      	push	{r4, r5, r6, lr}
   10de2:	460c      	mov	r4, r1
   10de4:	4d08      	ldr	r5, [pc, #32]	; (10e08 <_fstat_r+0x28>)
   10de6:	4603      	mov	r3, r0
   10de8:	2600      	movs	r6, #0
   10dea:	4620      	mov	r0, r4
   10dec:	4611      	mov	r1, r2
   10dee:	461c      	mov	r4, r3
   10df0:	602e      	str	r6, [r5, #0]
   10df2:	f7f4 faef 	bl	53d4 <_fstat>
   10df6:	1c43      	adds	r3, r0, #1
   10df8:	d000      	beq.n	10dfc <_fstat_r+0x1c>
   10dfa:	bd70      	pop	{r4, r5, r6, pc}
   10dfc:	682b      	ldr	r3, [r5, #0]
   10dfe:	2b00      	cmp	r3, #0
   10e00:	d0fb      	beq.n	10dfa <_fstat_r+0x1a>
   10e02:	6023      	str	r3, [r4, #0]
   10e04:	bd70      	pop	{r4, r5, r6, pc}
   10e06:	bf00      	nop
   10e08:	2000aa74 	.word	0x2000aa74

00010e0c <_isatty_r>:
   10e0c:	b538      	push	{r3, r4, r5, lr}
   10e0e:	4d07      	ldr	r5, [pc, #28]	; (10e2c <_isatty_r+0x20>)
   10e10:	2200      	movs	r2, #0
   10e12:	4604      	mov	r4, r0
   10e14:	4608      	mov	r0, r1
   10e16:	602a      	str	r2, [r5, #0]
   10e18:	f7f4 fae2 	bl	53e0 <_isatty>
   10e1c:	1c43      	adds	r3, r0, #1
   10e1e:	d000      	beq.n	10e22 <_isatty_r+0x16>
   10e20:	bd38      	pop	{r3, r4, r5, pc}
   10e22:	682b      	ldr	r3, [r5, #0]
   10e24:	2b00      	cmp	r3, #0
   10e26:	d0fb      	beq.n	10e20 <_isatty_r+0x14>
   10e28:	6023      	str	r3, [r4, #0]
   10e2a:	bd38      	pop	{r3, r4, r5, pc}
   10e2c:	2000aa74 	.word	0x2000aa74

00010e30 <__aeabi_drsub>:
   10e30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   10e34:	e002      	b.n	10e3c <__adddf3>
   10e36:	bf00      	nop

00010e38 <__aeabi_dsub>:
   10e38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00010e3c <__adddf3>:
   10e3c:	b530      	push	{r4, r5, lr}
   10e3e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   10e42:	ea4f 0543 	mov.w	r5, r3, lsl #1
   10e46:	ea94 0f05 	teq	r4, r5
   10e4a:	bf08      	it	eq
   10e4c:	ea90 0f02 	teqeq	r0, r2
   10e50:	bf1f      	itttt	ne
   10e52:	ea54 0c00 	orrsne.w	ip, r4, r0
   10e56:	ea55 0c02 	orrsne.w	ip, r5, r2
   10e5a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   10e5e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10e62:	f000 80e2 	beq.w	1102a <__adddf3+0x1ee>
   10e66:	ea4f 5454 	mov.w	r4, r4, lsr #21
   10e6a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   10e6e:	bfb8      	it	lt
   10e70:	426d      	neglt	r5, r5
   10e72:	dd0c      	ble.n	10e8e <__adddf3+0x52>
   10e74:	442c      	add	r4, r5
   10e76:	ea80 0202 	eor.w	r2, r0, r2
   10e7a:	ea81 0303 	eor.w	r3, r1, r3
   10e7e:	ea82 0000 	eor.w	r0, r2, r0
   10e82:	ea83 0101 	eor.w	r1, r3, r1
   10e86:	ea80 0202 	eor.w	r2, r0, r2
   10e8a:	ea81 0303 	eor.w	r3, r1, r3
   10e8e:	2d36      	cmp	r5, #54	; 0x36
   10e90:	bf88      	it	hi
   10e92:	bd30      	pophi	{r4, r5, pc}
   10e94:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10e98:	ea4f 3101 	mov.w	r1, r1, lsl #12
   10e9c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   10ea0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   10ea4:	d002      	beq.n	10eac <__adddf3+0x70>
   10ea6:	4240      	negs	r0, r0
   10ea8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10eac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   10eb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10eb4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   10eb8:	d002      	beq.n	10ec0 <__adddf3+0x84>
   10eba:	4252      	negs	r2, r2
   10ebc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10ec0:	ea94 0f05 	teq	r4, r5
   10ec4:	f000 80a7 	beq.w	11016 <__adddf3+0x1da>
   10ec8:	f1a4 0401 	sub.w	r4, r4, #1
   10ecc:	f1d5 0e20 	rsbs	lr, r5, #32
   10ed0:	db0d      	blt.n	10eee <__adddf3+0xb2>
   10ed2:	fa02 fc0e 	lsl.w	ip, r2, lr
   10ed6:	fa22 f205 	lsr.w	r2, r2, r5
   10eda:	1880      	adds	r0, r0, r2
   10edc:	f141 0100 	adc.w	r1, r1, #0
   10ee0:	fa03 f20e 	lsl.w	r2, r3, lr
   10ee4:	1880      	adds	r0, r0, r2
   10ee6:	fa43 f305 	asr.w	r3, r3, r5
   10eea:	4159      	adcs	r1, r3
   10eec:	e00e      	b.n	10f0c <__adddf3+0xd0>
   10eee:	f1a5 0520 	sub.w	r5, r5, #32
   10ef2:	f10e 0e20 	add.w	lr, lr, #32
   10ef6:	2a01      	cmp	r2, #1
   10ef8:	fa03 fc0e 	lsl.w	ip, r3, lr
   10efc:	bf28      	it	cs
   10efe:	f04c 0c02 	orrcs.w	ip, ip, #2
   10f02:	fa43 f305 	asr.w	r3, r3, r5
   10f06:	18c0      	adds	r0, r0, r3
   10f08:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   10f0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10f10:	d507      	bpl.n	10f22 <__adddf3+0xe6>
   10f12:	f04f 0e00 	mov.w	lr, #0
   10f16:	f1dc 0c00 	rsbs	ip, ip, #0
   10f1a:	eb7e 0000 	sbcs.w	r0, lr, r0
   10f1e:	eb6e 0101 	sbc.w	r1, lr, r1
   10f22:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   10f26:	d31b      	bcc.n	10f60 <__adddf3+0x124>
   10f28:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   10f2c:	d30c      	bcc.n	10f48 <__adddf3+0x10c>
   10f2e:	0849      	lsrs	r1, r1, #1
   10f30:	ea5f 0030 	movs.w	r0, r0, rrx
   10f34:	ea4f 0c3c 	mov.w	ip, ip, rrx
   10f38:	f104 0401 	add.w	r4, r4, #1
   10f3c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   10f40:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   10f44:	f080 809a 	bcs.w	1107c <__adddf3+0x240>
   10f48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   10f4c:	bf08      	it	eq
   10f4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10f52:	f150 0000 	adcs.w	r0, r0, #0
   10f56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   10f5a:	ea41 0105 	orr.w	r1, r1, r5
   10f5e:	bd30      	pop	{r4, r5, pc}
   10f60:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   10f64:	4140      	adcs	r0, r0
   10f66:	eb41 0101 	adc.w	r1, r1, r1
   10f6a:	3c01      	subs	r4, #1
   10f6c:	bf28      	it	cs
   10f6e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   10f72:	d2e9      	bcs.n	10f48 <__adddf3+0x10c>
   10f74:	f091 0f00 	teq	r1, #0
   10f78:	bf04      	itt	eq
   10f7a:	4601      	moveq	r1, r0
   10f7c:	2000      	moveq	r0, #0
   10f7e:	fab1 f381 	clz	r3, r1
   10f82:	bf08      	it	eq
   10f84:	3320      	addeq	r3, #32
   10f86:	f1a3 030b 	sub.w	r3, r3, #11
   10f8a:	f1b3 0220 	subs.w	r2, r3, #32
   10f8e:	da0c      	bge.n	10faa <__adddf3+0x16e>
   10f90:	320c      	adds	r2, #12
   10f92:	dd08      	ble.n	10fa6 <__adddf3+0x16a>
   10f94:	f102 0c14 	add.w	ip, r2, #20
   10f98:	f1c2 020c 	rsb	r2, r2, #12
   10f9c:	fa01 f00c 	lsl.w	r0, r1, ip
   10fa0:	fa21 f102 	lsr.w	r1, r1, r2
   10fa4:	e00c      	b.n	10fc0 <__adddf3+0x184>
   10fa6:	f102 0214 	add.w	r2, r2, #20
   10faa:	bfd8      	it	le
   10fac:	f1c2 0c20 	rsble	ip, r2, #32
   10fb0:	fa01 f102 	lsl.w	r1, r1, r2
   10fb4:	fa20 fc0c 	lsr.w	ip, r0, ip
   10fb8:	bfdc      	itt	le
   10fba:	ea41 010c 	orrle.w	r1, r1, ip
   10fbe:	4090      	lslle	r0, r2
   10fc0:	1ae4      	subs	r4, r4, r3
   10fc2:	bfa2      	ittt	ge
   10fc4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   10fc8:	4329      	orrge	r1, r5
   10fca:	bd30      	popge	{r4, r5, pc}
   10fcc:	ea6f 0404 	mvn.w	r4, r4
   10fd0:	3c1f      	subs	r4, #31
   10fd2:	da1c      	bge.n	1100e <__adddf3+0x1d2>
   10fd4:	340c      	adds	r4, #12
   10fd6:	dc0e      	bgt.n	10ff6 <__adddf3+0x1ba>
   10fd8:	f104 0414 	add.w	r4, r4, #20
   10fdc:	f1c4 0220 	rsb	r2, r4, #32
   10fe0:	fa20 f004 	lsr.w	r0, r0, r4
   10fe4:	fa01 f302 	lsl.w	r3, r1, r2
   10fe8:	ea40 0003 	orr.w	r0, r0, r3
   10fec:	fa21 f304 	lsr.w	r3, r1, r4
   10ff0:	ea45 0103 	orr.w	r1, r5, r3
   10ff4:	bd30      	pop	{r4, r5, pc}
   10ff6:	f1c4 040c 	rsb	r4, r4, #12
   10ffa:	f1c4 0220 	rsb	r2, r4, #32
   10ffe:	fa20 f002 	lsr.w	r0, r0, r2
   11002:	fa01 f304 	lsl.w	r3, r1, r4
   11006:	ea40 0003 	orr.w	r0, r0, r3
   1100a:	4629      	mov	r1, r5
   1100c:	bd30      	pop	{r4, r5, pc}
   1100e:	fa21 f004 	lsr.w	r0, r1, r4
   11012:	4629      	mov	r1, r5
   11014:	bd30      	pop	{r4, r5, pc}
   11016:	f094 0f00 	teq	r4, #0
   1101a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1101e:	bf06      	itte	eq
   11020:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   11024:	3401      	addeq	r4, #1
   11026:	3d01      	subne	r5, #1
   11028:	e74e      	b.n	10ec8 <__adddf3+0x8c>
   1102a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1102e:	bf18      	it	ne
   11030:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   11034:	d029      	beq.n	1108a <__adddf3+0x24e>
   11036:	ea94 0f05 	teq	r4, r5
   1103a:	bf08      	it	eq
   1103c:	ea90 0f02 	teqeq	r0, r2
   11040:	d005      	beq.n	1104e <__adddf3+0x212>
   11042:	ea54 0c00 	orrs.w	ip, r4, r0
   11046:	bf04      	itt	eq
   11048:	4619      	moveq	r1, r3
   1104a:	4610      	moveq	r0, r2
   1104c:	bd30      	pop	{r4, r5, pc}
   1104e:	ea91 0f03 	teq	r1, r3
   11052:	bf1e      	ittt	ne
   11054:	2100      	movne	r1, #0
   11056:	2000      	movne	r0, #0
   11058:	bd30      	popne	{r4, r5, pc}
   1105a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1105e:	d105      	bne.n	1106c <__adddf3+0x230>
   11060:	0040      	lsls	r0, r0, #1
   11062:	4149      	adcs	r1, r1
   11064:	bf28      	it	cs
   11066:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1106a:	bd30      	pop	{r4, r5, pc}
   1106c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   11070:	bf3c      	itt	cc
   11072:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   11076:	bd30      	popcc	{r4, r5, pc}
   11078:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1107c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   11080:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   11084:	f04f 0000 	mov.w	r0, #0
   11088:	bd30      	pop	{r4, r5, pc}
   1108a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1108e:	bf1a      	itte	ne
   11090:	4619      	movne	r1, r3
   11092:	4610      	movne	r0, r2
   11094:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   11098:	bf1c      	itt	ne
   1109a:	460b      	movne	r3, r1
   1109c:	4602      	movne	r2, r0
   1109e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   110a2:	bf06      	itte	eq
   110a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   110a8:	ea91 0f03 	teqeq	r1, r3
   110ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   110b0:	bd30      	pop	{r4, r5, pc}
   110b2:	bf00      	nop

000110b4 <__aeabi_ui2d>:
   110b4:	f090 0f00 	teq	r0, #0
   110b8:	bf04      	itt	eq
   110ba:	2100      	moveq	r1, #0
   110bc:	4770      	bxeq	lr
   110be:	b530      	push	{r4, r5, lr}
   110c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   110c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   110c8:	f04f 0500 	mov.w	r5, #0
   110cc:	f04f 0100 	mov.w	r1, #0
   110d0:	e750      	b.n	10f74 <__adddf3+0x138>
   110d2:	bf00      	nop

000110d4 <__aeabi_i2d>:
   110d4:	f090 0f00 	teq	r0, #0
   110d8:	bf04      	itt	eq
   110da:	2100      	moveq	r1, #0
   110dc:	4770      	bxeq	lr
   110de:	b530      	push	{r4, r5, lr}
   110e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   110e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   110e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   110ec:	bf48      	it	mi
   110ee:	4240      	negmi	r0, r0
   110f0:	f04f 0100 	mov.w	r1, #0
   110f4:	e73e      	b.n	10f74 <__adddf3+0x138>
   110f6:	bf00      	nop

000110f8 <__aeabi_f2d>:
   110f8:	0042      	lsls	r2, r0, #1
   110fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   110fe:	ea4f 0131 	mov.w	r1, r1, rrx
   11102:	ea4f 7002 	mov.w	r0, r2, lsl #28
   11106:	bf1f      	itttt	ne
   11108:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1110c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   11110:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   11114:	4770      	bxne	lr
   11116:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1111a:	bf08      	it	eq
   1111c:	4770      	bxeq	lr
   1111e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   11122:	bf04      	itt	eq
   11124:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   11128:	4770      	bxeq	lr
   1112a:	b530      	push	{r4, r5, lr}
   1112c:	f44f 7460 	mov.w	r4, #896	; 0x380
   11130:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   11134:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   11138:	e71c      	b.n	10f74 <__adddf3+0x138>
   1113a:	bf00      	nop

0001113c <__aeabi_ul2d>:
   1113c:	ea50 0201 	orrs.w	r2, r0, r1
   11140:	bf08      	it	eq
   11142:	4770      	bxeq	lr
   11144:	b530      	push	{r4, r5, lr}
   11146:	f04f 0500 	mov.w	r5, #0
   1114a:	e00a      	b.n	11162 <__aeabi_l2d+0x16>

0001114c <__aeabi_l2d>:
   1114c:	ea50 0201 	orrs.w	r2, r0, r1
   11150:	bf08      	it	eq
   11152:	4770      	bxeq	lr
   11154:	b530      	push	{r4, r5, lr}
   11156:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1115a:	d502      	bpl.n	11162 <__aeabi_l2d+0x16>
   1115c:	4240      	negs	r0, r0
   1115e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11162:	f44f 6480 	mov.w	r4, #1024	; 0x400
   11166:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1116a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1116e:	f43f aed8 	beq.w	10f22 <__adddf3+0xe6>
   11172:	f04f 0203 	mov.w	r2, #3
   11176:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1117a:	bf18      	it	ne
   1117c:	3203      	addne	r2, #3
   1117e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   11182:	bf18      	it	ne
   11184:	3203      	addne	r2, #3
   11186:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1118a:	f1c2 0320 	rsb	r3, r2, #32
   1118e:	fa00 fc03 	lsl.w	ip, r0, r3
   11192:	fa20 f002 	lsr.w	r0, r0, r2
   11196:	fa01 fe03 	lsl.w	lr, r1, r3
   1119a:	ea40 000e 	orr.w	r0, r0, lr
   1119e:	fa21 f102 	lsr.w	r1, r1, r2
   111a2:	4414      	add	r4, r2
   111a4:	e6bd      	b.n	10f22 <__adddf3+0xe6>
   111a6:	bf00      	nop

000111a8 <__aeabi_d2lz>:
   111a8:	b508      	push	{r3, lr}
   111aa:	4602      	mov	r2, r0
   111ac:	460b      	mov	r3, r1
   111ae:	ec43 2b17 	vmov	d7, r2, r3
   111b2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   111b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   111ba:	d403      	bmi.n	111c4 <__aeabi_d2lz+0x1c>
   111bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   111c0:	f000 b80a 	b.w	111d8 <__aeabi_d2ulz>
   111c4:	eeb1 7b47 	vneg.f64	d7, d7
   111c8:	ec51 0b17 	vmov	r0, r1, d7
   111cc:	f000 f804 	bl	111d8 <__aeabi_d2ulz>
   111d0:	4240      	negs	r0, r0
   111d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   111d6:	bd08      	pop	{r3, pc}

000111d8 <__aeabi_d2ulz>:
   111d8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 11208 <__aeabi_d2ulz+0x30>
   111dc:	ec41 0b17 	vmov	d7, r0, r1
   111e0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 11210 <__aeabi_d2ulz+0x38>
   111e4:	ee27 6b06 	vmul.f64	d6, d7, d6
   111e8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   111ec:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   111f0:	eea4 7b45 	vfms.f64	d7, d4, d5
   111f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   111f8:	ee16 1a10 	vmov	r1, s12
   111fc:	ee17 0a90 	vmov	r0, s15
   11200:	4770      	bx	lr
   11202:	bf00      	nop
   11204:	f3af 8000 	nop.w
   11208:	00000000 	.word	0x00000000
   1120c:	3df00000 	.word	0x3df00000
   11210:	00000000 	.word	0x00000000
   11214:	41f00000 	.word	0x41f00000

00011218 <___init_veneer>:
   11218:	f85f f000 	ldr.w	pc, [pc]	; 1121c <___init_veneer+0x4>
   1121c:	60001c29 	.word	0x60001c29

00011220 <___reboot_Teensyduino__veneer>:
   11220:	f85f f000 	ldr.w	pc, [pc]	; 11224 <___reboot_Teensyduino__veneer+0x4>
   11224:	60001bd5 	.word	0x60001bd5

00011228 <___ZN7TwoWire5beginEv_veneer>:
   11228:	f85f f000 	ldr.w	pc, [pc]	; 1122c <___ZN7TwoWire5beginEv_veneer+0x4>
   1122c:	60001785 	.word	0x60001785

Disassembly of section .fini:

00011230 <_fini>:
   11230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11232:	bf00      	nop
